{
  "version": 3,
  "sources": ["../../@smithy/types/dist-es/middleware.js", "../../@smithy/types/dist-es/auth/auth.js", "../../@smithy/types/dist-es/auth/HttpApiKeyAuth.js", "../../@smithy/types/dist-es/endpoint.js", "../../@smithy/types/dist-es/extensions/checksum.js", "../../@smithy/types/dist-es/http.js", "../../@smithy/types/dist-es/profile.js", "../../@smithy/types/dist-es/transfer.js", "../../@smithy/util-utf8/dist-es/fromUtf8.browser.js", "../../@smithy/util-utf8/dist-es/toUint8Array.js", "../../@smithy/util-utf8/dist-es/toUtf8.browser.js", "../../@smithy/core/dist-es/submodules/schema/schemas/sentinels.js", "../../@smithy/core/dist-es/submodules/schema/deref.js", "../../@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js", "../../@smithy/protocol-http/dist-es/httpRequest.js", "../../@smithy/protocol-http/dist-es/httpResponse.js", "../../@smithy/util-middleware/dist-es/getSmithyContext.js", "../../@smithy/util-middleware/dist-es/normalizeProvider.js", "../../@smithy/core/dist-es/submodules/schema/TypeRegistry.js", "../../@smithy/core/dist-es/submodules/schema/schemas/Schema.js", "../../@smithy/core/dist-es/submodules/schema/schemas/ListSchema.js", "../../@smithy/core/dist-es/submodules/schema/schemas/MapSchema.js", "../../@smithy/core/dist-es/submodules/schema/schemas/OperationSchema.js", "../../@smithy/core/dist-es/submodules/schema/schemas/StructureSchema.js", "../../@smithy/core/dist-es/submodules/schema/schemas/ErrorSchema.js", "../../@smithy/core/dist-es/submodules/schema/schemas/SimpleSchema.js", "../../@smithy/core/dist-es/submodules/schema/schemas/NormalizedSchema.js"],
  "sourcesContent": ["export const SMITHY_CONTEXT_KEY = \"__smithy_context\";\n", "export var HttpAuthLocation;\n(function (HttpAuthLocation) {\n    HttpAuthLocation[\"HEADER\"] = \"header\";\n    HttpAuthLocation[\"QUERY\"] = \"query\";\n})(HttpAuthLocation || (HttpAuthLocation = {}));\n", "export var HttpApiKeyAuthLocation;\n(function (HttpApiKeyAuthLocation) {\n    HttpApiKeyAuthLocation[\"HEADER\"] = \"header\";\n    HttpApiKeyAuthLocation[\"QUERY\"] = \"query\";\n})(HttpApiKeyAuthLocation || (HttpApiKeyAuthLocation = {}));\n", "export var EndpointURLScheme;\n(function (EndpointURLScheme) {\n    EndpointURLScheme[\"HTTP\"] = \"http\";\n    EndpointURLScheme[\"HTTPS\"] = \"https\";\n})(EndpointURLScheme || (EndpointURLScheme = {}));\n", "export var AlgorithmId;\n(function (AlgorithmId) {\n    AlgorithmId[\"MD5\"] = \"md5\";\n    AlgorithmId[\"CRC32\"] = \"crc32\";\n    AlgorithmId[\"CRC32C\"] = \"crc32c\";\n    AlgorithmId[\"SHA1\"] = \"sha1\";\n    AlgorithmId[\"SHA256\"] = \"sha256\";\n})(AlgorithmId || (AlgorithmId = {}));\nexport const getChecksumConfiguration = (runtimeConfig) => {\n    const checksumAlgorithms = [];\n    if (runtimeConfig.sha256 !== undefined) {\n        checksumAlgorithms.push({\n            algorithmId: () => AlgorithmId.SHA256,\n            checksumConstructor: () => runtimeConfig.sha256,\n        });\n    }\n    if (runtimeConfig.md5 != undefined) {\n        checksumAlgorithms.push({\n            algorithmId: () => AlgorithmId.MD5,\n            checksumConstructor: () => runtimeConfig.md5,\n        });\n    }\n    return {\n        addChecksumAlgorithm(algo) {\n            checksumAlgorithms.push(algo);\n        },\n        checksumAlgorithms() {\n            return checksumAlgorithms;\n        },\n    };\n};\nexport const resolveChecksumRuntimeConfig = (clientConfig) => {\n    const runtimeConfig = {};\n    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {\n        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();\n    });\n    return runtimeConfig;\n};\n", "export var FieldPosition;\n(function (FieldPosition) {\n    FieldPosition[FieldPosition[\"HEADER\"] = 0] = \"HEADER\";\n    FieldPosition[FieldPosition[\"TRAILER\"] = 1] = \"TRAILER\";\n})(FieldPosition || (FieldPosition = {}));\n", "export var IniSectionType;\n(function (IniSectionType) {\n    IniSectionType[\"PROFILE\"] = \"profile\";\n    IniSectionType[\"SSO_SESSION\"] = \"sso-session\";\n    IniSectionType[\"SERVICES\"] = \"services\";\n})(IniSectionType || (IniSectionType = {}));\n", "export var RequestHandlerProtocol;\n(function (RequestHandlerProtocol) {\n    RequestHandlerProtocol[\"HTTP_0_9\"] = \"http/0.9\";\n    RequestHandlerProtocol[\"HTTP_1_0\"] = \"http/1.0\";\n    RequestHandlerProtocol[\"TDS_8_0\"] = \"tds/8.0\";\n})(RequestHandlerProtocol || (RequestHandlerProtocol = {}));\n", "export const fromUtf8 = (input) => new TextEncoder().encode(input);\n", "import { fromUtf8 } from \"./fromUtf8\";\nexport const toUint8Array = (data) => {\n    if (typeof data === \"string\") {\n        return fromUtf8(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n};\n", "export const toUtf8 = (input) => {\n    if (typeof input === \"string\") {\n        return input;\n    }\n    if (typeof input !== \"object\" || typeof input.byteOffset !== \"number\" || typeof input.byteLength !== \"number\") {\n        throw new Error(\"@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.\");\n    }\n    return new TextDecoder(\"utf-8\").decode(input);\n};\n", "export const SCHEMA = {\n    BLOB: 0b0001_0101,\n    STREAMING_BLOB: 0b0010_1010,\n    BOOLEAN: 0b0000_0010,\n    STRING: 0b0000_0000,\n    NUMERIC: 0b0000_0001,\n    BIG_INTEGER: 0b0001_0001,\n    BIG_DECIMAL: 0b0001_0011,\n    DOCUMENT: 0b0000_1111,\n    TIMESTAMP_DEFAULT: 0b0000_0100,\n    TIMESTAMP_DATE_TIME: 0b0000_0101,\n    TIMESTAMP_HTTP_DATE: 0b0000_0110,\n    TIMESTAMP_EPOCH_SECONDS: 0b0000_0111,\n    LIST_MODIFIER: 0b0100_0000,\n    MAP_MODIFIER: 0b1000_0000,\n};\n", "export const deref = (schemaRef) => {\n    if (typeof schemaRef === \"function\") {\n        return schemaRef();\n    }\n    return schemaRef;\n};\n", "export const getHttpHandlerExtensionConfiguration = (runtimeConfig) => {\n    return {\n        setHttpHandler(handler) {\n            runtimeConfig.httpHandler = handler;\n        },\n        httpHandler() {\n            return runtimeConfig.httpHandler;\n        },\n        updateHttpClientConfig(key, value) {\n            runtimeConfig.httpHandler?.updateHttpClientConfig(key, value);\n        },\n        httpHandlerConfigs() {\n            return runtimeConfig.httpHandler.httpHandlerConfigs();\n        },\n    };\n};\nexport const resolveHttpHandlerRuntimeConfig = (httpHandlerExtensionConfiguration) => {\n    return {\n        httpHandler: httpHandlerExtensionConfiguration.httpHandler(),\n    };\n};\n", "export class HttpRequest {\n    method;\n    protocol;\n    hostname;\n    port;\n    path;\n    query;\n    headers;\n    username;\n    password;\n    fragment;\n    body;\n    constructor(options) {\n        this.method = options.method || \"GET\";\n        this.hostname = options.hostname || \"localhost\";\n        this.port = options.port;\n        this.query = options.query || {};\n        this.headers = options.headers || {};\n        this.body = options.body;\n        this.protocol = options.protocol\n            ? options.protocol.slice(-1) !== \":\"\n                ? `${options.protocol}:`\n                : options.protocol\n            : \"https:\";\n        this.path = options.path ? (options.path.charAt(0) !== \"/\" ? `/${options.path}` : options.path) : \"/\";\n        this.username = options.username;\n        this.password = options.password;\n        this.fragment = options.fragment;\n    }\n    static clone(request) {\n        const cloned = new HttpRequest({\n            ...request,\n            headers: { ...request.headers },\n        });\n        if (cloned.query) {\n            cloned.query = cloneQuery(cloned.query);\n        }\n        return cloned;\n    }\n    static isInstance(request) {\n        if (!request) {\n            return false;\n        }\n        const req = request;\n        return (\"method\" in req &&\n            \"protocol\" in req &&\n            \"hostname\" in req &&\n            \"path\" in req &&\n            typeof req[\"query\"] === \"object\" &&\n            typeof req[\"headers\"] === \"object\");\n    }\n    clone() {\n        return HttpRequest.clone(this);\n    }\n}\nfunction cloneQuery(query) {\n    return Object.keys(query).reduce((carry, paramName) => {\n        const param = query[paramName];\n        return {\n            ...carry,\n            [paramName]: Array.isArray(param) ? [...param] : param,\n        };\n    }, {});\n}\n", "export class HttpResponse {\n    statusCode;\n    reason;\n    headers;\n    body;\n    constructor(options) {\n        this.statusCode = options.statusCode;\n        this.reason = options.reason;\n        this.headers = options.headers || {};\n        this.body = options.body;\n    }\n    static isInstance(response) {\n        if (!response)\n            return false;\n        const resp = response;\n        return typeof resp.statusCode === \"number\" && typeof resp.headers === \"object\";\n    }\n}\n", "import { SMITHY_CONTEXT_KEY } from \"@smithy/types\";\nexport const getSmithyContext = (context) => context[SMITHY_CONTEXT_KEY] || (context[SMITHY_CONTEXT_KEY] = {});\n", "export const normalizeProvider = (input) => {\n    if (typeof input === \"function\")\n        return input;\n    const promisified = Promise.resolve(input);\n    return () => promisified;\n};\n", "export class TypeRegistry {\n    namespace;\n    schemas;\n    exceptions;\n    static registries = new Map();\n    constructor(namespace, schemas = new Map(), exceptions = new Map()) {\n        this.namespace = namespace;\n        this.schemas = schemas;\n        this.exceptions = exceptions;\n    }\n    static for(namespace) {\n        if (!TypeRegistry.registries.has(namespace)) {\n            TypeRegistry.registries.set(namespace, new TypeRegistry(namespace));\n        }\n        return TypeRegistry.registries.get(namespace);\n    }\n    register(shapeId, schema) {\n        const qualifiedName = this.normalizeShapeId(shapeId);\n        this.schemas.set(qualifiedName, schema);\n    }\n    getSchema(shapeId) {\n        const id = this.normalizeShapeId(shapeId);\n        if (!this.schemas.has(id)) {\n            throw new Error(`@smithy/core/schema - schema not found for ${id}`);\n        }\n        return this.schemas.get(id);\n    }\n    registerError(errorSchema, ctor) {\n        this.exceptions.set(errorSchema, ctor);\n    }\n    getErrorCtor(errorSchema) {\n        return this.exceptions.get(errorSchema);\n    }\n    getBaseException() {\n        for (const [id, schema] of this.schemas.entries()) {\n            if (id.startsWith(\"smithy.ts.sdk.synthetic.\") && id.endsWith(\"ServiceException\")) {\n                return schema;\n            }\n        }\n        return undefined;\n    }\n    find(predicate) {\n        return [...this.schemas.values()].find(predicate);\n    }\n    clear() {\n        this.schemas.clear();\n        this.exceptions.clear();\n    }\n    normalizeShapeId(shapeId) {\n        if (shapeId.includes(\"#\")) {\n            return shapeId;\n        }\n        return this.namespace + \"#\" + shapeId;\n    }\n    getNamespace(shapeId) {\n        return this.normalizeShapeId(shapeId).split(\"#\")[0];\n    }\n}\n", "import { TypeRegistry } from \"../TypeRegistry\";\nexport class Schema {\n    name;\n    namespace;\n    traits;\n    static assign(instance, values) {\n        const schema = Object.assign(instance, values);\n        TypeRegistry.for(schema.namespace).register(schema.name, schema);\n        return schema;\n    }\n    static [Symbol.hasInstance](lhs) {\n        const isPrototype = this.prototype.isPrototypeOf(lhs);\n        if (!isPrototype && typeof lhs === \"object\" && lhs !== null) {\n            const list = lhs;\n            return list.symbol === this.symbol;\n        }\n        return isPrototype;\n    }\n    getName() {\n        return this.namespace + \"#\" + this.name;\n    }\n}\n", "import { Schema } from \"./Schema\";\nexport class ListSchema extends Schema {\n    static symbol = Symbol.for(\"@smithy/lis\");\n    name;\n    traits;\n    valueSchema;\n    symbol = ListSchema.symbol;\n}\nexport const list = (namespace, name, traits, valueSchema) => Schema.assign(new ListSchema(), {\n    name,\n    namespace,\n    traits,\n    valueSchema,\n});\n", "import { Schema } from \"./Schema\";\nexport class MapSchema extends Schema {\n    static symbol = Symbol.for(\"@smithy/map\");\n    name;\n    traits;\n    keySchema;\n    valueSchema;\n    symbol = MapSchema.symbol;\n}\nexport const map = (namespace, name, traits, keySchema, valueSchema) => Schema.assign(new MapSchema(), {\n    name,\n    namespace,\n    traits,\n    keySchema,\n    valueSchema,\n});\n", "import { Schema } from \"./Schema\";\nexport class OperationSchema extends Schema {\n    static symbol = Symbol.for(\"@smithy/ope\");\n    name;\n    traits;\n    input;\n    output;\n    symbol = OperationSchema.symbol;\n}\nexport const op = (namespace, name, traits, input, output) => Schema.assign(new OperationSchema(), {\n    name,\n    namespace,\n    traits,\n    input,\n    output,\n});\n", "import { Schema } from \"./Schema\";\nexport class StructureSchema extends Schema {\n    static symbol = Symbol.for(\"@smithy/str\");\n    name;\n    traits;\n    memberNames;\n    memberList;\n    symbol = StructureSchema.symbol;\n}\nexport const struct = (namespace, name, traits, memberNames, memberList) => Schema.assign(new StructureSchema(), {\n    name,\n    namespace,\n    traits,\n    memberNames,\n    memberList,\n});\n", "import { Schema } from \"./Schema\";\nimport { StructureSchema } from \"./StructureSchema\";\nexport class ErrorSchema extends StructureSchema {\n    static symbol = Symbol.for(\"@smithy/err\");\n    ctor;\n    symbol = ErrorSchema.symbol;\n}\nexport const error = (namespace, name, traits, memberNames, memberList, ctor) => Schema.assign(new ErrorSchema(), {\n    name,\n    namespace,\n    traits,\n    memberNames,\n    memberList,\n    ctor: null,\n});\n", "import { Schema } from \"./Schema\";\nexport class SimpleSchema extends Schema {\n    static symbol = Symbol.for(\"@smithy/sim\");\n    name;\n    schemaRef;\n    traits;\n    symbol = SimpleSchema.symbol;\n}\nexport const sim = (namespace, name, schemaRef, traits) => Schema.assign(new SimpleSchema(), {\n    name,\n    namespace,\n    traits,\n    schemaRef,\n});\n", "import { deref } from \"../deref\";\nimport { ListSchema } from \"./ListSchema\";\nimport { MapSchema } from \"./MapSchema\";\nimport { Schema } from \"./Schema\";\nimport { SCHEMA } from \"./sentinels\";\nimport { SimpleSchema } from \"./SimpleSchema\";\nimport { StructureSchema } from \"./StructureSchema\";\nexport class NormalizedSchema {\n    ref;\n    memberName;\n    static symbol = Symbol.for(\"@smithy/nor\");\n    symbol = NormalizedSchema.symbol;\n    name;\n    schema;\n    _isMemberSchema;\n    traits;\n    memberTraits;\n    normalizedTraits;\n    constructor(ref, memberName) {\n        this.ref = ref;\n        this.memberName = memberName;\n        const traitStack = [];\n        let _ref = ref;\n        let schema = ref;\n        this._isMemberSchema = false;\n        while (Array.isArray(_ref)) {\n            traitStack.push(_ref[1]);\n            _ref = _ref[0];\n            schema = deref(_ref);\n            this._isMemberSchema = true;\n        }\n        if (traitStack.length > 0) {\n            this.memberTraits = {};\n            for (let i = traitStack.length - 1; i >= 0; --i) {\n                const traitSet = traitStack[i];\n                Object.assign(this.memberTraits, NormalizedSchema.translateTraits(traitSet));\n            }\n        }\n        else {\n            this.memberTraits = 0;\n        }\n        if (schema instanceof NormalizedSchema) {\n            const computedMemberTraits = this.memberTraits;\n            Object.assign(this, schema);\n            this.memberTraits = Object.assign({}, computedMemberTraits, schema.getMemberTraits(), this.getMemberTraits());\n            this.normalizedTraits = void 0;\n            this.memberName = memberName ?? schema.memberName;\n            return;\n        }\n        this.schema = deref(schema);\n        if (this.schema && typeof this.schema === \"object\") {\n            this.traits = this.schema?.traits ?? {};\n        }\n        else {\n            this.traits = 0;\n        }\n        this.name =\n            (this.schema instanceof Schema ? this.schema.getName?.() : void 0) ?? this.memberName ?? this.getSchemaName();\n        if (this._isMemberSchema && !memberName) {\n            throw new Error(`@smithy/core/schema - NormalizedSchema member init ${this.getName(true)} missing member name.`);\n        }\n    }\n    static [Symbol.hasInstance](lhs) {\n        return Schema[Symbol.hasInstance].bind(this)(lhs);\n    }\n    static of(ref) {\n        if (ref instanceof NormalizedSchema) {\n            return ref;\n        }\n        if (Array.isArray(ref)) {\n            const [ns, traits] = ref;\n            if (ns instanceof NormalizedSchema) {\n                Object.assign(ns.getMergedTraits(), NormalizedSchema.translateTraits(traits));\n                return ns;\n            }\n            throw new Error(`@smithy/core/schema - may not init unwrapped member schema=${JSON.stringify(ref, null, 2)}.`);\n        }\n        return new NormalizedSchema(ref);\n    }\n    static translateTraits(indicator) {\n        if (typeof indicator === \"object\") {\n            return indicator;\n        }\n        indicator = indicator | 0;\n        const traits = {};\n        let i = 0;\n        for (const trait of [\n            \"httpLabel\",\n            \"idempotent\",\n            \"idempotencyToken\",\n            \"sensitive\",\n            \"httpPayload\",\n            \"httpResponseCode\",\n            \"httpQueryParams\",\n        ]) {\n            if (((indicator >> i++) & 1) === 1) {\n                traits[trait] = 1;\n            }\n        }\n        return traits;\n    }\n    getSchema() {\n        if (this.schema instanceof NormalizedSchema) {\n            Object.assign(this, { schema: this.schema.getSchema() });\n            return this.schema;\n        }\n        if (this.schema instanceof SimpleSchema) {\n            return deref(this.schema.schemaRef);\n        }\n        return deref(this.schema);\n    }\n    getName(withNamespace = false) {\n        if (!withNamespace) {\n            if (this.name && this.name.includes(\"#\")) {\n                return this.name.split(\"#\")[1];\n            }\n        }\n        return this.name || undefined;\n    }\n    getMemberName() {\n        if (!this.isMemberSchema()) {\n            throw new Error(`@smithy/core/schema - non-member schema: ${this.getName(true)}`);\n        }\n        return this.memberName;\n    }\n    isMemberSchema() {\n        return this._isMemberSchema;\n    }\n    isUnitSchema() {\n        return this.getSchema() === \"unit\";\n    }\n    isListSchema() {\n        const inner = this.getSchema();\n        if (typeof inner === \"number\") {\n            return inner >= SCHEMA.LIST_MODIFIER && inner < SCHEMA.MAP_MODIFIER;\n        }\n        return inner instanceof ListSchema;\n    }\n    isMapSchema() {\n        const inner = this.getSchema();\n        if (typeof inner === \"number\") {\n            return inner >= SCHEMA.MAP_MODIFIER && inner <= 0b1111_1111;\n        }\n        return inner instanceof MapSchema;\n    }\n    isStructSchema() {\n        const inner = this.getSchema();\n        return (inner !== null && typeof inner === \"object\" && \"members\" in inner) || inner instanceof StructureSchema;\n    }\n    isBlobSchema() {\n        return this.getSchema() === SCHEMA.BLOB || this.getSchema() === SCHEMA.STREAMING_BLOB;\n    }\n    isTimestampSchema() {\n        const schema = this.getSchema();\n        return typeof schema === \"number\" && schema >= SCHEMA.TIMESTAMP_DEFAULT && schema <= SCHEMA.TIMESTAMP_EPOCH_SECONDS;\n    }\n    isDocumentSchema() {\n        return this.getSchema() === SCHEMA.DOCUMENT;\n    }\n    isStringSchema() {\n        return this.getSchema() === SCHEMA.STRING;\n    }\n    isBooleanSchema() {\n        return this.getSchema() === SCHEMA.BOOLEAN;\n    }\n    isNumericSchema() {\n        return this.getSchema() === SCHEMA.NUMERIC;\n    }\n    isBigIntegerSchema() {\n        return this.getSchema() === SCHEMA.BIG_INTEGER;\n    }\n    isBigDecimalSchema() {\n        return this.getSchema() === SCHEMA.BIG_DECIMAL;\n    }\n    isStreaming() {\n        const streaming = !!this.getMergedTraits().streaming;\n        if (streaming) {\n            return true;\n        }\n        return this.getSchema() === SCHEMA.STREAMING_BLOB;\n    }\n    isIdempotencyToken() {\n        if (this.normalizedTraits) {\n            return !!this.normalizedTraits.idempotencyToken;\n        }\n        for (const traits of [this.traits, this.memberTraits]) {\n            if (typeof traits === \"number\") {\n                if ((traits & 0b0100) === 0b0100) {\n                    return true;\n                }\n            }\n            else if (typeof traits === \"object\") {\n                if (!!traits.idempotencyToken) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    getMergedTraits() {\n        return (this.normalizedTraits ??\n            (this.normalizedTraits = {\n                ...this.getOwnTraits(),\n                ...this.getMemberTraits(),\n            }));\n    }\n    getMemberTraits() {\n        return NormalizedSchema.translateTraits(this.memberTraits);\n    }\n    getOwnTraits() {\n        return NormalizedSchema.translateTraits(this.traits);\n    }\n    getKeySchema() {\n        if (this.isDocumentSchema()) {\n            return this.memberFrom([SCHEMA.DOCUMENT, 0], \"key\");\n        }\n        if (!this.isMapSchema()) {\n            throw new Error(`@smithy/core/schema - cannot get key for non-map: ${this.getName(true)}`);\n        }\n        const schema = this.getSchema();\n        if (typeof schema === \"number\") {\n            return this.memberFrom([0b0011_1111 & schema, 0], \"key\");\n        }\n        return this.memberFrom([schema.keySchema, 0], \"key\");\n    }\n    getValueSchema() {\n        const schema = this.getSchema();\n        if (typeof schema === \"number\") {\n            if (this.isMapSchema()) {\n                return this.memberFrom([0b0011_1111 & schema, 0], \"value\");\n            }\n            else if (this.isListSchema()) {\n                return this.memberFrom([0b0011_1111 & schema, 0], \"member\");\n            }\n        }\n        if (schema && typeof schema === \"object\") {\n            if (this.isStructSchema()) {\n                throw new Error(`may not getValueSchema() on structure ${this.getName(true)}`);\n            }\n            const collection = schema;\n            if (\"valueSchema\" in collection) {\n                if (this.isMapSchema()) {\n                    return this.memberFrom([collection.valueSchema, 0], \"value\");\n                }\n                else if (this.isListSchema()) {\n                    return this.memberFrom([collection.valueSchema, 0], \"member\");\n                }\n            }\n        }\n        if (this.isDocumentSchema()) {\n            return this.memberFrom([SCHEMA.DOCUMENT, 0], \"value\");\n        }\n        throw new Error(`@smithy/core/schema - ${this.getName(true)} has no value member.`);\n    }\n    hasMemberSchema(member) {\n        if (this.isStructSchema()) {\n            const struct = this.getSchema();\n            return struct.memberNames.includes(member);\n        }\n        return false;\n    }\n    getMemberSchema(member) {\n        if (this.isStructSchema()) {\n            const struct = this.getSchema();\n            if (!struct.memberNames.includes(member)) {\n                throw new Error(`@smithy/core/schema - ${this.getName(true)} has no member=${member}.`);\n            }\n            const i = struct.memberNames.indexOf(member);\n            const memberSchema = struct.memberList[i];\n            return this.memberFrom(Array.isArray(memberSchema) ? memberSchema : [memberSchema, 0], member);\n        }\n        if (this.isDocumentSchema()) {\n            return this.memberFrom([SCHEMA.DOCUMENT, 0], member);\n        }\n        throw new Error(`@smithy/core/schema - ${this.getName(true)} has no members.`);\n    }\n    getMemberSchemas() {\n        const buffer = {};\n        try {\n            for (const [k, v] of this.structIterator()) {\n                buffer[k] = v;\n            }\n        }\n        catch (ignored) { }\n        return buffer;\n    }\n    getEventStreamMember() {\n        if (this.isStructSchema()) {\n            for (const [memberName, memberSchema] of this.structIterator()) {\n                if (memberSchema.isStreaming() && memberSchema.isStructSchema()) {\n                    return memberName;\n                }\n            }\n        }\n        return \"\";\n    }\n    *structIterator() {\n        if (this.isUnitSchema()) {\n            return;\n        }\n        if (!this.isStructSchema()) {\n            throw new Error(\"@smithy/core/schema - cannot iterate non-struct schema.\");\n        }\n        const struct = this.getSchema();\n        for (let i = 0; i < struct.memberNames.length; ++i) {\n            yield [struct.memberNames[i], this.memberFrom([struct.memberList[i], 0], struct.memberNames[i])];\n        }\n    }\n    memberFrom(memberSchema, memberName) {\n        if (memberSchema instanceof NormalizedSchema) {\n            return Object.assign(memberSchema, {\n                memberName,\n                _isMemberSchema: true,\n            });\n        }\n        return new NormalizedSchema(memberSchema, memberName);\n    }\n    getSchemaName() {\n        const schema = this.getSchema();\n        if (typeof schema === \"number\") {\n            const _schema = 0b0011_1111 & schema;\n            const container = 0b1100_0000 & schema;\n            const type = Object.entries(SCHEMA).find(([, value]) => {\n                return value === _schema;\n            })?.[0] ?? \"Unknown\";\n            switch (container) {\n                case SCHEMA.MAP_MODIFIER:\n                    return `${type}Map`;\n                case SCHEMA.LIST_MODIFIER:\n                    return `${type}List`;\n                case 0:\n                    return type;\n            }\n        }\n        return \"Unknown\";\n    }\n}\n"],
  "mappings": "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",
  "names": ["HttpAuthLocation", "HttpApiKeyAuthLocation", "EndpointURLScheme", "AlgorithmId", "FieldPosition", "IniSectionType", "RequestHandlerProtocol"]
}
