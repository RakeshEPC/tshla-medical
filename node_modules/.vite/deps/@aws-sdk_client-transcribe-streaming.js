import {
  Client,
  Command,
  DEFAULT_MAX_ATTEMPTS,
  DEFAULT_RETRY_MODE,
  DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT,
  DefaultIdentityProviderConfig,
  EndpointCache,
  FetchHttpHandler,
  NoOpLogger,
  SENSITIVE_STRING,
  ServiceException,
  Sha256,
  SignatureV4,
  WebSocketFetchHandler,
  _json,
  bowser_default,
  calculateBodyLength,
  collectBody,
  createAggregatedClient,
  customEndpointFunctions,
  decorateServiceException,
  doesIdentityRequireRefresh,
  eventStreamSerdeProvider,
  expectBoolean,
  expectInt32,
  expectLong,
  expectNonNull,
  expectNumber,
  expectObject,
  expectString,
  fromBase64,
  getContentLengthPlugin,
  getDefaultExtensionConfiguration,
  getEndpointPlugin,
  getEventStreamPlugin,
  getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpSigningPlugin,
  getRetryPlugin,
  getSerdePlugin,
  getWebSocketPlugin,
  invalidProvider,
  isIdentityExpired,
  isIpAddress,
  isSerializableHeaderValue,
  isValidHostLabel,
  limitedParseDouble,
  loadConfigsForDefaultMode,
  map,
  memoizeIdentityProvider,
  normalizeProvider as normalizeProvider2,
  parseBoolean,
  parseEpochTimestamp,
  parseUrl,
  requestBuilder,
  resolveDefaultRuntimeConfig,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveEventStreamConfig,
  resolveEventStreamSerdeConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  resolveWebSocketConfig,
  streamCollector,
  strictParseInt32,
  take,
  toBase64,
  v4,
  withBaseException
} from "./chunk-44FJFDGY.js";
import {
  HttpRequest,
  HttpResponse,
  fromUtf8,
  getHttpHandlerExtensionConfiguration,
  getSmithyContext,
  normalizeProvider,
  resolveHttpHandlerRuntimeConfig,
  toUtf8
} from "./chunk-67QOBIWR.js";
import "./chunk-PLDDJCW6.js";

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js
function resolveHostHeaderConfig(input) {
  return input;
}
var hostHeaderMiddleware = (options) => (next) => async (args) => {
  if (!HttpRequest.isInstance(args.request))
    return next(args);
  const { request } = args;
  const { handlerProtocol = "" } = options.requestHandler.metadata || {};
  if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
    delete request.headers["host"];
    request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
  } else if (!request.headers["host"]) {
    let host = request.hostname;
    if (request.port != null)
      host += `:${request.port}`;
    request.headers["host"] = host;
  }
  return next(args);
};
var hostHeaderMiddlewareOptions = {
  name: "hostHeaderMiddleware",
  step: "build",
  priority: "low",
  tags: ["HOST"],
  override: true
};
var getHostHeaderPlugin = (options) => ({
  applyToStack: (clientStack) => {
    clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js
var loggerMiddleware = () => (next, context) => async (args) => {
  try {
    const response = await next(args);
    const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
    const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
    const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
    const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
    const { $metadata, ...outputWithoutMetadata } = response.output;
    logger?.info?.({
      clientName,
      commandName,
      input: inputFilterSensitiveLog(args.input),
      output: outputFilterSensitiveLog(outputWithoutMetadata),
      metadata: $metadata
    });
    return response;
  } catch (error) {
    const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
    const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
    const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
    logger?.error?.({
      clientName,
      commandName,
      input: inputFilterSensitiveLog(args.input),
      error,
      metadata: error.$metadata
    });
    throw error;
  }
};
var loggerMiddlewareOptions = {
  name: "loggerMiddleware",
  tags: ["LOGGER"],
  step: "initialize",
  override: true
};
var getLoggerPlugin = (options) => ({
  applyToStack: (clientStack) => {
    clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/configuration.js
var recursionDetectionMiddlewareOptions = {
  step: "build",
  tags: ["RECURSION_DETECTION"],
  name: "recursionDetectionMiddleware",
  override: true,
  priority: "low"
};

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/recursionDetectionMiddleware.browser.js
var recursionDetectionMiddleware = () => (next) => async (args) => next(args);

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/getRecursionDetectionPlugin.js
var getRecursionDetectionPlugin = (options) => ({
  applyToStack: (clientStack) => {
    clientStack.add(recursionDetectionMiddleware(), recursionDetectionMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js
var DEFAULT_UA_APP_ID = void 0;
function isValidUserAgentAppId(appId) {
  if (appId === void 0) {
    return true;
  }
  return typeof appId === "string" && appId.length <= 50;
}
function resolveUserAgentConfig(input) {
  const normalizedAppIdProvider = normalizeProvider2(input.userAgentAppId ?? DEFAULT_UA_APP_ID);
  const { customUserAgent } = input;
  return Object.assign(input, {
    customUserAgent: typeof customUserAgent === "string" ? [[customUserAgent]] : customUserAgent,
    userAgentAppId: async () => {
      const appId = await normalizedAppIdProvider();
      if (!isValidUserAgentAppId(appId)) {
        const logger = input.logger?.constructor?.name === "NoOpLogger" || !input.logger ? console : input.logger;
        if (typeof appId !== "string") {
          logger?.warn("userAgentAppId must be a string or undefined.");
        } else if (appId.length > 50) {
          logger?.warn("The provided userAgentAppId exceeds the maximum length of 50 characters.");
        }
      }
      return appId;
    }
  });
}

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js
var isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
  if (allowSubDomains) {
    for (const label of value.split(".")) {
      if (!isVirtualHostableS3Bucket(label)) {
        return false;
      }
    }
    return true;
  }
  if (!isValidHostLabel(value)) {
    return false;
  }
  if (value.length < 3 || value.length > 63) {
    return false;
  }
  if (value !== value.toLowerCase()) {
    return false;
  }
  if (isIpAddress(value)) {
    return false;
  }
  return true;
};

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js
var ARN_DELIMITER = ":";
var RESOURCE_DELIMITER = "/";
var parseArn = (value) => {
  const segments = value.split(ARN_DELIMITER);
  if (segments.length < 6)
    return null;
  const [arn, partition2, service, region, accountId, ...resourcePath] = segments;
  if (arn !== "arn" || partition2 === "" || service === "" || resourcePath.join(ARN_DELIMITER) === "")
    return null;
  const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER)).flat();
  return {
    partition: partition2,
    service,
    region,
    accountId,
    resourceId
  };
};

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json
var partitions_default = {
  partitions: [{
    id: "aws",
    outputs: {
      dnsSuffix: "amazonaws.com",
      dualStackDnsSuffix: "api.aws",
      implicitGlobalRegion: "us-east-1",
      name: "aws",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$",
    regions: {
      "af-south-1": {
        description: "Africa (Cape Town)"
      },
      "ap-east-1": {
        description: "Asia Pacific (Hong Kong)"
      },
      "ap-east-2": {
        description: "Asia Pacific (Taipei)"
      },
      "ap-northeast-1": {
        description: "Asia Pacific (Tokyo)"
      },
      "ap-northeast-2": {
        description: "Asia Pacific (Seoul)"
      },
      "ap-northeast-3": {
        description: "Asia Pacific (Osaka)"
      },
      "ap-south-1": {
        description: "Asia Pacific (Mumbai)"
      },
      "ap-south-2": {
        description: "Asia Pacific (Hyderabad)"
      },
      "ap-southeast-1": {
        description: "Asia Pacific (Singapore)"
      },
      "ap-southeast-2": {
        description: "Asia Pacific (Sydney)"
      },
      "ap-southeast-3": {
        description: "Asia Pacific (Jakarta)"
      },
      "ap-southeast-4": {
        description: "Asia Pacific (Melbourne)"
      },
      "ap-southeast-5": {
        description: "Asia Pacific (Malaysia)"
      },
      "ap-southeast-6": {
        description: "Asia Pacific (New Zealand)"
      },
      "ap-southeast-7": {
        description: "Asia Pacific (Thailand)"
      },
      "aws-global": {
        description: "aws global region"
      },
      "ca-central-1": {
        description: "Canada (Central)"
      },
      "ca-west-1": {
        description: "Canada West (Calgary)"
      },
      "eu-central-1": {
        description: "Europe (Frankfurt)"
      },
      "eu-central-2": {
        description: "Europe (Zurich)"
      },
      "eu-north-1": {
        description: "Europe (Stockholm)"
      },
      "eu-south-1": {
        description: "Europe (Milan)"
      },
      "eu-south-2": {
        description: "Europe (Spain)"
      },
      "eu-west-1": {
        description: "Europe (Ireland)"
      },
      "eu-west-2": {
        description: "Europe (London)"
      },
      "eu-west-3": {
        description: "Europe (Paris)"
      },
      "il-central-1": {
        description: "Israel (Tel Aviv)"
      },
      "me-central-1": {
        description: "Middle East (UAE)"
      },
      "me-south-1": {
        description: "Middle East (Bahrain)"
      },
      "mx-central-1": {
        description: "Mexico (Central)"
      },
      "sa-east-1": {
        description: "South America (Sao Paulo)"
      },
      "us-east-1": {
        description: "US East (N. Virginia)"
      },
      "us-east-2": {
        description: "US East (Ohio)"
      },
      "us-west-1": {
        description: "US West (N. California)"
      },
      "us-west-2": {
        description: "US West (Oregon)"
      }
    }
  }, {
    id: "aws-cn",
    outputs: {
      dnsSuffix: "amazonaws.com.cn",
      dualStackDnsSuffix: "api.amazonwebservices.com.cn",
      implicitGlobalRegion: "cn-northwest-1",
      name: "aws-cn",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^cn\\-\\w+\\-\\d+$",
    regions: {
      "aws-cn-global": {
        description: "aws-cn global region"
      },
      "cn-north-1": {
        description: "China (Beijing)"
      },
      "cn-northwest-1": {
        description: "China (Ningxia)"
      }
    }
  }, {
    id: "aws-eusc",
    outputs: {
      dnsSuffix: "amazonaws.eu",
      dualStackDnsSuffix: "api.amazonwebservices.eu",
      implicitGlobalRegion: "eusc-de-east-1",
      name: "aws-eusc",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^eusc\\-(de)\\-\\w+\\-\\d+$",
    regions: {
      "eusc-de-east-1": {
        description: "EU (Germany)"
      }
    }
  }, {
    id: "aws-iso",
    outputs: {
      dnsSuffix: "c2s.ic.gov",
      dualStackDnsSuffix: "api.aws.ic.gov",
      implicitGlobalRegion: "us-iso-east-1",
      name: "aws-iso",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
    regions: {
      "aws-iso-global": {
        description: "aws-iso global region"
      },
      "us-iso-east-1": {
        description: "US ISO East"
      },
      "us-iso-west-1": {
        description: "US ISO WEST"
      }
    }
  }, {
    id: "aws-iso-b",
    outputs: {
      dnsSuffix: "sc2s.sgov.gov",
      dualStackDnsSuffix: "api.aws.scloud",
      implicitGlobalRegion: "us-isob-east-1",
      name: "aws-iso-b",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
    regions: {
      "aws-iso-b-global": {
        description: "aws-iso-b global region"
      },
      "us-isob-east-1": {
        description: "US ISOB East (Ohio)"
      }
    }
  }, {
    id: "aws-iso-e",
    outputs: {
      dnsSuffix: "cloud.adc-e.uk",
      dualStackDnsSuffix: "api.cloud-aws.adc-e.uk",
      implicitGlobalRegion: "eu-isoe-west-1",
      name: "aws-iso-e",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
    regions: {
      "aws-iso-e-global": {
        description: "aws-iso-e global region"
      },
      "eu-isoe-west-1": {
        description: "EU ISOE West"
      }
    }
  }, {
    id: "aws-iso-f",
    outputs: {
      dnsSuffix: "csp.hci.ic.gov",
      dualStackDnsSuffix: "api.aws.hci.ic.gov",
      implicitGlobalRegion: "us-isof-south-1",
      name: "aws-iso-f",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
    regions: {
      "aws-iso-f-global": {
        description: "aws-iso-f global region"
      },
      "us-isof-east-1": {
        description: "US ISOF EAST"
      },
      "us-isof-south-1": {
        description: "US ISOF SOUTH"
      }
    }
  }, {
    id: "aws-us-gov",
    outputs: {
      dnsSuffix: "amazonaws.com",
      dualStackDnsSuffix: "api.aws",
      implicitGlobalRegion: "us-gov-west-1",
      name: "aws-us-gov",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
    regions: {
      "aws-us-gov-global": {
        description: "aws-us-gov global region"
      },
      "us-gov-east-1": {
        description: "AWS GovCloud (US-East)"
      },
      "us-gov-west-1": {
        description: "AWS GovCloud (US-West)"
      }
    }
  }],
  version: "1.1"
};

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js
var selectedPartitionsInfo = partitions_default;
var selectedUserAgentPrefix = "";
var partition = (value) => {
  const { partitions } = selectedPartitionsInfo;
  for (const partition2 of partitions) {
    const { regions, outputs } = partition2;
    for (const [region, regionData] of Object.entries(regions)) {
      if (region === value) {
        return {
          ...outputs,
          ...regionData
        };
      }
    }
  }
  for (const partition2 of partitions) {
    const { regionRegex, outputs } = partition2;
    if (new RegExp(regionRegex).test(value)) {
      return {
        ...outputs
      };
    }
  }
  const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
  if (!DEFAULT_PARTITION) {
    throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
  }
  return {
    ...DEFAULT_PARTITION.outputs
  };
};
var getUserAgentPrefix = () => selectedUserAgentPrefix;

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/util-endpoints/dist-es/aws.js
var awsEndpointFunctions = {
  isVirtualHostableS3Bucket,
  parseArn,
  partition
};
customEndpointFunctions.aws = awsEndpointFunctions;

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js
function setCredentialFeature(credentials, feature, value) {
  if (!credentials.$source) {
    credentials.$source = {};
  }
  credentials.$source[feature] = value;
  return credentials;
}

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js
function setFeature(context, feature, value) {
  if (!context.__aws_sdk_context) {
    context.__aws_sdk_context = {
      features: {}
    };
  } else if (!context.__aws_sdk_context.features) {
    context.__aws_sdk_context.features = {};
  }
  context.__aws_sdk_context.features[feature] = value;
}

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js
var getDateHeader = (response) => HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : void 0;

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js
var isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5;

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
  const clockTimeInMs = Date.parse(clockTime);
  if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
    return clockTimeInMs - Date.now();
  }
  return currentSystemClockOffset;
};

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js
var throwSigningPropertyError = (name, property) => {
  if (!property) {
    throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
  }
  return property;
};
var validateSigningProperties = async (signingProperties) => {
  const context = throwSigningPropertyError("context", signingProperties.context);
  const config = throwSigningPropertyError("config", signingProperties.config);
  const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
  const signerFunction = throwSigningPropertyError("signer", config.signer);
  const signer = await signerFunction(authScheme);
  const signingRegion = signingProperties?.signingRegion;
  const signingRegionSet = signingProperties?.signingRegionSet;
  const signingName = signingProperties?.signingName;
  return {
    config,
    signer,
    signingRegion,
    signingRegionSet,
    signingName
  };
};
var AwsSdkSigV4Signer = class {
  async sign(httpRequest, identity, signingProperties) {
    if (!HttpRequest.isInstance(httpRequest)) {
      throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
    }
    const validatedProps = await validateSigningProperties(signingProperties);
    const { config, signer } = validatedProps;
    let { signingRegion, signingName } = validatedProps;
    const handlerExecutionContext = signingProperties.context;
    if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {
      const [first, second] = handlerExecutionContext.authSchemes;
      if (first?.name === "sigv4a" && second?.name === "sigv4") {
        signingRegion = second?.signingRegion ?? signingRegion;
        signingName = second?.signingName ?? signingName;
      }
    }
    const signedRequest = await signer.sign(httpRequest, {
      signingDate: getSkewCorrectedDate(config.systemClockOffset),
      signingRegion,
      signingService: signingName
    });
    return signedRequest;
  }
  errorHandler(signingProperties) {
    return (error) => {
      const serverTime = error.ServerTime ?? getDateHeader(error.$response);
      if (serverTime) {
        const config = throwSigningPropertyError("config", signingProperties.config);
        const initialSystemClockOffset = config.systemClockOffset;
        config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);
        const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;
        if (clockSkewCorrected && error.$metadata) {
          error.$metadata.clockSkewCorrected = true;
        }
      }
      throw error;
    };
  }
  successHandler(httpResponse, signingProperties) {
    const dateHeader = getDateHeader(httpResponse);
    if (dateHeader) {
      const config = throwSigningPropertyError("config", signingProperties.config);
      config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);
    }
  }
};

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js
var resolveAwsSdkSigV4Config = (config) => {
  let inputCredentials = config.credentials;
  let isUserSupplied = !!config.credentials;
  let resolvedCredentials = void 0;
  Object.defineProperty(config, "credentials", {
    set(credentials) {
      if (credentials && credentials !== inputCredentials && credentials !== resolvedCredentials) {
        isUserSupplied = true;
      }
      inputCredentials = credentials;
      const memoizedProvider = normalizeCredentialProvider(config, {
        credentials: inputCredentials,
        credentialDefaultProvider: config.credentialDefaultProvider
      });
      const boundProvider = bindCallerConfig(config, memoizedProvider);
      if (isUserSupplied && !boundProvider.attributed) {
        resolvedCredentials = async (options) => boundProvider(options).then((creds) => setCredentialFeature(creds, "CREDENTIALS_CODE", "e"));
        resolvedCredentials.memoized = boundProvider.memoized;
        resolvedCredentials.configBound = boundProvider.configBound;
        resolvedCredentials.attributed = true;
      } else {
        resolvedCredentials = boundProvider;
      }
    },
    get() {
      return resolvedCredentials;
    },
    enumerable: true,
    configurable: true
  });
  config.credentials = inputCredentials;
  const { signingEscapePath = true, systemClockOffset = config.systemClockOffset || 0, sha256 } = config;
  let signer;
  if (config.signer) {
    signer = normalizeProvider2(config.signer);
  } else if (config.regionInfoProvider) {
    signer = () => normalizeProvider2(config.region)().then(async (region) => [
      await config.regionInfoProvider(region, {
        useFipsEndpoint: await config.useFipsEndpoint(),
        useDualstackEndpoint: await config.useDualstackEndpoint()
      }) || {},
      region
    ]).then(([regionInfo, region]) => {
      const { signingRegion, signingService } = regionInfo;
      config.signingRegion = config.signingRegion || signingRegion || region;
      config.signingName = config.signingName || signingService || config.serviceId;
      const params = {
        ...config,
        credentials: config.credentials,
        region: config.signingRegion,
        service: config.signingName,
        sha256,
        uriEscapePath: signingEscapePath
      };
      const SignerCtor = config.signerConstructor || SignatureV4;
      return new SignerCtor(params);
    });
  } else {
    signer = async (authScheme) => {
      authScheme = Object.assign({}, {
        name: "sigv4",
        signingName: config.signingName || config.defaultSigningName,
        signingRegion: await normalizeProvider2(config.region)(),
        properties: {}
      }, authScheme);
      const signingRegion = authScheme.signingRegion;
      const signingService = authScheme.signingName;
      config.signingRegion = config.signingRegion || signingRegion;
      config.signingName = config.signingName || signingService || config.serviceId;
      const params = {
        ...config,
        credentials: config.credentials,
        region: config.signingRegion,
        service: config.signingName,
        sha256,
        uriEscapePath: signingEscapePath
      };
      const SignerCtor = config.signerConstructor || SignatureV4;
      return new SignerCtor(params);
    };
  }
  const resolvedConfig = Object.assign(config, {
    systemClockOffset,
    signingEscapePath,
    signer
  });
  return resolvedConfig;
};
function normalizeCredentialProvider(config, { credentials, credentialDefaultProvider }) {
  let credentialsProvider;
  if (credentials) {
    if (!credentials?.memoized) {
      credentialsProvider = memoizeIdentityProvider(credentials, isIdentityExpired, doesIdentityRequireRefresh);
    } else {
      credentialsProvider = credentials;
    }
  } else {
    if (credentialDefaultProvider) {
      credentialsProvider = normalizeProvider2(credentialDefaultProvider(Object.assign({}, config, {
        parentClientConfig: config
      })));
    } else {
      credentialsProvider = async () => {
        throw new Error("@aws-sdk/core::resolveAwsSdkSigV4Config - `credentials` not provided and no credentialDefaultProvider was configured.");
      };
    }
  }
  credentialsProvider.memoized = true;
  return credentialsProvider;
}
function bindCallerConfig(config, credentialsProvider) {
  if (credentialsProvider.configBound) {
    return credentialsProvider;
  }
  const fn = async (options) => credentialsProvider({ ...options, callerClientConfig: config });
  fn.memoized = credentialsProvider.memoized;
  fn.configBound = true;
  return fn;
}

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js
var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => (context?.utf8Encoder ?? toUtf8)(body));

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js
var parseJsonBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    try {
      return JSON.parse(encoded);
    } catch (e2) {
      if (e2?.name === "SyntaxError") {
        Object.defineProperty(e2, "$responseBodyText", {
          value: encoded
        });
      }
      throw e2;
    }
  }
  return {};
});
var parseJsonErrorBody = async (errorBody, context) => {
  const value = await parseJsonBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
};
var loadRestJsonErrorCode = (output, data) => {
  const findKey = (object, key) => Object.keys(object).find((k2) => k2.toLowerCase() === key.toLowerCase());
  const sanitizeErrorCode = (rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data && typeof data === "object") {
    const codeKey = findKey(data, "code");
    if (codeKey && data[codeKey] !== void 0) {
      return sanitizeErrorCode(data[codeKey]);
    }
    if (data["__type"] !== void 0) {
      return sanitizeErrorCode(data["__type"]);
    }
  }
};

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/jsonReplacer.js
var NUMERIC_CONTROL_CHAR = String.fromCharCode(925);

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/xml-builder/dist-es/xml-parser.browser.js
var parser = new DOMParser();

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-user-agent/dist-es/check-features.js
var ACCOUNT_ID_ENDPOINT_REGEX = /\d{12}\.ddb/;
async function checkFeatures(context, config, args) {
  const request = args.request;
  if (request?.headers?.["smithy-protocol"] === "rpc-v2-cbor") {
    setFeature(context, "PROTOCOL_RPC_V2_CBOR", "M");
  }
  if (typeof config.retryStrategy === "function") {
    const retryStrategy = await config.retryStrategy();
    if (typeof retryStrategy.acquireInitialRetryToken === "function") {
      if (retryStrategy.constructor?.name?.includes("Adaptive")) {
        setFeature(context, "RETRY_MODE_ADAPTIVE", "F");
      } else {
        setFeature(context, "RETRY_MODE_STANDARD", "E");
      }
    } else {
      setFeature(context, "RETRY_MODE_LEGACY", "D");
    }
  }
  if (typeof config.accountIdEndpointMode === "function") {
    const endpointV2 = context.endpointV2;
    if (String(endpointV2?.url?.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX)) {
      setFeature(context, "ACCOUNT_ID_ENDPOINT", "O");
    }
    switch (await config.accountIdEndpointMode?.()) {
      case "disabled":
        setFeature(context, "ACCOUNT_ID_MODE_DISABLED", "Q");
        break;
      case "preferred":
        setFeature(context, "ACCOUNT_ID_MODE_PREFERRED", "P");
        break;
      case "required":
        setFeature(context, "ACCOUNT_ID_MODE_REQUIRED", "R");
        break;
    }
  }
  const identity = context.__smithy_context?.selectedHttpAuthScheme?.identity;
  if (identity?.$source) {
    const credentials = identity;
    if (credentials.accountId) {
      setFeature(context, "RESOLVED_ACCOUNT_ID", "T");
    }
    for (const [key, value] of Object.entries(credentials.$source ?? {})) {
      setFeature(context, key, value);
    }
  }
}

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js
var USER_AGENT = "user-agent";
var X_AMZ_USER_AGENT = "x-amz-user-agent";
var SPACE = " ";
var UA_NAME_SEPARATOR = "/";
var UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
var UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
var UA_ESCAPE_CHAR = "-";

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-user-agent/dist-es/encode-features.js
var BYTE_LIMIT = 1024;
function encodeFeatures(features) {
  let buffer = "";
  for (const key in features) {
    const val = features[key];
    if (buffer.length + val.length + 1 <= BYTE_LIMIT) {
      if (buffer.length) {
        buffer += "," + val;
      } else {
        buffer += val;
      }
      continue;
    }
    break;
  }
  return buffer;
}

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js
var userAgentMiddleware = (options) => (next, context) => async (args) => {
  const { request } = args;
  if (!HttpRequest.isInstance(request)) {
    return next(args);
  }
  const { headers } = request;
  const userAgent = context?.userAgent?.map(escapeUserAgent) || [];
  const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
  await checkFeatures(context, options, args);
  const awsContext = context;
  defaultUserAgent.push(`m/${encodeFeatures(Object.assign({}, context.__smithy_context?.features, awsContext.__aws_sdk_context?.features))}`);
  const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];
  const appId = await options.userAgentAppId();
  if (appId) {
    defaultUserAgent.push(escapeUserAgent([`app/${appId}`]));
  }
  const prefix = getUserAgentPrefix();
  const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(SPACE);
  const normalUAValue = [
    ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
    ...customUserAgent
  ].join(SPACE);
  if (options.runtime !== "browser") {
    if (normalUAValue) {
      headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
    }
    headers[USER_AGENT] = sdkUserAgentValue;
  } else {
    headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
  }
  return next({
    ...args,
    request
  });
};
var escapeUserAgent = (userAgentPair) => {
  const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
  const version = userAgentPair[1]?.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
  const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
  const prefix = name.substring(0, prefixSeparatorIndex);
  let uaName = name.substring(prefixSeparatorIndex + 1);
  if (prefix === "api") {
    uaName = uaName.toLowerCase();
  }
  return [prefix, uaName, version].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
    switch (index) {
      case 0:
        return item;
      case 1:
        return `${acc}/${item}`;
      default:
        return `${acc}#${item}`;
    }
  }, "");
};
var getUserAgentMiddlewareOptions = {
  name: "getUserAgentMiddleware",
  step: "build",
  priority: "low",
  tags: ["SET_USER_AGENT", "USER_AGENT"],
  override: true
};
var getUserAgentPlugin = (config) => ({
  applyToStack: (clientStack) => {
    clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/auth/httpAuthSchemeProvider.js
var defaultTranscribeStreamingHttpAuthSchemeParametersProvider = async (config, context, input) => {
  return {
    operation: getSmithyContext(context).operation,
    region: await normalizeProvider(config.region)() || (() => {
      throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
    })()
  };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "transcribe",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
var defaultTranscribeStreamingHttpAuthSchemeProvider = (authParameters) => {
  const options = [];
  switch (authParameters.operation) {
    default: {
      options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
    }
  }
  return options;
};
var resolveHttpAuthSchemeConfig = (config) => {
  const config_0 = resolveAwsSdkSigV4Config(config);
  return Object.assign(config_0, {
    authSchemePreference: normalizeProvider(config.authSchemePreference ?? [])
  });
};

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  return Object.assign(options, {
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "transcribe"
  });
};
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// node_modules/@aws-sdk/client-transcribe-streaming/package.json
var package_default = {
  name: "@aws-sdk/client-transcribe-streaming",
  description: "AWS SDK for JavaScript Transcribe Streaming Client for Node.js, Browser and React Native",
  version: "3.899.0",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "node ../../scripts/compilation/inline client-transcribe-streaming",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo transcribe-streaming",
    "test:e2e": "yarn g:vitest run -c vitest.config.e2e.mts --mode development",
    "test:e2e:watch": "yarn g:vitest watch -c vitest.config.e2e.mts"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "5.2.0",
    "@aws-crypto/sha256-js": "5.2.0",
    "@aws-sdk/core": "3.899.0",
    "@aws-sdk/credential-provider-node": "3.899.0",
    "@aws-sdk/eventstream-handler-node": "3.893.0",
    "@aws-sdk/middleware-eventstream": "3.893.0",
    "@aws-sdk/middleware-host-header": "3.893.0",
    "@aws-sdk/middleware-logger": "3.893.0",
    "@aws-sdk/middleware-recursion-detection": "3.893.0",
    "@aws-sdk/middleware-sdk-transcribe-streaming": "3.896.0",
    "@aws-sdk/middleware-user-agent": "3.899.0",
    "@aws-sdk/middleware-websocket": "3.893.0",
    "@aws-sdk/region-config-resolver": "3.893.0",
    "@aws-sdk/types": "3.893.0",
    "@aws-sdk/util-endpoints": "3.895.0",
    "@aws-sdk/util-user-agent-browser": "3.893.0",
    "@aws-sdk/util-user-agent-node": "3.899.0",
    "@smithy/config-resolver": "^4.2.2",
    "@smithy/core": "^3.13.0",
    "@smithy/eventstream-serde-browser": "^4.1.1",
    "@smithy/eventstream-serde-config-resolver": "^4.2.1",
    "@smithy/eventstream-serde-node": "^4.1.1",
    "@smithy/fetch-http-handler": "^5.2.1",
    "@smithy/hash-node": "^4.1.1",
    "@smithy/invalid-dependency": "^4.1.1",
    "@smithy/middleware-content-length": "^4.1.1",
    "@smithy/middleware-endpoint": "^4.2.5",
    "@smithy/middleware-retry": "^4.3.1",
    "@smithy/middleware-serde": "^4.1.1",
    "@smithy/middleware-stack": "^4.1.1",
    "@smithy/node-config-provider": "^4.2.2",
    "@smithy/node-http-handler": "^4.2.1",
    "@smithy/protocol-http": "^5.2.1",
    "@smithy/smithy-client": "^4.6.5",
    "@smithy/types": "^4.5.0",
    "@smithy/url-parser": "^4.1.1",
    "@smithy/util-base64": "^4.1.0",
    "@smithy/util-body-length-browser": "^4.1.0",
    "@smithy/util-body-length-node": "^4.1.0",
    "@smithy/util-defaults-mode-browser": "^4.1.5",
    "@smithy/util-defaults-mode-node": "^4.1.5",
    "@smithy/util-endpoints": "^3.1.2",
    "@smithy/util-middleware": "^4.1.1",
    "@smithy/util-retry": "^4.1.2",
    "@smithy/util-utf8": "^4.1.0",
    tslib: "^2.6.2"
  },
  devDependencies: {
    "@tsconfig/node18": "18.2.4",
    "@types/node": "^18.19.69",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typescript: "~5.8.3"
  },
  engines: {
    node: ">=18.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-transcribe-streaming",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-transcribe-streaming"
  }
};

// node_modules/@aws-sdk/middleware-sdk-transcribe-streaming/dist-es/eventstream-handler.js
var eventStreamPayloadHandler = {
  handle: (next, args) => next(args)
};

// node_modules/@aws-sdk/middleware-sdk-transcribe-streaming/dist-es/middleware-inject-response-values.js
var injectResponseValuesMiddleware = (config) => (next) => async (args) => {
  if (args.input.SessionId === void 0 && isWebSocket(config)) {
    args.input.SessionId = v4();
  }
  const requestParams = {
    ...args.input
  };
  const response = await next(args);
  const output = response.output;
  for (const key of Object.keys(output)) {
    if (output[key] === void 0 && requestParams[key]) {
      output[key] = requestParams[key];
    }
  }
  return response;
};
var isWebSocket = (config) => config.requestHandler.metadata?.handlerProtocol?.includes("websocket");
var injectResponseValuesMiddlewareOptions = {
  step: "initialize",
  name: "injectResponseValuesMiddleware",
  tags: ["WEBSOCKET", "EVENT_STREAM"],
  override: true
};

// node_modules/@aws-sdk/middleware-sdk-transcribe-streaming/dist-es/middleware-port.js
var websocketPortMiddleware = (options) => (next) => (args) => {
  const { request } = args;
  if (HttpRequest.isInstance(request) && options.requestHandler.metadata?.handlerProtocol?.includes("websocket")) {
    request.hostname = `${request.hostname}:8443`;
    request.headers.host = request.hostname;
  }
  return next(args);
};
var websocketPortMiddlewareOptions = {
  name: "websocketPortMiddleware",
  tags: ["WEBSOCKET", "EVENT_STREAM", "PORT"],
  relation: "after",
  toMiddleware: "eventStreamHeaderMiddleware",
  override: true
};

// node_modules/@aws-sdk/middleware-sdk-transcribe-streaming/dist-es/getTranscribeStreamingPlugin.js
var getTranscribeStreamingPlugin = (config) => ({
  applyToStack: (clientStack) => {
    clientStack.addRelativeTo(websocketPortMiddleware(config), websocketPortMiddlewareOptions);
    clientStack.add(injectResponseValuesMiddleware(config), injectResponseValuesMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js
var createDefaultUserAgentProvider = ({ serviceId, clientVersion }) => async (config) => {
  const parsedUA = typeof window !== "undefined" && window?.navigator?.userAgent ? bowser_default.parse(window.navigator.userAgent) : void 0;
  const sections = [
    ["aws-sdk-js", clientVersion],
    ["ua", "2.1"],
    [`os/${parsedUA?.os?.name || "other"}`, parsedUA?.os?.version],
    ["lang/js"],
    ["md/browser", `${parsedUA?.browser?.name ?? "unknown"}_${parsedUA?.browser?.version ?? "unknown"}`]
  ];
  if (serviceId) {
    sections.push([`api/${serviceId}`, clientVersion]);
  }
  const appId = await config?.userAgentAppId?.();
  if (appId) {
    sections.push([`app/${appId}`]);
  }
  return sections;
};

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/endpoint/ruleset.js
var s = "required";
var t = "fn";
var u = "argv";
var v = "ref";
var a = true;
var b = "isSet";
var c = "booleanEquals";
var d = "error";
var e = "endpoint";
var f = "tree";
var g = "PartitionResult";
var h = { [s]: false, "type": "String" };
var i = { [s]: true, "default": false, "type": "Boolean" };
var j = { [v]: "Endpoint" };
var k = { [t]: c, [u]: [{ [v]: "UseFIPS" }, true] };
var l = { [t]: c, [u]: [{ [v]: "UseDualStack" }, true] };
var m = {};
var n = { [t]: "getAttr", [u]: [{ [v]: g }, "supportsFIPS"] };
var o = { [t]: c, [u]: [true, { [t]: "getAttr", [u]: [{ [v]: g }, "supportsDualStack"] }] };
var p = [k];
var q = [l];
var r = [{ [v]: "Region" }];
var _data = { version: "1.0", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [t]: b, [u]: [j] }], rules: [{ conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: j, properties: m, headers: m }, type: e }], type: f }, { conditions: [{ [t]: b, [u]: r }], rules: [{ conditions: [{ [t]: "aws.partition", [u]: r, assign: g }], rules: [{ conditions: [k, l], rules: [{ conditions: [{ [t]: c, [u]: [a, n] }, o], rules: [{ endpoint: { url: "https://transcribestreaming-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: p, rules: [{ conditions: [{ [t]: c, [u]: [n, a] }], rules: [{ endpoint: { url: "https://transcribestreaming-fips.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: q, rules: [{ conditions: [o], rules: [{ endpoint: { url: "https://transcribestreaming.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://transcribestreaming.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
var ruleSet = _data;

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/endpoint/endpointResolver.js
var cache = new EndpointCache({
  size: 50,
  params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
});
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  }));
};
customEndpointFunctions.aws = awsEndpointFunctions;

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => {
  return {
    apiVersion: "2017-10-26",
    base64Decoder: config?.base64Decoder ?? fromBase64,
    base64Encoder: config?.base64Encoder ?? toBase64,
    disableHostPrefix: config?.disableHostPrefix ?? false,
    endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,
    extensions: config?.extensions ?? [],
    httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultTranscribeStreamingHttpAuthSchemeProvider,
    httpAuthSchemes: config?.httpAuthSchemes ?? [
      {
        schemeId: "aws.auth#sigv4",
        identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
        signer: new AwsSdkSigV4Signer()
      }
    ],
    logger: config?.logger ?? new NoOpLogger(),
    serviceId: config?.serviceId ?? "Transcribe Streaming",
    urlParser: config?.urlParser ?? parseUrl,
    utf8Decoder: config?.utf8Decoder ?? fromUtf8,
    utf8Encoder: config?.utf8Encoder ?? toUtf8
  };
};

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = (config) => {
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,
    credentialDefaultProvider: config?.credentialDefaultProvider ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
    defaultUserAgentProvider: config?.defaultUserAgentProvider ?? createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    eventStreamPayloadHandlerProvider: config?.eventStreamPayloadHandlerProvider ?? (() => eventStreamPayloadHandler),
    eventStreamSerdeProvider: config?.eventStreamSerdeProvider ?? eventStreamSerdeProvider,
    maxAttempts: config?.maxAttempts ?? DEFAULT_MAX_ATTEMPTS,
    region: config?.region ?? invalidProvider("Region is missing"),
    requestHandler: WebSocketFetchHandler.create(config?.requestHandler ?? defaultConfigProvider, FetchHttpHandler.create(defaultConfigProvider)),
    retryMode: config?.retryMode ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
    sha256: config?.sha256 ?? Sha256,
    streamCollector: config?.streamCollector ?? streamCollector,
    useDualstackEndpoint: config?.useDualstackEndpoint ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: config?.useFipsEndpoint ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
  };
};

// node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js
var getAwsRegionExtensionConfiguration = (runtimeConfig) => {
  return {
    setRegion(region) {
      runtimeConfig.region = region;
    },
    region() {
      return runtimeConfig.region;
    }
  };
};
var resolveAwsRegionExtensionConfiguration = (awsRegionExtensionConfiguration) => {
  return {
    region: awsRegionExtensionConfiguration.region()
  };
};

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
};
var resolveHttpAuthRuntimeConfig = (config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
};

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/runtimeExtensions.js
var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
  const extensionConfiguration = Object.assign(getAwsRegionExtensionConfiguration(runtimeConfig), getDefaultExtensionConfiguration(runtimeConfig), getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return Object.assign(runtimeConfig, resolveAwsRegionExtensionConfiguration(extensionConfiguration), resolveDefaultRuntimeConfig(extensionConfiguration), resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/TranscribeStreamingClient.js
var TranscribeStreamingClient = class extends Client {
  config;
  constructor(...[configuration]) {
    const _config_0 = getRuntimeConfig2(configuration || {});
    super(_config_0);
    this.initConfig = _config_0;
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveUserAgentConfig(_config_1);
    const _config_3 = resolveRetryConfig(_config_2);
    const _config_4 = resolveRegionConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveEndpointConfig(_config_5);
    const _config_7 = resolveEventStreamSerdeConfig(_config_6);
    const _config_8 = resolveHttpAuthSchemeConfig(_config_7);
    const _config_9 = resolveEventStreamConfig(_config_8);
    const _config_10 = resolveWebSocketConfig(_config_9);
    const _config_11 = resolveRuntimeExtensions(_config_10, configuration?.extensions || []);
    this.config = _config_11;
    this.middlewareStack.use(getUserAgentPlugin(this.config));
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
      httpAuthSchemeParametersProvider: defaultTranscribeStreamingHttpAuthSchemeParametersProvider,
      identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({
        "aws.auth#sigv4": config.credentials
      })
    }));
    this.middlewareStack.use(getHttpSigningPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
};

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/models/TranscribeStreamingServiceException.js
var TranscribeStreamingServiceException = class _TranscribeStreamingServiceException extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _TranscribeStreamingServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/models/models_0.js
var ItemType = {
  PRONUNCIATION: "pronunciation",
  PUNCTUATION: "punctuation"
};
var ParticipantRole = {
  AGENT: "AGENT",
  CUSTOMER: "CUSTOMER"
};
var ContentRedactionOutput = {
  REDACTED: "redacted",
  REDACTED_AND_UNREDACTED: "redacted_and_unredacted"
};
var AudioStream;
(function(AudioStream2) {
  AudioStream2.visit = (value, visitor) => {
    if (value.AudioEvent !== void 0)
      return visitor.AudioEvent(value.AudioEvent);
    if (value.ConfigurationEvent !== void 0)
      return visitor.ConfigurationEvent(value.ConfigurationEvent);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(AudioStream || (AudioStream = {}));
var BadRequestException = class _BadRequestException extends TranscribeStreamingServiceException {
  name = "BadRequestException";
  $fault = "client";
  Message;
  constructor(opts) {
    super({
      name: "BadRequestException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _BadRequestException.prototype);
    this.Message = opts.Message;
  }
};
var CallAnalyticsLanguageCode = {
  DE_DE: "de-DE",
  EN_AU: "en-AU",
  EN_GB: "en-GB",
  EN_US: "en-US",
  ES_US: "es-US",
  FR_CA: "fr-CA",
  FR_FR: "fr-FR",
  IT_IT: "it-IT",
  PT_BR: "pt-BR"
};
var ConflictException = class _ConflictException extends TranscribeStreamingServiceException {
  name = "ConflictException";
  $fault = "client";
  Message;
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ConflictException.prototype);
    this.Message = opts.Message;
  }
};
var InternalFailureException = class _InternalFailureException extends TranscribeStreamingServiceException {
  name = "InternalFailureException";
  $fault = "server";
  Message;
  constructor(opts) {
    super({
      name: "InternalFailureException",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _InternalFailureException.prototype);
    this.Message = opts.Message;
  }
};
var LimitExceededException = class _LimitExceededException extends TranscribeStreamingServiceException {
  name = "LimitExceededException";
  $fault = "client";
  Message;
  constructor(opts) {
    super({
      name: "LimitExceededException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _LimitExceededException.prototype);
    this.Message = opts.Message;
  }
};
var ServiceUnavailableException = class _ServiceUnavailableException extends TranscribeStreamingServiceException {
  name = "ServiceUnavailableException";
  $fault = "server";
  Message;
  constructor(opts) {
    super({
      name: "ServiceUnavailableException",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _ServiceUnavailableException.prototype);
    this.Message = opts.Message;
  }
};
var Sentiment = {
  MIXED: "MIXED",
  NEGATIVE: "NEGATIVE",
  NEUTRAL: "NEUTRAL",
  POSITIVE: "POSITIVE"
};
var CallAnalyticsTranscriptResultStream;
(function(CallAnalyticsTranscriptResultStream2) {
  CallAnalyticsTranscriptResultStream2.visit = (value, visitor) => {
    if (value.UtteranceEvent !== void 0)
      return visitor.UtteranceEvent(value.UtteranceEvent);
    if (value.CategoryEvent !== void 0)
      return visitor.CategoryEvent(value.CategoryEvent);
    if (value.BadRequestException !== void 0)
      return visitor.BadRequestException(value.BadRequestException);
    if (value.LimitExceededException !== void 0)
      return visitor.LimitExceededException(value.LimitExceededException);
    if (value.InternalFailureException !== void 0)
      return visitor.InternalFailureException(value.InternalFailureException);
    if (value.ConflictException !== void 0)
      return visitor.ConflictException(value.ConflictException);
    if (value.ServiceUnavailableException !== void 0)
      return visitor.ServiceUnavailableException(value.ServiceUnavailableException);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(CallAnalyticsTranscriptResultStream || (CallAnalyticsTranscriptResultStream = {}));
var ClinicalNoteGenerationStatus = {
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS"
};
var MedicalScribeNoteTemplate = {
  BEHAVIORAL_SOAP: "BEHAVIORAL_SOAP",
  BIRP: "BIRP",
  DAP: "DAP",
  GIRPP: "GIRPP",
  HISTORY_AND_PHYSICAL: "HISTORY_AND_PHYSICAL",
  PHYSICAL_SOAP: "PHYSICAL_SOAP",
  SIRP: "SIRP"
};
var ContentIdentificationType = {
  PII: "PII"
};
var ContentRedactionType = {
  PII: "PII"
};
var MedicalScribeParticipantRole = {
  CLINICIAN: "CLINICIAN",
  PATIENT: "PATIENT"
};
var MedicalScribeLanguageCode = {
  EN_US: "en-US"
};
var MedicalScribeMediaEncoding = {
  FLAC: "flac",
  OGG_OPUS: "ogg-opus",
  PCM: "pcm"
};
var MedicalScribeStreamStatus = {
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS",
  PAUSED: "PAUSED"
};
var MedicalScribeVocabularyFilterMethod = {
  MASK: "mask",
  REMOVE: "remove",
  TAG: "tag"
};
var ResourceNotFoundException = class _ResourceNotFoundException extends TranscribeStreamingServiceException {
  name = "ResourceNotFoundException";
  $fault = "client";
  Message;
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
var LanguageCode = {
  AF_ZA: "af-ZA",
  AR_AE: "ar-AE",
  AR_SA: "ar-SA",
  CA_ES: "ca-ES",
  CS_CZ: "cs-CZ",
  DA_DK: "da-DK",
  DE_CH: "de-CH",
  DE_DE: "de-DE",
  EL_GR: "el-GR",
  EN_AB: "en-AB",
  EN_AU: "en-AU",
  EN_GB: "en-GB",
  EN_IE: "en-IE",
  EN_IN: "en-IN",
  EN_NZ: "en-NZ",
  EN_US: "en-US",
  EN_WL: "en-WL",
  EN_ZA: "en-ZA",
  ES_ES: "es-ES",
  ES_US: "es-US",
  EU_ES: "eu-ES",
  FA_IR: "fa-IR",
  FI_FI: "fi-FI",
  FR_CA: "fr-CA",
  FR_FR: "fr-FR",
  GL_ES: "gl-ES",
  HE_IL: "he-IL",
  HI_IN: "hi-IN",
  HR_HR: "hr-HR",
  ID_ID: "id-ID",
  IT_IT: "it-IT",
  JA_JP: "ja-JP",
  KO_KR: "ko-KR",
  LV_LV: "lv-LV",
  MS_MY: "ms-MY",
  NL_NL: "nl-NL",
  NO_NO: "no-NO",
  PL_PL: "pl-PL",
  PT_BR: "pt-BR",
  PT_PT: "pt-PT",
  RO_RO: "ro-RO",
  RU_RU: "ru-RU",
  SK_SK: "sk-SK",
  SO_SO: "so-SO",
  SR_RS: "sr-RS",
  SV_SE: "sv-SE",
  TH_TH: "th-TH",
  TL_PH: "tl-PH",
  UK_UA: "uk-UA",
  VI_VN: "vi-VN",
  ZH_CN: "zh-CN",
  ZH_HK: "zh-HK",
  ZH_TW: "zh-TW",
  ZU_ZA: "zu-ZA"
};
var MediaEncoding = {
  FLAC: "flac",
  OGG_OPUS: "ogg-opus",
  PCM: "pcm"
};
var MedicalContentIdentificationType = {
  PHI: "PHI"
};
var Pronouns = {
  HE_HIM: "HE_HIM",
  SHE_HER: "SHE_HER",
  THEY_THEM: "THEY_THEM"
};
var MedicalScribeSessionControlEventType = {
  END_OF_SESSION: "END_OF_SESSION"
};
var MedicalScribeInputStream;
(function(MedicalScribeInputStream2) {
  MedicalScribeInputStream2.visit = (value, visitor) => {
    if (value.AudioEvent !== void 0)
      return visitor.AudioEvent(value.AudioEvent);
    if (value.SessionControlEvent !== void 0)
      return visitor.SessionControlEvent(value.SessionControlEvent);
    if (value.ConfigurationEvent !== void 0)
      return visitor.ConfigurationEvent(value.ConfigurationEvent);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(MedicalScribeInputStream || (MedicalScribeInputStream = {}));
var MedicalScribeTranscriptItemType = {
  PRONUNCIATION: "pronunciation",
  PUNCTUATION: "punctuation"
};
var MedicalScribeResultStream;
(function(MedicalScribeResultStream2) {
  MedicalScribeResultStream2.visit = (value, visitor) => {
    if (value.TranscriptEvent !== void 0)
      return visitor.TranscriptEvent(value.TranscriptEvent);
    if (value.BadRequestException !== void 0)
      return visitor.BadRequestException(value.BadRequestException);
    if (value.LimitExceededException !== void 0)
      return visitor.LimitExceededException(value.LimitExceededException);
    if (value.InternalFailureException !== void 0)
      return visitor.InternalFailureException(value.InternalFailureException);
    if (value.ConflictException !== void 0)
      return visitor.ConflictException(value.ConflictException);
    if (value.ServiceUnavailableException !== void 0)
      return visitor.ServiceUnavailableException(value.ServiceUnavailableException);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(MedicalScribeResultStream || (MedicalScribeResultStream = {}));
var MedicalTranscriptResultStream;
(function(MedicalTranscriptResultStream2) {
  MedicalTranscriptResultStream2.visit = (value, visitor) => {
    if (value.TranscriptEvent !== void 0)
      return visitor.TranscriptEvent(value.TranscriptEvent);
    if (value.BadRequestException !== void 0)
      return visitor.BadRequestException(value.BadRequestException);
    if (value.LimitExceededException !== void 0)
      return visitor.LimitExceededException(value.LimitExceededException);
    if (value.InternalFailureException !== void 0)
      return visitor.InternalFailureException(value.InternalFailureException);
    if (value.ConflictException !== void 0)
      return visitor.ConflictException(value.ConflictException);
    if (value.ServiceUnavailableException !== void 0)
      return visitor.ServiceUnavailableException(value.ServiceUnavailableException);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(MedicalTranscriptResultStream || (MedicalTranscriptResultStream = {}));
var PartialResultsStability = {
  HIGH: "high",
  LOW: "low",
  MEDIUM: "medium"
};
var Specialty = {
  CARDIOLOGY: "CARDIOLOGY",
  NEUROLOGY: "NEUROLOGY",
  ONCOLOGY: "ONCOLOGY",
  PRIMARYCARE: "PRIMARYCARE",
  RADIOLOGY: "RADIOLOGY",
  UROLOGY: "UROLOGY"
};
var VocabularyFilterMethod = {
  MASK: "mask",
  REMOVE: "remove",
  TAG: "tag"
};
var Type = {
  CONVERSATION: "CONVERSATION",
  DICTATION: "DICTATION"
};
var TranscriptResultStream;
(function(TranscriptResultStream2) {
  TranscriptResultStream2.visit = (value, visitor) => {
    if (value.TranscriptEvent !== void 0)
      return visitor.TranscriptEvent(value.TranscriptEvent);
    if (value.BadRequestException !== void 0)
      return visitor.BadRequestException(value.BadRequestException);
    if (value.LimitExceededException !== void 0)
      return visitor.LimitExceededException(value.LimitExceededException);
    if (value.InternalFailureException !== void 0)
      return visitor.InternalFailureException(value.InternalFailureException);
    if (value.ConflictException !== void 0)
      return visitor.ConflictException(value.ConflictException);
    if (value.ServiceUnavailableException !== void 0)
      return visitor.ServiceUnavailableException(value.ServiceUnavailableException);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(TranscriptResultStream || (TranscriptResultStream = {}));
var AudioStreamFilterSensitiveLog = (obj) => {
  if (obj.AudioEvent !== void 0)
    return { AudioEvent: obj.AudioEvent };
  if (obj.ConfigurationEvent !== void 0)
    return { ConfigurationEvent: obj.ConfigurationEvent };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var CallAnalyticsTranscriptResultStreamFilterSensitiveLog = (obj) => {
  if (obj.UtteranceEvent !== void 0)
    return { UtteranceEvent: obj.UtteranceEvent };
  if (obj.CategoryEvent !== void 0)
    return { CategoryEvent: obj.CategoryEvent };
  if (obj.BadRequestException !== void 0)
    return { BadRequestException: obj.BadRequestException };
  if (obj.LimitExceededException !== void 0)
    return { LimitExceededException: obj.LimitExceededException };
  if (obj.InternalFailureException !== void 0)
    return { InternalFailureException: obj.InternalFailureException };
  if (obj.ConflictException !== void 0)
    return { ConflictException: obj.ConflictException };
  if (obj.ServiceUnavailableException !== void 0)
    return { ServiceUnavailableException: obj.ServiceUnavailableException };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var MedicalScribePatientContextFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.Pronouns && { Pronouns: SENSITIVE_STRING }
});
var MedicalScribeContextFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.PatientContext && { PatientContext: MedicalScribePatientContextFilterSensitiveLog(obj.PatientContext) }
});
var MedicalScribeConfigurationEventFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.MedicalScribeContext && {
    MedicalScribeContext: MedicalScribeContextFilterSensitiveLog(obj.MedicalScribeContext)
  }
});
var MedicalScribeInputStreamFilterSensitiveLog = (obj) => {
  if (obj.AudioEvent !== void 0)
    return { AudioEvent: obj.AudioEvent };
  if (obj.SessionControlEvent !== void 0)
    return { SessionControlEvent: obj.SessionControlEvent };
  if (obj.ConfigurationEvent !== void 0)
    return { ConfigurationEvent: MedicalScribeConfigurationEventFilterSensitiveLog(obj.ConfigurationEvent) };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var MedicalScribeResultStreamFilterSensitiveLog = (obj) => {
  if (obj.TranscriptEvent !== void 0)
    return { TranscriptEvent: obj.TranscriptEvent };
  if (obj.BadRequestException !== void 0)
    return { BadRequestException: obj.BadRequestException };
  if (obj.LimitExceededException !== void 0)
    return { LimitExceededException: obj.LimitExceededException };
  if (obj.InternalFailureException !== void 0)
    return { InternalFailureException: obj.InternalFailureException };
  if (obj.ConflictException !== void 0)
    return { ConflictException: obj.ConflictException };
  if (obj.ServiceUnavailableException !== void 0)
    return { ServiceUnavailableException: obj.ServiceUnavailableException };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var MedicalTranscriptResultStreamFilterSensitiveLog = (obj) => {
  if (obj.TranscriptEvent !== void 0)
    return { TranscriptEvent: obj.TranscriptEvent };
  if (obj.BadRequestException !== void 0)
    return { BadRequestException: obj.BadRequestException };
  if (obj.LimitExceededException !== void 0)
    return { LimitExceededException: obj.LimitExceededException };
  if (obj.InternalFailureException !== void 0)
    return { InternalFailureException: obj.InternalFailureException };
  if (obj.ConflictException !== void 0)
    return { ConflictException: obj.ConflictException };
  if (obj.ServiceUnavailableException !== void 0)
    return { ServiceUnavailableException: obj.ServiceUnavailableException };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var StartCallAnalyticsStreamTranscriptionRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.AudioStream && { AudioStream: "STREAMING_CONTENT" }
});
var StartCallAnalyticsStreamTranscriptionResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.CallAnalyticsTranscriptResultStream && { CallAnalyticsTranscriptResultStream: "STREAMING_CONTENT" }
});
var StartMedicalScribeStreamRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.InputStream && { InputStream: "STREAMING_CONTENT" }
});
var StartMedicalScribeStreamResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.ResultStream && { ResultStream: "STREAMING_CONTENT" }
});
var StartMedicalStreamTranscriptionRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.AudioStream && { AudioStream: "STREAMING_CONTENT" }
});
var StartMedicalStreamTranscriptionResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.TranscriptResultStream && { TranscriptResultStream: "STREAMING_CONTENT" }
});
var StartStreamTranscriptionRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.AudioStream && { AudioStream: "STREAMING_CONTENT" }
});
var TranscriptResultStreamFilterSensitiveLog = (obj) => {
  if (obj.TranscriptEvent !== void 0)
    return { TranscriptEvent: obj.TranscriptEvent };
  if (obj.BadRequestException !== void 0)
    return { BadRequestException: obj.BadRequestException };
  if (obj.LimitExceededException !== void 0)
    return { LimitExceededException: obj.LimitExceededException };
  if (obj.InternalFailureException !== void 0)
    return { InternalFailureException: obj.InternalFailureException };
  if (obj.ConflictException !== void 0)
    return { ConflictException: obj.ConflictException };
  if (obj.ServiceUnavailableException !== void 0)
    return { ServiceUnavailableException: obj.ServiceUnavailableException };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var StartStreamTranscriptionResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.TranscriptResultStream && { TranscriptResultStream: "STREAMING_CONTENT" }
});

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/protocols/Aws_restJson1.js
var se_GetMedicalScribeStreamCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/medical-scribe-stream/{SessionId}");
  b2.p("SessionId", () => input.SessionId, "{SessionId}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_StartCallAnalyticsStreamTranscriptionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/json",
    [_xatlc]: input[_LC],
    [_xatsr]: [() => isSerializableHeaderValue(input[_MSRH]), () => input[_MSRH].toString()],
    [_xatme]: input[_ME],
    [_xatvn]: input[_VN],
    [_xatsi]: input[_SI],
    [_xatvfn]: input[_VFN],
    [_xatvfm]: input[_VFM],
    [_xatlmn]: input[_LMN],
    [_xatil]: [() => isSerializableHeaderValue(input[_IL]), () => input[_IL].toString()],
    [_xatlo]: input[_LO],
    [_xatpl]: input[_PL],
    [_xatvn_]: input[_VNo],
    [_xatvfn_]: input[_VFNo],
    [_xateprs]: [() => isSerializableHeaderValue(input[_EPRS]), () => input[_EPRS].toString()],
    [_xatprs]: input[_PRS],
    [_xatcit]: input[_CIT],
    [_xatcrt]: input[_CRT],
    [_xatpet]: input[_PET]
  });
  b2.bp("/call-analytics-stream-transcription");
  let body;
  if (input.AudioStream !== void 0) {
    body = se_AudioStream(input.AudioStream, context);
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_StartMedicalScribeStreamCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/json",
    [_xatsi]: input[_SI],
    [_xatlc]: input[_LC],
    [_xatsr]: [() => isSerializableHeaderValue(input[_MSRH]), () => input[_MSRH].toString()],
    [_xatme]: input[_ME]
  });
  b2.bp("/medical-scribe-stream");
  let body;
  if (input.InputStream !== void 0) {
    body = se_MedicalScribeInputStream(input.InputStream, context);
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_StartMedicalStreamTranscriptionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/json",
    [_xatlc]: input[_LC],
    [_xatsr]: [() => isSerializableHeaderValue(input[_MSRH]), () => input[_MSRH].toString()],
    [_xatme]: input[_ME],
    [_xatvn]: input[_VN],
    [_xats]: input[_S],
    [_xatt]: input[_T],
    [_xatssl]: [() => isSerializableHeaderValue(input[_SSL]), () => input[_SSL].toString()],
    [_xatsi]: input[_SI],
    [_xateci]: [() => isSerializableHeaderValue(input[_ECI]), () => input[_ECI].toString()],
    [_xatnoc]: [() => isSerializableHeaderValue(input[_NOC]), () => input[_NOC].toString()],
    [_xatcit]: input[_CIT]
  });
  b2.bp("/medical-stream-transcription");
  let body;
  if (input.AudioStream !== void 0) {
    body = se_AudioStream(input.AudioStream, context);
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_StartStreamTranscriptionCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    "content-type": "application/json",
    [_xatlc]: input[_LC],
    [_xatsr]: [() => isSerializableHeaderValue(input[_MSRH]), () => input[_MSRH].toString()],
    [_xatme]: input[_ME],
    [_xatvn]: input[_VN],
    [_xatsi]: input[_SI],
    [_xatvfn]: input[_VFN],
    [_xatvfm]: input[_VFM],
    [_xatssl]: [() => isSerializableHeaderValue(input[_SSL]), () => input[_SSL].toString()],
    [_xateci]: [() => isSerializableHeaderValue(input[_ECI]), () => input[_ECI].toString()],
    [_xatnoc]: [() => isSerializableHeaderValue(input[_NOC]), () => input[_NOC].toString()],
    [_xateprs]: [() => isSerializableHeaderValue(input[_EPRS]), () => input[_EPRS].toString()],
    [_xatprs]: input[_PRS],
    [_xatcit]: input[_CIT],
    [_xatcrt]: input[_CRT],
    [_xatpet]: input[_PET],
    [_xatlmn]: input[_LMN],
    [_xatil]: [() => isSerializableHeaderValue(input[_IL]), () => input[_IL].toString()],
    [_xatlo]: input[_LO],
    [_xatpl]: input[_PL],
    [_xatiml]: [() => isSerializableHeaderValue(input[_IML]), () => input[_IML].toString()],
    [_xatvn_]: input[_VNo],
    [_xatvfn_]: input[_VFNo]
  });
  b2.bp("/stream-transcription");
  let body;
  if (input.AudioStream !== void 0) {
    body = se_AudioStream(input.AudioStream, context);
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var de_GetMedicalScribeStreamCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    MedicalScribeStreamDetails: (_) => de_MedicalScribeStreamDetails(_, context)
  });
  Object.assign(contents, doc);
  return contents;
};
var de_StartCallAnalyticsStreamTranscriptionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_RI]: [, output.headers[_xari]],
    [_LC]: [, output.headers[_xatlc]],
    [_MSRH]: [() => void 0 !== output.headers[_xatsr], () => strictParseInt32(output.headers[_xatsr])],
    [_ME]: [, output.headers[_xatme]],
    [_VN]: [, output.headers[_xatvn]],
    [_SI]: [, output.headers[_xatsi]],
    [_VFN]: [, output.headers[_xatvfn]],
    [_VFM]: [, output.headers[_xatvfm]],
    [_LMN]: [, output.headers[_xatlmn]],
    [_IL]: [() => void 0 !== output.headers[_xatil], () => parseBoolean(output.headers[_xatil])],
    [_LO]: [, output.headers[_xatlo]],
    [_PL]: [, output.headers[_xatpl]],
    [_VNo]: [, output.headers[_xatvn_]],
    [_VFNo]: [, output.headers[_xatvfn_]],
    [_EPRS]: [() => void 0 !== output.headers[_xateprs], () => parseBoolean(output.headers[_xateprs])],
    [_PRS]: [, output.headers[_xatprs]],
    [_CIT]: [, output.headers[_xatcit]],
    [_CRT]: [, output.headers[_xatcrt]],
    [_PET]: [, output.headers[_xatpet]]
  });
  const data = output.body;
  contents.CallAnalyticsTranscriptResultStream = de_CallAnalyticsTranscriptResultStream(data, context);
  return contents;
};
var de_StartMedicalScribeStreamCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_SI]: [, output.headers[_xatsi]],
    [_RI]: [, output.headers[_xari]],
    [_LC]: [, output.headers[_xatlc]],
    [_MSRH]: [() => void 0 !== output.headers[_xatsr], () => strictParseInt32(output.headers[_xatsr])],
    [_ME]: [, output.headers[_xatme]]
  });
  const data = output.body;
  contents.ResultStream = de_MedicalScribeResultStream(data, context);
  return contents;
};
var de_StartMedicalStreamTranscriptionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_RI]: [, output.headers[_xari]],
    [_LC]: [, output.headers[_xatlc]],
    [_MSRH]: [() => void 0 !== output.headers[_xatsr], () => strictParseInt32(output.headers[_xatsr])],
    [_ME]: [, output.headers[_xatme]],
    [_VN]: [, output.headers[_xatvn]],
    [_S]: [, output.headers[_xats]],
    [_T]: [, output.headers[_xatt]],
    [_SSL]: [() => void 0 !== output.headers[_xatssl], () => parseBoolean(output.headers[_xatssl])],
    [_SI]: [, output.headers[_xatsi]],
    [_ECI]: [() => void 0 !== output.headers[_xateci], () => parseBoolean(output.headers[_xateci])],
    [_NOC]: [() => void 0 !== output.headers[_xatnoc], () => strictParseInt32(output.headers[_xatnoc])],
    [_CIT]: [, output.headers[_xatcit]]
  });
  const data = output.body;
  contents.TranscriptResultStream = de_MedicalTranscriptResultStream(data, context);
  return contents;
};
var de_StartStreamTranscriptionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_RI]: [, output.headers[_xari]],
    [_LC]: [, output.headers[_xatlc]],
    [_MSRH]: [() => void 0 !== output.headers[_xatsr], () => strictParseInt32(output.headers[_xatsr])],
    [_ME]: [, output.headers[_xatme]],
    [_VN]: [, output.headers[_xatvn]],
    [_SI]: [, output.headers[_xatsi]],
    [_VFN]: [, output.headers[_xatvfn]],
    [_VFM]: [, output.headers[_xatvfm]],
    [_SSL]: [() => void 0 !== output.headers[_xatssl], () => parseBoolean(output.headers[_xatssl])],
    [_ECI]: [() => void 0 !== output.headers[_xateci], () => parseBoolean(output.headers[_xateci])],
    [_NOC]: [() => void 0 !== output.headers[_xatnoc], () => strictParseInt32(output.headers[_xatnoc])],
    [_EPRS]: [() => void 0 !== output.headers[_xateprs], () => parseBoolean(output.headers[_xateprs])],
    [_PRS]: [, output.headers[_xatprs]],
    [_CIT]: [, output.headers[_xatcit]],
    [_CRT]: [, output.headers[_xatcrt]],
    [_PET]: [, output.headers[_xatpet]],
    [_LMN]: [, output.headers[_xatlmn]],
    [_IL]: [() => void 0 !== output.headers[_xatil], () => parseBoolean(output.headers[_xatil])],
    [_LO]: [, output.headers[_xatlo]],
    [_PL]: [, output.headers[_xatpl]],
    [_IML]: [() => void 0 !== output.headers[_xatiml], () => parseBoolean(output.headers[_xatiml])],
    [_VNo]: [, output.headers[_xatvn_]],
    [_VFNo]: [, output.headers[_xatvfn_]]
  });
  const data = output.body;
  contents.TranscriptResultStream = de_TranscriptResultStream(data, context);
  return contents;
};
var de_CommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "BadRequestException":
    case "com.amazonaws.transcribestreaming#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.transcribestreaming#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.transcribestreaming#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.transcribestreaming#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.transcribestreaming#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.transcribestreaming#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var throwDefaultError = withBaseException(TranscribeStreamingServiceException);
var de_BadRequestExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    Message: expectString
  });
  Object.assign(contents, doc);
  const exception = new BadRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ConflictExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    Message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_InternalFailureExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    Message: expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalFailureException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_LimitExceededExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    Message: expectString
  });
  Object.assign(contents, doc);
  const exception = new LimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    Message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    Message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var se_AudioStream = (input, context) => {
  const eventMarshallingVisitor = (event) => AudioStream.visit(event, {
    AudioEvent: (value) => se_AudioEvent_event(value, context),
    ConfigurationEvent: (value) => se_ConfigurationEvent_event(value, context),
    _: (value) => value
  });
  return context.eventStreamMarshaller.serialize(input, eventMarshallingVisitor);
};
var se_MedicalScribeInputStream = (input, context) => {
  const eventMarshallingVisitor = (event) => MedicalScribeInputStream.visit(event, {
    AudioEvent: (value) => se_MedicalScribeAudioEvent_event(value, context),
    SessionControlEvent: (value) => se_MedicalScribeSessionControlEvent_event(value, context),
    ConfigurationEvent: (value) => se_MedicalScribeConfigurationEvent_event(value, context),
    _: (value) => value
  });
  return context.eventStreamMarshaller.serialize(input, eventMarshallingVisitor);
};
var se_AudioEvent_event = (input, context) => {
  const headers = {
    ":event-type": { type: "string", value: "AudioEvent" },
    ":message-type": { type: "string", value: "event" },
    ":content-type": { type: "string", value: "application/octet-stream" }
  };
  let body = new Uint8Array();
  if (input.AudioChunk != null) {
    body = input.AudioChunk;
  }
  return { headers, body };
};
var se_ConfigurationEvent_event = (input, context) => {
  const headers = {
    ":event-type": { type: "string", value: "ConfigurationEvent" },
    ":message-type": { type: "string", value: "event" },
    ":content-type": { type: "string", value: "application/json" }
  };
  let body = new Uint8Array();
  body = _json(input);
  body = context.utf8Decoder(JSON.stringify(body));
  return { headers, body };
};
var se_MedicalScribeAudioEvent_event = (input, context) => {
  const headers = {
    ":event-type": { type: "string", value: "AudioEvent" },
    ":message-type": { type: "string", value: "event" },
    ":content-type": { type: "string", value: "application/octet-stream" }
  };
  let body = new Uint8Array();
  if (input.AudioChunk != null) {
    body = input.AudioChunk;
  }
  return { headers, body };
};
var se_MedicalScribeConfigurationEvent_event = (input, context) => {
  const headers = {
    ":event-type": { type: "string", value: "ConfigurationEvent" },
    ":message-type": { type: "string", value: "event" },
    ":content-type": { type: "string", value: "application/json" }
  };
  let body = new Uint8Array();
  body = _json(input);
  body = context.utf8Decoder(JSON.stringify(body));
  return { headers, body };
};
var se_MedicalScribeSessionControlEvent_event = (input, context) => {
  const headers = {
    ":event-type": { type: "string", value: "SessionControlEvent" },
    ":message-type": { type: "string", value: "event" },
    ":content-type": { type: "string", value: "application/json" }
  };
  let body = new Uint8Array();
  body = _json(input);
  body = context.utf8Decoder(JSON.stringify(body));
  return { headers, body };
};
var de_CallAnalyticsTranscriptResultStream = (output, context) => {
  return context.eventStreamMarshaller.deserialize(output, async (event) => {
    if (event["UtteranceEvent"] != null) {
      return {
        UtteranceEvent: await de_UtteranceEvent_event(event["UtteranceEvent"], context)
      };
    }
    if (event["CategoryEvent"] != null) {
      return {
        CategoryEvent: await de_CategoryEvent_event(event["CategoryEvent"], context)
      };
    }
    if (event["BadRequestException"] != null) {
      return {
        BadRequestException: await de_BadRequestException_event(event["BadRequestException"], context)
      };
    }
    if (event["LimitExceededException"] != null) {
      return {
        LimitExceededException: await de_LimitExceededException_event(event["LimitExceededException"], context)
      };
    }
    if (event["InternalFailureException"] != null) {
      return {
        InternalFailureException: await de_InternalFailureException_event(event["InternalFailureException"], context)
      };
    }
    if (event["ConflictException"] != null) {
      return {
        ConflictException: await de_ConflictException_event(event["ConflictException"], context)
      };
    }
    if (event["ServiceUnavailableException"] != null) {
      return {
        ServiceUnavailableException: await de_ServiceUnavailableException_event(event["ServiceUnavailableException"], context)
      };
    }
    return { $unknown: event };
  });
};
var de_MedicalScribeResultStream = (output, context) => {
  return context.eventStreamMarshaller.deserialize(output, async (event) => {
    if (event["TranscriptEvent"] != null) {
      return {
        TranscriptEvent: await de_MedicalScribeTranscriptEvent_event(event["TranscriptEvent"], context)
      };
    }
    if (event["BadRequestException"] != null) {
      return {
        BadRequestException: await de_BadRequestException_event(event["BadRequestException"], context)
      };
    }
    if (event["LimitExceededException"] != null) {
      return {
        LimitExceededException: await de_LimitExceededException_event(event["LimitExceededException"], context)
      };
    }
    if (event["InternalFailureException"] != null) {
      return {
        InternalFailureException: await de_InternalFailureException_event(event["InternalFailureException"], context)
      };
    }
    if (event["ConflictException"] != null) {
      return {
        ConflictException: await de_ConflictException_event(event["ConflictException"], context)
      };
    }
    if (event["ServiceUnavailableException"] != null) {
      return {
        ServiceUnavailableException: await de_ServiceUnavailableException_event(event["ServiceUnavailableException"], context)
      };
    }
    return { $unknown: event };
  });
};
var de_MedicalTranscriptResultStream = (output, context) => {
  return context.eventStreamMarshaller.deserialize(output, async (event) => {
    if (event["TranscriptEvent"] != null) {
      return {
        TranscriptEvent: await de_MedicalTranscriptEvent_event(event["TranscriptEvent"], context)
      };
    }
    if (event["BadRequestException"] != null) {
      return {
        BadRequestException: await de_BadRequestException_event(event["BadRequestException"], context)
      };
    }
    if (event["LimitExceededException"] != null) {
      return {
        LimitExceededException: await de_LimitExceededException_event(event["LimitExceededException"], context)
      };
    }
    if (event["InternalFailureException"] != null) {
      return {
        InternalFailureException: await de_InternalFailureException_event(event["InternalFailureException"], context)
      };
    }
    if (event["ConflictException"] != null) {
      return {
        ConflictException: await de_ConflictException_event(event["ConflictException"], context)
      };
    }
    if (event["ServiceUnavailableException"] != null) {
      return {
        ServiceUnavailableException: await de_ServiceUnavailableException_event(event["ServiceUnavailableException"], context)
      };
    }
    return { $unknown: event };
  });
};
var de_TranscriptResultStream = (output, context) => {
  return context.eventStreamMarshaller.deserialize(output, async (event) => {
    if (event["TranscriptEvent"] != null) {
      return {
        TranscriptEvent: await de_TranscriptEvent_event(event["TranscriptEvent"], context)
      };
    }
    if (event["BadRequestException"] != null) {
      return {
        BadRequestException: await de_BadRequestException_event(event["BadRequestException"], context)
      };
    }
    if (event["LimitExceededException"] != null) {
      return {
        LimitExceededException: await de_LimitExceededException_event(event["LimitExceededException"], context)
      };
    }
    if (event["InternalFailureException"] != null) {
      return {
        InternalFailureException: await de_InternalFailureException_event(event["InternalFailureException"], context)
      };
    }
    if (event["ConflictException"] != null) {
      return {
        ConflictException: await de_ConflictException_event(event["ConflictException"], context)
      };
    }
    if (event["ServiceUnavailableException"] != null) {
      return {
        ServiceUnavailableException: await de_ServiceUnavailableException_event(event["ServiceUnavailableException"], context)
      };
    }
    return { $unknown: event };
  });
};
var de_BadRequestException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_BadRequestExceptionRes(parsedOutput, context);
};
var de_CategoryEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, _json(data));
  return contents;
};
var de_ConflictException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_ConflictExceptionRes(parsedOutput, context);
};
var de_InternalFailureException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_InternalFailureExceptionRes(parsedOutput, context);
};
var de_LimitExceededException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_LimitExceededExceptionRes(parsedOutput, context);
};
var de_MedicalScribeTranscriptEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, de_MedicalScribeTranscriptEvent(data, context));
  return contents;
};
var de_MedicalTranscriptEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, de_MedicalTranscriptEvent(data, context));
  return contents;
};
var de_ServiceUnavailableException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_ServiceUnavailableExceptionRes(parsedOutput, context);
};
var de_TranscriptEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, de_TranscriptEvent(data, context));
  return contents;
};
var de_UtteranceEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, de_UtteranceEvent(data, context));
  return contents;
};
var de_Alternative = (output, context) => {
  return take(output, {
    Entities: (_) => de_EntityList(_, context),
    Items: (_) => de_ItemList(_, context),
    Transcript: expectString
  });
};
var de_AlternativeList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Alternative(entry, context);
  });
  return retVal;
};
var de_CallAnalyticsEntity = (output, context) => {
  return take(output, {
    BeginOffsetMillis: expectLong,
    Category: expectString,
    Confidence: limitedParseDouble,
    Content: expectString,
    EndOffsetMillis: expectLong,
    Type: expectString
  });
};
var de_CallAnalyticsEntityList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CallAnalyticsEntity(entry, context);
  });
  return retVal;
};
var de_CallAnalyticsItem = (output, context) => {
  return take(output, {
    BeginOffsetMillis: expectLong,
    Confidence: limitedParseDouble,
    Content: expectString,
    EndOffsetMillis: expectLong,
    Stable: expectBoolean,
    Type: expectString,
    VocabularyFilterMatch: expectBoolean
  });
};
var de_CallAnalyticsItemList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CallAnalyticsItem(entry, context);
  });
  return retVal;
};
var de_CallAnalyticsLanguageIdentification = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_CallAnalyticsLanguageWithScore(entry, context);
  });
  return retVal;
};
var de_CallAnalyticsLanguageWithScore = (output, context) => {
  return take(output, {
    LanguageCode: expectString,
    Score: limitedParseDouble
  });
};
var de_Entity = (output, context) => {
  return take(output, {
    Category: expectString,
    Confidence: limitedParseDouble,
    Content: expectString,
    EndTime: limitedParseDouble,
    StartTime: limitedParseDouble,
    Type: expectString
  });
};
var de_EntityList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Entity(entry, context);
  });
  return retVal;
};
var de_Item = (output, context) => {
  return take(output, {
    Confidence: limitedParseDouble,
    Content: expectString,
    EndTime: limitedParseDouble,
    Speaker: expectString,
    Stable: expectBoolean,
    StartTime: limitedParseDouble,
    Type: expectString,
    VocabularyFilterMatch: expectBoolean
  });
};
var de_ItemList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Item(entry, context);
  });
  return retVal;
};
var de_LanguageIdentification = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_LanguageWithScore(entry, context);
  });
  return retVal;
};
var de_LanguageWithScore = (output, context) => {
  return take(output, {
    LanguageCode: expectString,
    Score: limitedParseDouble
  });
};
var de_MedicalAlternative = (output, context) => {
  return take(output, {
    Entities: (_) => de_MedicalEntityList(_, context),
    Items: (_) => de_MedicalItemList(_, context),
    Transcript: expectString
  });
};
var de_MedicalAlternativeList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MedicalAlternative(entry, context);
  });
  return retVal;
};
var de_MedicalEntity = (output, context) => {
  return take(output, {
    Category: expectString,
    Confidence: limitedParseDouble,
    Content: expectString,
    EndTime: limitedParseDouble,
    StartTime: limitedParseDouble
  });
};
var de_MedicalEntityList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MedicalEntity(entry, context);
  });
  return retVal;
};
var de_MedicalItem = (output, context) => {
  return take(output, {
    Confidence: limitedParseDouble,
    Content: expectString,
    EndTime: limitedParseDouble,
    Speaker: expectString,
    StartTime: limitedParseDouble,
    Type: expectString
  });
};
var de_MedicalItemList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MedicalItem(entry, context);
  });
  return retVal;
};
var de_MedicalResult = (output, context) => {
  return take(output, {
    Alternatives: (_) => de_MedicalAlternativeList(_, context),
    ChannelId: expectString,
    EndTime: limitedParseDouble,
    IsPartial: expectBoolean,
    ResultId: expectString,
    StartTime: limitedParseDouble
  });
};
var de_MedicalResultList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MedicalResult(entry, context);
  });
  return retVal;
};
var de_MedicalScribeStreamDetails = (output, context) => {
  return take(output, {
    ChannelDefinitions: _json,
    EncryptionSettings: _json,
    LanguageCode: expectString,
    MediaEncoding: expectString,
    MediaSampleRateHertz: expectInt32,
    MedicalScribeContextProvided: expectBoolean,
    PostStreamAnalyticsResult: _json,
    PostStreamAnalyticsSettings: _json,
    ResourceAccessRoleArn: expectString,
    SessionId: expectString,
    StreamCreatedAt: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    StreamEndedAt: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    StreamStatus: expectString,
    VocabularyFilterMethod: expectString,
    VocabularyFilterName: expectString,
    VocabularyName: expectString
  });
};
var de_MedicalScribeTranscriptEvent = (output, context) => {
  return take(output, {
    TranscriptSegment: (_) => de_MedicalScribeTranscriptSegment(_, context)
  });
};
var de_MedicalScribeTranscriptItem = (output, context) => {
  return take(output, {
    BeginAudioTime: limitedParseDouble,
    Confidence: limitedParseDouble,
    Content: expectString,
    EndAudioTime: limitedParseDouble,
    Type: expectString,
    VocabularyFilterMatch: expectBoolean
  });
};
var de_MedicalScribeTranscriptItemList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_MedicalScribeTranscriptItem(entry, context);
  });
  return retVal;
};
var de_MedicalScribeTranscriptSegment = (output, context) => {
  return take(output, {
    BeginAudioTime: limitedParseDouble,
    ChannelId: expectString,
    Content: expectString,
    EndAudioTime: limitedParseDouble,
    IsPartial: expectBoolean,
    Items: (_) => de_MedicalScribeTranscriptItemList(_, context),
    SegmentId: expectString
  });
};
var de_MedicalTranscript = (output, context) => {
  return take(output, {
    Results: (_) => de_MedicalResultList(_, context)
  });
};
var de_MedicalTranscriptEvent = (output, context) => {
  return take(output, {
    Transcript: (_) => de_MedicalTranscript(_, context)
  });
};
var de_Result = (output, context) => {
  return take(output, {
    Alternatives: (_) => de_AlternativeList(_, context),
    ChannelId: expectString,
    EndTime: limitedParseDouble,
    IsPartial: expectBoolean,
    LanguageCode: expectString,
    LanguageIdentification: (_) => de_LanguageIdentification(_, context),
    ResultId: expectString,
    StartTime: limitedParseDouble
  });
};
var de_ResultList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Result(entry, context);
  });
  return retVal;
};
var de_Transcript = (output, context) => {
  return take(output, {
    Results: (_) => de_ResultList(_, context)
  });
};
var de_TranscriptEvent = (output, context) => {
  return take(output, {
    Transcript: (_) => de_Transcript(_, context)
  });
};
var de_UtteranceEvent = (output, context) => {
  return take(output, {
    BeginOffsetMillis: expectLong,
    EndOffsetMillis: expectLong,
    Entities: (_) => de_CallAnalyticsEntityList(_, context),
    IsPartial: expectBoolean,
    IssuesDetected: _json,
    Items: (_) => de_CallAnalyticsItemList(_, context),
    LanguageCode: expectString,
    LanguageIdentification: (_) => de_CallAnalyticsLanguageIdentification(_, context),
    ParticipantRole: expectString,
    Sentiment: expectString,
    Transcript: expectString,
    UtteranceId: expectString
  });
};
var deserializeMetadata = (output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var _CIT = "ContentIdentificationType";
var _CRT = "ContentRedactionType";
var _ECI = "EnableChannelIdentification";
var _EPRS = "EnablePartialResultsStabilization";
var _IL = "IdentifyLanguage";
var _IML = "IdentifyMultipleLanguages";
var _LC = "LanguageCode";
var _LMN = "LanguageModelName";
var _LO = "LanguageOptions";
var _ME = "MediaEncoding";
var _MSRH = "MediaSampleRateHertz";
var _NOC = "NumberOfChannels";
var _PET = "PiiEntityTypes";
var _PL = "PreferredLanguage";
var _PRS = "PartialResultsStability";
var _RI = "RequestId";
var _S = "Specialty";
var _SI = "SessionId";
var _SSL = "ShowSpeakerLabel";
var _T = "Type";
var _VFM = "VocabularyFilterMethod";
var _VFN = "VocabularyFilterName";
var _VFNo = "VocabularyFilterNames";
var _VN = "VocabularyName";
var _VNo = "VocabularyNames";
var _xari = "x-amzn-request-id";
var _xatcit = "x-amzn-transcribe-content-identification-type";
var _xatcrt = "x-amzn-transcribe-content-redaction-type";
var _xateci = "x-amzn-transcribe-enable-channel-identification";
var _xateprs = "x-amzn-transcribe-enable-partial-results-stabilization";
var _xatil = "x-amzn-transcribe-identify-language";
var _xatiml = "x-amzn-transcribe-identify-multiple-languages";
var _xatlc = "x-amzn-transcribe-language-code";
var _xatlmn = "x-amzn-transcribe-language-model-name";
var _xatlo = "x-amzn-transcribe-language-options";
var _xatme = "x-amzn-transcribe-media-encoding";
var _xatnoc = "x-amzn-transcribe-number-of-channels";
var _xatpet = "x-amzn-transcribe-pii-entity-types";
var _xatpl = "x-amzn-transcribe-preferred-language";
var _xatprs = "x-amzn-transcribe-partial-results-stability";
var _xats = "x-amzn-transcribe-specialty";
var _xatsi = "x-amzn-transcribe-session-id";
var _xatsr = "x-amzn-transcribe-sample-rate";
var _xatssl = "x-amzn-transcribe-show-speaker-label";
var _xatt = "x-amzn-transcribe-type";
var _xatvfm = "x-amzn-transcribe-vocabulary-filter-method";
var _xatvfn = "x-amzn-transcribe-vocabulary-filter-name";
var _xatvfn_ = "x-amzn-transcribe-vocabulary-filter-names";
var _xatvn = "x-amzn-transcribe-vocabulary-name";
var _xatvn_ = "x-amzn-transcribe-vocabulary-names";

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/commands/GetMedicalScribeStreamCommand.js
var GetMedicalScribeStreamCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("Transcribe", "GetMedicalScribeStream", {}).n("TranscribeStreamingClient", "GetMedicalScribeStreamCommand").f(void 0, void 0).ser(se_GetMedicalScribeStreamCommand).de(de_GetMedicalScribeStreamCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/commands/StartCallAnalyticsStreamTranscriptionCommand.js
var StartCallAnalyticsStreamTranscriptionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getEventStreamPlugin(config),
    getWebSocketPlugin(config, {
      headerPrefix: "x-amzn-transcribe-"
    }),
    getTranscribeStreamingPlugin(config)
  ];
}).s("Transcribe", "StartCallAnalyticsStreamTranscription", {
  eventStream: {
    input: true,
    output: true
  }
}).n("TranscribeStreamingClient", "StartCallAnalyticsStreamTranscriptionCommand").f(StartCallAnalyticsStreamTranscriptionRequestFilterSensitiveLog, StartCallAnalyticsStreamTranscriptionResponseFilterSensitiveLog).ser(se_StartCallAnalyticsStreamTranscriptionCommand).de(de_StartCallAnalyticsStreamTranscriptionCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/commands/StartMedicalScribeStreamCommand.js
var StartMedicalScribeStreamCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getEventStreamPlugin(config),
    getWebSocketPlugin(config, {
      headerPrefix: "x-amzn-transcribe-"
    }),
    getTranscribeStreamingPlugin(config)
  ];
}).s("Transcribe", "StartMedicalScribeStream", {
  eventStream: {
    input: true,
    output: true
  }
}).n("TranscribeStreamingClient", "StartMedicalScribeStreamCommand").f(StartMedicalScribeStreamRequestFilterSensitiveLog, StartMedicalScribeStreamResponseFilterSensitiveLog).ser(se_StartMedicalScribeStreamCommand).de(de_StartMedicalScribeStreamCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/commands/StartMedicalStreamTranscriptionCommand.js
var StartMedicalStreamTranscriptionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getEventStreamPlugin(config),
    getWebSocketPlugin(config, {
      headerPrefix: "x-amzn-transcribe-"
    }),
    getTranscribeStreamingPlugin(config)
  ];
}).s("Transcribe", "StartMedicalStreamTranscription", {
  eventStream: {
    input: true,
    output: true
  }
}).n("TranscribeStreamingClient", "StartMedicalStreamTranscriptionCommand").f(StartMedicalStreamTranscriptionRequestFilterSensitiveLog, StartMedicalStreamTranscriptionResponseFilterSensitiveLog).ser(se_StartMedicalStreamTranscriptionCommand).de(de_StartMedicalStreamTranscriptionCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/commands/StartStreamTranscriptionCommand.js
var StartStreamTranscriptionCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getEventStreamPlugin(config),
    getWebSocketPlugin(config, {
      headerPrefix: "x-amzn-transcribe-"
    }),
    getTranscribeStreamingPlugin(config)
  ];
}).s("Transcribe", "StartStreamTranscription", {
  eventStream: {
    input: true,
    output: true
  }
}).n("TranscribeStreamingClient", "StartStreamTranscriptionCommand").f(StartStreamTranscriptionRequestFilterSensitiveLog, StartStreamTranscriptionResponseFilterSensitiveLog).ser(se_StartStreamTranscriptionCommand).de(de_StartStreamTranscriptionCommand).build() {
};

// node_modules/@aws-sdk/client-transcribe-streaming/dist-es/TranscribeStreaming.js
var commands = {
  GetMedicalScribeStreamCommand,
  StartCallAnalyticsStreamTranscriptionCommand,
  StartMedicalScribeStreamCommand,
  StartMedicalStreamTranscriptionCommand,
  StartStreamTranscriptionCommand
};
var TranscribeStreaming = class extends TranscribeStreamingClient {
};
createAggregatedClient(commands, TranscribeStreaming);
export {
  Command as $Command,
  AudioStream,
  AudioStreamFilterSensitiveLog,
  BadRequestException,
  CallAnalyticsLanguageCode,
  CallAnalyticsTranscriptResultStream,
  CallAnalyticsTranscriptResultStreamFilterSensitiveLog,
  ClinicalNoteGenerationStatus,
  ConflictException,
  ContentIdentificationType,
  ContentRedactionOutput,
  ContentRedactionType,
  GetMedicalScribeStreamCommand,
  InternalFailureException,
  ItemType,
  LanguageCode,
  LimitExceededException,
  MediaEncoding,
  MedicalContentIdentificationType,
  MedicalScribeConfigurationEventFilterSensitiveLog,
  MedicalScribeContextFilterSensitiveLog,
  MedicalScribeInputStream,
  MedicalScribeInputStreamFilterSensitiveLog,
  MedicalScribeLanguageCode,
  MedicalScribeMediaEncoding,
  MedicalScribeNoteTemplate,
  MedicalScribeParticipantRole,
  MedicalScribePatientContextFilterSensitiveLog,
  MedicalScribeResultStream,
  MedicalScribeResultStreamFilterSensitiveLog,
  MedicalScribeSessionControlEventType,
  MedicalScribeStreamStatus,
  MedicalScribeTranscriptItemType,
  MedicalScribeVocabularyFilterMethod,
  MedicalTranscriptResultStream,
  MedicalTranscriptResultStreamFilterSensitiveLog,
  PartialResultsStability,
  ParticipantRole,
  Pronouns,
  ResourceNotFoundException,
  Sentiment,
  ServiceUnavailableException,
  Specialty,
  StartCallAnalyticsStreamTranscriptionCommand,
  StartCallAnalyticsStreamTranscriptionRequestFilterSensitiveLog,
  StartCallAnalyticsStreamTranscriptionResponseFilterSensitiveLog,
  StartMedicalScribeStreamCommand,
  StartMedicalScribeStreamRequestFilterSensitiveLog,
  StartMedicalScribeStreamResponseFilterSensitiveLog,
  StartMedicalStreamTranscriptionCommand,
  StartMedicalStreamTranscriptionRequestFilterSensitiveLog,
  StartMedicalStreamTranscriptionResponseFilterSensitiveLog,
  StartStreamTranscriptionCommand,
  StartStreamTranscriptionRequestFilterSensitiveLog,
  StartStreamTranscriptionResponseFilterSensitiveLog,
  TranscribeStreaming,
  TranscribeStreamingClient,
  TranscribeStreamingServiceException,
  TranscriptResultStream,
  TranscriptResultStreamFilterSensitiveLog,
  Type,
  VocabularyFilterMethod,
  Client as __Client
};
//# sourceMappingURL=@aws-sdk_client-transcribe-streaming.js.map
