import {
  Client,
  Command,
  DEFAULT_MAX_ATTEMPTS,
  DEFAULT_RETRY_MODE,
  DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT,
  DefaultIdentityProviderConfig,
  EndpointCache,
  FetchHttpHandler,
  HttpBearerAuthSigner,
  NoOpLogger,
  SENSITIVE_STRING,
  ServiceException,
  Sha256,
  SignatureV4,
  WebSocketFetchHandler,
  _json,
  bowser_default,
  calculateBodyLength,
  collectBody,
  createAggregatedClient,
  createPaginator,
  customEndpointFunctions,
  decorateServiceException,
  doesIdentityRequireRefresh,
  eventStreamPayloadHandlerProvider,
  eventStreamSerdeProvider,
  expectBoolean,
  expectInt32,
  expectNonNull,
  expectObject,
  expectString,
  expectUnion,
  fromBase64,
  getContentLengthPlugin,
  getDefaultExtensionConfiguration,
  getEndpointPlugin,
  getEventStreamPlugin,
  getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpSigningPlugin,
  getRetryPlugin,
  getSerdePlugin,
  getWebSocketPlugin,
  invalidProvider,
  isIdentityExpired,
  isIpAddress,
  isSerializableHeaderValue,
  isValidHostLabel,
  limitedParseDouble,
  loadConfigsForDefaultMode,
  map,
  memoizeIdentityProvider,
  normalizeProvider as normalizeProvider2,
  parseRfc3339DateTimeWithOffset,
  parseUrl,
  requestBuilder,
  resolveDefaultRuntimeConfig,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveEventStreamConfig,
  resolveEventStreamSerdeConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  resolveWebSocketConfig,
  serializeDateTime,
  serializeFloat,
  streamCollector,
  take,
  toBase64,
  v4,
  withBaseException
} from "./chunk-44FJFDGY.js";
import {
  HttpRequest,
  HttpResponse,
  fromUtf8,
  getHttpHandlerExtensionConfiguration,
  getSmithyContext,
  normalizeProvider,
  resolveHttpHandlerRuntimeConfig,
  toUtf8
} from "./chunk-67QOBIWR.js";
import "./chunk-PLDDJCW6.js";

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js
function resolveHostHeaderConfig(input) {
  return input;
}
var hostHeaderMiddleware = (options) => (next) => async (args) => {
  if (!HttpRequest.isInstance(args.request))
    return next(args);
  const { request } = args;
  const { handlerProtocol = "" } = options.requestHandler.metadata || {};
  if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
    delete request.headers["host"];
    request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
  } else if (!request.headers["host"]) {
    let host = request.hostname;
    if (request.port != null)
      host += `:${request.port}`;
    request.headers["host"] = host;
  }
  return next(args);
};
var hostHeaderMiddlewareOptions = {
  name: "hostHeaderMiddleware",
  step: "build",
  priority: "low",
  tags: ["HOST"],
  override: true
};
var getHostHeaderPlugin = (options) => ({
  applyToStack: (clientStack) => {
    clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js
var loggerMiddleware = () => (next, context) => async (args) => {
  try {
    const response = await next(args);
    const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
    const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
    const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
    const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
    const { $metadata, ...outputWithoutMetadata } = response.output;
    logger?.info?.({
      clientName,
      commandName,
      input: inputFilterSensitiveLog(args.input),
      output: outputFilterSensitiveLog(outputWithoutMetadata),
      metadata: $metadata
    });
    return response;
  } catch (error) {
    const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
    const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
    const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
    logger?.error?.({
      clientName,
      commandName,
      input: inputFilterSensitiveLog(args.input),
      error,
      metadata: error.$metadata
    });
    throw error;
  }
};
var loggerMiddlewareOptions = {
  name: "loggerMiddleware",
  tags: ["LOGGER"],
  step: "initialize",
  override: true
};
var getLoggerPlugin = (options) => ({
  applyToStack: (clientStack) => {
    clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/configuration.js
var recursionDetectionMiddlewareOptions = {
  step: "build",
  tags: ["RECURSION_DETECTION"],
  name: "recursionDetectionMiddleware",
  override: true,
  priority: "low"
};

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/recursionDetectionMiddleware.browser.js
var recursionDetectionMiddleware = () => (next) => async (args) => next(args);

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/getRecursionDetectionPlugin.js
var getRecursionDetectionPlugin = (options) => ({
  applyToStack: (clientStack) => {
    clientStack.add(recursionDetectionMiddleware(), recursionDetectionMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js
var DEFAULT_UA_APP_ID = void 0;
function isValidUserAgentAppId(appId) {
  if (appId === void 0) {
    return true;
  }
  return typeof appId === "string" && appId.length <= 50;
}
function resolveUserAgentConfig(input) {
  const normalizedAppIdProvider = normalizeProvider2(input.userAgentAppId ?? DEFAULT_UA_APP_ID);
  const { customUserAgent } = input;
  return Object.assign(input, {
    customUserAgent: typeof customUserAgent === "string" ? [[customUserAgent]] : customUserAgent,
    userAgentAppId: async () => {
      const appId = await normalizedAppIdProvider();
      if (!isValidUserAgentAppId(appId)) {
        const logger = input.logger?.constructor?.name === "NoOpLogger" || !input.logger ? console : input.logger;
        if (typeof appId !== "string") {
          logger?.warn("userAgentAppId must be a string or undefined.");
        } else if (appId.length > 50) {
          logger?.warn("The provided userAgentAppId exceeds the maximum length of 50 characters.");
        }
      }
      return appId;
    }
  });
}

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js
var isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
  if (allowSubDomains) {
    for (const label of value.split(".")) {
      if (!isVirtualHostableS3Bucket(label)) {
        return false;
      }
    }
    return true;
  }
  if (!isValidHostLabel(value)) {
    return false;
  }
  if (value.length < 3 || value.length > 63) {
    return false;
  }
  if (value !== value.toLowerCase()) {
    return false;
  }
  if (isIpAddress(value)) {
    return false;
  }
  return true;
};

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js
var ARN_DELIMITER = ":";
var RESOURCE_DELIMITER = "/";
var parseArn = (value) => {
  const segments = value.split(ARN_DELIMITER);
  if (segments.length < 6)
    return null;
  const [arn, partition2, service, region, accountId, ...resourcePath] = segments;
  if (arn !== "arn" || partition2 === "" || service === "" || resourcePath.join(ARN_DELIMITER) === "")
    return null;
  const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER)).flat();
  return {
    partition: partition2,
    service,
    region,
    accountId,
    resourceId
  };
};

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json
var partitions_default = {
  partitions: [{
    id: "aws",
    outputs: {
      dnsSuffix: "amazonaws.com",
      dualStackDnsSuffix: "api.aws",
      implicitGlobalRegion: "us-east-1",
      name: "aws",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$",
    regions: {
      "af-south-1": {
        description: "Africa (Cape Town)"
      },
      "ap-east-1": {
        description: "Asia Pacific (Hong Kong)"
      },
      "ap-east-2": {
        description: "Asia Pacific (Taipei)"
      },
      "ap-northeast-1": {
        description: "Asia Pacific (Tokyo)"
      },
      "ap-northeast-2": {
        description: "Asia Pacific (Seoul)"
      },
      "ap-northeast-3": {
        description: "Asia Pacific (Osaka)"
      },
      "ap-south-1": {
        description: "Asia Pacific (Mumbai)"
      },
      "ap-south-2": {
        description: "Asia Pacific (Hyderabad)"
      },
      "ap-southeast-1": {
        description: "Asia Pacific (Singapore)"
      },
      "ap-southeast-2": {
        description: "Asia Pacific (Sydney)"
      },
      "ap-southeast-3": {
        description: "Asia Pacific (Jakarta)"
      },
      "ap-southeast-4": {
        description: "Asia Pacific (Melbourne)"
      },
      "ap-southeast-5": {
        description: "Asia Pacific (Malaysia)"
      },
      "ap-southeast-6": {
        description: "Asia Pacific (New Zealand)"
      },
      "ap-southeast-7": {
        description: "Asia Pacific (Thailand)"
      },
      "aws-global": {
        description: "aws global region"
      },
      "ca-central-1": {
        description: "Canada (Central)"
      },
      "ca-west-1": {
        description: "Canada West (Calgary)"
      },
      "eu-central-1": {
        description: "Europe (Frankfurt)"
      },
      "eu-central-2": {
        description: "Europe (Zurich)"
      },
      "eu-north-1": {
        description: "Europe (Stockholm)"
      },
      "eu-south-1": {
        description: "Europe (Milan)"
      },
      "eu-south-2": {
        description: "Europe (Spain)"
      },
      "eu-west-1": {
        description: "Europe (Ireland)"
      },
      "eu-west-2": {
        description: "Europe (London)"
      },
      "eu-west-3": {
        description: "Europe (Paris)"
      },
      "il-central-1": {
        description: "Israel (Tel Aviv)"
      },
      "me-central-1": {
        description: "Middle East (UAE)"
      },
      "me-south-1": {
        description: "Middle East (Bahrain)"
      },
      "mx-central-1": {
        description: "Mexico (Central)"
      },
      "sa-east-1": {
        description: "South America (Sao Paulo)"
      },
      "us-east-1": {
        description: "US East (N. Virginia)"
      },
      "us-east-2": {
        description: "US East (Ohio)"
      },
      "us-west-1": {
        description: "US West (N. California)"
      },
      "us-west-2": {
        description: "US West (Oregon)"
      }
    }
  }, {
    id: "aws-cn",
    outputs: {
      dnsSuffix: "amazonaws.com.cn",
      dualStackDnsSuffix: "api.amazonwebservices.com.cn",
      implicitGlobalRegion: "cn-northwest-1",
      name: "aws-cn",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^cn\\-\\w+\\-\\d+$",
    regions: {
      "aws-cn-global": {
        description: "aws-cn global region"
      },
      "cn-north-1": {
        description: "China (Beijing)"
      },
      "cn-northwest-1": {
        description: "China (Ningxia)"
      }
    }
  }, {
    id: "aws-eusc",
    outputs: {
      dnsSuffix: "amazonaws.eu",
      dualStackDnsSuffix: "api.amazonwebservices.eu",
      implicitGlobalRegion: "eusc-de-east-1",
      name: "aws-eusc",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^eusc\\-(de)\\-\\w+\\-\\d+$",
    regions: {
      "eusc-de-east-1": {
        description: "EU (Germany)"
      }
    }
  }, {
    id: "aws-iso",
    outputs: {
      dnsSuffix: "c2s.ic.gov",
      dualStackDnsSuffix: "api.aws.ic.gov",
      implicitGlobalRegion: "us-iso-east-1",
      name: "aws-iso",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
    regions: {
      "aws-iso-global": {
        description: "aws-iso global region"
      },
      "us-iso-east-1": {
        description: "US ISO East"
      },
      "us-iso-west-1": {
        description: "US ISO WEST"
      }
    }
  }, {
    id: "aws-iso-b",
    outputs: {
      dnsSuffix: "sc2s.sgov.gov",
      dualStackDnsSuffix: "api.aws.scloud",
      implicitGlobalRegion: "us-isob-east-1",
      name: "aws-iso-b",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
    regions: {
      "aws-iso-b-global": {
        description: "aws-iso-b global region"
      },
      "us-isob-east-1": {
        description: "US ISOB East (Ohio)"
      }
    }
  }, {
    id: "aws-iso-e",
    outputs: {
      dnsSuffix: "cloud.adc-e.uk",
      dualStackDnsSuffix: "api.cloud-aws.adc-e.uk",
      implicitGlobalRegion: "eu-isoe-west-1",
      name: "aws-iso-e",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
    regions: {
      "aws-iso-e-global": {
        description: "aws-iso-e global region"
      },
      "eu-isoe-west-1": {
        description: "EU ISOE West"
      }
    }
  }, {
    id: "aws-iso-f",
    outputs: {
      dnsSuffix: "csp.hci.ic.gov",
      dualStackDnsSuffix: "api.aws.hci.ic.gov",
      implicitGlobalRegion: "us-isof-south-1",
      name: "aws-iso-f",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
    regions: {
      "aws-iso-f-global": {
        description: "aws-iso-f global region"
      },
      "us-isof-east-1": {
        description: "US ISOF EAST"
      },
      "us-isof-south-1": {
        description: "US ISOF SOUTH"
      }
    }
  }, {
    id: "aws-us-gov",
    outputs: {
      dnsSuffix: "amazonaws.com",
      dualStackDnsSuffix: "api.aws",
      implicitGlobalRegion: "us-gov-west-1",
      name: "aws-us-gov",
      supportsDualStack: true,
      supportsFIPS: true
    },
    regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
    regions: {
      "aws-us-gov-global": {
        description: "aws-us-gov global region"
      },
      "us-gov-east-1": {
        description: "AWS GovCloud (US-East)"
      },
      "us-gov-west-1": {
        description: "AWS GovCloud (US-West)"
      }
    }
  }],
  version: "1.1"
};

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js
var selectedPartitionsInfo = partitions_default;
var selectedUserAgentPrefix = "";
var partition = (value) => {
  const { partitions } = selectedPartitionsInfo;
  for (const partition2 of partitions) {
    const { regions, outputs } = partition2;
    for (const [region, regionData] of Object.entries(regions)) {
      if (region === value) {
        return {
          ...outputs,
          ...regionData
        };
      }
    }
  }
  for (const partition2 of partitions) {
    const { regionRegex, outputs } = partition2;
    if (new RegExp(regionRegex).test(value)) {
      return {
        ...outputs
      };
    }
  }
  const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
  if (!DEFAULT_PARTITION) {
    throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
  }
  return {
    ...DEFAULT_PARTITION.outputs
  };
};
var getUserAgentPrefix = () => selectedUserAgentPrefix;

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/util-endpoints/dist-es/aws.js
var awsEndpointFunctions = {
  isVirtualHostableS3Bucket,
  parseArn,
  partition
};
customEndpointFunctions.aws = awsEndpointFunctions;

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js
function setCredentialFeature(credentials, feature, value) {
  if (!credentials.$source) {
    credentials.$source = {};
  }
  credentials.$source[feature] = value;
  return credentials;
}

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js
function setFeature(context, feature, value) {
  if (!context.__aws_sdk_context) {
    context.__aws_sdk_context = {
      features: {}
    };
  } else if (!context.__aws_sdk_context.features) {
    context.__aws_sdk_context.features = {};
  }
  context.__aws_sdk_context.features[feature] = value;
}

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js
var getDateHeader = (response) => HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : void 0;

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js
var isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5;

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
  const clockTimeInMs = Date.parse(clockTime);
  if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
    return clockTimeInMs - Date.now();
  }
  return currentSystemClockOffset;
};

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js
var throwSigningPropertyError = (name, property) => {
  if (!property) {
    throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
  }
  return property;
};
var validateSigningProperties = async (signingProperties) => {
  const context = throwSigningPropertyError("context", signingProperties.context);
  const config = throwSigningPropertyError("config", signingProperties.config);
  const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
  const signerFunction = throwSigningPropertyError("signer", config.signer);
  const signer = await signerFunction(authScheme);
  const signingRegion = signingProperties?.signingRegion;
  const signingRegionSet = signingProperties?.signingRegionSet;
  const signingName = signingProperties?.signingName;
  return {
    config,
    signer,
    signingRegion,
    signingRegionSet,
    signingName
  };
};
var AwsSdkSigV4Signer = class {
  async sign(httpRequest, identity, signingProperties) {
    if (!HttpRequest.isInstance(httpRequest)) {
      throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
    }
    const validatedProps = await validateSigningProperties(signingProperties);
    const { config, signer } = validatedProps;
    let { signingRegion, signingName } = validatedProps;
    const handlerExecutionContext = signingProperties.context;
    if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {
      const [first, second] = handlerExecutionContext.authSchemes;
      if (first?.name === "sigv4a" && second?.name === "sigv4") {
        signingRegion = second?.signingRegion ?? signingRegion;
        signingName = second?.signingName ?? signingName;
      }
    }
    const signedRequest = await signer.sign(httpRequest, {
      signingDate: getSkewCorrectedDate(config.systemClockOffset),
      signingRegion,
      signingService: signingName
    });
    return signedRequest;
  }
  errorHandler(signingProperties) {
    return (error) => {
      const serverTime = error.ServerTime ?? getDateHeader(error.$response);
      if (serverTime) {
        const config = throwSigningPropertyError("config", signingProperties.config);
        const initialSystemClockOffset = config.systemClockOffset;
        config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);
        const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;
        if (clockSkewCorrected && error.$metadata) {
          error.$metadata.clockSkewCorrected = true;
        }
      }
      throw error;
    };
  }
  successHandler(httpResponse, signingProperties) {
    const dateHeader = getDateHeader(httpResponse);
    if (dateHeader) {
      const config = throwSigningPropertyError("config", signingProperties.config);
      config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);
    }
  }
};

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js
var resolveAwsSdkSigV4Config = (config) => {
  let inputCredentials = config.credentials;
  let isUserSupplied = !!config.credentials;
  let resolvedCredentials = void 0;
  Object.defineProperty(config, "credentials", {
    set(credentials) {
      if (credentials && credentials !== inputCredentials && credentials !== resolvedCredentials) {
        isUserSupplied = true;
      }
      inputCredentials = credentials;
      const memoizedProvider = normalizeCredentialProvider(config, {
        credentials: inputCredentials,
        credentialDefaultProvider: config.credentialDefaultProvider
      });
      const boundProvider = bindCallerConfig(config, memoizedProvider);
      if (isUserSupplied && !boundProvider.attributed) {
        resolvedCredentials = async (options) => boundProvider(options).then((creds) => setCredentialFeature(creds, "CREDENTIALS_CODE", "e"));
        resolvedCredentials.memoized = boundProvider.memoized;
        resolvedCredentials.configBound = boundProvider.configBound;
        resolvedCredentials.attributed = true;
      } else {
        resolvedCredentials = boundProvider;
      }
    },
    get() {
      return resolvedCredentials;
    },
    enumerable: true,
    configurable: true
  });
  config.credentials = inputCredentials;
  const { signingEscapePath = true, systemClockOffset = config.systemClockOffset || 0, sha256 } = config;
  let signer;
  if (config.signer) {
    signer = normalizeProvider2(config.signer);
  } else if (config.regionInfoProvider) {
    signer = () => normalizeProvider2(config.region)().then(async (region) => [
      await config.regionInfoProvider(region, {
        useFipsEndpoint: await config.useFipsEndpoint(),
        useDualstackEndpoint: await config.useDualstackEndpoint()
      }) || {},
      region
    ]).then(([regionInfo, region]) => {
      const { signingRegion, signingService } = regionInfo;
      config.signingRegion = config.signingRegion || signingRegion || region;
      config.signingName = config.signingName || signingService || config.serviceId;
      const params = {
        ...config,
        credentials: config.credentials,
        region: config.signingRegion,
        service: config.signingName,
        sha256,
        uriEscapePath: signingEscapePath
      };
      const SignerCtor = config.signerConstructor || SignatureV4;
      return new SignerCtor(params);
    });
  } else {
    signer = async (authScheme) => {
      authScheme = Object.assign({}, {
        name: "sigv4",
        signingName: config.signingName || config.defaultSigningName,
        signingRegion: await normalizeProvider2(config.region)(),
        properties: {}
      }, authScheme);
      const signingRegion = authScheme.signingRegion;
      const signingService = authScheme.signingName;
      config.signingRegion = config.signingRegion || signingRegion;
      config.signingName = config.signingName || signingService || config.serviceId;
      const params = {
        ...config,
        credentials: config.credentials,
        region: config.signingRegion,
        service: config.signingName,
        sha256,
        uriEscapePath: signingEscapePath
      };
      const SignerCtor = config.signerConstructor || SignatureV4;
      return new SignerCtor(params);
    };
  }
  const resolvedConfig = Object.assign(config, {
    systemClockOffset,
    signingEscapePath,
    signer
  });
  return resolvedConfig;
};
function normalizeCredentialProvider(config, { credentials, credentialDefaultProvider }) {
  let credentialsProvider;
  if (credentials) {
    if (!credentials?.memoized) {
      credentialsProvider = memoizeIdentityProvider(credentials, isIdentityExpired, doesIdentityRequireRefresh);
    } else {
      credentialsProvider = credentials;
    }
  } else {
    if (credentialDefaultProvider) {
      credentialsProvider = normalizeProvider2(credentialDefaultProvider(Object.assign({}, config, {
        parentClientConfig: config
      })));
    } else {
      credentialsProvider = async () => {
        throw new Error("@aws-sdk/core::resolveAwsSdkSigV4Config - `credentials` not provided and no credentialDefaultProvider was configured.");
      };
    }
  }
  credentialsProvider.memoized = true;
  return credentialsProvider;
}
function bindCallerConfig(config, credentialsProvider) {
  if (credentialsProvider.configBound) {
    return credentialsProvider;
  }
  const fn = async (options) => credentialsProvider({ ...options, callerClientConfig: config });
  fn.memoized = credentialsProvider.memoized;
  fn.configBound = true;
  return fn;
}

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js
var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => (context?.utf8Encoder ?? toUtf8)(body));

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js
var parseJsonBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    try {
      return JSON.parse(encoded);
    } catch (e2) {
      if (e2?.name === "SyntaxError") {
        Object.defineProperty(e2, "$responseBodyText", {
          value: encoded
        });
      }
      throw e2;
    }
  }
  return {};
});
var parseJsonErrorBody = async (errorBody, context) => {
  const value = await parseJsonBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
};
var loadRestJsonErrorCode = (output, data) => {
  const findKey = (object, key) => Object.keys(object).find((k2) => k2.toLowerCase() === key.toLowerCase());
  const sanitizeErrorCode = (rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data && typeof data === "object") {
    const codeKey = findKey(data, "code");
    if (codeKey && data[codeKey] !== void 0) {
      return sanitizeErrorCode(data[codeKey]);
    }
    if (data["__type"] !== void 0) {
      return sanitizeErrorCode(data["__type"]);
    }
  }
};

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/jsonReplacer.js
var NUMERIC_CONTROL_CHAR = String.fromCharCode(925);

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js
var awsExpectUnion = (value) => {
  if (value == null) {
    return void 0;
  }
  if (typeof value === "object" && "__type" in value) {
    delete value.__type;
  }
  return expectUnion(value);
};

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/xml-builder/dist-es/xml-parser.browser.js
var parser = new DOMParser();

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-user-agent/dist-es/check-features.js
var ACCOUNT_ID_ENDPOINT_REGEX = /\d{12}\.ddb/;
async function checkFeatures(context, config, args) {
  const request = args.request;
  if (request?.headers?.["smithy-protocol"] === "rpc-v2-cbor") {
    setFeature(context, "PROTOCOL_RPC_V2_CBOR", "M");
  }
  if (typeof config.retryStrategy === "function") {
    const retryStrategy = await config.retryStrategy();
    if (typeof retryStrategy.acquireInitialRetryToken === "function") {
      if (retryStrategy.constructor?.name?.includes("Adaptive")) {
        setFeature(context, "RETRY_MODE_ADAPTIVE", "F");
      } else {
        setFeature(context, "RETRY_MODE_STANDARD", "E");
      }
    } else {
      setFeature(context, "RETRY_MODE_LEGACY", "D");
    }
  }
  if (typeof config.accountIdEndpointMode === "function") {
    const endpointV2 = context.endpointV2;
    if (String(endpointV2?.url?.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX)) {
      setFeature(context, "ACCOUNT_ID_ENDPOINT", "O");
    }
    switch (await config.accountIdEndpointMode?.()) {
      case "disabled":
        setFeature(context, "ACCOUNT_ID_MODE_DISABLED", "Q");
        break;
      case "preferred":
        setFeature(context, "ACCOUNT_ID_MODE_PREFERRED", "P");
        break;
      case "required":
        setFeature(context, "ACCOUNT_ID_MODE_REQUIRED", "R");
        break;
    }
  }
  const identity = context.__smithy_context?.selectedHttpAuthScheme?.identity;
  if (identity?.$source) {
    const credentials = identity;
    if (credentials.accountId) {
      setFeature(context, "RESOLVED_ACCOUNT_ID", "T");
    }
    for (const [key, value] of Object.entries(credentials.$source ?? {})) {
      setFeature(context, key, value);
    }
  }
}

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js
var USER_AGENT = "user-agent";
var X_AMZ_USER_AGENT = "x-amz-user-agent";
var SPACE = " ";
var UA_NAME_SEPARATOR = "/";
var UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
var UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
var UA_ESCAPE_CHAR = "-";

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-user-agent/dist-es/encode-features.js
var BYTE_LIMIT = 1024;
function encodeFeatures(features) {
  let buffer = "";
  for (const key in features) {
    const val = features[key];
    if (buffer.length + val.length + 1 <= BYTE_LIMIT) {
      if (buffer.length) {
        buffer += "," + val;
      } else {
        buffer += val;
      }
      continue;
    }
    break;
  }
  return buffer;
}

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js
var userAgentMiddleware = (options) => (next, context) => async (args) => {
  const { request } = args;
  if (!HttpRequest.isInstance(request)) {
    return next(args);
  }
  const { headers } = request;
  const userAgent = context?.userAgent?.map(escapeUserAgent) || [];
  const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
  await checkFeatures(context, options, args);
  const awsContext = context;
  defaultUserAgent.push(`m/${encodeFeatures(Object.assign({}, context.__smithy_context?.features, awsContext.__aws_sdk_context?.features))}`);
  const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];
  const appId = await options.userAgentAppId();
  if (appId) {
    defaultUserAgent.push(escapeUserAgent([`app/${appId}`]));
  }
  const prefix = getUserAgentPrefix();
  const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(SPACE);
  const normalUAValue = [
    ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
    ...customUserAgent
  ].join(SPACE);
  if (options.runtime !== "browser") {
    if (normalUAValue) {
      headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
    }
    headers[USER_AGENT] = sdkUserAgentValue;
  } else {
    headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
  }
  return next({
    ...args,
    request
  });
};
var escapeUserAgent = (userAgentPair) => {
  const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
  const version = userAgentPair[1]?.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
  const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
  const prefix = name.substring(0, prefixSeparatorIndex);
  let uaName = name.substring(prefixSeparatorIndex + 1);
  if (prefix === "api") {
    uaName = uaName.toLowerCase();
  }
  return [prefix, uaName, version].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
    switch (index) {
      case 0:
        return item;
      case 1:
        return `${acc}/${item}`;
      default:
        return `${acc}#${item}`;
    }
  }, "");
};
var getUserAgentMiddlewareOptions = {
  name: "getUserAgentMiddleware",
  step: "build",
  priority: "low",
  tags: ["SET_USER_AGENT", "USER_AGENT"],
  override: true
};
var getUserAgentPlugin = (config) => ({
  applyToStack: (clientStack) => {
    clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
  }
});

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/auth/httpAuthSchemeProvider.js
var defaultBedrockRuntimeHttpAuthSchemeParametersProvider = async (config, context, input) => {
  return {
    operation: getSmithyContext(context).operation,
    region: await normalizeProvider(config.region)() || (() => {
      throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
    })()
  };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "bedrock",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
function createSmithyApiHttpBearerAuthHttpAuthOption(authParameters) {
  return {
    schemeId: "smithy.api#httpBearerAuth",
    propertiesExtractor: ({ profile, filepath, configFilepath, ignoreCache }, context) => ({
      identityProperties: {
        profile,
        filepath,
        configFilepath,
        ignoreCache
      }
    })
  };
}
var defaultBedrockRuntimeHttpAuthSchemeProvider = (authParameters) => {
  const options = [];
  switch (authParameters.operation) {
    default: {
      options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
      options.push(createSmithyApiHttpBearerAuthHttpAuthOption(authParameters));
    }
  }
  return options;
};
var resolveHttpAuthSchemeConfig = (config) => {
  const token = memoizeIdentityProvider(config.token, isIdentityExpired, doesIdentityRequireRefresh);
  const config_0 = resolveAwsSdkSigV4Config(config);
  return Object.assign(config_0, {
    authSchemePreference: normalizeProvider(config.authSchemePreference ?? []),
    token
  });
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  return Object.assign(options, {
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "bedrock"
  });
};
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// node_modules/@aws-sdk/client-bedrock-runtime/package.json
var package_default = {
  name: "@aws-sdk/client-bedrock-runtime",
  description: "AWS SDK for JavaScript Bedrock Runtime Client for Node.js, Browser and React Native",
  version: "3.899.0",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "node ../../scripts/compilation/inline client-bedrock-runtime",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo bedrock-runtime"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "5.2.0",
    "@aws-crypto/sha256-js": "5.2.0",
    "@aws-sdk/core": "3.899.0",
    "@aws-sdk/credential-provider-node": "3.899.0",
    "@aws-sdk/eventstream-handler-node": "3.893.0",
    "@aws-sdk/middleware-eventstream": "3.893.0",
    "@aws-sdk/middleware-host-header": "3.893.0",
    "@aws-sdk/middleware-logger": "3.893.0",
    "@aws-sdk/middleware-recursion-detection": "3.893.0",
    "@aws-sdk/middleware-user-agent": "3.899.0",
    "@aws-sdk/middleware-websocket": "3.893.0",
    "@aws-sdk/region-config-resolver": "3.893.0",
    "@aws-sdk/token-providers": "3.899.0",
    "@aws-sdk/types": "3.893.0",
    "@aws-sdk/util-endpoints": "3.895.0",
    "@aws-sdk/util-user-agent-browser": "3.893.0",
    "@aws-sdk/util-user-agent-node": "3.899.0",
    "@smithy/config-resolver": "^4.2.2",
    "@smithy/core": "^3.13.0",
    "@smithy/eventstream-serde-browser": "^4.1.1",
    "@smithy/eventstream-serde-config-resolver": "^4.2.1",
    "@smithy/eventstream-serde-node": "^4.1.1",
    "@smithy/fetch-http-handler": "^5.2.1",
    "@smithy/hash-node": "^4.1.1",
    "@smithy/invalid-dependency": "^4.1.1",
    "@smithy/middleware-content-length": "^4.1.1",
    "@smithy/middleware-endpoint": "^4.2.5",
    "@smithy/middleware-retry": "^4.3.1",
    "@smithy/middleware-serde": "^4.1.1",
    "@smithy/middleware-stack": "^4.1.1",
    "@smithy/node-config-provider": "^4.2.2",
    "@smithy/node-http-handler": "^4.2.1",
    "@smithy/protocol-http": "^5.2.1",
    "@smithy/smithy-client": "^4.6.5",
    "@smithy/types": "^4.5.0",
    "@smithy/url-parser": "^4.1.1",
    "@smithy/util-base64": "^4.1.0",
    "@smithy/util-body-length-browser": "^4.1.0",
    "@smithy/util-body-length-node": "^4.1.0",
    "@smithy/util-defaults-mode-browser": "^4.1.5",
    "@smithy/util-defaults-mode-node": "^4.1.5",
    "@smithy/util-endpoints": "^3.1.2",
    "@smithy/util-middleware": "^4.1.1",
    "@smithy/util-retry": "^4.1.2",
    "@smithy/util-stream": "^4.3.2",
    "@smithy/util-utf8": "^4.1.0",
    "@smithy/uuid": "^1.0.0",
    tslib: "^2.6.2"
  },
  devDependencies: {
    "@tsconfig/node18": "18.2.4",
    "@types/node": "^18.19.69",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typescript: "~5.8.3"
  },
  engines: {
    node: ">=18.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-bedrock-runtime",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-bedrock-runtime"
  }
};

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js
var createDefaultUserAgentProvider = ({ serviceId, clientVersion }) => async (config) => {
  const parsedUA = typeof window !== "undefined" && window?.navigator?.userAgent ? bowser_default.parse(window.navigator.userAgent) : void 0;
  const sections = [
    ["aws-sdk-js", clientVersion],
    ["ua", "2.1"],
    [`os/${parsedUA?.os?.name || "other"}`, parsedUA?.os?.version],
    ["lang/js"],
    ["md/browser", `${parsedUA?.browser?.name ?? "unknown"}_${parsedUA?.browser?.version ?? "unknown"}`]
  ];
  if (serviceId) {
    sections.push([`api/${serviceId}`, clientVersion]);
  }
  const appId = await config?.userAgentAppId?.();
  if (appId) {
    sections.push([`app/${appId}`]);
  }
  return sections;
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/endpoint/ruleset.js
var s = "required";
var t = "fn";
var u = "argv";
var v = "ref";
var a = true;
var b = "isSet";
var c = "booleanEquals";
var d = "error";
var e = "endpoint";
var f = "tree";
var g = "PartitionResult";
var h = { [s]: false, "type": "String" };
var i = { [s]: true, "default": false, "type": "Boolean" };
var j = { [v]: "Endpoint" };
var k = { [t]: c, [u]: [{ [v]: "UseFIPS" }, true] };
var l = { [t]: c, [u]: [{ [v]: "UseDualStack" }, true] };
var m = {};
var n = { [t]: "getAttr", [u]: [{ [v]: g }, "supportsFIPS"] };
var o = { [t]: c, [u]: [true, { [t]: "getAttr", [u]: [{ [v]: g }, "supportsDualStack"] }] };
var p = [k];
var q = [l];
var r = [{ [v]: "Region" }];
var _data = { version: "1.0", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [t]: b, [u]: [j] }], rules: [{ conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { rules: [{ conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: j, properties: m, headers: m }, type: e }], type: f }], type: f }, { rules: [{ conditions: [{ [t]: b, [u]: r }], rules: [{ conditions: [{ [t]: "aws.partition", [u]: r, assign: g }], rules: [{ conditions: [k, l], rules: [{ conditions: [{ [t]: c, [u]: [a, n] }, o], rules: [{ rules: [{ endpoint: { url: "https://bedrock-runtime-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: p, rules: [{ conditions: [{ [t]: c, [u]: [n, a] }], rules: [{ rules: [{ endpoint: { url: "https://bedrock-runtime-fips.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: q, rules: [{ conditions: [o], rules: [{ rules: [{ endpoint: { url: "https://bedrock-runtime.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { rules: [{ endpoint: { url: "https://bedrock-runtime.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }], type: f }] };
var ruleSet = _data;

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/endpoint/endpointResolver.js
var cache = new EndpointCache({
  size: 50,
  params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
});
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  }));
};
customEndpointFunctions.aws = awsEndpointFunctions;

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => {
  return {
    apiVersion: "2023-09-30",
    base64Decoder: config?.base64Decoder ?? fromBase64,
    base64Encoder: config?.base64Encoder ?? toBase64,
    disableHostPrefix: config?.disableHostPrefix ?? false,
    endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,
    extensions: config?.extensions ?? [],
    httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultBedrockRuntimeHttpAuthSchemeProvider,
    httpAuthSchemes: config?.httpAuthSchemes ?? [
      {
        schemeId: "aws.auth#sigv4",
        identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
        signer: new AwsSdkSigV4Signer()
      },
      {
        schemeId: "smithy.api#httpBearerAuth",
        identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#httpBearerAuth"),
        signer: new HttpBearerAuthSigner()
      }
    ],
    logger: config?.logger ?? new NoOpLogger(),
    serviceId: config?.serviceId ?? "Bedrock Runtime",
    urlParser: config?.urlParser ?? parseUrl,
    utf8Decoder: config?.utf8Decoder ?? fromUtf8,
    utf8Encoder: config?.utf8Encoder ?? toUtf8
  };
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = (config) => {
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,
    credentialDefaultProvider: config?.credentialDefaultProvider ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
    defaultUserAgentProvider: config?.defaultUserAgentProvider ?? createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    eventStreamPayloadHandlerProvider: config?.eventStreamPayloadHandlerProvider ?? eventStreamPayloadHandlerProvider,
    eventStreamSerdeProvider: config?.eventStreamSerdeProvider ?? eventStreamSerdeProvider,
    maxAttempts: config?.maxAttempts ?? DEFAULT_MAX_ATTEMPTS,
    region: config?.region ?? invalidProvider("Region is missing"),
    requestHandler: WebSocketFetchHandler.create(config?.requestHandler ?? defaultConfigProvider, FetchHttpHandler.create(defaultConfigProvider)),
    retryMode: config?.retryMode ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
    sha256: config?.sha256 ?? Sha256,
    streamCollector: config?.streamCollector ?? streamCollector,
    useDualstackEndpoint: config?.useDualstackEndpoint ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: config?.useFipsEndpoint ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
  };
};

// node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js
var getAwsRegionExtensionConfiguration = (runtimeConfig) => {
  return {
    setRegion(region) {
      runtimeConfig.region = region;
    },
    region() {
      return runtimeConfig.region;
    }
  };
};
var resolveAwsRegionExtensionConfiguration = (awsRegionExtensionConfiguration) => {
  return {
    region: awsRegionExtensionConfiguration.region()
  };
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  let _token = runtimeConfig.token;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    },
    setToken(token) {
      _token = token;
    },
    token() {
      return _token;
    }
  };
};
var resolveHttpAuthRuntimeConfig = (config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials(),
    token: config.token()
  };
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/runtimeExtensions.js
var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
  const extensionConfiguration = Object.assign(getAwsRegionExtensionConfiguration(runtimeConfig), getDefaultExtensionConfiguration(runtimeConfig), getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return Object.assign(runtimeConfig, resolveAwsRegionExtensionConfiguration(extensionConfiguration), resolveDefaultRuntimeConfig(extensionConfiguration), resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/BedrockRuntimeClient.js
var BedrockRuntimeClient = class extends Client {
  config;
  constructor(...[configuration]) {
    const _config_0 = getRuntimeConfig2(configuration || {});
    super(_config_0);
    this.initConfig = _config_0;
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveUserAgentConfig(_config_1);
    const _config_3 = resolveRetryConfig(_config_2);
    const _config_4 = resolveRegionConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveEndpointConfig(_config_5);
    const _config_7 = resolveEventStreamSerdeConfig(_config_6);
    const _config_8 = resolveHttpAuthSchemeConfig(_config_7);
    const _config_9 = resolveEventStreamConfig(_config_8);
    const _config_10 = resolveWebSocketConfig(_config_9);
    const _config_11 = resolveRuntimeExtensions(_config_10, configuration?.extensions || []);
    this.config = _config_11;
    this.middlewareStack.use(getUserAgentPlugin(this.config));
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
      httpAuthSchemeParametersProvider: defaultBedrockRuntimeHttpAuthSchemeParametersProvider,
      identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({
        "aws.auth#sigv4": config.credentials,
        "smithy.api#httpBearerAuth": config.token
      })
    }));
    this.middlewareStack.use(getHttpSigningPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/models/BedrockRuntimeServiceException.js
var BedrockRuntimeServiceException = class _BedrockRuntimeServiceException extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _BedrockRuntimeServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/models/models_0.js
var AccessDeniedException = class _AccessDeniedException extends BedrockRuntimeServiceException {
  name = "AccessDeniedException";
  $fault = "client";
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
  }
};
var AsyncInvokeOutputDataConfig;
(function(AsyncInvokeOutputDataConfig2) {
  AsyncInvokeOutputDataConfig2.visit = (value, visitor) => {
    if (value.s3OutputDataConfig !== void 0)
      return visitor.s3OutputDataConfig(value.s3OutputDataConfig);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(AsyncInvokeOutputDataConfig || (AsyncInvokeOutputDataConfig = {}));
var AsyncInvokeStatus = {
  COMPLETED: "Completed",
  FAILED: "Failed",
  IN_PROGRESS: "InProgress"
};
var InternalServerException = class _InternalServerException extends BedrockRuntimeServiceException {
  name = "InternalServerException";
  $fault = "server";
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _InternalServerException.prototype);
  }
};
var ThrottlingException = class _ThrottlingException extends BedrockRuntimeServiceException {
  name = "ThrottlingException";
  $fault = "client";
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
  }
};
var ValidationException = class _ValidationException extends BedrockRuntimeServiceException {
  name = "ValidationException";
  $fault = "client";
  constructor(opts) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ValidationException.prototype);
  }
};
var SortAsyncInvocationBy = {
  SUBMISSION_TIME: "SubmissionTime"
};
var SortOrder = {
  ASCENDING: "Ascending",
  DESCENDING: "Descending"
};
var ConflictException = class _ConflictException extends BedrockRuntimeServiceException {
  name = "ConflictException";
  $fault = "client";
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ConflictException.prototype);
  }
};
var ResourceNotFoundException = class _ResourceNotFoundException extends BedrockRuntimeServiceException {
  name = "ResourceNotFoundException";
  $fault = "client";
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
  }
};
var ServiceQuotaExceededException = class _ServiceQuotaExceededException extends BedrockRuntimeServiceException {
  name = "ServiceQuotaExceededException";
  $fault = "client";
  constructor(opts) {
    super({
      name: "ServiceQuotaExceededException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ServiceQuotaExceededException.prototype);
  }
};
var ServiceUnavailableException = class _ServiceUnavailableException extends BedrockRuntimeServiceException {
  name = "ServiceUnavailableException";
  $fault = "server";
  constructor(opts) {
    super({
      name: "ServiceUnavailableException",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _ServiceUnavailableException.prototype);
  }
};
var GuardrailImageFormat = {
  JPEG: "jpeg",
  PNG: "png"
};
var GuardrailImageSource;
(function(GuardrailImageSource2) {
  GuardrailImageSource2.visit = (value, visitor) => {
    if (value.bytes !== void 0)
      return visitor.bytes(value.bytes);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(GuardrailImageSource || (GuardrailImageSource = {}));
var GuardrailContentQualifier = {
  GROUNDING_SOURCE: "grounding_source",
  GUARD_CONTENT: "guard_content",
  QUERY: "query"
};
var GuardrailContentBlock;
(function(GuardrailContentBlock2) {
  GuardrailContentBlock2.visit = (value, visitor) => {
    if (value.text !== void 0)
      return visitor.text(value.text);
    if (value.image !== void 0)
      return visitor.image(value.image);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(GuardrailContentBlock || (GuardrailContentBlock = {}));
var GuardrailOutputScope = {
  FULL: "FULL",
  INTERVENTIONS: "INTERVENTIONS"
};
var GuardrailContentSource = {
  INPUT: "INPUT",
  OUTPUT: "OUTPUT"
};
var GuardrailAction = {
  GUARDRAIL_INTERVENED: "GUARDRAIL_INTERVENED",
  NONE: "NONE"
};
var GuardrailAutomatedReasoningLogicWarningType = {
  ALWAYS_FALSE: "ALWAYS_FALSE",
  ALWAYS_TRUE: "ALWAYS_TRUE"
};
var GuardrailAutomatedReasoningFinding;
(function(GuardrailAutomatedReasoningFinding2) {
  GuardrailAutomatedReasoningFinding2.visit = (value, visitor) => {
    if (value.valid !== void 0)
      return visitor.valid(value.valid);
    if (value.invalid !== void 0)
      return visitor.invalid(value.invalid);
    if (value.satisfiable !== void 0)
      return visitor.satisfiable(value.satisfiable);
    if (value.impossible !== void 0)
      return visitor.impossible(value.impossible);
    if (value.translationAmbiguous !== void 0)
      return visitor.translationAmbiguous(value.translationAmbiguous);
    if (value.tooComplex !== void 0)
      return visitor.tooComplex(value.tooComplex);
    if (value.noTranslations !== void 0)
      return visitor.noTranslations(value.noTranslations);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(GuardrailAutomatedReasoningFinding || (GuardrailAutomatedReasoningFinding = {}));
var GuardrailContentPolicyAction = {
  BLOCKED: "BLOCKED",
  NONE: "NONE"
};
var GuardrailContentFilterConfidence = {
  HIGH: "HIGH",
  LOW: "LOW",
  MEDIUM: "MEDIUM",
  NONE: "NONE"
};
var GuardrailContentFilterStrength = {
  HIGH: "HIGH",
  LOW: "LOW",
  MEDIUM: "MEDIUM",
  NONE: "NONE"
};
var GuardrailContentFilterType = {
  HATE: "HATE",
  INSULTS: "INSULTS",
  MISCONDUCT: "MISCONDUCT",
  PROMPT_ATTACK: "PROMPT_ATTACK",
  SEXUAL: "SEXUAL",
  VIOLENCE: "VIOLENCE"
};
var GuardrailContextualGroundingPolicyAction = {
  BLOCKED: "BLOCKED",
  NONE: "NONE"
};
var GuardrailContextualGroundingFilterType = {
  GROUNDING: "GROUNDING",
  RELEVANCE: "RELEVANCE"
};
var GuardrailSensitiveInformationPolicyAction = {
  ANONYMIZED: "ANONYMIZED",
  BLOCKED: "BLOCKED",
  NONE: "NONE"
};
var GuardrailPiiEntityType = {
  ADDRESS: "ADDRESS",
  AGE: "AGE",
  AWS_ACCESS_KEY: "AWS_ACCESS_KEY",
  AWS_SECRET_KEY: "AWS_SECRET_KEY",
  CA_HEALTH_NUMBER: "CA_HEALTH_NUMBER",
  CA_SOCIAL_INSURANCE_NUMBER: "CA_SOCIAL_INSURANCE_NUMBER",
  CREDIT_DEBIT_CARD_CVV: "CREDIT_DEBIT_CARD_CVV",
  CREDIT_DEBIT_CARD_EXPIRY: "CREDIT_DEBIT_CARD_EXPIRY",
  CREDIT_DEBIT_CARD_NUMBER: "CREDIT_DEBIT_CARD_NUMBER",
  DRIVER_ID: "DRIVER_ID",
  EMAIL: "EMAIL",
  INTERNATIONAL_BANK_ACCOUNT_NUMBER: "INTERNATIONAL_BANK_ACCOUNT_NUMBER",
  IP_ADDRESS: "IP_ADDRESS",
  LICENSE_PLATE: "LICENSE_PLATE",
  MAC_ADDRESS: "MAC_ADDRESS",
  NAME: "NAME",
  PASSWORD: "PASSWORD",
  PHONE: "PHONE",
  PIN: "PIN",
  SWIFT_CODE: "SWIFT_CODE",
  UK_NATIONAL_HEALTH_SERVICE_NUMBER: "UK_NATIONAL_HEALTH_SERVICE_NUMBER",
  UK_NATIONAL_INSURANCE_NUMBER: "UK_NATIONAL_INSURANCE_NUMBER",
  UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER: "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER",
  URL: "URL",
  USERNAME: "USERNAME",
  US_BANK_ACCOUNT_NUMBER: "US_BANK_ACCOUNT_NUMBER",
  US_BANK_ROUTING_NUMBER: "US_BANK_ROUTING_NUMBER",
  US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER: "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER",
  US_PASSPORT_NUMBER: "US_PASSPORT_NUMBER",
  US_SOCIAL_SECURITY_NUMBER: "US_SOCIAL_SECURITY_NUMBER",
  VEHICLE_IDENTIFICATION_NUMBER: "VEHICLE_IDENTIFICATION_NUMBER"
};
var GuardrailTopicPolicyAction = {
  BLOCKED: "BLOCKED",
  NONE: "NONE"
};
var GuardrailTopicType = {
  DENY: "DENY"
};
var GuardrailWordPolicyAction = {
  BLOCKED: "BLOCKED",
  NONE: "NONE"
};
var GuardrailManagedWordType = {
  PROFANITY: "PROFANITY"
};
var GuardrailTrace = {
  DISABLED: "disabled",
  ENABLED: "enabled",
  ENABLED_FULL: "enabled_full"
};
var CachePointType = {
  DEFAULT: "default"
};
var CitationLocation;
(function(CitationLocation2) {
  CitationLocation2.visit = (value, visitor) => {
    if (value.documentChar !== void 0)
      return visitor.documentChar(value.documentChar);
    if (value.documentPage !== void 0)
      return visitor.documentPage(value.documentPage);
    if (value.documentChunk !== void 0)
      return visitor.documentChunk(value.documentChunk);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(CitationLocation || (CitationLocation = {}));
var CitationSourceContent;
(function(CitationSourceContent2) {
  CitationSourceContent2.visit = (value, visitor) => {
    if (value.text !== void 0)
      return visitor.text(value.text);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(CitationSourceContent || (CitationSourceContent = {}));
var CitationGeneratedContent;
(function(CitationGeneratedContent2) {
  CitationGeneratedContent2.visit = (value, visitor) => {
    if (value.text !== void 0)
      return visitor.text(value.text);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(CitationGeneratedContent || (CitationGeneratedContent = {}));
var DocumentFormat = {
  CSV: "csv",
  DOC: "doc",
  DOCX: "docx",
  HTML: "html",
  MD: "md",
  PDF: "pdf",
  TXT: "txt",
  XLS: "xls",
  XLSX: "xlsx"
};
var DocumentContentBlock;
(function(DocumentContentBlock2) {
  DocumentContentBlock2.visit = (value, visitor) => {
    if (value.text !== void 0)
      return visitor.text(value.text);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(DocumentContentBlock || (DocumentContentBlock = {}));
var DocumentSource;
(function(DocumentSource2) {
  DocumentSource2.visit = (value, visitor) => {
    if (value.bytes !== void 0)
      return visitor.bytes(value.bytes);
    if (value.s3Location !== void 0)
      return visitor.s3Location(value.s3Location);
    if (value.text !== void 0)
      return visitor.text(value.text);
    if (value.content !== void 0)
      return visitor.content(value.content);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(DocumentSource || (DocumentSource = {}));
var GuardrailConverseImageFormat = {
  JPEG: "jpeg",
  PNG: "png"
};
var GuardrailConverseImageSource;
(function(GuardrailConverseImageSource2) {
  GuardrailConverseImageSource2.visit = (value, visitor) => {
    if (value.bytes !== void 0)
      return visitor.bytes(value.bytes);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(GuardrailConverseImageSource || (GuardrailConverseImageSource = {}));
var GuardrailConverseContentQualifier = {
  GROUNDING_SOURCE: "grounding_source",
  GUARD_CONTENT: "guard_content",
  QUERY: "query"
};
var GuardrailConverseContentBlock;
(function(GuardrailConverseContentBlock2) {
  GuardrailConverseContentBlock2.visit = (value, visitor) => {
    if (value.text !== void 0)
      return visitor.text(value.text);
    if (value.image !== void 0)
      return visitor.image(value.image);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(GuardrailConverseContentBlock || (GuardrailConverseContentBlock = {}));
var ImageFormat = {
  GIF: "gif",
  JPEG: "jpeg",
  PNG: "png",
  WEBP: "webp"
};
var ImageSource;
(function(ImageSource2) {
  ImageSource2.visit = (value, visitor) => {
    if (value.bytes !== void 0)
      return visitor.bytes(value.bytes);
    if (value.s3Location !== void 0)
      return visitor.s3Location(value.s3Location);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(ImageSource || (ImageSource = {}));
var ReasoningContentBlock;
(function(ReasoningContentBlock2) {
  ReasoningContentBlock2.visit = (value, visitor) => {
    if (value.reasoningText !== void 0)
      return visitor.reasoningText(value.reasoningText);
    if (value.redactedContent !== void 0)
      return visitor.redactedContent(value.redactedContent);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(ReasoningContentBlock || (ReasoningContentBlock = {}));
var VideoFormat = {
  FLV: "flv",
  MKV: "mkv",
  MOV: "mov",
  MP4: "mp4",
  MPEG: "mpeg",
  MPG: "mpg",
  THREE_GP: "three_gp",
  WEBM: "webm",
  WMV: "wmv"
};
var VideoSource;
(function(VideoSource2) {
  VideoSource2.visit = (value, visitor) => {
    if (value.bytes !== void 0)
      return visitor.bytes(value.bytes);
    if (value.s3Location !== void 0)
      return visitor.s3Location(value.s3Location);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(VideoSource || (VideoSource = {}));
var ToolResultContentBlock;
(function(ToolResultContentBlock2) {
  ToolResultContentBlock2.visit = (value, visitor) => {
    if (value.json !== void 0)
      return visitor.json(value.json);
    if (value.text !== void 0)
      return visitor.text(value.text);
    if (value.image !== void 0)
      return visitor.image(value.image);
    if (value.document !== void 0)
      return visitor.document(value.document);
    if (value.video !== void 0)
      return visitor.video(value.video);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(ToolResultContentBlock || (ToolResultContentBlock = {}));
var ToolResultStatus = {
  ERROR: "error",
  SUCCESS: "success"
};
var ContentBlock;
(function(ContentBlock2) {
  ContentBlock2.visit = (value, visitor) => {
    if (value.text !== void 0)
      return visitor.text(value.text);
    if (value.image !== void 0)
      return visitor.image(value.image);
    if (value.document !== void 0)
      return visitor.document(value.document);
    if (value.video !== void 0)
      return visitor.video(value.video);
    if (value.toolUse !== void 0)
      return visitor.toolUse(value.toolUse);
    if (value.toolResult !== void 0)
      return visitor.toolResult(value.toolResult);
    if (value.guardContent !== void 0)
      return visitor.guardContent(value.guardContent);
    if (value.cachePoint !== void 0)
      return visitor.cachePoint(value.cachePoint);
    if (value.reasoningContent !== void 0)
      return visitor.reasoningContent(value.reasoningContent);
    if (value.citationsContent !== void 0)
      return visitor.citationsContent(value.citationsContent);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(ContentBlock || (ContentBlock = {}));
var ConversationRole = {
  ASSISTANT: "assistant",
  USER: "user"
};
var PerformanceConfigLatency = {
  OPTIMIZED: "optimized",
  STANDARD: "standard"
};
var PromptVariableValues;
(function(PromptVariableValues2) {
  PromptVariableValues2.visit = (value, visitor) => {
    if (value.text !== void 0)
      return visitor.text(value.text);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(PromptVariableValues || (PromptVariableValues = {}));
var SystemContentBlock;
(function(SystemContentBlock2) {
  SystemContentBlock2.visit = (value, visitor) => {
    if (value.text !== void 0)
      return visitor.text(value.text);
    if (value.guardContent !== void 0)
      return visitor.guardContent(value.guardContent);
    if (value.cachePoint !== void 0)
      return visitor.cachePoint(value.cachePoint);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(SystemContentBlock || (SystemContentBlock = {}));
var ToolChoice;
(function(ToolChoice2) {
  ToolChoice2.visit = (value, visitor) => {
    if (value.auto !== void 0)
      return visitor.auto(value.auto);
    if (value.any !== void 0)
      return visitor.any(value.any);
    if (value.tool !== void 0)
      return visitor.tool(value.tool);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(ToolChoice || (ToolChoice = {}));
var ToolInputSchema;
(function(ToolInputSchema2) {
  ToolInputSchema2.visit = (value, visitor) => {
    if (value.json !== void 0)
      return visitor.json(value.json);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(ToolInputSchema || (ToolInputSchema = {}));
var Tool;
(function(Tool2) {
  Tool2.visit = (value, visitor) => {
    if (value.toolSpec !== void 0)
      return visitor.toolSpec(value.toolSpec);
    if (value.cachePoint !== void 0)
      return visitor.cachePoint(value.cachePoint);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(Tool || (Tool = {}));
var ConverseOutput;
(function(ConverseOutput2) {
  ConverseOutput2.visit = (value, visitor) => {
    if (value.message !== void 0)
      return visitor.message(value.message);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(ConverseOutput || (ConverseOutput = {}));
var StopReason = {
  CONTENT_FILTERED: "content_filtered",
  END_TURN: "end_turn",
  GUARDRAIL_INTERVENED: "guardrail_intervened",
  MAX_TOKENS: "max_tokens",
  MODEL_CONTEXT_WINDOW_EXCEEDED: "model_context_window_exceeded",
  STOP_SEQUENCE: "stop_sequence",
  TOOL_USE: "tool_use"
};
var ModelErrorException = class _ModelErrorException extends BedrockRuntimeServiceException {
  name = "ModelErrorException";
  $fault = "client";
  originalStatusCode;
  resourceName;
  constructor(opts) {
    super({
      name: "ModelErrorException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ModelErrorException.prototype);
    this.originalStatusCode = opts.originalStatusCode;
    this.resourceName = opts.resourceName;
  }
};
var ModelNotReadyException = class _ModelNotReadyException extends BedrockRuntimeServiceException {
  name = "ModelNotReadyException";
  $fault = "client";
  $retryable = {};
  constructor(opts) {
    super({
      name: "ModelNotReadyException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ModelNotReadyException.prototype);
  }
};
var ModelTimeoutException = class _ModelTimeoutException extends BedrockRuntimeServiceException {
  name = "ModelTimeoutException";
  $fault = "client";
  constructor(opts) {
    super({
      name: "ModelTimeoutException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ModelTimeoutException.prototype);
  }
};
var GuardrailStreamProcessingMode = {
  ASYNC: "async",
  SYNC: "sync"
};
var ReasoningContentBlockDelta;
(function(ReasoningContentBlockDelta2) {
  ReasoningContentBlockDelta2.visit = (value, visitor) => {
    if (value.text !== void 0)
      return visitor.text(value.text);
    if (value.redactedContent !== void 0)
      return visitor.redactedContent(value.redactedContent);
    if (value.signature !== void 0)
      return visitor.signature(value.signature);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(ReasoningContentBlockDelta || (ReasoningContentBlockDelta = {}));
var ContentBlockDelta;
(function(ContentBlockDelta2) {
  ContentBlockDelta2.visit = (value, visitor) => {
    if (value.text !== void 0)
      return visitor.text(value.text);
    if (value.toolUse !== void 0)
      return visitor.toolUse(value.toolUse);
    if (value.reasoningContent !== void 0)
      return visitor.reasoningContent(value.reasoningContent);
    if (value.citation !== void 0)
      return visitor.citation(value.citation);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(ContentBlockDelta || (ContentBlockDelta = {}));
var ContentBlockStart;
(function(ContentBlockStart2) {
  ContentBlockStart2.visit = (value, visitor) => {
    if (value.toolUse !== void 0)
      return visitor.toolUse(value.toolUse);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(ContentBlockStart || (ContentBlockStart = {}));
var ModelStreamErrorException = class _ModelStreamErrorException extends BedrockRuntimeServiceException {
  name = "ModelStreamErrorException";
  $fault = "client";
  originalStatusCode;
  originalMessage;
  constructor(opts) {
    super({
      name: "ModelStreamErrorException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ModelStreamErrorException.prototype);
    this.originalStatusCode = opts.originalStatusCode;
    this.originalMessage = opts.originalMessage;
  }
};
var ConverseStreamOutput;
(function(ConverseStreamOutput2) {
  ConverseStreamOutput2.visit = (value, visitor) => {
    if (value.messageStart !== void 0)
      return visitor.messageStart(value.messageStart);
    if (value.contentBlockStart !== void 0)
      return visitor.contentBlockStart(value.contentBlockStart);
    if (value.contentBlockDelta !== void 0)
      return visitor.contentBlockDelta(value.contentBlockDelta);
    if (value.contentBlockStop !== void 0)
      return visitor.contentBlockStop(value.contentBlockStop);
    if (value.messageStop !== void 0)
      return visitor.messageStop(value.messageStop);
    if (value.metadata !== void 0)
      return visitor.metadata(value.metadata);
    if (value.internalServerException !== void 0)
      return visitor.internalServerException(value.internalServerException);
    if (value.modelStreamErrorException !== void 0)
      return visitor.modelStreamErrorException(value.modelStreamErrorException);
    if (value.validationException !== void 0)
      return visitor.validationException(value.validationException);
    if (value.throttlingException !== void 0)
      return visitor.throttlingException(value.throttlingException);
    if (value.serviceUnavailableException !== void 0)
      return visitor.serviceUnavailableException(value.serviceUnavailableException);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(ConverseStreamOutput || (ConverseStreamOutput = {}));
var Trace = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED",
  ENABLED_FULL: "ENABLED_FULL"
};
var InvokeModelWithBidirectionalStreamInput;
(function(InvokeModelWithBidirectionalStreamInput2) {
  InvokeModelWithBidirectionalStreamInput2.visit = (value, visitor) => {
    if (value.chunk !== void 0)
      return visitor.chunk(value.chunk);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(InvokeModelWithBidirectionalStreamInput || (InvokeModelWithBidirectionalStreamInput = {}));
var InvokeModelWithBidirectionalStreamOutput;
(function(InvokeModelWithBidirectionalStreamOutput2) {
  InvokeModelWithBidirectionalStreamOutput2.visit = (value, visitor) => {
    if (value.chunk !== void 0)
      return visitor.chunk(value.chunk);
    if (value.internalServerException !== void 0)
      return visitor.internalServerException(value.internalServerException);
    if (value.modelStreamErrorException !== void 0)
      return visitor.modelStreamErrorException(value.modelStreamErrorException);
    if (value.validationException !== void 0)
      return visitor.validationException(value.validationException);
    if (value.throttlingException !== void 0)
      return visitor.throttlingException(value.throttlingException);
    if (value.modelTimeoutException !== void 0)
      return visitor.modelTimeoutException(value.modelTimeoutException);
    if (value.serviceUnavailableException !== void 0)
      return visitor.serviceUnavailableException(value.serviceUnavailableException);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(InvokeModelWithBidirectionalStreamOutput || (InvokeModelWithBidirectionalStreamOutput = {}));
var ResponseStream;
(function(ResponseStream2) {
  ResponseStream2.visit = (value, visitor) => {
    if (value.chunk !== void 0)
      return visitor.chunk(value.chunk);
    if (value.internalServerException !== void 0)
      return visitor.internalServerException(value.internalServerException);
    if (value.modelStreamErrorException !== void 0)
      return visitor.modelStreamErrorException(value.modelStreamErrorException);
    if (value.validationException !== void 0)
      return visitor.validationException(value.validationException);
    if (value.throttlingException !== void 0)
      return visitor.throttlingException(value.throttlingException);
    if (value.modelTimeoutException !== void 0)
      return visitor.modelTimeoutException(value.modelTimeoutException);
    if (value.serviceUnavailableException !== void 0)
      return visitor.serviceUnavailableException(value.serviceUnavailableException);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(ResponseStream || (ResponseStream = {}));
var CountTokensInput;
(function(CountTokensInput2) {
  CountTokensInput2.visit = (value, visitor) => {
    if (value.invokeModel !== void 0)
      return visitor.invokeModel(value.invokeModel);
    if (value.converse !== void 0)
      return visitor.converse(value.converse);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
})(CountTokensInput || (CountTokensInput = {}));
var GetAsyncInvokeResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.failureMessage && { failureMessage: SENSITIVE_STRING },
  ...obj.outputDataConfig && { outputDataConfig: obj.outputDataConfig }
});
var AsyncInvokeSummaryFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.failureMessage && { failureMessage: SENSITIVE_STRING },
  ...obj.outputDataConfig && { outputDataConfig: obj.outputDataConfig }
});
var ListAsyncInvokesResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.asyncInvokeSummaries && {
    asyncInvokeSummaries: obj.asyncInvokeSummaries.map((item) => AsyncInvokeSummaryFilterSensitiveLog(item))
  }
});
var StartAsyncInvokeRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.modelInput && { modelInput: SENSITIVE_STRING },
  ...obj.outputDataConfig && { outputDataConfig: obj.outputDataConfig }
});
var GuardrailImageSourceFilterSensitiveLog = (obj) => {
  if (obj.bytes !== void 0)
    return { bytes: obj.bytes };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var GuardrailImageBlockFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.source && { source: SENSITIVE_STRING }
});
var GuardrailContentBlockFilterSensitiveLog = (obj) => {
  if (obj.text !== void 0)
    return { text: obj.text };
  if (obj.image !== void 0)
    return { image: SENSITIVE_STRING };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var ApplyGuardrailRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.content && { content: obj.content.map((item) => GuardrailContentBlockFilterSensitiveLog(item)) }
});
var GuardrailAutomatedReasoningStatementFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.logic && { logic: SENSITIVE_STRING },
  ...obj.naturalLanguage && { naturalLanguage: SENSITIVE_STRING }
});
var GuardrailAutomatedReasoningLogicWarningFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.premises && {
    premises: obj.premises.map((item) => GuardrailAutomatedReasoningStatementFilterSensitiveLog(item))
  },
  ...obj.claims && { claims: obj.claims.map((item) => GuardrailAutomatedReasoningStatementFilterSensitiveLog(item)) }
});
var GuardrailAutomatedReasoningInputTextReferenceFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.text && { text: SENSITIVE_STRING }
});
var GuardrailAutomatedReasoningTranslationFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.premises && {
    premises: obj.premises.map((item) => GuardrailAutomatedReasoningStatementFilterSensitiveLog(item))
  },
  ...obj.claims && { claims: obj.claims.map((item) => GuardrailAutomatedReasoningStatementFilterSensitiveLog(item)) },
  ...obj.untranslatedPremises && {
    untranslatedPremises: obj.untranslatedPremises.map((item) => GuardrailAutomatedReasoningInputTextReferenceFilterSensitiveLog(item))
  },
  ...obj.untranslatedClaims && {
    untranslatedClaims: obj.untranslatedClaims.map((item) => GuardrailAutomatedReasoningInputTextReferenceFilterSensitiveLog(item))
  }
});
var GuardrailAutomatedReasoningImpossibleFindingFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.translation && { translation: GuardrailAutomatedReasoningTranslationFilterSensitiveLog(obj.translation) },
  ...obj.logicWarning && {
    logicWarning: GuardrailAutomatedReasoningLogicWarningFilterSensitiveLog(obj.logicWarning)
  }
});
var GuardrailAutomatedReasoningInvalidFindingFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.translation && { translation: GuardrailAutomatedReasoningTranslationFilterSensitiveLog(obj.translation) },
  ...obj.logicWarning && {
    logicWarning: GuardrailAutomatedReasoningLogicWarningFilterSensitiveLog(obj.logicWarning)
  }
});
var GuardrailAutomatedReasoningScenarioFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.statements && {
    statements: obj.statements.map((item) => GuardrailAutomatedReasoningStatementFilterSensitiveLog(item))
  }
});
var GuardrailAutomatedReasoningSatisfiableFindingFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.translation && { translation: GuardrailAutomatedReasoningTranslationFilterSensitiveLog(obj.translation) },
  ...obj.claimsTrueScenario && {
    claimsTrueScenario: GuardrailAutomatedReasoningScenarioFilterSensitiveLog(obj.claimsTrueScenario)
  },
  ...obj.claimsFalseScenario && {
    claimsFalseScenario: GuardrailAutomatedReasoningScenarioFilterSensitiveLog(obj.claimsFalseScenario)
  },
  ...obj.logicWarning && {
    logicWarning: GuardrailAutomatedReasoningLogicWarningFilterSensitiveLog(obj.logicWarning)
  }
});
var GuardrailAutomatedReasoningTranslationOptionFilterSensitiveLog = (obj) => ({
  ...obj
});
var GuardrailAutomatedReasoningTranslationAmbiguousFindingFilterSensitiveLog = (obj) => ({
  ...obj
});
var GuardrailAutomatedReasoningValidFindingFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.translation && { translation: GuardrailAutomatedReasoningTranslationFilterSensitiveLog(obj.translation) },
  ...obj.claimsTrueScenario && {
    claimsTrueScenario: GuardrailAutomatedReasoningScenarioFilterSensitiveLog(obj.claimsTrueScenario)
  },
  ...obj.logicWarning && {
    logicWarning: GuardrailAutomatedReasoningLogicWarningFilterSensitiveLog(obj.logicWarning)
  }
});
var GuardrailAutomatedReasoningFindingFilterSensitiveLog = (obj) => {
  if (obj.valid !== void 0)
    return { valid: GuardrailAutomatedReasoningValidFindingFilterSensitiveLog(obj.valid) };
  if (obj.invalid !== void 0)
    return { invalid: GuardrailAutomatedReasoningInvalidFindingFilterSensitiveLog(obj.invalid) };
  if (obj.satisfiable !== void 0)
    return { satisfiable: GuardrailAutomatedReasoningSatisfiableFindingFilterSensitiveLog(obj.satisfiable) };
  if (obj.impossible !== void 0)
    return { impossible: GuardrailAutomatedReasoningImpossibleFindingFilterSensitiveLog(obj.impossible) };
  if (obj.translationAmbiguous !== void 0)
    return {
      translationAmbiguous: GuardrailAutomatedReasoningTranslationAmbiguousFindingFilterSensitiveLog(obj.translationAmbiguous)
    };
  if (obj.tooComplex !== void 0)
    return { tooComplex: obj.tooComplex };
  if (obj.noTranslations !== void 0)
    return { noTranslations: obj.noTranslations };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var GuardrailAutomatedReasoningPolicyAssessmentFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.findings && {
    findings: obj.findings.map((item) => GuardrailAutomatedReasoningFindingFilterSensitiveLog(item))
  }
});
var GuardrailAssessmentFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.automatedReasoningPolicy && {
    automatedReasoningPolicy: GuardrailAutomatedReasoningPolicyAssessmentFilterSensitiveLog(obj.automatedReasoningPolicy)
  }
});
var ApplyGuardrailResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.assessments && { assessments: obj.assessments.map((item) => GuardrailAssessmentFilterSensitiveLog(item)) }
});
var GuardrailConverseImageSourceFilterSensitiveLog = (obj) => {
  if (obj.bytes !== void 0)
    return { bytes: obj.bytes };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var GuardrailConverseImageBlockFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.source && { source: SENSITIVE_STRING }
});
var GuardrailConverseContentBlockFilterSensitiveLog = (obj) => {
  if (obj.text !== void 0)
    return { text: obj.text };
  if (obj.image !== void 0)
    return { image: SENSITIVE_STRING };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var ReasoningTextBlockFilterSensitiveLog = (obj) => ({
  ...obj
});
var ReasoningContentBlockFilterSensitiveLog = (obj) => {
  if (obj.reasoningText !== void 0)
    return { reasoningText: SENSITIVE_STRING };
  if (obj.redactedContent !== void 0)
    return { redactedContent: obj.redactedContent };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var ContentBlockFilterSensitiveLog = (obj) => {
  if (obj.text !== void 0)
    return { text: obj.text };
  if (obj.image !== void 0)
    return { image: obj.image };
  if (obj.document !== void 0)
    return { document: obj.document };
  if (obj.video !== void 0)
    return { video: obj.video };
  if (obj.toolUse !== void 0)
    return { toolUse: obj.toolUse };
  if (obj.toolResult !== void 0)
    return { toolResult: obj.toolResult };
  if (obj.guardContent !== void 0)
    return { guardContent: GuardrailConverseContentBlockFilterSensitiveLog(obj.guardContent) };
  if (obj.cachePoint !== void 0)
    return { cachePoint: obj.cachePoint };
  if (obj.reasoningContent !== void 0)
    return { reasoningContent: SENSITIVE_STRING };
  if (obj.citationsContent !== void 0)
    return { citationsContent: obj.citationsContent };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var MessageFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.content && { content: obj.content.map((item) => ContentBlockFilterSensitiveLog(item)) }
});
var SystemContentBlockFilterSensitiveLog = (obj) => {
  if (obj.text !== void 0)
    return { text: obj.text };
  if (obj.guardContent !== void 0)
    return { guardContent: GuardrailConverseContentBlockFilterSensitiveLog(obj.guardContent) };
  if (obj.cachePoint !== void 0)
    return { cachePoint: obj.cachePoint };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var ConverseRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) },
  ...obj.system && { system: obj.system.map((item) => SystemContentBlockFilterSensitiveLog(item)) },
  ...obj.toolConfig && { toolConfig: obj.toolConfig },
  ...obj.promptVariables && { promptVariables: SENSITIVE_STRING },
  ...obj.requestMetadata && { requestMetadata: SENSITIVE_STRING }
});
var ConverseOutputFilterSensitiveLog = (obj) => {
  if (obj.message !== void 0)
    return { message: MessageFilterSensitiveLog(obj.message) };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var GuardrailTraceAssessmentFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.inputAssessment && {
    inputAssessment: Object.entries(obj.inputAssessment).reduce((acc, [key, value]) => (acc[key] = GuardrailAssessmentFilterSensitiveLog(value), acc), {})
  },
  ...obj.outputAssessments && {
    outputAssessments: Object.entries(obj.outputAssessments).reduce((acc, [key, value]) => (acc[key] = value.map((item) => GuardrailAssessmentFilterSensitiveLog(item)), acc), {})
  }
});
var ConverseTraceFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.guardrail && { guardrail: GuardrailTraceAssessmentFilterSensitiveLog(obj.guardrail) }
});
var ConverseResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.output && { output: ConverseOutputFilterSensitiveLog(obj.output) },
  ...obj.trace && { trace: ConverseTraceFilterSensitiveLog(obj.trace) }
});
var ConverseStreamRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) },
  ...obj.system && { system: obj.system.map((item) => SystemContentBlockFilterSensitiveLog(item)) },
  ...obj.toolConfig && { toolConfig: obj.toolConfig },
  ...obj.promptVariables && { promptVariables: SENSITIVE_STRING },
  ...obj.requestMetadata && { requestMetadata: SENSITIVE_STRING }
});
var ReasoningContentBlockDeltaFilterSensitiveLog = (obj) => {
  if (obj.text !== void 0)
    return { text: obj.text };
  if (obj.redactedContent !== void 0)
    return { redactedContent: obj.redactedContent };
  if (obj.signature !== void 0)
    return { signature: obj.signature };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var ContentBlockDeltaFilterSensitiveLog = (obj) => {
  if (obj.text !== void 0)
    return { text: obj.text };
  if (obj.toolUse !== void 0)
    return { toolUse: obj.toolUse };
  if (obj.reasoningContent !== void 0)
    return { reasoningContent: SENSITIVE_STRING };
  if (obj.citation !== void 0)
    return { citation: obj.citation };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var ContentBlockDeltaEventFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.delta && { delta: ContentBlockDeltaFilterSensitiveLog(obj.delta) }
});
var ConverseStreamTraceFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.guardrail && { guardrail: GuardrailTraceAssessmentFilterSensitiveLog(obj.guardrail) }
});
var ConverseStreamMetadataEventFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.trace && { trace: ConverseStreamTraceFilterSensitiveLog(obj.trace) }
});
var ConverseStreamOutputFilterSensitiveLog = (obj) => {
  if (obj.messageStart !== void 0)
    return { messageStart: obj.messageStart };
  if (obj.contentBlockStart !== void 0)
    return { contentBlockStart: obj.contentBlockStart };
  if (obj.contentBlockDelta !== void 0)
    return { contentBlockDelta: ContentBlockDeltaEventFilterSensitiveLog(obj.contentBlockDelta) };
  if (obj.contentBlockStop !== void 0)
    return { contentBlockStop: obj.contentBlockStop };
  if (obj.messageStop !== void 0)
    return { messageStop: obj.messageStop };
  if (obj.metadata !== void 0)
    return { metadata: ConverseStreamMetadataEventFilterSensitiveLog(obj.metadata) };
  if (obj.internalServerException !== void 0)
    return { internalServerException: obj.internalServerException };
  if (obj.modelStreamErrorException !== void 0)
    return { modelStreamErrorException: obj.modelStreamErrorException };
  if (obj.validationException !== void 0)
    return { validationException: obj.validationException };
  if (obj.throttlingException !== void 0)
    return { throttlingException: obj.throttlingException };
  if (obj.serviceUnavailableException !== void 0)
    return { serviceUnavailableException: obj.serviceUnavailableException };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var ConverseStreamResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.stream && { stream: "STREAMING_CONTENT" }
});
var InvokeModelRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.body && { body: SENSITIVE_STRING }
});
var InvokeModelResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.body && { body: SENSITIVE_STRING }
});
var BidirectionalInputPayloadPartFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.bytes && { bytes: SENSITIVE_STRING }
});
var InvokeModelWithBidirectionalStreamInputFilterSensitiveLog = (obj) => {
  if (obj.chunk !== void 0)
    return { chunk: SENSITIVE_STRING };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var InvokeModelWithBidirectionalStreamRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.body && { body: "STREAMING_CONTENT" }
});
var BidirectionalOutputPayloadPartFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.bytes && { bytes: SENSITIVE_STRING }
});
var InvokeModelWithBidirectionalStreamOutputFilterSensitiveLog = (obj) => {
  if (obj.chunk !== void 0)
    return { chunk: SENSITIVE_STRING };
  if (obj.internalServerException !== void 0)
    return { internalServerException: obj.internalServerException };
  if (obj.modelStreamErrorException !== void 0)
    return { modelStreamErrorException: obj.modelStreamErrorException };
  if (obj.validationException !== void 0)
    return { validationException: obj.validationException };
  if (obj.throttlingException !== void 0)
    return { throttlingException: obj.throttlingException };
  if (obj.modelTimeoutException !== void 0)
    return { modelTimeoutException: obj.modelTimeoutException };
  if (obj.serviceUnavailableException !== void 0)
    return { serviceUnavailableException: obj.serviceUnavailableException };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var InvokeModelWithBidirectionalStreamResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.body && { body: "STREAMING_CONTENT" }
});
var InvokeModelWithResponseStreamRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.body && { body: SENSITIVE_STRING }
});
var PayloadPartFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.bytes && { bytes: SENSITIVE_STRING }
});
var ResponseStreamFilterSensitiveLog = (obj) => {
  if (obj.chunk !== void 0)
    return { chunk: SENSITIVE_STRING };
  if (obj.internalServerException !== void 0)
    return { internalServerException: obj.internalServerException };
  if (obj.modelStreamErrorException !== void 0)
    return { modelStreamErrorException: obj.modelStreamErrorException };
  if (obj.validationException !== void 0)
    return { validationException: obj.validationException };
  if (obj.throttlingException !== void 0)
    return { throttlingException: obj.throttlingException };
  if (obj.modelTimeoutException !== void 0)
    return { modelTimeoutException: obj.modelTimeoutException };
  if (obj.serviceUnavailableException !== void 0)
    return { serviceUnavailableException: obj.serviceUnavailableException };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var InvokeModelWithResponseStreamResponseFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.body && { body: "STREAMING_CONTENT" }
});
var ConverseTokensRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) },
  ...obj.system && { system: obj.system.map((item) => SystemContentBlockFilterSensitiveLog(item)) }
});
var InvokeModelTokensRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.body && { body: SENSITIVE_STRING }
});
var CountTokensInputFilterSensitiveLog = (obj) => {
  if (obj.invokeModel !== void 0)
    return { invokeModel: InvokeModelTokensRequestFilterSensitiveLog(obj.invokeModel) };
  if (obj.converse !== void 0)
    return { converse: ConverseTokensRequestFilterSensitiveLog(obj.converse) };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
};
var CountTokensRequestFilterSensitiveLog = (obj) => ({
  ...obj,
  ...obj.input && { input: CountTokensInputFilterSensitiveLog(obj.input) }
});

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/protocols/Aws_restJson1.js
var se_ApplyGuardrailCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/guardrail/{guardrailIdentifier}/version/{guardrailVersion}/apply");
  b2.p("guardrailIdentifier", () => input.guardrailIdentifier, "{guardrailIdentifier}", false);
  b2.p("guardrailVersion", () => input.guardrailVersion, "{guardrailVersion}", false);
  let body;
  body = JSON.stringify(take(input, {
    content: (_) => se_GuardrailContentBlockList(_, context),
    outputScope: [],
    source: []
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ConverseCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/model/{modelId}/converse");
  b2.p("modelId", () => input.modelId, "{modelId}", false);
  let body;
  body = JSON.stringify(take(input, {
    additionalModelRequestFields: (_) => se_Document(_, context),
    additionalModelResponseFieldPaths: (_) => _json(_),
    guardrailConfig: (_) => _json(_),
    inferenceConfig: (_) => se_InferenceConfiguration(_, context),
    messages: (_) => se_Messages(_, context),
    performanceConfig: (_) => _json(_),
    promptVariables: (_) => _json(_),
    requestMetadata: (_) => _json(_),
    system: (_) => se_SystemContentBlocks(_, context),
    toolConfig: (_) => se_ToolConfiguration(_, context)
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ConverseStreamCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/model/{modelId}/converse-stream");
  b2.p("modelId", () => input.modelId, "{modelId}", false);
  let body;
  body = JSON.stringify(take(input, {
    additionalModelRequestFields: (_) => se_Document(_, context),
    additionalModelResponseFieldPaths: (_) => _json(_),
    guardrailConfig: (_) => _json(_),
    inferenceConfig: (_) => se_InferenceConfiguration(_, context),
    messages: (_) => se_Messages(_, context),
    performanceConfig: (_) => _json(_),
    promptVariables: (_) => _json(_),
    requestMetadata: (_) => _json(_),
    system: (_) => se_SystemContentBlocks(_, context),
    toolConfig: (_) => se_ToolConfiguration(_, context)
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_CountTokensCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/model/{modelId}/count-tokens");
  b2.p("modelId", () => input.modelId, "{modelId}", false);
  let body;
  body = JSON.stringify(take(input, {
    input: (_) => se_CountTokensInput(_, context)
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_GetAsyncInvokeCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/async-invoke/{invocationArn}");
  b2.p("invocationArn", () => input.invocationArn, "{invocationArn}", false);
  let body;
  b2.m("GET").h(headers).b(body);
  return b2.build();
};
var se_InvokeModelCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_ct]: input[_cT] || "application/octet-stream",
    [_a]: input[_a],
    [_xabt]: input[_t],
    [_xabg]: input[_gI],
    [_xabg_]: input[_gV],
    [_xabpl]: input[_pCL]
  });
  b2.bp("/model/{modelId}/invoke");
  b2.p("modelId", () => input.modelId, "{modelId}", false);
  let body;
  if (input.body !== void 0) {
    body = input.body;
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_InvokeModelWithBidirectionalStreamCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/model/{modelId}/invoke-with-bidirectional-stream");
  b2.p("modelId", () => input.modelId, "{modelId}", false);
  let body;
  if (input.body !== void 0) {
    body = se_InvokeModelWithBidirectionalStreamInput(input.body, context);
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_InvokeModelWithResponseStreamCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = map({}, isSerializableHeaderValue, {
    [_ct]: input[_cT] || "application/octet-stream",
    [_xaba]: input[_a],
    [_xabt]: input[_t],
    [_xabg]: input[_gI],
    [_xabg_]: input[_gV],
    [_xabpl]: input[_pCL]
  });
  b2.bp("/model/{modelId}/invoke-with-response-stream");
  b2.p("modelId", () => input.modelId, "{modelId}", false);
  let body;
  if (input.body !== void 0) {
    body = input.body;
  }
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var se_ListAsyncInvokesCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {};
  b2.bp("/async-invoke");
  const query = map({
    [_sTA]: [() => input.submitTimeAfter !== void 0, () => serializeDateTime(input[_sTA]).toString()],
    [_sTB]: [() => input.submitTimeBefore !== void 0, () => serializeDateTime(input[_sTB]).toString()],
    [_sE]: [, input[_sE]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]],
    [_sB]: [, input[_sB]],
    [_sO]: [, input[_sO]]
  });
  let body;
  b2.m("GET").h(headers).q(query).b(body);
  return b2.build();
};
var se_StartAsyncInvokeCommand = async (input, context) => {
  const b2 = requestBuilder(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b2.bp("/async-invoke");
  let body;
  body = JSON.stringify(take(input, {
    clientRequestToken: [true, (_) => _ ?? v4()],
    modelId: [],
    modelInput: (_) => se_ModelInputPayload(_, context),
    outputDataConfig: (_) => _json(_),
    tags: (_) => _json(_)
  }));
  b2.m("POST").h(headers).b(body);
  return b2.build();
};
var de_ApplyGuardrailCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    action: expectString,
    actionReason: expectString,
    assessments: (_) => de_GuardrailAssessmentList(_, context),
    guardrailCoverage: _json,
    outputs: _json,
    usage: _json
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ConverseCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    additionalModelResponseFields: (_) => de_Document(_, context),
    metrics: _json,
    output: (_) => de_ConverseOutput(awsExpectUnion(_), context),
    performanceConfig: _json,
    stopReason: expectString,
    trace: (_) => de_ConverseTrace(_, context),
    usage: _json
  });
  Object.assign(contents, doc);
  return contents;
};
var de_ConverseStreamCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = output.body;
  contents.stream = de_ConverseStreamOutput(data, context);
  return contents;
};
var de_CountTokensCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    inputTokens: expectInt32
  });
  Object.assign(contents, doc);
  return contents;
};
var de_GetAsyncInvokeCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    clientRequestToken: expectString,
    endTime: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    failureMessage: expectString,
    invocationArn: expectString,
    lastModifiedTime: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    modelArn: expectString,
    outputDataConfig: (_) => _json(awsExpectUnion(_)),
    status: expectString,
    submitTime: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
  Object.assign(contents, doc);
  return contents;
};
var de_InvokeModelCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_cT]: [, output.headers[_ct]],
    [_pCL]: [, output.headers[_xabpl]]
  });
  const data = await collectBody(output.body, context);
  contents.body = data;
  return contents;
};
var de_InvokeModelWithBidirectionalStreamCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = output.body;
  contents.body = de_InvokeModelWithBidirectionalStreamOutput(data, context);
  return contents;
};
var de_InvokeModelWithResponseStreamCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output),
    [_cT]: [, output.headers[_xabct]],
    [_pCL]: [, output.headers[_xabpl]]
  });
  const data = output.body;
  contents.body = de_ResponseStream(data, context);
  return contents;
};
var de_ListAsyncInvokesCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    asyncInvokeSummaries: (_) => de_AsyncInvokeSummaries(_, context),
    nextToken: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_StartAsyncInvokeCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = map({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
  const doc = take(data, {
    invocationArn: expectString
  });
  Object.assign(contents, doc);
  return contents;
};
var de_CommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.bedrockruntime#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.bedrockruntime#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.bedrockruntime#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceQuotaExceededException":
    case "com.amazonaws.bedrockruntime#ServiceQuotaExceededException":
      throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.bedrockruntime#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.bedrockruntime#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.bedrockruntime#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    case "ModelErrorException":
    case "com.amazonaws.bedrockruntime#ModelErrorException":
      throw await de_ModelErrorExceptionRes(parsedOutput, context);
    case "ModelNotReadyException":
    case "com.amazonaws.bedrockruntime#ModelNotReadyException":
      throw await de_ModelNotReadyExceptionRes(parsedOutput, context);
    case "ModelTimeoutException":
    case "com.amazonaws.bedrockruntime#ModelTimeoutException":
      throw await de_ModelTimeoutExceptionRes(parsedOutput, context);
    case "ModelStreamErrorException":
    case "com.amazonaws.bedrockruntime#ModelStreamErrorException":
      throw await de_ModelStreamErrorExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.bedrockruntime#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var throwDefaultError = withBaseException(BedrockRuntimeServiceException);
var de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ConflictExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_InternalServerExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ModelErrorExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString,
    originalStatusCode: expectInt32,
    resourceName: expectString
  });
  Object.assign(contents, doc);
  const exception = new ModelErrorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ModelNotReadyExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ModelNotReadyException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ModelStreamErrorExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString,
    originalMessage: expectString,
    originalStatusCode: expectInt32
  });
  Object.assign(contents, doc);
  const exception = new ModelStreamErrorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ModelTimeoutExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ModelTimeoutException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceQuotaExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ThrottlingExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var de_ValidationExceptionRes = async (parsedOutput, context) => {
  const contents = map({});
  const data = parsedOutput.body;
  const doc = take(data, {
    message: expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var se_InvokeModelWithBidirectionalStreamInput = (input, context) => {
  const eventMarshallingVisitor = (event) => InvokeModelWithBidirectionalStreamInput.visit(event, {
    chunk: (value) => se_BidirectionalInputPayloadPart_event(value, context),
    _: (value) => value
  });
  return context.eventStreamMarshaller.serialize(input, eventMarshallingVisitor);
};
var se_BidirectionalInputPayloadPart_event = (input, context) => {
  const headers = {
    ":event-type": { type: "string", value: "chunk" },
    ":message-type": { type: "string", value: "event" },
    ":content-type": { type: "string", value: "application/json" }
  };
  let body = new Uint8Array();
  body = se_BidirectionalInputPayloadPart(input, context);
  body = context.utf8Decoder(JSON.stringify(body));
  return { headers, body };
};
var de_ConverseStreamOutput = (output, context) => {
  return context.eventStreamMarshaller.deserialize(output, async (event) => {
    if (event["messageStart"] != null) {
      return {
        messageStart: await de_MessageStartEvent_event(event["messageStart"], context)
      };
    }
    if (event["contentBlockStart"] != null) {
      return {
        contentBlockStart: await de_ContentBlockStartEvent_event(event["contentBlockStart"], context)
      };
    }
    if (event["contentBlockDelta"] != null) {
      return {
        contentBlockDelta: await de_ContentBlockDeltaEvent_event(event["contentBlockDelta"], context)
      };
    }
    if (event["contentBlockStop"] != null) {
      return {
        contentBlockStop: await de_ContentBlockStopEvent_event(event["contentBlockStop"], context)
      };
    }
    if (event["messageStop"] != null) {
      return {
        messageStop: await de_MessageStopEvent_event(event["messageStop"], context)
      };
    }
    if (event["metadata"] != null) {
      return {
        metadata: await de_ConverseStreamMetadataEvent_event(event["metadata"], context)
      };
    }
    if (event["internalServerException"] != null) {
      return {
        internalServerException: await de_InternalServerException_event(event["internalServerException"], context)
      };
    }
    if (event["modelStreamErrorException"] != null) {
      return {
        modelStreamErrorException: await de_ModelStreamErrorException_event(event["modelStreamErrorException"], context)
      };
    }
    if (event["validationException"] != null) {
      return {
        validationException: await de_ValidationException_event(event["validationException"], context)
      };
    }
    if (event["throttlingException"] != null) {
      return {
        throttlingException: await de_ThrottlingException_event(event["throttlingException"], context)
      };
    }
    if (event["serviceUnavailableException"] != null) {
      return {
        serviceUnavailableException: await de_ServiceUnavailableException_event(event["serviceUnavailableException"], context)
      };
    }
    return { $unknown: event };
  });
};
var de_InvokeModelWithBidirectionalStreamOutput = (output, context) => {
  return context.eventStreamMarshaller.deserialize(output, async (event) => {
    if (event["chunk"] != null) {
      return {
        chunk: await de_BidirectionalOutputPayloadPart_event(event["chunk"], context)
      };
    }
    if (event["internalServerException"] != null) {
      return {
        internalServerException: await de_InternalServerException_event(event["internalServerException"], context)
      };
    }
    if (event["modelStreamErrorException"] != null) {
      return {
        modelStreamErrorException: await de_ModelStreamErrorException_event(event["modelStreamErrorException"], context)
      };
    }
    if (event["validationException"] != null) {
      return {
        validationException: await de_ValidationException_event(event["validationException"], context)
      };
    }
    if (event["throttlingException"] != null) {
      return {
        throttlingException: await de_ThrottlingException_event(event["throttlingException"], context)
      };
    }
    if (event["modelTimeoutException"] != null) {
      return {
        modelTimeoutException: await de_ModelTimeoutException_event(event["modelTimeoutException"], context)
      };
    }
    if (event["serviceUnavailableException"] != null) {
      return {
        serviceUnavailableException: await de_ServiceUnavailableException_event(event["serviceUnavailableException"], context)
      };
    }
    return { $unknown: event };
  });
};
var de_ResponseStream = (output, context) => {
  return context.eventStreamMarshaller.deserialize(output, async (event) => {
    if (event["chunk"] != null) {
      return {
        chunk: await de_PayloadPart_event(event["chunk"], context)
      };
    }
    if (event["internalServerException"] != null) {
      return {
        internalServerException: await de_InternalServerException_event(event["internalServerException"], context)
      };
    }
    if (event["modelStreamErrorException"] != null) {
      return {
        modelStreamErrorException: await de_ModelStreamErrorException_event(event["modelStreamErrorException"], context)
      };
    }
    if (event["validationException"] != null) {
      return {
        validationException: await de_ValidationException_event(event["validationException"], context)
      };
    }
    if (event["throttlingException"] != null) {
      return {
        throttlingException: await de_ThrottlingException_event(event["throttlingException"], context)
      };
    }
    if (event["modelTimeoutException"] != null) {
      return {
        modelTimeoutException: await de_ModelTimeoutException_event(event["modelTimeoutException"], context)
      };
    }
    if (event["serviceUnavailableException"] != null) {
      return {
        serviceUnavailableException: await de_ServiceUnavailableException_event(event["serviceUnavailableException"], context)
      };
    }
    return { $unknown: event };
  });
};
var de_BidirectionalOutputPayloadPart_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, de_BidirectionalOutputPayloadPart(data, context));
  return contents;
};
var de_ContentBlockDeltaEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, de_ContentBlockDeltaEvent(data, context));
  return contents;
};
var de_ContentBlockStartEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, _json(data));
  return contents;
};
var de_ContentBlockStopEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, _json(data));
  return contents;
};
var de_ConverseStreamMetadataEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, de_ConverseStreamMetadataEvent(data, context));
  return contents;
};
var de_InternalServerException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_InternalServerExceptionRes(parsedOutput, context);
};
var de_MessageStartEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, _json(data));
  return contents;
};
var de_MessageStopEvent_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, de_MessageStopEvent(data, context));
  return contents;
};
var de_ModelStreamErrorException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_ModelStreamErrorExceptionRes(parsedOutput, context);
};
var de_ModelTimeoutException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_ModelTimeoutExceptionRes(parsedOutput, context);
};
var de_PayloadPart_event = async (output, context) => {
  const contents = {};
  const data = await parseJsonBody(output.body, context);
  Object.assign(contents, de_PayloadPart(data, context));
  return contents;
};
var de_ServiceUnavailableException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_ServiceUnavailableExceptionRes(parsedOutput, context);
};
var de_ThrottlingException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_ThrottlingExceptionRes(parsedOutput, context);
};
var de_ValidationException_event = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonBody(output.body, context)
  };
  return de_ValidationExceptionRes(parsedOutput, context);
};
var se_BidirectionalInputPayloadPart = (input, context) => {
  return take(input, {
    bytes: context.base64Encoder
  });
};
var se_ContentBlock = (input, context) => {
  return ContentBlock.visit(input, {
    cachePoint: (value) => ({ cachePoint: _json(value) }),
    citationsContent: (value) => ({ citationsContent: _json(value) }),
    document: (value) => ({ document: se_DocumentBlock(value, context) }),
    guardContent: (value) => ({ guardContent: se_GuardrailConverseContentBlock(value, context) }),
    image: (value) => ({ image: se_ImageBlock(value, context) }),
    reasoningContent: (value) => ({ reasoningContent: se_ReasoningContentBlock(value, context) }),
    text: (value) => ({ text: value }),
    toolResult: (value) => ({ toolResult: se_ToolResultBlock(value, context) }),
    toolUse: (value) => ({ toolUse: se_ToolUseBlock(value, context) }),
    video: (value) => ({ video: se_VideoBlock(value, context) }),
    _: (name, value) => ({ [name]: value })
  });
};
var se_ContentBlocks = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_ContentBlock(entry, context);
  });
};
var se_ConverseTokensRequest = (input, context) => {
  return take(input, {
    messages: (_) => se_Messages(_, context),
    system: (_) => se_SystemContentBlocks(_, context)
  });
};
var se_CountTokensInput = (input, context) => {
  return CountTokensInput.visit(input, {
    converse: (value) => ({ converse: se_ConverseTokensRequest(value, context) }),
    invokeModel: (value) => ({ invokeModel: se_InvokeModelTokensRequest(value, context) }),
    _: (name, value) => ({ [name]: value })
  });
};
var se_DocumentBlock = (input, context) => {
  return take(input, {
    citations: _json,
    context: [],
    format: [],
    name: [],
    source: (_) => se_DocumentSource(_, context)
  });
};
var se_DocumentSource = (input, context) => {
  return DocumentSource.visit(input, {
    bytes: (value) => ({ bytes: context.base64Encoder(value) }),
    content: (value) => ({ content: _json(value) }),
    s3Location: (value) => ({ s3Location: _json(value) }),
    text: (value) => ({ text: value }),
    _: (name, value) => ({ [name]: value })
  });
};
var se_GuardrailContentBlock = (input, context) => {
  return GuardrailContentBlock.visit(input, {
    image: (value) => ({ image: se_GuardrailImageBlock(value, context) }),
    text: (value) => ({ text: _json(value) }),
    _: (name, value) => ({ [name]: value })
  });
};
var se_GuardrailContentBlockList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_GuardrailContentBlock(entry, context);
  });
};
var se_GuardrailConverseContentBlock = (input, context) => {
  return GuardrailConverseContentBlock.visit(input, {
    image: (value) => ({ image: se_GuardrailConverseImageBlock(value, context) }),
    text: (value) => ({ text: _json(value) }),
    _: (name, value) => ({ [name]: value })
  });
};
var se_GuardrailConverseImageBlock = (input, context) => {
  return take(input, {
    format: [],
    source: (_) => se_GuardrailConverseImageSource(_, context)
  });
};
var se_GuardrailConverseImageSource = (input, context) => {
  return GuardrailConverseImageSource.visit(input, {
    bytes: (value) => ({ bytes: context.base64Encoder(value) }),
    _: (name, value) => ({ [name]: value })
  });
};
var se_GuardrailImageBlock = (input, context) => {
  return take(input, {
    format: [],
    source: (_) => se_GuardrailImageSource(_, context)
  });
};
var se_GuardrailImageSource = (input, context) => {
  return GuardrailImageSource.visit(input, {
    bytes: (value) => ({ bytes: context.base64Encoder(value) }),
    _: (name, value) => ({ [name]: value })
  });
};
var se_ImageBlock = (input, context) => {
  return take(input, {
    format: [],
    source: (_) => se_ImageSource(_, context)
  });
};
var se_ImageSource = (input, context) => {
  return ImageSource.visit(input, {
    bytes: (value) => ({ bytes: context.base64Encoder(value) }),
    s3Location: (value) => ({ s3Location: _json(value) }),
    _: (name, value) => ({ [name]: value })
  });
};
var se_InferenceConfiguration = (input, context) => {
  return take(input, {
    maxTokens: [],
    stopSequences: _json,
    temperature: serializeFloat,
    topP: serializeFloat
  });
};
var se_InvokeModelTokensRequest = (input, context) => {
  return take(input, {
    body: context.base64Encoder
  });
};
var se_Message = (input, context) => {
  return take(input, {
    content: (_) => se_ContentBlocks(_, context),
    role: []
  });
};
var se_Messages = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_Message(entry, context);
  });
};
var se_ModelInputPayload = (input, context) => {
  return input;
};
var se_ReasoningContentBlock = (input, context) => {
  return ReasoningContentBlock.visit(input, {
    reasoningText: (value) => ({ reasoningText: _json(value) }),
    redactedContent: (value) => ({ redactedContent: context.base64Encoder(value) }),
    _: (name, value) => ({ [name]: value })
  });
};
var se_SystemContentBlock = (input, context) => {
  return SystemContentBlock.visit(input, {
    cachePoint: (value) => ({ cachePoint: _json(value) }),
    guardContent: (value) => ({ guardContent: se_GuardrailConverseContentBlock(value, context) }),
    text: (value) => ({ text: value }),
    _: (name, value) => ({ [name]: value })
  });
};
var se_SystemContentBlocks = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_SystemContentBlock(entry, context);
  });
};
var se_Tool = (input, context) => {
  return Tool.visit(input, {
    cachePoint: (value) => ({ cachePoint: _json(value) }),
    toolSpec: (value) => ({ toolSpec: se_ToolSpecification(value, context) }),
    _: (name, value) => ({ [name]: value })
  });
};
var se_ToolConfiguration = (input, context) => {
  return take(input, {
    toolChoice: _json,
    tools: (_) => se_Tools(_, context)
  });
};
var se_ToolInputSchema = (input, context) => {
  return ToolInputSchema.visit(input, {
    json: (value) => ({ json: se_Document(value, context) }),
    _: (name, value) => ({ [name]: value })
  });
};
var se_ToolResultBlock = (input, context) => {
  return take(input, {
    content: (_) => se_ToolResultContentBlocks(_, context),
    status: [],
    toolUseId: []
  });
};
var se_ToolResultContentBlock = (input, context) => {
  return ToolResultContentBlock.visit(input, {
    document: (value) => ({ document: se_DocumentBlock(value, context) }),
    image: (value) => ({ image: se_ImageBlock(value, context) }),
    json: (value) => ({ json: se_Document(value, context) }),
    text: (value) => ({ text: value }),
    video: (value) => ({ video: se_VideoBlock(value, context) }),
    _: (name, value) => ({ [name]: value })
  });
};
var se_ToolResultContentBlocks = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_ToolResultContentBlock(entry, context);
  });
};
var se_Tools = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_Tool(entry, context);
  });
};
var se_ToolSpecification = (input, context) => {
  return take(input, {
    description: [],
    inputSchema: (_) => se_ToolInputSchema(_, context),
    name: []
  });
};
var se_ToolUseBlock = (input, context) => {
  return take(input, {
    input: (_) => se_Document(_, context),
    name: [],
    toolUseId: []
  });
};
var se_VideoBlock = (input, context) => {
  return take(input, {
    format: [],
    source: (_) => se_VideoSource(_, context)
  });
};
var se_VideoSource = (input, context) => {
  return VideoSource.visit(input, {
    bytes: (value) => ({ bytes: context.base64Encoder(value) }),
    s3Location: (value) => ({ s3Location: _json(value) }),
    _: (name, value) => ({ [name]: value })
  });
};
var se_Document = (input, context) => {
  return input;
};
var de_AsyncInvokeSummaries = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AsyncInvokeSummary(entry, context);
  });
  return retVal;
};
var de_AsyncInvokeSummary = (output, context) => {
  return take(output, {
    clientRequestToken: expectString,
    endTime: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    failureMessage: expectString,
    invocationArn: expectString,
    lastModifiedTime: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_)),
    modelArn: expectString,
    outputDataConfig: (_) => _json(awsExpectUnion(_)),
    status: expectString,
    submitTime: (_) => expectNonNull(parseRfc3339DateTimeWithOffset(_))
  });
};
var de_BidirectionalOutputPayloadPart = (output, context) => {
  return take(output, {
    bytes: context.base64Decoder
  });
};
var de_ContentBlock = (output, context) => {
  if (output.cachePoint != null) {
    return {
      cachePoint: _json(output.cachePoint)
    };
  }
  if (output.citationsContent != null) {
    return {
      citationsContent: _json(output.citationsContent)
    };
  }
  if (output.document != null) {
    return {
      document: de_DocumentBlock(output.document, context)
    };
  }
  if (output.guardContent != null) {
    return {
      guardContent: de_GuardrailConverseContentBlock(awsExpectUnion(output.guardContent), context)
    };
  }
  if (output.image != null) {
    return {
      image: de_ImageBlock(output.image, context)
    };
  }
  if (output.reasoningContent != null) {
    return {
      reasoningContent: de_ReasoningContentBlock(awsExpectUnion(output.reasoningContent), context)
    };
  }
  if (expectString(output.text) !== void 0) {
    return { text: expectString(output.text) };
  }
  if (output.toolResult != null) {
    return {
      toolResult: de_ToolResultBlock(output.toolResult, context)
    };
  }
  if (output.toolUse != null) {
    return {
      toolUse: de_ToolUseBlock(output.toolUse, context)
    };
  }
  if (output.video != null) {
    return {
      video: de_VideoBlock(output.video, context)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_ContentBlockDelta = (output, context) => {
  if (output.citation != null) {
    return {
      citation: _json(output.citation)
    };
  }
  if (output.reasoningContent != null) {
    return {
      reasoningContent: de_ReasoningContentBlockDelta(awsExpectUnion(output.reasoningContent), context)
    };
  }
  if (expectString(output.text) !== void 0) {
    return { text: expectString(output.text) };
  }
  if (output.toolUse != null) {
    return {
      toolUse: _json(output.toolUse)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_ContentBlockDeltaEvent = (output, context) => {
  return take(output, {
    contentBlockIndex: expectInt32,
    delta: (_) => de_ContentBlockDelta(awsExpectUnion(_), context)
  });
};
var de_ContentBlocks = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ContentBlock(awsExpectUnion(entry), context);
  });
  return retVal;
};
var de_ConverseOutput = (output, context) => {
  if (output.message != null) {
    return {
      message: de_Message(output.message, context)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_ConverseStreamMetadataEvent = (output, context) => {
  return take(output, {
    metrics: _json,
    performanceConfig: _json,
    trace: (_) => de_ConverseStreamTrace(_, context),
    usage: _json
  });
};
var de_ConverseStreamTrace = (output, context) => {
  return take(output, {
    guardrail: (_) => de_GuardrailTraceAssessment(_, context),
    promptRouter: _json
  });
};
var de_ConverseTrace = (output, context) => {
  return take(output, {
    guardrail: (_) => de_GuardrailTraceAssessment(_, context),
    promptRouter: _json
  });
};
var de_DocumentBlock = (output, context) => {
  return take(output, {
    citations: _json,
    context: expectString,
    format: expectString,
    name: expectString,
    source: (_) => de_DocumentSource(awsExpectUnion(_), context)
  });
};
var de_DocumentSource = (output, context) => {
  if (output.bytes != null) {
    return {
      bytes: context.base64Decoder(output.bytes)
    };
  }
  if (output.content != null) {
    return {
      content: _json(output.content)
    };
  }
  if (output.s3Location != null) {
    return {
      s3Location: _json(output.s3Location)
    };
  }
  if (expectString(output.text) !== void 0) {
    return { text: expectString(output.text) };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_GuardrailAssessment = (output, context) => {
  return take(output, {
    automatedReasoningPolicy: (_) => de_GuardrailAutomatedReasoningPolicyAssessment(_, context),
    contentPolicy: _json,
    contextualGroundingPolicy: (_) => de_GuardrailContextualGroundingPolicyAssessment(_, context),
    invocationMetrics: _json,
    sensitiveInformationPolicy: _json,
    topicPolicy: _json,
    wordPolicy: _json
  });
};
var de_GuardrailAssessmentList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_GuardrailAssessment(entry, context);
  });
  return retVal;
};
var de_GuardrailAssessmentListMap = (output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_GuardrailAssessmentList(value, context);
    return acc;
  }, {});
};
var de_GuardrailAssessmentMap = (output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_GuardrailAssessment(value, context);
    return acc;
  }, {});
};
var de_GuardrailAutomatedReasoningFinding = (output, context) => {
  if (output.impossible != null) {
    return {
      impossible: de_GuardrailAutomatedReasoningImpossibleFinding(output.impossible, context)
    };
  }
  if (output.invalid != null) {
    return {
      invalid: de_GuardrailAutomatedReasoningInvalidFinding(output.invalid, context)
    };
  }
  if (output.noTranslations != null) {
    return {
      noTranslations: _json(output.noTranslations)
    };
  }
  if (output.satisfiable != null) {
    return {
      satisfiable: de_GuardrailAutomatedReasoningSatisfiableFinding(output.satisfiable, context)
    };
  }
  if (output.tooComplex != null) {
    return {
      tooComplex: _json(output.tooComplex)
    };
  }
  if (output.translationAmbiguous != null) {
    return {
      translationAmbiguous: de_GuardrailAutomatedReasoningTranslationAmbiguousFinding(output.translationAmbiguous, context)
    };
  }
  if (output.valid != null) {
    return {
      valid: de_GuardrailAutomatedReasoningValidFinding(output.valid, context)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_GuardrailAutomatedReasoningFindingList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_GuardrailAutomatedReasoningFinding(awsExpectUnion(entry), context);
  });
  return retVal;
};
var de_GuardrailAutomatedReasoningImpossibleFinding = (output, context) => {
  return take(output, {
    contradictingRules: _json,
    logicWarning: _json,
    translation: (_) => de_GuardrailAutomatedReasoningTranslation(_, context)
  });
};
var de_GuardrailAutomatedReasoningInvalidFinding = (output, context) => {
  return take(output, {
    contradictingRules: _json,
    logicWarning: _json,
    translation: (_) => de_GuardrailAutomatedReasoningTranslation(_, context)
  });
};
var de_GuardrailAutomatedReasoningPolicyAssessment = (output, context) => {
  return take(output, {
    findings: (_) => de_GuardrailAutomatedReasoningFindingList(_, context)
  });
};
var de_GuardrailAutomatedReasoningSatisfiableFinding = (output, context) => {
  return take(output, {
    claimsFalseScenario: _json,
    claimsTrueScenario: _json,
    logicWarning: _json,
    translation: (_) => de_GuardrailAutomatedReasoningTranslation(_, context)
  });
};
var de_GuardrailAutomatedReasoningTranslation = (output, context) => {
  return take(output, {
    claims: _json,
    confidence: limitedParseDouble,
    premises: _json,
    untranslatedClaims: _json,
    untranslatedPremises: _json
  });
};
var de_GuardrailAutomatedReasoningTranslationAmbiguousFinding = (output, context) => {
  return take(output, {
    differenceScenarios: _json,
    options: (_) => de_GuardrailAutomatedReasoningTranslationOptionList(_, context)
  });
};
var de_GuardrailAutomatedReasoningTranslationList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_GuardrailAutomatedReasoningTranslation(entry, context);
  });
  return retVal;
};
var de_GuardrailAutomatedReasoningTranslationOption = (output, context) => {
  return take(output, {
    translations: (_) => de_GuardrailAutomatedReasoningTranslationList(_, context)
  });
};
var de_GuardrailAutomatedReasoningTranslationOptionList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_GuardrailAutomatedReasoningTranslationOption(entry, context);
  });
  return retVal;
};
var de_GuardrailAutomatedReasoningValidFinding = (output, context) => {
  return take(output, {
    claimsTrueScenario: _json,
    logicWarning: _json,
    supportingRules: _json,
    translation: (_) => de_GuardrailAutomatedReasoningTranslation(_, context)
  });
};
var de_GuardrailContextualGroundingFilter = (output, context) => {
  return take(output, {
    action: expectString,
    detected: expectBoolean,
    score: limitedParseDouble,
    threshold: limitedParseDouble,
    type: expectString
  });
};
var de_GuardrailContextualGroundingFilters = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_GuardrailContextualGroundingFilter(entry, context);
  });
  return retVal;
};
var de_GuardrailContextualGroundingPolicyAssessment = (output, context) => {
  return take(output, {
    filters: (_) => de_GuardrailContextualGroundingFilters(_, context)
  });
};
var de_GuardrailConverseContentBlock = (output, context) => {
  if (output.image != null) {
    return {
      image: de_GuardrailConverseImageBlock(output.image, context)
    };
  }
  if (output.text != null) {
    return {
      text: _json(output.text)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_GuardrailConverseImageBlock = (output, context) => {
  return take(output, {
    format: expectString,
    source: (_) => de_GuardrailConverseImageSource(awsExpectUnion(_), context)
  });
};
var de_GuardrailConverseImageSource = (output, context) => {
  if (output.bytes != null) {
    return {
      bytes: context.base64Decoder(output.bytes)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_GuardrailTraceAssessment = (output, context) => {
  return take(output, {
    actionReason: expectString,
    inputAssessment: (_) => de_GuardrailAssessmentMap(_, context),
    modelOutput: _json,
    outputAssessments: (_) => de_GuardrailAssessmentListMap(_, context)
  });
};
var de_ImageBlock = (output, context) => {
  return take(output, {
    format: expectString,
    source: (_) => de_ImageSource(awsExpectUnion(_), context)
  });
};
var de_ImageSource = (output, context) => {
  if (output.bytes != null) {
    return {
      bytes: context.base64Decoder(output.bytes)
    };
  }
  if (output.s3Location != null) {
    return {
      s3Location: _json(output.s3Location)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_Message = (output, context) => {
  return take(output, {
    content: (_) => de_ContentBlocks(_, context),
    role: expectString
  });
};
var de_MessageStopEvent = (output, context) => {
  return take(output, {
    additionalModelResponseFields: (_) => de_Document(_, context),
    stopReason: expectString
  });
};
var de_PayloadPart = (output, context) => {
  return take(output, {
    bytes: context.base64Decoder
  });
};
var de_ReasoningContentBlock = (output, context) => {
  if (output.reasoningText != null) {
    return {
      reasoningText: _json(output.reasoningText)
    };
  }
  if (output.redactedContent != null) {
    return {
      redactedContent: context.base64Decoder(output.redactedContent)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_ReasoningContentBlockDelta = (output, context) => {
  if (output.redactedContent != null) {
    return {
      redactedContent: context.base64Decoder(output.redactedContent)
    };
  }
  if (expectString(output.signature) !== void 0) {
    return { signature: expectString(output.signature) };
  }
  if (expectString(output.text) !== void 0) {
    return { text: expectString(output.text) };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_ToolResultBlock = (output, context) => {
  return take(output, {
    content: (_) => de_ToolResultContentBlocks(_, context),
    status: expectString,
    toolUseId: expectString
  });
};
var de_ToolResultContentBlock = (output, context) => {
  if (output.document != null) {
    return {
      document: de_DocumentBlock(output.document, context)
    };
  }
  if (output.image != null) {
    return {
      image: de_ImageBlock(output.image, context)
    };
  }
  if (output.json != null) {
    return {
      json: de_Document(output.json, context)
    };
  }
  if (expectString(output.text) !== void 0) {
    return { text: expectString(output.text) };
  }
  if (output.video != null) {
    return {
      video: de_VideoBlock(output.video, context)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_ToolResultContentBlocks = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_ToolResultContentBlock(awsExpectUnion(entry), context);
  });
  return retVal;
};
var de_ToolUseBlock = (output, context) => {
  return take(output, {
    input: (_) => de_Document(_, context),
    name: expectString,
    toolUseId: expectString
  });
};
var de_VideoBlock = (output, context) => {
  return take(output, {
    format: expectString,
    source: (_) => de_VideoSource(awsExpectUnion(_), context)
  });
};
var de_VideoSource = (output, context) => {
  if (output.bytes != null) {
    return {
      bytes: context.base64Decoder(output.bytes)
    };
  }
  if (output.s3Location != null) {
    return {
      s3Location: _json(output.s3Location)
    };
  }
  return { $unknown: Object.entries(output)[0] };
};
var de_Document = (output, context) => {
  return output;
};
var deserializeMetadata = (output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var _a = "accept";
var _cT = "contentType";
var _ct = "content-type";
var _gI = "guardrailIdentifier";
var _gV = "guardrailVersion";
var _mR = "maxResults";
var _nT = "nextToken";
var _pCL = "performanceConfigLatency";
var _sB = "sortBy";
var _sE = "statusEquals";
var _sO = "sortOrder";
var _sTA = "submitTimeAfter";
var _sTB = "submitTimeBefore";
var _t = "trace";
var _xaba = "x-amzn-bedrock-accept";
var _xabct = "x-amzn-bedrock-content-type";
var _xabg = "x-amzn-bedrock-guardrailidentifier";
var _xabg_ = "x-amzn-bedrock-guardrailversion";
var _xabpl = "x-amzn-bedrock-performanceconfig-latency";
var _xabt = "x-amzn-bedrock-trace";

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/commands/ApplyGuardrailCommand.js
var ApplyGuardrailCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockFrontendService", "ApplyGuardrail", {}).n("BedrockRuntimeClient", "ApplyGuardrailCommand").f(ApplyGuardrailRequestFilterSensitiveLog, ApplyGuardrailResponseFilterSensitiveLog).ser(se_ApplyGuardrailCommand).de(de_ApplyGuardrailCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/commands/ConverseCommand.js
var ConverseCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockFrontendService", "Converse", {}).n("BedrockRuntimeClient", "ConverseCommand").f(ConverseRequestFilterSensitiveLog, ConverseResponseFilterSensitiveLog).ser(se_ConverseCommand).de(de_ConverseCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/commands/ConverseStreamCommand.js
var ConverseStreamCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockFrontendService", "ConverseStream", {
  eventStream: {
    output: true
  }
}).n("BedrockRuntimeClient", "ConverseStreamCommand").f(ConverseStreamRequestFilterSensitiveLog, ConverseStreamResponseFilterSensitiveLog).ser(se_ConverseStreamCommand).de(de_ConverseStreamCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/commands/CountTokensCommand.js
var CountTokensCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockFrontendService", "CountTokens", {}).n("BedrockRuntimeClient", "CountTokensCommand").f(CountTokensRequestFilterSensitiveLog, void 0).ser(se_CountTokensCommand).de(de_CountTokensCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/commands/GetAsyncInvokeCommand.js
var GetAsyncInvokeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockFrontendService", "GetAsyncInvoke", {}).n("BedrockRuntimeClient", "GetAsyncInvokeCommand").f(void 0, GetAsyncInvokeResponseFilterSensitiveLog).ser(se_GetAsyncInvokeCommand).de(de_GetAsyncInvokeCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/commands/InvokeModelCommand.js
var InvokeModelCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockFrontendService", "InvokeModel", {}).n("BedrockRuntimeClient", "InvokeModelCommand").f(InvokeModelRequestFilterSensitiveLog, InvokeModelResponseFilterSensitiveLog).ser(se_InvokeModelCommand).de(de_InvokeModelCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/commands/InvokeModelWithBidirectionalStreamCommand.js
var InvokeModelWithBidirectionalStreamCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions()),
    getEventStreamPlugin(config),
    getWebSocketPlugin(config, {
      headerPrefix: "x-amz-bedrock-"
    })
  ];
}).s("AmazonBedrockFrontendService", "InvokeModelWithBidirectionalStream", {
  eventStream: {
    input: true,
    output: true
  }
}).n("BedrockRuntimeClient", "InvokeModelWithBidirectionalStreamCommand").f(InvokeModelWithBidirectionalStreamRequestFilterSensitiveLog, InvokeModelWithBidirectionalStreamResponseFilterSensitiveLog).ser(se_InvokeModelWithBidirectionalStreamCommand).de(de_InvokeModelWithBidirectionalStreamCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/commands/InvokeModelWithResponseStreamCommand.js
var InvokeModelWithResponseStreamCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockFrontendService", "InvokeModelWithResponseStream", {
  eventStream: {
    output: true
  }
}).n("BedrockRuntimeClient", "InvokeModelWithResponseStreamCommand").f(InvokeModelWithResponseStreamRequestFilterSensitiveLog, InvokeModelWithResponseStreamResponseFilterSensitiveLog).ser(se_InvokeModelWithResponseStreamCommand).de(de_InvokeModelWithResponseStreamCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/commands/ListAsyncInvokesCommand.js
var ListAsyncInvokesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockFrontendService", "ListAsyncInvokes", {}).n("BedrockRuntimeClient", "ListAsyncInvokesCommand").f(void 0, ListAsyncInvokesResponseFilterSensitiveLog).ser(se_ListAsyncInvokesCommand).de(de_ListAsyncInvokesCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/commands/StartAsyncInvokeCommand.js
var StartAsyncInvokeCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AmazonBedrockFrontendService", "StartAsyncInvoke", {}).n("BedrockRuntimeClient", "StartAsyncInvokeCommand").f(StartAsyncInvokeRequestFilterSensitiveLog, void 0).ser(se_StartAsyncInvokeCommand).de(de_StartAsyncInvokeCommand).build() {
};

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/BedrockRuntime.js
var commands = {
  ApplyGuardrailCommand,
  ConverseCommand,
  ConverseStreamCommand,
  CountTokensCommand,
  GetAsyncInvokeCommand,
  InvokeModelCommand,
  InvokeModelWithBidirectionalStreamCommand,
  InvokeModelWithResponseStreamCommand,
  ListAsyncInvokesCommand,
  StartAsyncInvokeCommand
};
var BedrockRuntime = class extends BedrockRuntimeClient {
};
createAggregatedClient(commands, BedrockRuntime);

// node_modules/@aws-sdk/client-bedrock-runtime/dist-es/pagination/ListAsyncInvokesPaginator.js
var paginateListAsyncInvokes = createPaginator(BedrockRuntimeClient, ListAsyncInvokesCommand, "nextToken", "nextToken", "maxResults");
export {
  Command as $Command,
  AccessDeniedException,
  ApplyGuardrailCommand,
  ApplyGuardrailRequestFilterSensitiveLog,
  ApplyGuardrailResponseFilterSensitiveLog,
  AsyncInvokeOutputDataConfig,
  AsyncInvokeStatus,
  AsyncInvokeSummaryFilterSensitiveLog,
  BedrockRuntime,
  BedrockRuntimeClient,
  BedrockRuntimeServiceException,
  BidirectionalInputPayloadPartFilterSensitiveLog,
  BidirectionalOutputPayloadPartFilterSensitiveLog,
  CachePointType,
  CitationGeneratedContent,
  CitationLocation,
  CitationSourceContent,
  ConflictException,
  ContentBlock,
  ContentBlockDelta,
  ContentBlockDeltaEventFilterSensitiveLog,
  ContentBlockDeltaFilterSensitiveLog,
  ContentBlockFilterSensitiveLog,
  ContentBlockStart,
  ConversationRole,
  ConverseCommand,
  ConverseOutput,
  ConverseOutputFilterSensitiveLog,
  ConverseRequestFilterSensitiveLog,
  ConverseResponseFilterSensitiveLog,
  ConverseStreamCommand,
  ConverseStreamMetadataEventFilterSensitiveLog,
  ConverseStreamOutput,
  ConverseStreamOutputFilterSensitiveLog,
  ConverseStreamRequestFilterSensitiveLog,
  ConverseStreamResponseFilterSensitiveLog,
  ConverseStreamTraceFilterSensitiveLog,
  ConverseTokensRequestFilterSensitiveLog,
  ConverseTraceFilterSensitiveLog,
  CountTokensCommand,
  CountTokensInput,
  CountTokensInputFilterSensitiveLog,
  CountTokensRequestFilterSensitiveLog,
  DocumentContentBlock,
  DocumentFormat,
  DocumentSource,
  GetAsyncInvokeCommand,
  GetAsyncInvokeResponseFilterSensitiveLog,
  GuardrailAction,
  GuardrailAssessmentFilterSensitiveLog,
  GuardrailAutomatedReasoningFinding,
  GuardrailAutomatedReasoningFindingFilterSensitiveLog,
  GuardrailAutomatedReasoningImpossibleFindingFilterSensitiveLog,
  GuardrailAutomatedReasoningInputTextReferenceFilterSensitiveLog,
  GuardrailAutomatedReasoningInvalidFindingFilterSensitiveLog,
  GuardrailAutomatedReasoningLogicWarningFilterSensitiveLog,
  GuardrailAutomatedReasoningLogicWarningType,
  GuardrailAutomatedReasoningPolicyAssessmentFilterSensitiveLog,
  GuardrailAutomatedReasoningSatisfiableFindingFilterSensitiveLog,
  GuardrailAutomatedReasoningScenarioFilterSensitiveLog,
  GuardrailAutomatedReasoningStatementFilterSensitiveLog,
  GuardrailAutomatedReasoningTranslationAmbiguousFindingFilterSensitiveLog,
  GuardrailAutomatedReasoningTranslationFilterSensitiveLog,
  GuardrailAutomatedReasoningTranslationOptionFilterSensitiveLog,
  GuardrailAutomatedReasoningValidFindingFilterSensitiveLog,
  GuardrailContentBlock,
  GuardrailContentBlockFilterSensitiveLog,
  GuardrailContentFilterConfidence,
  GuardrailContentFilterStrength,
  GuardrailContentFilterType,
  GuardrailContentPolicyAction,
  GuardrailContentQualifier,
  GuardrailContentSource,
  GuardrailContextualGroundingFilterType,
  GuardrailContextualGroundingPolicyAction,
  GuardrailConverseContentBlock,
  GuardrailConverseContentBlockFilterSensitiveLog,
  GuardrailConverseContentQualifier,
  GuardrailConverseImageBlockFilterSensitiveLog,
  GuardrailConverseImageFormat,
  GuardrailConverseImageSource,
  GuardrailConverseImageSourceFilterSensitiveLog,
  GuardrailImageBlockFilterSensitiveLog,
  GuardrailImageFormat,
  GuardrailImageSource,
  GuardrailImageSourceFilterSensitiveLog,
  GuardrailManagedWordType,
  GuardrailOutputScope,
  GuardrailPiiEntityType,
  GuardrailSensitiveInformationPolicyAction,
  GuardrailStreamProcessingMode,
  GuardrailTopicPolicyAction,
  GuardrailTopicType,
  GuardrailTrace,
  GuardrailTraceAssessmentFilterSensitiveLog,
  GuardrailWordPolicyAction,
  ImageFormat,
  ImageSource,
  InternalServerException,
  InvokeModelCommand,
  InvokeModelRequestFilterSensitiveLog,
  InvokeModelResponseFilterSensitiveLog,
  InvokeModelTokensRequestFilterSensitiveLog,
  InvokeModelWithBidirectionalStreamCommand,
  InvokeModelWithBidirectionalStreamInput,
  InvokeModelWithBidirectionalStreamInputFilterSensitiveLog,
  InvokeModelWithBidirectionalStreamOutput,
  InvokeModelWithBidirectionalStreamOutputFilterSensitiveLog,
  InvokeModelWithBidirectionalStreamRequestFilterSensitiveLog,
  InvokeModelWithBidirectionalStreamResponseFilterSensitiveLog,
  InvokeModelWithResponseStreamCommand,
  InvokeModelWithResponseStreamRequestFilterSensitiveLog,
  InvokeModelWithResponseStreamResponseFilterSensitiveLog,
  ListAsyncInvokesCommand,
  ListAsyncInvokesResponseFilterSensitiveLog,
  MessageFilterSensitiveLog,
  ModelErrorException,
  ModelNotReadyException,
  ModelStreamErrorException,
  ModelTimeoutException,
  PayloadPartFilterSensitiveLog,
  PerformanceConfigLatency,
  PromptVariableValues,
  ReasoningContentBlock,
  ReasoningContentBlockDelta,
  ReasoningContentBlockDeltaFilterSensitiveLog,
  ReasoningContentBlockFilterSensitiveLog,
  ReasoningTextBlockFilterSensitiveLog,
  ResourceNotFoundException,
  ResponseStream,
  ResponseStreamFilterSensitiveLog,
  ServiceQuotaExceededException,
  ServiceUnavailableException,
  SortAsyncInvocationBy,
  SortOrder,
  StartAsyncInvokeCommand,
  StartAsyncInvokeRequestFilterSensitiveLog,
  StopReason,
  SystemContentBlock,
  SystemContentBlockFilterSensitiveLog,
  ThrottlingException,
  Tool,
  ToolChoice,
  ToolInputSchema,
  ToolResultContentBlock,
  ToolResultStatus,
  Trace,
  ValidationException,
  VideoFormat,
  VideoSource,
  Client as __Client,
  paginateListAsyncInvokes
};
//# sourceMappingURL=@aws-sdk_client-bedrock-runtime.js.map
