{"version":3,"file":"SharedNote-BHUhPUcP.js","sources":["../../../../node_modules/uuid/dist/esm-browser/rng.js","../../../../node_modules/uuid/dist/esm-browser/stringify.js","../../../../node_modules/uuid/dist/esm-browser/native.js","../../../../node_modules/uuid/dist/esm-browser/v4.js","../../src/services/noteSharing.service.ts","../../src/pages/SharedNote.tsx"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","/**\n * HIPAA-Compliant Note Sharing Service\n * Handles secure sharing of medical notes with audit logging\n */\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { supabase } from '../lib/supabase';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface ShareableNote {\n  id: string;\n  noteContent: string;\n  patientName: string;\n  patientMRN: string;\n  createdBy: string;\n  createdAt: string;\n  noteType: 'dictation' | 'ambient' | 'quick-note';\n  metadata?: {\n    template?: string;\n    specialty?: string;\n    duration?: number;\n  };\n}\n\nexport interface ShareRequest {\n  noteId: string;\n  recipientEmail: string;\n  recipientName: string;\n  recipientType: 'physician' | 'specialist' | 'hospital' | 'patient' | 'other';\n  shareMethod: 'email' | 'secure-link' | 'fax' | 'direct-message';\n  expirationHours?: number; // Default 72 hours\n  requireAuth?: boolean;\n  message?: string;\n  permissions: {\n    canView: boolean;\n    canDownload: boolean;\n    canForward: boolean;\n  };\n}\n\nexport interface ShareRecord {\n  id: string;\n  shareToken: string;\n  noteId: string;\n  sharedBy: string;\n  sharedWith: string;\n  recipientEmail: string;\n  recipientName: string;\n  recipientType: string;\n  shareMethod: string;\n  sharedAt: string;\n  expiresAt: string;\n  accessedAt?: string;\n  accessCount: number;\n  ipAddresses: string[];\n  status: 'pending' | 'sent' | 'viewed' | 'expired' | 'revoked';\n  permissions: ShareRequest['permissions'];\n}\n\nexport interface AuditLog {\n  id: string;\n  action: 'share' | 'view' | 'download' | 'revoke' | 'expire';\n  noteId: string;\n  userId?: string;\n  recipientEmail?: string;\n  ipAddress?: string;\n  userAgent?: string;\n  timestamp: string;\n  details?: any;\n}\n\nclass NotesSharingService {\n  private readonly SHARE_BASE_URL = import.meta.env.VITE_APP_URL || 'https://www.tshla.ai';\n  private readonly ENCRYPTION_KEY = import.meta.env.VITE_SHARE_ENCRYPTION_KEY || 'default-key';\n\n  /**\n   * Share a medical note with external party\n   * HIPAA Compliant with full audit trail\n   */\n  async shareNote(note: ShareableNote, request: ShareRequest): Promise<ShareRecord> {\n    try {\n      // Generate secure share token\n      const shareToken = this.generateSecureToken();\n      const shareId = uuidv4();\n\n      // Calculate expiration\n      const expirationHours = request.expirationHours || 72;\n      const expiresAt = new Date();\n      expiresAt.setHours(expiresAt.getHours() + expirationHours);\n\n      // Create share record\n      const shareRecord: ShareRecord = {\n        id: shareId,\n        shareToken,\n        noteId: note.id,\n        sharedBy: note.createdBy,\n        sharedWith: request.recipientEmail,\n        recipientEmail: request.recipientEmail,\n        recipientName: request.recipientName,\n        recipientType: request.recipientType,\n        shareMethod: request.shareMethod,\n        sharedAt: new Date().toISOString(),\n        expiresAt: expiresAt.toISOString(),\n        accessCount: 0,\n        ipAddresses: [],\n        status: 'pending',\n        permissions: request.permissions,\n      };\n\n      // Store encrypted note data\n      await this.storeSecureNote(shareId, note, shareRecord);\n\n      // Send based on share method\n      switch (request.shareMethod) {\n        case 'email':\n          await this.sendSecureEmail(shareRecord, note, request.message);\n          break;\n        case 'secure-link':\n          // Just generate link, don't send\n          break;\n        case 'fax':\n          await this.sendSecureFax(shareRecord, note);\n          break;\n        case 'direct-message':\n          await this.sendDirectMessage(shareRecord, note);\n          break;\n      }\n\n      // Log the share action\n      await this.logAudit({\n        id: uuidv4(),\n        action: 'share',\n        noteId: note.id,\n        userId: note.createdBy,\n        recipientEmail: request.recipientEmail,\n        timestamp: new Date().toISOString(),\n        details: {\n          shareMethod: request.shareMethod,\n          expirationHours,\n          permissions: request.permissions,\n        },\n      });\n\n      shareRecord.status = 'sent';\n      return shareRecord;\n    } catch (error) {\n      logError('noteSharing', 'Error message', {});\n      throw new Error('Failed to share note securely');\n    }\n  }\n\n  /**\n   * Generate secure shareable link\n   */\n  async generateShareLink(shareRecord: ShareRecord): Promise<string> {\n    const baseUrl = this.SHARE_BASE_URL;\n    const link = `${baseUrl}/shared-note/${shareRecord.shareToken}`;\n\n    // For additional security, could add time-based OTP\n    if (shareRecord.permissions.canView) {\n      return link;\n    }\n\n    return '';\n  }\n\n  /**\n   * Send secure email with encrypted note link\n   */\n  private async sendSecureEmail(\n    shareRecord: ShareRecord,\n    note: ShareableNote,\n    customMessage?: string\n  ): Promise<void> {\n    const shareLink = await this.generateShareLink(shareRecord);\n\n    const emailContent = {\n      to: shareRecord.recipientEmail,\n      subject: `Secure Medical Note Shared - ${note.patientName}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <div style=\"background: #005eb8; color: white; padding: 20px;\">\n            <h2>TSHLA Medical - Secure Note Share</h2>\n          </div>\n          \n          <div style=\"padding: 20px; background: #f5f5f5;\">\n            <p>Dear ${shareRecord.recipientName},</p>\n            \n            ${customMessage ? `<p>${customMessage}</p>` : ''}\n            \n            <p>A medical note has been securely shared with you:</p>\n            \n            <div style=\"background: white; padding: 15px; margin: 20px 0; border-left: 4px solid #005eb8;\">\n              <p><strong>Patient:</strong> ${note.patientName}</p>\n              <p><strong>MRN:</strong> ${note.patientMRN}</p>\n              <p><strong>Note Type:</strong> ${note.noteType}</p>\n              <p><strong>Created:</strong> ${new Date(note.createdAt).toLocaleString()}</p>\n              <p><strong>Shared By:</strong> ${note.createdBy}</p>\n            </div>\n            \n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${shareLink}\" \n                 style=\"background: #005eb8; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block;\">\n                View Secure Note\n              </a>\n            </div>\n            \n            <div style=\"background: #fff3cd; padding: 15px; margin: 20px 0; border: 1px solid #ffc107;\">\n              <p style=\"margin: 0;\"><strong>⚠️ Security Notice:</strong></p>\n              <ul style=\"margin: 10px 0;\">\n                <li>This link expires in ${shareRecord.expiresAt ? this.getHoursUntilExpiry(shareRecord.expiresAt) : 72} hours</li>\n                <li>Access is logged for HIPAA compliance</li>\n                <li>Do not forward this email without authorization</li>\n                ${shareRecord.permissions.requireAuth ? '<li>Authentication required to view</li>' : ''}\n              </ul>\n            </div>\n            \n            <p style=\"color: #666; font-size: 12px;\">\n              This email contains Protected Health Information (PHI). \n              If you received this in error, please delete immediately and notify the sender.\n            </p>\n          </div>\n          \n          <div style=\"background: #333; color: #fff; padding: 15px; text-align: center; font-size: 12px;\">\n            HIPAA Compliant • Encrypted • Audit Logged<br>\n            TSHLA Medical Systems\n          </div>\n        </div>\n      `,\n      text: `\n        Secure Medical Note Shared\n        \n        Patient: ${note.patientName}\n        MRN: ${note.patientMRN}\n        \n        View secure note: ${shareLink}\n        \n        This link expires in ${this.getHoursUntilExpiry(shareRecord.expiresAt)} hours.\n        \n        This message contains PHI and is HIPAA protected.\n      `,\n    };\n\n    // Send via HIPAA-compliant email service (SendGrid, AWS SES, etc.)\n    await this.sendEmail(emailContent);\n  }\n\n  /**\n   * Send email via secure service\n   */\n  private async sendEmail(content: any): Promise<void> {\n    // Using Supabase Edge Functions or AWS SES for HIPAA compliance\n    try {\n      // Option 1: Supabase Edge Function\n      const { data, error } = await supabase.functions.invoke('send-secure-email', {\n        body: content,\n      });\n\n      if (error) throw error;\n\n      // Option 2: Direct AWS SES (if configured)\n      // await this.sendViaSES(content);\n    } catch (error) {\n      logError('noteSharing', 'Error message', {});\n      // Log but don't throw - note is still shared via link\n    }\n  }\n\n  /**\n   * Send secure fax via HIPAA-compliant service\n   */\n  private async sendSecureFax(shareRecord: ShareRecord, note: ShareableNote): Promise<void> {\n    // Integration with HIPAA-compliant fax service (e.g., SRFax, Concord)\n    logDebug('noteSharing', 'Debug message', {});\n\n    // Would integrate with service like:\n    // await srfaxClient.sendFax({\n    //   to: shareRecord.recipientEmail, // Should be fax number\n    //   content: this.formatNoteForFax(note),\n    //   coverPage: this.generateFaxCover(shareRecord)\n    // });\n  }\n\n  /**\n   * Send via Direct Messaging (healthcare-specific protocol)\n   */\n  private async sendDirectMessage(shareRecord: ShareRecord, note: ShareableNote): Promise<void> {\n    // Direct Messaging is a HIPAA-compliant protocol for healthcare\n    logDebug('noteSharing', 'Debug message', {});\n\n    // Would integrate with Direct Messaging service\n    // This is used for provider-to-provider secure communication\n  }\n\n  /**\n   * Store encrypted note in database\n   */\n  private async storeSecureNote(\n    shareId: string,\n    note: ShareableNote,\n    shareRecord: ShareRecord\n  ): Promise<void> {\n    // Encrypt the note content\n    const encryptedContent = this.encryptData(note.noteContent);\n\n    // Store in Supabase with encryption\n    const { error } = await supabase.from('shared_notes').insert({\n      id: shareId,\n      share_token: shareRecord.shareToken,\n      encrypted_content: encryptedContent,\n      patient_name: note.patientName,\n      patient_mrn: note.patientMRN,\n      created_by: note.createdBy,\n      shared_with: shareRecord.recipientEmail,\n      expires_at: shareRecord.expiresAt,\n      permissions: shareRecord.permissions,\n      status: 'active',\n    });\n\n    if (error) {\n      logError('noteSharing', 'Error message', {});\n      // Fallback to sessionStorage for demo\n      sessionStorage.setItem(\n        `share_${shareRecord.shareToken}`,\n        JSON.stringify({\n          note,\n          shareRecord,\n          encrypted: true,\n        })\n      );\n    }\n  }\n\n  /**\n   * Retrieve shared note by token\n   */\n  async getSharedNote(shareToken: string, ipAddress?: string): Promise<ShareableNote | null> {\n    try {\n      // First check if token is valid and not expired\n      const { data: shareData, error } = await supabase\n        .from('shared_notes')\n        .select('*')\n        .eq('share_token', shareToken)\n        .single();\n\n      if (error || !shareData) {\n        // Fallback to sessionStorage\n        const stored = sessionStorage.getItem(`share_${shareToken}`);\n        if (stored) {\n          const parsed = JSON.parse(stored);\n          return parsed.note;\n        }\n        return null;\n      }\n\n      // Check expiration\n      if (new Date(shareData.expires_at) < new Date()) {\n        await this.logAudit({\n          id: uuidv4(),\n          action: 'expire',\n          noteId: shareData.id,\n          timestamp: new Date().toISOString(),\n        });\n        return null;\n      }\n\n      // Decrypt content\n      const decryptedContent = this.decryptData(shareData.encrypted_content);\n\n      // Update access tracking\n      await supabase\n        .from('shared_notes')\n        .update({\n          access_count: shareData.access_count + 1,\n          last_accessed: new Date().toISOString(),\n          ip_addresses: [...(shareData.ip_addresses || []), ipAddress].filter(Boolean),\n        })\n        .eq('share_token', shareToken);\n\n      // Log access\n      await this.logAudit({\n        id: uuidv4(),\n        action: 'view',\n        noteId: shareData.id,\n        recipientEmail: shareData.shared_with,\n        ipAddress,\n        timestamp: new Date().toISOString(),\n      });\n\n      return {\n        id: shareData.id,\n        noteContent: decryptedContent,\n        patientName: shareData.patient_name,\n        patientMRN: shareData.patient_mrn,\n        createdBy: shareData.created_by,\n        createdAt: shareData.created_at,\n        noteType: shareData.note_type || 'dictation',\n      };\n    } catch (error) {\n      logError('noteSharing', 'Error message', {});\n      return null;\n    }\n  }\n\n  /**\n   * Revoke a shared note\n   */\n  async revokeShare(shareToken: string, revokedBy: string): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('shared_notes')\n        .update({\n          status: 'revoked',\n          revoked_at: new Date().toISOString(),\n          revoked_by: revokedBy,\n        })\n        .eq('share_token', shareToken);\n\n      if (!error) {\n        await this.logAudit({\n          id: uuidv4(),\n          action: 'revoke',\n          noteId: shareToken,\n          userId: revokedBy,\n          timestamp: new Date().toISOString(),\n        });\n        return true;\n      }\n\n      // Fallback - remove from sessionStorage\n      sessionStorage.removeItem(`share_${shareToken}`);\n      return true;\n    } catch (error) {\n      logError('noteSharing', 'Error message', {});\n      return false;\n    }\n  }\n\n  /**\n   * Get all shares for a user\n   */\n  async getUserShares(userId: string): Promise<ShareRecord[]> {\n    try {\n      const { data, error } = await supabase\n        .from('shared_notes')\n        .select('*')\n        .eq('created_by', userId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      logError('noteSharing', 'Error message', {});\n      return [];\n    }\n  }\n\n  /**\n   * Utility Functions\n   */\n\n  private generateSecureToken(): string {\n    // Generate cryptographically secure token\n    const array = new Uint8Array(32);\n    crypto.getRandomValues(array);\n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n  }\n\n  private encryptData(data: string): string {\n    // Simple encryption - in production use proper encryption library\n    // This is placeholder - use crypto-js or similar\n    return btoa(encodeURIComponent(data));\n  }\n\n  private decryptData(encryptedData: string): string {\n    // Simple decryption - in production use proper encryption library\n    try {\n      return decodeURIComponent(atob(encryptedData));\n    } catch {\n      return encryptedData;\n    }\n  }\n\n  private getHoursUntilExpiry(expiresAt: string): number {\n    const now = new Date();\n    const expiry = new Date(expiresAt);\n    const hours = Math.round((expiry.getTime() - now.getTime()) / (1000 * 60 * 60));\n    return Math.max(0, hours);\n  }\n\n  private async logAudit(log: AuditLog): Promise<void> {\n    try {\n      // Store in Supabase audit log table\n      await supabase.from('audit_logs').insert(log);\n    } catch (error) {\n      // Fallback to console for demo\n      logDebug('noteSharing', 'Debug message', {});\n    }\n  }\n}\n\nexport const noteSharingService = new NotesSharingService();\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { noteSharingService, type ShareableNote } from '../services/noteSharing.service';\nimport './SharedNote.css';\n\nexport default function SharedNote() {\n  const { token } = useParams<{ token: string }>();\n  const [note, setNote] = useState<ShareableNote | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [downloading, setDownloading] = useState(false);\n\n  useEffect(() => {\n    if (token) {\n      loadSharedNote(token);\n    }\n  }, [token]);\n\n  const loadSharedNote = async (shareToken: string) => {\n    try {\n      setLoading(true);\n      const sharedNote = await noteSharingService.getSharedNote(shareToken);\n\n      if (sharedNote) {\n        setNote(sharedNote);\n      } else {\n        setError('This note has expired or is no longer available.');\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to load shared note');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDownload = () => {\n    if (!note) return;\n\n    setDownloading(true);\n\n    // Create a blob with the note content\n    const noteText = `\nMEDICAL NOTE\n============================================\nPatient: ${note.patientName}\nMRN: ${note.patientMRN}\nDate: ${new Date(note.createdAt).toLocaleString()}\nType: ${note.noteType}\nCreated By: ${note.createdBy}\n============================================\n\n${note.noteContent}\n\n============================================\nThis document contains Protected Health Information (PHI)\nShared via TSHLA Medical - HIPAA Compliant Platform\n`;\n\n    const blob = new Blob([noteText], { type: 'text/plain' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `medical_note_${note.patientMRN}_${new Date().toISOString().split('T')[0]}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n\n    setDownloading(false);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"shared-note-container\">\n        <div className=\"loading-state\">\n          <div className=\"spinner\"></div>\n          <p>Loading secure note...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"shared-note-container\">\n        <div className=\"error-state\">\n          <div className=\"error-icon\">🔒</div>\n          <h2>Access Denied</h2>\n          <p>{error}</p>\n          <div className=\"error-details\">\n            <p>Possible reasons:</p>\n            <ul>\n              <li>The link has expired</li>\n              <li>The note has been revoked</li>\n              <li>Invalid access token</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!note) {\n    return (\n      <div className=\"shared-note-container\">\n        <div className=\"error-state\">\n          <p>No note found</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"shared-note-container\">\n      <div className=\"shared-note-header\">\n        <div className=\"header-content\">\n          <div className=\"logo-section\">\n            <h1>🏥 TSHLA Medical</h1>\n            <span className=\"secure-badge\">🔒 Secure Document</span>\n          </div>\n          <div className=\"actions\">\n            <button onClick={handlePrint} className=\"action-btn print-btn\">\n              🖨️ Print\n            </button>\n            <button\n              onClick={handleDownload}\n              className=\"action-btn download-btn\"\n              disabled={downloading}\n            >\n              {downloading ? 'Downloading...' : '📥 Download'}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"hipaa-banner\">\n        <strong>⚠️ HIPAA Notice:</strong> This document contains Protected Health Information (PHI).\n        Access is being logged for compliance. Do not share without proper authorization.\n      </div>\n\n      <div className=\"shared-note-content\">\n        <div className=\"note-metadata\">\n          <h2>Medical Note</h2>\n          <div className=\"metadata-grid\">\n            <div className=\"metadata-item\">\n              <label>Patient Name:</label>\n              <span>{note.patientName}</span>\n            </div>\n            <div className=\"metadata-item\">\n              <label>MRN:</label>\n              <span>{note.patientMRN}</span>\n            </div>\n            <div className=\"metadata-item\">\n              <label>Note Type:</label>\n              <span className=\"note-type-badge\">{note.noteType}</span>\n            </div>\n            <div className=\"metadata-item\">\n              <label>Created:</label>\n              <span>{new Date(note.createdAt).toLocaleString()}</span>\n            </div>\n            <div className=\"metadata-item\">\n              <label>Created By:</label>\n              <span>{note.createdBy}</span>\n            </div>\n            {note.metadata?.specialty && (\n              <div className=\"metadata-item\">\n                <label>Specialty:</label>\n                <span>{note.metadata.specialty}</span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"note-body\">\n          <pre className=\"note-text\">{note.noteContent}</pre>\n        </div>\n\n        <div className=\"note-footer\">\n          <p className=\"footer-text\">\n            This medical note was shared securely through TSHLA Medical's HIPAA-compliant platform.\n            All access to this document is logged and audited for compliance purposes.\n          </p>\n          <p className=\"footer-timestamp\">Document accessed: {new Date().toLocaleString()}</p>\n        </div>\n      </div>\n\n      <div className=\"security-footer\">\n        <div className=\"security-info\">\n          <span>🔐 End-to-end encrypted</span>\n          <span>📝 Audit logged</span>\n          <span>✅ HIPAA compliant</span>\n          <span>⏱️ Time-limited access</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["getRandomValues","rnds8","rng","byteToHex","i","unsafeStringify","arr","offset","randomUUID","native","v4","options","buf","rnds","NotesSharingService","note","request","shareToken","shareId","uuidv4","expirationHours","expiresAt","shareRecord","logError","link","customMessage","shareLink","emailContent","content","data","error","supabase","logDebug","encryptedContent","ipAddress","shareData","stored","decryptedContent","revokedBy","userId","array","byte","encryptedData","now","expiry","hours","log","noteSharingService","SharedNote","token","useParams","setNote","useState","loading","setLoading","setError","downloading","setDownloading","useEffect","loadSharedNote","sharedNote","err","handleDownload","noteText","blob","url","a","handlePrint","jsxs","jsx"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}