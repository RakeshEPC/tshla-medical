{"version":3,"file":"freeTextMCP.service-DWWgKB3l.js","sources":["../../src/services/freeTextMCP.service.ts"],"sourcesContent":["import { logError, logWarn, logInfo, logDebug } from './logger.service';\ninterface FreeTextAnalysis {\n  currentSituation: string;\n  fears: string;\n  excitement: string;\n  wordCount: number;\n  sentimentScore: number;\n  keyThemes: string;\n}\n\ninterface FreeTextResponse {\n  id: string;\n  sessionId: string;\n  currentSituation: string;\n  fears: string;\n  excitement: string;\n  fullResponse: string;\n  wordCount: number;\n  sentimentScore: number;\n  keyThemes: string;\n  createdAt: number;\n  updatedAt: number;\n}\n\ninterface SaveFreeTextResult {\n  success: boolean;\n  responseId: string;\n  sessionId: string;\n  wordCount: number;\n  timestamp: number;\n}\n\ninterface GetFreeTextResult {\n  success: boolean;\n  response: FreeTextResponse | null;\n}\n\nclass FreeTextMCPService {\n  private mcpEndpoint = ''; // Disabled - using local storage only\n\n  /**\n   * Save free text response to MCP server (with fallback)\n   */\n  async saveFreeTextResponse(\n    sessionId: string,\n    freeText: string,\n    analysis?: Partial<FreeTextAnalysis>\n  ): Promise<SaveFreeTextResult> {\n    try {\n      logDebug('freeTextMCP', 'Debug message', {});\n\n      const payload = {\n        tool: 'save_free_text_response',\n        args: {\n          sessionId,\n          freeText,\n          analysis: analysis\n            ? {\n                currentSituation: analysis.currentSituation || '',\n                fears: analysis.fears || '',\n                excitement: analysis.excitement || '',\n                wordCount: analysis.wordCount || freeText.split(' ').length,\n                sentimentScore: analysis.sentimentScore || 0.0,\n                keyThemes: analysis.keyThemes || '',\n              }\n            : undefined,\n        },\n      };\n\n      const response = await fetch(this.mcpEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n        // Add timeout to prevent hanging\n        signal: AbortSignal.timeout(3000),\n      });\n\n      if (!response.ok) {\n        throw new Error(`MCP call failed: ${response.status}`);\n      }\n\n      const result = await response.json();\n      logInfo('freeTextMCP', 'Info message', {});\n\n      return result;\n    } catch (error) {\n      logWarn('freeTextMCP', 'Warning message', {});\n\n      // Return a mock success response - the important data is already in sessionStorage\n      return {\n        success: true,\n        responseId: `local_${sessionId}_${Date.now()}`,\n        sessionId,\n        wordCount: freeText.split(' ').filter(word => word.length > 0).length,\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * Get free text response from MCP server (with fallback)\n   */\n  async getFreeTextResponse(sessionId: string): Promise<GetFreeTextResult> {\n    try {\n      logDebug('freeTextMCP', 'Debug message', {});\n\n      const payload = {\n        tool: 'get_free_text_response',\n        args: {\n          sessionId,\n        },\n      };\n\n      const response = await fetch(this.mcpEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n        // Add timeout to prevent hanging\n        signal: AbortSignal.timeout(3000),\n      });\n\n      if (!response.ok) {\n        throw new Error(`MCP call failed: ${response.status}`);\n      }\n\n      const result = await response.json();\n      logInfo('freeTextMCP', 'Info message', {});\n\n      return result;\n    } catch (error) {\n      logWarn('freeTextMCP', 'Warning message', {});\n\n      // Try to get data from sessionStorage as fallback\n      try {\n        const storedData = sessionStorage.getItem('pumpDriveFreeText');\n        if (storedData) {\n          const parsedData = JSON.parse(storedData);\n          return {\n            success: true,\n            response: {\n              id: `local_${sessionId}`,\n              sessionId,\n              currentSituation: parsedData.currentSituation || '',\n              fears: '',\n              excitement: '',\n              fullResponse: parsedData.currentSituation || '',\n              wordCount:\n                parsedData.currentSituation?.split(' ').filter((w: string) => w.length > 0)\n                  .length || 0,\n              sentimentScore: 0,\n              keyThemes: '',\n              createdAt: Date.now(),\n              updatedAt: Date.now(),\n            },\n          };\n        }\n      } catch (storageError) {\n        logWarn('freeTextMCP', 'Warning message', {});\n      }\n\n      return {\n        success: false,\n        response: null,\n      };\n    }\n  }\n\n  /**\n   * Analyze free text for themes, sentiment, and categorization\n   */\n  analyzeText(text: string): Partial<FreeTextAnalysis> {\n    const words = text.split(/\\s+/).filter(word => word.length > 0);\n    const wordCount = words.length;\n\n    // Simple sentiment analysis based on keywords\n    const positiveWords = [\n      'excited',\n      'better',\n      'improved',\n      'freedom',\n      'easier',\n      'love',\n      'good',\n      'great',\n      'amazing',\n      'happy',\n    ];\n    const negativeWords = [\n      'scared',\n      'worried',\n      'difficult',\n      'hard',\n      'problem',\n      'issue',\n      'hate',\n      'bad',\n      'terrible',\n      'afraid',\n    ];\n    const fearWords = ['scared', 'afraid', 'worried', 'anxious', 'nervous', 'concern', 'fear'];\n    const excitementWords = ['excited', 'looking forward', \"can't wait\", 'thrilled', 'eager'];\n\n    let positiveCount = 0;\n    let negativeCount = 0;\n    let fearCount = 0;\n    let excitementCount = 0;\n\n    const lowerText = text.toLowerCase();\n\n    positiveWords.forEach(word => {\n      if (lowerText.includes(word)) positiveCount++;\n    });\n\n    negativeWords.forEach(word => {\n      if (lowerText.includes(word)) negativeCount++;\n    });\n\n    fearWords.forEach(word => {\n      if (lowerText.includes(word)) fearCount++;\n    });\n\n    excitementWords.forEach(word => {\n      if (lowerText.includes(word)) excitementCount++;\n    });\n\n    // Calculate sentiment score (-1 to 1)\n    const sentimentScore =\n      positiveCount > 0 || negativeCount > 0\n        ? (positiveCount - negativeCount) / (positiveCount + negativeCount)\n        : 0;\n\n    // Extract key themes based on common pump-related topics\n    const themes = [];\n    if (\n      lowerText.includes('current') ||\n      lowerText.includes('now') ||\n      lowerText.includes('currently')\n    ) {\n      themes.push('current situation');\n    }\n    if (lowerText.includes('cgm') || lowerText.includes('sensor')) {\n      themes.push('CGM/sensors');\n    }\n    if (lowerText.includes('tube') || lowerText.includes('tubing')) {\n      themes.push('tubing concerns');\n    }\n    if (lowerText.includes('battery') || lowerText.includes('charging')) {\n      themes.push('power/battery');\n    }\n    if (lowerText.includes('control') || lowerText.includes('management')) {\n      themes.push('diabetes control');\n    }\n    if (\n      lowerText.includes('exercise') ||\n      lowerText.includes('activity') ||\n      lowerText.includes('sport')\n    ) {\n      themes.push('physical activity');\n    }\n\n    return {\n      wordCount,\n      sentimentScore: Math.round(sentimentScore * 100) / 100, // Round to 2 decimal places\n      keyThemes: themes.join(', '),\n      fears: fearCount > 0 ? 'Mentions fears/concerns' : '',\n      excitement: excitementCount > 0 ? 'Expresses excitement' : '',\n    };\n  }\n\n  /**\n   * Generate a session ID for tracking user responses\n   */\n  generateSessionId(): string {\n    return `ft_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n  }\n}\n\nexport const freeTextMCPService = new FreeTextMCPService();\nexport type { FreeTextResponse, FreeTextAnalysis, SaveFreeTextResult, GetFreeTextResult };\n"],"names":["FreeTextMCPService","sessionId","freeText","analysis","logDebug","payload","response","result","logInfo","logWarn","word","storedData","parsedData","w","text","wordCount","positiveWords","negativeWords","fearWords","excitementWords","positiveCount","negativeCount","fearCount","excitementCount","lowerText","sentimentScore","themes","freeTextMCPService"],"mappings":"sDAqCA,MAAMA,CAAmB,CACf,YAAc,GAKtB,MAAM,qBACJC,EACAC,EACAC,EAC6B,CAC7B,GAAI,CACFC,EAAS,cAAe,gBAAiB,EAAE,EAE3C,MAAMC,EAAU,CACd,KAAM,0BACN,KAAM,CACJ,UAAAJ,EACA,SAAAC,EACA,SAAUC,EACN,CACE,iBAAkBA,EAAS,kBAAoB,GAC/C,MAAOA,EAAS,OAAS,GACzB,WAAYA,EAAS,YAAc,GACnC,UAAWA,EAAS,WAAaD,EAAS,MAAM,GAAG,EAAE,OACrD,eAAgBC,EAAS,gBAAkB,EAC3C,UAAWA,EAAS,WAAa,EAAA,EAEnC,MAAA,CACN,EAGIG,EAAW,MAAM,MAAM,KAAK,YAAa,CAC7C,OAAQ,OACR,QAAS,CACP,eAAgB,kBAAA,EAElB,KAAM,KAAK,UAAUD,CAAO,EAE5B,OAAQ,YAAY,QAAQ,GAAI,CAAA,CACjC,EAED,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,oBAAoBA,EAAS,MAAM,EAAE,EAGvD,MAAMC,EAAS,MAAMD,EAAS,KAAA,EAC9B,OAAAE,EAAQ,cAAe,eAAgB,EAAE,EAElCD,CACT,MAAgB,CACd,OAAAE,EAAQ,cAAe,kBAAmB,EAAE,EAGrC,CACL,QAAS,GACT,WAAY,SAASR,CAAS,IAAI,KAAK,KAAK,GAC5C,UAAAA,EACA,UAAWC,EAAS,MAAM,GAAG,EAAE,OAAOQ,GAAQA,EAAK,OAAS,CAAC,EAAE,OAC/D,UAAW,KAAK,IAAA,CAAI,CAExB,CACF,CAKA,MAAM,oBAAoBT,EAA+C,CACvE,GAAI,CACFG,EAAS,cAAe,gBAAiB,EAAE,EAE3C,MAAMC,EAAU,CACd,KAAM,yBACN,KAAM,CACJ,UAAAJ,CAAA,CACF,EAGIK,EAAW,MAAM,MAAM,KAAK,YAAa,CAC7C,OAAQ,OACR,QAAS,CACP,eAAgB,kBAAA,EAElB,KAAM,KAAK,UAAUD,CAAO,EAE5B,OAAQ,YAAY,QAAQ,GAAI,CAAA,CACjC,EAED,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,oBAAoBA,EAAS,MAAM,EAAE,EAGvD,MAAMC,EAAS,MAAMD,EAAS,KAAA,EAC9B,OAAAE,EAAQ,cAAe,eAAgB,EAAE,EAElCD,CACT,MAAgB,CACdE,EAAQ,cAAe,kBAAmB,EAAE,EAG5C,GAAI,CACF,MAAME,EAAa,eAAe,QAAQ,mBAAmB,EAC7D,GAAIA,EAAY,CACd,MAAMC,EAAa,KAAK,MAAMD,CAAU,EACxC,MAAO,CACL,QAAS,GACT,SAAU,CACR,GAAI,SAASV,CAAS,GACtB,UAAAA,EACA,iBAAkBW,EAAW,kBAAoB,GACjD,MAAO,GACP,WAAY,GACZ,aAAcA,EAAW,kBAAoB,GAC7C,UACEA,EAAW,kBAAkB,MAAM,GAAG,EAAE,OAAQC,GAAcA,EAAE,OAAS,CAAC,EACvE,QAAU,EACf,eAAgB,EAChB,UAAW,GACX,UAAW,KAAK,IAAA,EAChB,UAAW,KAAK,IAAA,CAAI,CACtB,CAEJ,CACF,MAAuB,CACrBJ,EAAQ,cAAe,kBAAmB,EAAE,CAC9C,CAEA,MAAO,CACL,QAAS,GACT,SAAU,IAAA,CAEd,CACF,CAKA,YAAYK,EAAyC,CAEnD,MAAMC,EADQD,EAAK,MAAM,KAAK,EAAE,OAAOJ,GAAQA,EAAK,OAAS,CAAC,EACtC,OAGlBM,EAAgB,CACpB,UACA,SACA,WACA,UACA,SACA,OACA,OACA,QACA,UACA,OAAA,EAEIC,EAAgB,CACpB,SACA,UACA,YACA,OACA,UACA,QACA,OACA,MACA,WACA,QAAA,EAEIC,EAAY,CAAC,SAAU,SAAU,UAAW,UAAW,UAAW,UAAW,MAAM,EACnFC,EAAkB,CAAC,UAAW,kBAAmB,aAAc,WAAY,OAAO,EAExF,IAAIC,EAAgB,EAChBC,EAAgB,EAChBC,EAAY,EACZC,EAAkB,EAEtB,MAAMC,EAAYV,EAAK,YAAA,EAEvBE,EAAc,QAAQN,GAAQ,CACxBc,EAAU,SAASd,CAAI,GAAGU,GAChC,CAAC,EAEDH,EAAc,QAAQP,GAAQ,CACxBc,EAAU,SAASd,CAAI,GAAGW,GAChC,CAAC,EAEDH,EAAU,QAAQR,GAAQ,CACpBc,EAAU,SAASd,CAAI,GAAGY,GAChC,CAAC,EAEDH,EAAgB,QAAQT,GAAQ,CAC1Bc,EAAU,SAASd,CAAI,GAAGa,GAChC,CAAC,EAGD,MAAME,EACJL,EAAgB,GAAKC,EAAgB,GAChCD,EAAgBC,IAAkBD,EAAgBC,GACnD,EAGAK,EAAS,CAAA,EACf,OACEF,EAAU,SAAS,SAAS,GAC5BA,EAAU,SAAS,KAAK,GACxBA,EAAU,SAAS,WAAW,IAE9BE,EAAO,KAAK,mBAAmB,GAE7BF,EAAU,SAAS,KAAK,GAAKA,EAAU,SAAS,QAAQ,IAC1DE,EAAO,KAAK,aAAa,GAEvBF,EAAU,SAAS,MAAM,GAAKA,EAAU,SAAS,QAAQ,IAC3DE,EAAO,KAAK,iBAAiB,GAE3BF,EAAU,SAAS,SAAS,GAAKA,EAAU,SAAS,UAAU,IAChEE,EAAO,KAAK,eAAe,GAEzBF,EAAU,SAAS,SAAS,GAAKA,EAAU,SAAS,YAAY,IAClEE,EAAO,KAAK,kBAAkB,GAG9BF,EAAU,SAAS,UAAU,GAC7BA,EAAU,SAAS,UAAU,GAC7BA,EAAU,SAAS,OAAO,IAE1BE,EAAO,KAAK,mBAAmB,EAG1B,CACL,UAAAX,EACA,eAAgB,KAAK,MAAMU,EAAiB,GAAG,EAAI,IACnD,UAAWC,EAAO,KAAK,IAAI,EAC3B,MAAOJ,EAAY,EAAI,0BAA4B,GACnD,WAAYC,EAAkB,EAAI,uBAAyB,EAAA,CAE/D,CAKA,mBAA4B,CAC1B,MAAO,MAAM,KAAK,IAAA,CAAK,IAAI,KAAK,OAAA,EAAS,SAAS,EAAE,EAAE,UAAU,EAAG,CAAC,CAAC,EACvE,CACF,CAEO,MAAMI,EAAqB,IAAI3B"}