{"version":3,"file":"StaffWorkflowDashboard-CqNuFBsl.js","sources":["../../src/services/actionExtraction.service.ts","../../src/services/noteActions.service.ts","../../src/components/ScheduleImporter.tsx","../../src/pages/StaffWorkflowDashboard.tsx"],"sourcesContent":["/**\n * Action Extraction Service\n * Parses doctor notes to extract medication and lab orders\n * Creates structured action items for staff to process\n */\n\nimport type {\n  ActionItems,\n  MedicationAction,\n  LabAction,\n  ExtractActionsRequest,\n  ExtractActionsResponse\n} from '../types/clinic.types';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nclass ActionExtractionService {\n  \n  /**\n   * Main extraction function - parses note text for actions\n   */\n  async extractActions(noteBody: string): Promise<ActionItems> {\n    const meds = this.extractMedications(noteBody);\n    const labs = this.extractLabs(noteBody);\n    \n    logDebug('actionExtraction', 'Debug message', {});\n    \n    return { meds, labs };\n  }\n  \n  /**\n   * Extract medication-related actions from text\n   */\n  private extractMedications(text: string): MedicationAction[] {\n    const medications: MedicationAction[] = [];\n    const normalizedText = text.toLowerCase();\n    \n    // Patterns for medication actions\n    const patterns = {\n      start: [\n        /\\bstart(?:ing|ed)?\\s+([a-z\\-]+(?:\\s+[a-z\\-]+)?)\\s+(\\d+(?:\\.\\d+)?)\\s*(mg|mcg|units?|ml|g)\\b/gi,\n        /\\binitiate(?:d)?\\s+([a-z\\-]+(?:\\s+[a-z\\-]+)?)\\s+(\\d+(?:\\.\\d+)?)\\s*(mg|mcg|units?|ml|g)\\b/gi,\n        /\\bbegin(?:ning)?\\s+([a-z\\-]+(?:\\s+[a-z\\-]+)?)\\s+(\\d+(?:\\.\\d+)?)\\s*(mg|mcg|units?|ml|g)\\b/gi\n      ],\n      stop: [\n        /\\bstop(?:ping|ped)?\\s+([a-z\\-]+(?:\\s+[a-z\\-]+)?)\\b/gi,\n        /\\bdiscontinue(?:d)?\\s+([a-z\\-]+(?:\\s+[a-z\\-]+)?)\\b/gi,\n        /\\bhold(?:ing)?\\s+([a-z\\-]+(?:\\s+[a-z\\-]+)?)\\b/gi\n      ],\n      refill: [\n        /\\brefill(?:ing|ed)?\\s+(?:all\\s+)?(?:meds|medications|([a-z\\-]+(?:\\s+[a-z\\-]+)?))\\b/gi,\n        /\\brenew(?:ing|ed)?\\s+([a-z\\-]+(?:\\s+[a-z\\-]+)?)\\b/gi,\n        /\\bcontinue\\s+(?:all\\s+)?(?:current\\s+)?(?:meds|medications|([a-z\\-]+(?:\\s+[a-z\\-]+)?))\\b/gi\n      ],\n      increase: [\n        /\\bincrease(?:d)?\\s+([a-z\\-]+(?:\\s+[a-z\\-]+)?)\\s+(?:to\\s+)?(\\d+(?:\\.\\d+)?)\\s*(mg|mcg|units?|ml|g)\\b/gi,\n        /\\braise(?:d)?\\s+([a-z\\-]+(?:\\s+[a-z\\-]+)?)\\s+(?:to\\s+)?(\\d+(?:\\.\\d+)?)\\s*(mg|mcg|units?|ml|g)\\b/gi,\n        /\\bup\\s+([a-z\\-]+(?:\\s+[a-z\\-]+)?)\\s+(?:to\\s+)?(\\d+(?:\\.\\d+)?)\\s*(mg|mcg|units?|ml|g)\\b/gi\n      ],\n      decrease: [\n        /\\bdecrease(?:d)?\\s+([a-z\\-]+(?:\\s+[a-z\\-]+)?)\\s+(?:to\\s+)?(\\d+(?:\\.\\d+)?)\\s*(mg|mcg|units?|ml|g)\\b/gi,\n        /\\blower(?:ed)?\\s+([a-z\\-]+(?:\\s+[a-z\\-]+)?)\\s+(?:to\\s+)?(\\d+(?:\\.\\d+)?)\\s*(mg|mcg|units?|ml|g)\\b/gi,\n        /\\breduce(?:d)?\\s+([a-z\\-]+(?:\\s+[a-z\\-]+)?)\\s+(?:to\\s+)?(\\d+(?:\\.\\d+)?)\\s*(mg|mcg|units?|ml|g)\\b/gi\n      ]\n    };\n    \n    // Process each action type\n    for (const [action, actionPatterns] of Object.entries(patterns)) {\n      for (const pattern of actionPatterns) {\n        const regex = new RegExp(pattern.source, pattern.flags);\n        let match;\n        \n        while ((match = regex.exec(text)) !== null) {\n          const drug = this.cleanDrugName(match[1]);\n          \n          // Skip if drug name is too generic\n          if (drug && !this.isGenericTerm(drug)) {\n            const medication: MedicationAction = {\n              action: action as MedicationAction['action'],\n              drug\n            };\n            \n            // Add dose if captured\n            if (match[2] && match[3]) {\n              medication.dose = `${match[2]} ${match[3]}`;\n            }\n            \n            // Try to extract frequency\n            const frequency = this.extractFrequency(text, match.index);\n            if (frequency) {\n              medication.frequency = frequency;\n            }\n            \n            medications.push(medication);\n          }\n        }\n      }\n    }\n    \n    // Also check for common medication mentions with context\n    this.extractCommonMedications(text, medications);\n    \n    // Remove duplicates\n    return this.deduplicateMedications(medications);\n  }\n  \n  /**\n   * Extract lab-related actions from text\n   */\n  private extractLabs(text: string): LabAction[] {\n    const labs: LabAction[] = [];\n    \n    // Common lab test names and abbreviations\n    const labTests = [\n      'A1C', 'HbA1c', 'hemoglobin A1C',\n      'CBC', 'complete blood count',\n      'CMP', 'comprehensive metabolic panel',\n      'BMP', 'basic metabolic panel',\n      'TSH', 'thyroid stimulating hormone',\n      'T3', 'T4', 'free T3', 'free T4',\n      'lipid panel', 'cholesterol', 'LDL', 'HDL', 'triglycerides',\n      'liver function', 'LFT', 'AST', 'ALT',\n      'kidney function', 'creatinine', 'BUN', 'eGFR',\n      'urinalysis', 'UA', 'urine',\n      'glucose', 'fasting glucose', 'random glucose',\n      'B12', 'vitamin B12', 'folate',\n      'vitamin D', '25-OH vitamin D',\n      'iron', 'ferritin', 'TIBC',\n      'PSA', 'prostate specific antigen',\n      'PT', 'INR', 'PTT',\n      'blood culture', 'urine culture',\n      'chest x-ray', 'CXR', 'EKG', 'ECG',\n      'cortisol', 'ACTH',\n      'testosterone', 'estrogen', 'progesterone',\n      'microalbumin', 'urine microalbumin'\n    ];\n    \n    // Patterns for lab orders\n    const orderPatterns = [\n      /\\border(?:ing|ed)?\\s+(?:labs?|blood\\s+work|tests?)?\\s*:?\\s*([^.]+)/gi,\n      /\\bcheck(?:ing)?\\s+(?:labs?|blood\\s+work)?\\s*:?\\s*([^.]+)/gi,\n      /\\bget(?:ting)?\\s+(?:labs?|blood\\s+work)?\\s*:?\\s*([^.]+)/gi,\n      /\\bdraw(?:ing)?\\s+(?:labs?|blood)?\\s*:?\\s*([^.]+)/gi,\n      /\\blabs?\\s+(?:to\\s+)?(?:order|check|draw)\\s*:?\\s*([^.]+)/gi,\n      /\\brepeat\\s+(?:labs?|([^.]+))/gi\n    ];\n    \n    // Process order patterns\n    for (const pattern of orderPatterns) {\n      let match;\n      while ((match = pattern.exec(text)) !== null) {\n        const labText = match[1];\n        if (labText) {\n          const extractedTests = this.extractTestNames(labText, labTests);\n          if (extractedTests.length > 0) {\n            labs.push({\n              action: 'order',\n              tests: extractedTests\n            });\n          }\n        }\n      }\n    }\n    \n    // Check for specific test mentions\n    const testMentionPattern = new RegExp(\n      `\\\\b(?:order|check|repeat|draw|get)\\\\s+(?:a\\\\s+)?(?:${labTests.join('|')})\\\\b`,\n      'gi'\n    );\n    \n    let match;\n    while ((match = testMentionPattern.exec(text)) !== null) {\n      const testName = this.extractSingleTest(match[0], labTests);\n      if (testName) {\n        // Check if this test is already in a lab order\n        const exists = labs.some(lab => \n          lab.tests.some(t => t.toLowerCase() === testName.toLowerCase())\n        );\n        \n        if (!exists) {\n          labs.push({\n            action: 'order',\n            tests: [testName]\n          });\n        }\n      }\n    }\n    \n    // Merge similar lab orders\n    return this.mergeLabs(labs);\n  }\n  \n  /**\n   * Extract common medications with specific patterns\n   */\n  private extractCommonMedications(text: string, medications: MedicationAction[]): void {\n    // Common diabetes medications\n    const diabetesMeds = [\n      'metformin', 'glipizide', 'glyburide', 'glimepiride',\n      'insulin', 'lantus', 'humalog', 'novolog', 'tresiba',\n      'ozempic', 'semaglutide', 'trulicity', 'victoza',\n      'jardiance', 'farxiga', 'invokana'\n    ];\n    \n    // Common thyroid medications\n    const thyroidMeds = [\n      'levothyroxine', 'synthroid', 'armour thyroid',\n      'liothyronine', 'cytomel'\n    ];\n    \n    // Common cardiac medications\n    const cardiacMeds = [\n      'lisinopril', 'enalapril', 'losartan', 'valsartan',\n      'metoprolol', 'atenolol', 'carvedilol',\n      'amlodipine', 'diltiazem', 'verapamil',\n      'furosemide', 'hydrochlorothiazide', 'spironolactone'\n    ];\n    \n    const allCommonMeds = [...diabetesMeds, ...thyroidMeds, ...cardiacMeds];\n    \n    for (const med of allCommonMeds) {\n      const medPattern = new RegExp(`\\\\b${med}\\\\b`, 'gi');\n      if (medPattern.test(text)) {\n        // Check context around the medication mention\n        const contextPattern = new RegExp(\n          `(start|stop|continue|refill|increase|decrease|hold|discontinue)\\\\s+(?:\\\\w+\\\\s+){0,3}${med}|` +\n          `${med}\\\\s+(?:\\\\w+\\\\s+){0,3}(started|stopped|continued|refilled|increased|decreased)`,\n          'gi'\n        );\n        \n        const contextMatch = contextPattern.exec(text);\n        if (contextMatch) {\n          const action = this.determineAction(contextMatch[1] || contextMatch[2]);\n          if (action && !this.medicationExists(medications, med)) {\n            medications.push({\n              action,\n              drug: med\n            });\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * Extract test names from text\n   */\n  private extractTestNames(text: string, knownTests: string[]): string[] {\n    const tests: string[] = [];\n    const normalizedText = text.toUpperCase();\n    \n    for (const test of knownTests) {\n      const testUpper = test.toUpperCase();\n      if (normalizedText.includes(testUpper)) {\n        tests.push(test);\n      }\n    }\n    \n    // Also check for comma or \"and\" separated lists\n    const listPattern = /\\b([A-Z0-9]+(?:\\s+[A-Z0-9]+)?)\\b/g;\n    let match;\n    while ((match = listPattern.exec(normalizedText)) !== null) {\n      const potential = match[1];\n      if (this.isLikelyLabTest(potential) && !tests.includes(potential)) {\n        tests.push(potential);\n      }\n    }\n    \n    return [...new Set(tests)]; // Remove duplicates\n  }\n  \n  /**\n   * Extract a single test name from match\n   */\n  private extractSingleTest(matchText: string, knownTests: string[]): string | null {\n    const upper = matchText.toUpperCase();\n    for (const test of knownTests) {\n      if (upper.includes(test.toUpperCase())) {\n        return test;\n      }\n    }\n    return null;\n  }\n  \n  /**\n   * Extract frequency information near a medication mention\n   */\n  private extractFrequency(text: string, nearIndex: number): string | null {\n    const frequencyPatterns = [\n      'QD', 'daily', 'once daily', 'once a day',\n      'BID', 'twice daily', 'twice a day', 'two times daily',\n      'TID', 'three times daily', 'three times a day',\n      'QID', 'four times daily', 'four times a day',\n      'QHS', 'at bedtime', 'bedtime',\n      'QAM', 'in the morning', 'morning',\n      'QPM', 'in the evening', 'evening',\n      'PRN', 'as needed', 'when needed',\n      'weekly', 'once weekly', 'every week',\n      'monthly', 'once monthly', 'every month'\n    ];\n    \n    // Look for frequency within 50 characters of the medication mention\n    const contextStart = Math.max(0, nearIndex - 50);\n    const contextEnd = Math.min(text.length, nearIndex + 100);\n    const context = text.substring(contextStart, contextEnd).toLowerCase();\n    \n    for (const freq of frequencyPatterns) {\n      if (context.includes(freq.toLowerCase())) {\n        return freq;\n      }\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Clean and normalize drug names\n   */\n  private cleanDrugName(name: string | undefined): string {\n    if (!name) return '';\n    \n    return name\n      .trim()\n      .replace(/\\s+/g, ' ')\n      .replace(/[^\\w\\s\\-]/g, '')\n      .toLowerCase();\n  }\n  \n  /**\n   * Check if term is too generic to be a drug name\n   */\n  private isGenericTerm(term: string): boolean {\n    const genericTerms = ['medication', 'medications', 'meds', 'drug', 'drugs', 'medicine', 'all'];\n    return genericTerms.includes(term.toLowerCase());\n  }\n  \n  /**\n   * Check if a medication already exists in the list\n   */\n  private medicationExists(medications: MedicationAction[], drug: string): boolean {\n    return medications.some(m => \n      m.drug.toLowerCase() === drug.toLowerCase()\n    );\n  }\n  \n  /**\n   * Determine action from verb\n   */\n  private determineAction(verb: string): MedicationAction['action'] | null {\n    const v = verb.toLowerCase();\n    if (v.includes('start') || v.includes('begin') || v.includes('initiate')) return 'start';\n    if (v.includes('stop') || v.includes('discontinue') || v.includes('hold')) return 'stop';\n    if (v.includes('continue') || v.includes('refill') || v.includes('renew')) return 'refill';\n    if (v.includes('increase') || v.includes('raise')) return 'increase';\n    if (v.includes('decrease') || v.includes('lower') || v.includes('reduce')) return 'decrease';\n    return null;\n  }\n  \n  /**\n   * Check if string is likely a lab test\n   */\n  private isLikelyLabTest(text: string): boolean {\n    // Common patterns for lab tests\n    return /^[A-Z]{2,4}$/.test(text) || // Acronyms like CBC, CMP\n           /^[A-Z]\\d+$/.test(text) ||    // Like B12, T3\n           /^\\d+-[A-Z]+/.test(text);     // Like 25-OH\n  }\n  \n  /**\n   * Remove duplicate medications\n   */\n  private deduplicateMedications(medications: MedicationAction[]): MedicationAction[] {\n    const seen = new Set<string>();\n    return medications.filter(med => {\n      const key = `${med.action}-${med.drug}-${med.dose || ''}`;\n      if (seen.has(key)) return false;\n      seen.add(key);\n      return true;\n    });\n  }\n  \n  /**\n   * Merge similar lab orders\n   */\n  private mergeLabs(labs: LabAction[]): LabAction[] {\n    const merged: LabAction[] = [];\n    \n    for (const lab of labs) {\n      const existing = merged.find(m => m.action === lab.action);\n      if (existing) {\n        // Merge tests, avoiding duplicates\n        const allTests = [...existing.tests, ...lab.tests];\n        existing.tests = [...new Set(allTests)];\n      } else {\n        merged.push({\n          ...lab,\n          tests: [...new Set(lab.tests)]\n        });\n      }\n    }\n\n    return merged;\n  }\n  \n  /**\n   * Process extraction request\n   */\n  async processExtractionRequest(request: ExtractActionsRequest): Promise<ExtractActionsResponse> {\n    const actions = await this.extractActions(request.noteBody);\n    return {\n      meds: actions.meds,\n      labs: actions.labs\n    };\n  }\n}\n\n// Export singleton instance\nexport const actionExtractionService = new ActionExtractionService();\n\n// Also export for backward compatibility\nexport default actionExtractionService;","/**\n * Note Actions Service\n * Manages extraction and storage of action items from doctor's dictation\n * Provides interface for staff to view and process pending actions\n */\n\nimport { actionExtractionService } from './actionExtraction.service';\nimport { auditService } from './audit.service';\nimport { simpleAppointmentService } from './simpleAppointment.service';\nimport { chartService } from './chart.service';\nimport type { ActionItem, MedicationAction, LabAction } from '../types/clinic.types';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\ninterface StoredAction extends ActionItem {\n  doctorName: string;\n  doctorId: string;\n  patientName: string;\n  dateExtracted: Date;\n  noteId?: string;\n  processed: boolean;\n  processedBy?: string;\n  processedDate?: Date;\n}\n\nclass NoteActionsService {\n  private pendingActions: StoredAction[] = [];\n\n  constructor() {\n    // Load saved actions from localStorage\n    this.loadActions();\n\n    // Add some sample data for demonstration\n    this.initializeSampleData();\n  }\n\n  /**\n   * Extract and save actions from a doctor's note\n   */\n  async extractAndSaveActions(\n    noteText: string,\n    patientId: string,\n    patientName: string,\n    doctorId: string,\n    doctorName: string,\n    noteId?: string\n  ) {\n    // Extract actions using the existing service\n    const extracted = await actionExtractionService.extractActions(noteText);\n\n    // Convert to stored actions\n    const timestamp = new Date();\n\n    // Process medications\n    extracted.meds.forEach(med => {\n      const action: StoredAction = {\n        id: `med-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        patientId,\n        patientName,\n        doctorId,\n        doctorName,\n        noteId,\n        itemType: 'medication',\n        action: this.formatMedicationAction(med),\n        details: med,\n        status: 'pending',\n        createdAt: timestamp,\n        dateExtracted: timestamp,\n        processed: false,\n      };\n      this.pendingActions.push(action);\n    });\n\n    // Process labs\n    extracted.labs.forEach(lab => {\n      const action: StoredAction = {\n        id: `lab-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        patientId,\n        patientName,\n        doctorId,\n        doctorName,\n        noteId,\n        itemType: 'lab',\n        action: `Order ${lab.test}`,\n        details: lab,\n        status: 'pending',\n        createdAt: timestamp,\n        dateExtracted: timestamp,\n        processed: false,\n      };\n      this.pendingActions.push(action);\n    });\n\n    // Save to localStorage\n    this.saveActions();\n\n    // Log the extraction\n    auditService.log('create', 'action_items', undefined, {\n      patientId,\n      doctorId,\n      medicationCount: extracted.meds.length,\n      labCount: extracted.labs.length,\n    });\n\n    return this.pendingActions.filter(a => a.noteId === noteId);\n  }\n\n  /**\n   * Format medication action for display\n   */\n  private formatMedicationAction(med: MedicationAction): string {\n    let action = `${med.action.charAt(0).toUpperCase() + med.action.slice(1)} ${med.drug}`;\n    if (med.dose) action += ` ${med.dose}`;\n    if (med.frequency) action += ` ${med.frequency}`;\n    return action;\n  }\n\n  /**\n   * Get pending actions for staff dashboard\n   */\n  getPendingActions(filters?: {\n    doctorId?: string;\n    patientId?: string;\n    itemType?: 'medication' | 'lab';\n  }): StoredAction[] {\n    let actions = this.pendingActions.filter(a => !a.processed);\n\n    if (filters?.doctorId && filters.doctorId !== 'all') {\n      actions = actions.filter(a => a.doctorId === filters.doctorId);\n    }\n\n    if (filters?.patientId) {\n      actions = actions.filter(a => a.patientId === filters.patientId);\n    }\n\n    if (filters?.itemType) {\n      actions = actions.filter(a => a.itemType === filters.itemType);\n    }\n\n    // Sort by date, newest first\n    return actions.sort((a, b) => b.dateExtracted.getTime() - a.dateExtracted.getTime());\n  }\n\n  /**\n   * Mark an action as processed\n   */\n  processAction(actionId: string, processedBy: string): boolean {\n    const action = this.pendingActions.find(a => a.id === actionId);\n    if (action) {\n      action.processed = true;\n      action.processedBy = processedBy;\n      action.processedDate = new Date();\n      action.status = 'completed';\n      this.saveActions();\n\n      // Log the processing\n      auditService.log('update', 'action_item', actionId, {\n        processed: true,\n        processedBy,\n      });\n\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get count of pending actions\n   */\n  getPendingCount(itemType?: 'medication' | 'lab'): number {\n    const pending = this.pendingActions.filter(a => !a.processed);\n    if (itemType) {\n      return pending.filter(a => a.itemType === itemType).length;\n    }\n    return pending.length;\n  }\n\n  /**\n   * Load actions from localStorage\n   */\n  private loadActions() {\n    try {\n      const saved = localStorage.getItem('tshla_pending_actions');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        // Convert date strings back to Date objects\n        this.pendingActions = parsed.map((a: any) => ({\n          ...a,\n          createdAt: new Date(a.createdAt),\n          dateExtracted: new Date(a.dateExtracted),\n          processedDate: a.processedDate ? new Date(a.processedDate) : undefined,\n        }));\n      }\n    } catch (error) {\n      logError('noteActions', 'Error message', {});\n    }\n  }\n\n  /**\n   * Save actions to localStorage\n   */\n  private saveActions() {\n    try {\n      localStorage.setItem('tshla_pending_actions', JSON.stringify(this.pendingActions));\n    } catch (error) {\n      logError('noteActions', 'Error message', {});\n    }\n  }\n\n  /**\n   * Initialize with sample data from real appointments\n   */\n  private async initializeSampleData() {\n    if (this.pendingActions.length === 0) {\n      // Get real appointments from this week\n      const appointments = simpleAppointmentService.getAppointments({ weekOf: new Date() });\n\n      // Sample dictation notes for different appointments with real medical scenarios\n      const sampleDictations = [\n        {\n          appointmentId: appointments[0]?.id,\n          patientId: appointments[0]?.patientId,\n          patientName: appointments[0]?.patientName,\n          doctorId: appointments[0]?.doctorId,\n          doctorName: appointments[0]?.doctorName,\n          note: 'Patient here for diabetes follow-up. A1C is 8.2, up from 7.8. Will start metformin 500mg BID. Also order A1C in 3 months and comprehensive metabolic panel. Patient education on diet provided.',\n        },\n        {\n          appointmentId: appointments[1]?.id,\n          patientId: appointments[1]?.patientId,\n          patientName: appointments[1]?.patientName,\n          doctorId: appointments[1]?.doctorId,\n          doctorName: appointments[1]?.doctorName,\n          note: 'New patient with hypertension. BP 150/95. Starting lisinopril 10mg daily. Order CBC, CMP, and lipid panel. Follow up in 2 weeks.',\n        },\n        {\n          appointmentId: appointments[2]?.id,\n          patientId: appointments[2]?.patientId,\n          patientName: appointments[2]?.patientName,\n          doctorId: appointments[2]?.doctorId,\n          doctorName: appointments[2]?.doctorName,\n          note: 'Blood pressure check. Current meds working well. Continue amlodipine 5mg daily. Refill all medications. Order TSH and basic metabolic panel.',\n        },\n        {\n          appointmentId: appointments[3]?.id,\n          patientId: appointments[3]?.patientId,\n          patientName: appointments[3]?.patientName,\n          doctorId: appointments[3]?.doctorId,\n          doctorName: appointments[3]?.doctorName,\n          note: 'Thyroid follow-up. TSH elevated at 8.5. Increase levothyroxine to 100mcg daily. Will recheck TSH in 6 weeks.',\n        },\n        {\n          appointmentId: appointments[4]?.id,\n          patientId: appointments[4]?.patientId,\n          patientName: appointments[4]?.patientName,\n          doctorId: appointments[4]?.doctorId,\n          doctorName: appointments[4]?.doctorName,\n          note: 'Cholesterol management. LDL 165. Start atorvastatin 20mg at bedtime. Order lipid panel in 6 weeks. Discussed lifestyle modifications.',\n        },\n        {\n          appointmentId: appointments[5]?.id,\n          patientId: appointments[5]?.patientId,\n          patientName: appointments[5]?.patientName,\n          doctorId: appointments[5]?.doctorId,\n          doctorName: appointments[5]?.doctorName,\n          note: 'Annual physical exam. All vitals stable. Order CBC with differential, CMP, lipid panel, A1C, and urinalysis. Continue current medications.',\n        },\n        {\n          appointmentId: appointments[6]?.id,\n          patientId: appointments[6]?.patientId,\n          patientName: appointments[6]?.patientName,\n          doctorId: appointments[6]?.doctorId,\n          doctorName: appointments[6]?.doctorName,\n          note: 'Weight management consultation. BMI 32. Start phentermine 37.5mg daily for 3 months. Check thyroid function - order TSH and free T4.',\n        },\n        {\n          appointmentId: appointments[7]?.id,\n          patientId: appointments[7]?.patientId,\n          patientName: appointments[7]?.patientName,\n          doctorId: appointments[7]?.doctorId,\n          doctorName: appointments[7]?.doctorName,\n          note: 'Migraine management. Frequent headaches. Start sumatriptan 100mg as needed for migraines. Begin propranolol 20mg BID for prophylaxis.',\n        },\n        {\n          appointmentId: appointments[8]?.id,\n          patientId: appointments[8]?.patientId,\n          patientName: appointments[8]?.patientName,\n          doctorId: appointments[8]?.doctorId,\n          doctorName: appointments[8]?.doctorName,\n          note: 'Asthma control visit. Still using rescue inhaler frequently. Increase fluticasone to 220mcg BID. Continue albuterol as needed. Order pulmonary function tests.',\n        },\n        {\n          appointmentId: appointments[9]?.id,\n          patientId: appointments[9]?.patientId,\n          patientName: appointments[9]?.patientName,\n          doctorId: appointments[9]?.doctorId,\n          doctorName: appointments[9]?.doctorName,\n          note: 'Anxiety medication review. Current dose helping but not adequate. Increase sertraline to 100mg daily. Continue alprazolam 0.5mg as needed.',\n        },\n      ];\n\n      // Extract actions from each dictation note\n      for (const dictation of sampleDictations) {\n        if (dictation.patientId && dictation.doctorId) {\n          await this.extractAndSaveActions(\n            dictation.note,\n            dictation.patientId,\n            dictation.patientName || 'Unknown Patient',\n            dictation.doctorId,\n            dictation.doctorName || 'Unknown Doctor',\n            dictation.appointmentId\n          );\n        }\n      }\n\n      // Add a few more direct actions for variety\n      if (appointments[10]) {\n        await this.extractAndSaveActions(\n          'Post-surgery follow-up looks good. Stop tramadol. Switch to ibuprofen 600mg TID as needed for pain.',\n          appointments[10].patientId,\n          appointments[10].patientName,\n          appointments[10].doctorId,\n          appointments[10].doctorName,\n          appointments[10].id\n        );\n      }\n\n      if (appointments[11]) {\n        await this.extractAndSaveActions(\n          'Lab review shows A1C improved to 6.8. Continue metformin 1000mg BID. Order repeat A1C in 3 months.',\n          appointments[11].patientId,\n          appointments[11].patientName,\n          appointments[11].doctorId,\n          appointments[11].doctorName,\n          appointments[11].id\n        );\n      }\n\n      if (appointments[12]) {\n        await this.extractAndSaveActions(\n          'Sleep apnea evaluation. Order sleep study. Start melatonin 5mg at bedtime while waiting for study results.',\n          appointments[12].patientId,\n          appointments[12].patientName,\n          appointments[12].doctorId,\n          appointments[12].doctorName,\n          appointments[12].id\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear all actions (for testing)\n   */\n  clearAllActions() {\n    this.pendingActions = [];\n    this.saveActions();\n  }\n\n  /**\n   * Regenerate actions with real appointment data\n   */\n  async regenerateWithRealData() {\n    this.pendingActions = [];\n    this.saveActions();\n    await this.initializeSampleData();\n    return this.pendingActions;\n  }\n}\n\nexport const noteActionsService = new NoteActionsService();\n","import React, { useState } from 'react';\nimport { simpleAppointmentService } from '../services/simpleAppointment.service';\nimport { noteActionsService } from '../services/noteActions.service';\n\ninterface ParsedAppointment {\n  id: string;\n  doctorName: string;\n  doctorId?: string;\n  patientName: string;\n  patientAge?: string;\n  patientGender?: string;\n  patientDOB?: string;\n  date: string;\n  time: string;\n  duration: number;\n  visitType: string;\n  visitReason: string;\n  status: 'scheduled' | 'open' | 'frozen';\n  location?: string;\n  isVirtual: boolean;\n}\n\nconst DOCTOR_MAPPING: Record<string, { id: string; fullName: string }> = {\n  'veena r watwe': { id: 'doc2', fullName: 'Dr. Veena Watwe' },\n  'veena watwe': { id: 'doc2', fullName: 'Dr. Veena Watwe' },\n  'kamili wade-reescano': { id: 'doc7', fullName: 'Kamili Wade-Reescano, LMFT' },\n  'nadia younus': { id: 'doc8', fullName: 'Dr. Nadia Younus' },\n  'rakesh patel': { id: 'doc1', fullName: 'Dr. Rakesh Patel' },\n  'rakesh raman patel': { id: 'doc1', fullName: 'Dr. Rakesh Patel' },\n  'tess chamakkala': { id: 'doc3', fullName: 'Dr. Tess Chamakkala' },\n  'radha bernander': { id: 'doc4', fullName: 'Dr. Radha Bernander' },\n  'shannon gregroek': { id: 'doc5', fullName: 'Dr. Shannon Gregroek' },\n  'elinia shakya': { id: 'doc6', fullName: 'Dr. Elinia Shakya' },\n  'elina shakya': { id: 'doc6', fullName: 'Dr. Elinia Shakya' },\n  'ghislaine tonye': { id: 'doc9', fullName: 'Dr. Ghislaine Tonye' },\n  'cindy laverde': { id: 'doc10', fullName: 'Dr. Cindy Laverde' },\n  'vanessa laverde': { id: 'doc10', fullName: 'Dr. Vanessa Laverde' },\n};\n\nexport const ScheduleImporter: React.FC = () => {\n  const [scheduleText, setScheduleText] = useState('');\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [parsedAppointments, setParsedAppointments] = useState<ParsedAppointment[]>([]);\n  const [importStatus, setImportStatus] = useState<\n    'idle' | 'parsing' | 'importing' | 'success' | 'error'\n  >('idle');\n  const [message, setMessage] = useState('');\n  const [showPreview, setShowPreview] = useState(false);\n\n  const parseSchedule = () => {\n    setImportStatus('parsing');\n    setMessage('Parsing schedule data...');\n\n    try {\n      const appointments: ParsedAppointment[] = [];\n      const lines = scheduleText\n        .split('\\n')\n        .map(line => line.trim())\n        .filter(line => line);\n\n      let currentDoctor = '';\n      let currentDoctorId = '';\n      let currentLocation = '';\n      let appointmentIdCounter = 1;\n\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        const lowerLine = line.toLowerCase();\n\n        // Check for doctor name - handle both formats\n        // Format 1: Doctor name on its own line\n        // Format 2: Doctor name with office on next line\n        const matchedDoctor = Object.entries(DOCTOR_MAPPING).find(([key]) =>\n          lowerLine.includes(key)\n        );\n\n        if (matchedDoctor) {\n          currentDoctor = matchedDoctor[1].fullName;\n          currentDoctorId = matchedDoctor[1].id;\n\n          // Check if next line is office location\n          if (i + 1 < lines.length && lines[i + 1].toLowerCase().includes('office')) {\n            currentLocation = lines[i + 1];\n            i++; // Skip the office line\n          }\n          continue;\n        }\n\n        // Also check for standalone office lines (for backward compatibility)\n        if (lowerLine.includes('office') && !currentDoctor) {\n          currentLocation = line;\n          continue;\n        }\n\n        // Check for time\n        const timeMatch = line.match(/^(\\d{1,2}):(\\d{2})\\s*(AM|PM)$/i);\n        if (timeMatch && currentDoctor) {\n          const time = line;\n          let duration = 15;\n          let patientName = '';\n          let patientInfo = '';\n          let visitReason = '';\n          let status: 'scheduled' | 'open' | 'frozen' = 'scheduled';\n          let isVirtual = false;\n          let skipToNextTime = false;\n\n          // Look ahead for details\n          if (i + 1 < lines.length) {\n            const nextLine = lines[i + 1];\n\n            if (nextLine === 'OPEN') {\n              status = 'open';\n              i++;\n            } else if (nextLine === 'FROZEN') {\n              status = 'frozen';\n              i++;\n            } else if (nextLine.includes('min')) {\n              const durationMatch = nextLine.match(/(\\d+)min/);\n              if (durationMatch) {\n                duration = parseInt(durationMatch[1]);\n              }\n              i++;\n\n              // Get patient info\n              if (i + 1 < lines.length) {\n                patientName = lines[i + 1];\n                i++;\n\n                if (i + 1 < lines.length && lines[i + 1].includes('|')) {\n                  patientInfo = lines[i + 1];\n                  i++;\n                }\n\n                // Get visit reason\n                const reasonLines: string[] = [];\n                while (i + 1 < lines.length) {\n                  const lookAhead = lines[i + 1];\n                  if (\n                    lookAhead.match(/^\\d{1,2}:\\d{2}\\s*(AM|PM)$/i) ||\n                    Object.keys(DOCTOR_MAPPING).some(key => lookAhead.toLowerCase().includes(key))\n                  ) {\n                    break;\n                  }\n                  reasonLines.push(lookAhead);\n                  i++;\n                }\n                visitReason = reasonLines.join('; ');\n\n                isVirtual =\n                  visitReason.toLowerCase().includes('virtual') ||\n                  visitReason.toLowerCase().includes('telemedicine') ||\n                  visitReason.toLowerCase().includes('not online');\n              }\n            }\n          }\n\n          // Check if this might be a duplicate time slot (multiple appointments at same time)\n          // Look for pattern where next time is same as current or very close\n          let isDuplicateSlot = false;\n          if (i + 1 < lines.length) {\n            const nextLine = lines[i + 1];\n            const nextTimeMatch = nextLine.match(/^(\\d{1,2}):(\\d{2})\\s*(AM|PM)$/i);\n            if (nextTimeMatch && nextLine === time) {\n              isDuplicateSlot = true;\n            }\n          }\n\n          if (status === 'open' || status === 'frozen' || patientName) {\n            const appointment: ParsedAppointment = {\n              id: `import-${selectedDate}-${appointmentIdCounter++}`,\n              doctorName: currentDoctor,\n              doctorId: currentDoctorId,\n              patientName:\n                status === 'open' ? 'OPEN SLOT' : status === 'frozen' ? 'FROZEN' : patientName,\n              date: selectedDate,\n              time,\n              duration,\n              visitType: isVirtual ? 'telemedicine' : 'in-person',\n              visitReason:\n                visitReason ||\n                (status === 'open'\n                  ? 'Available'\n                  : status === 'frozen'\n                    ? 'Frozen Slot'\n                    : 'Appointment'),\n              status,\n              location: currentLocation,\n              isVirtual,\n            };\n\n            if (patientInfo) {\n              const infoMatch = patientInfo.match(/(\\d+)yo\\s*([MF])\\s*\\|\\s*([\\d-]+)/);\n              if (infoMatch) {\n                appointment.patientAge = infoMatch[1];\n                appointment.patientGender = infoMatch[2];\n                appointment.patientDOB = infoMatch[3];\n              }\n            }\n\n            appointments.push(appointment);\n          }\n        }\n      }\n\n      setParsedAppointments(appointments);\n      setShowPreview(true);\n      setImportStatus('idle');\n      setMessage(\n        `Parsed ${appointments.length} appointments. Review and click Import to add them.`\n      );\n    } catch (error) {\n      setImportStatus('error');\n      setMessage(\n        `Error parsing schedule: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  };\n\n  const importAppointments = async () => {\n    setImportStatus('importing');\n    setMessage('Importing appointments...');\n\n    try {\n      let successCount = 0;\n\n      for (const appt of parsedAppointments) {\n        if (appt.status === 'scheduled' && appt.patientName && appt.patientName !== 'OPEN SLOT') {\n          // Create a simple appointment\n          await simpleAppointmentService.createAppointment({\n            patientId: `imported-patient-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n            patientName: appt.patientName,\n            doctorId: appt.doctorId || 'doc1',\n            doctorName: appt.doctorName,\n            date: appt.date,\n            time: appt.time,\n            duration: appt.duration,\n            visitType: appt.isVirtual ? 'telemedicine' : 'follow-up',\n            visitReason: appt.visitReason,\n          });\n          successCount++;\n        }\n      }\n\n      setImportStatus('success');\n      setMessage(`Successfully imported ${successCount} appointments!`);\n      setScheduleText('');\n      setParsedAppointments([]);\n      setShowPreview(false);\n\n      // Trigger a refresh of the calendar\n      window.dispatchEvent(new Event('appointmentsUpdated'));\n    } catch (error) {\n      setImportStatus('error');\n      setMessage(\n        `Error importing appointments: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold mb-4\">Import Schedule Data</h3>\n\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Schedule Date</label>\n          <input\n            type=\"date\"\n            value={selectedDate}\n            onChange={e => setSelectedDate(e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Paste Schedule Data\n          </label>\n          <textarea\n            value={scheduleText}\n            onChange={e => setScheduleText(e.target.value)}\n            placeholder=\"Paste schedule data here (times, patient names, visit types, etc.)\"\n            className=\"w-full h-48 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono text-sm\"\n          />\n        </div>\n\n        <div className=\"flex space-x-3\">\n          <button\n            onClick={parseSchedule}\n            disabled={!scheduleText || importStatus === 'parsing'}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400\"\n          >\n            {importStatus === 'parsing' ? 'Parsing...' : 'Parse Schedule'}\n          </button>\n\n          {parsedAppointments.length > 0 && (\n            <button\n              onClick={importAppointments}\n              disabled={importStatus === 'importing'}\n              className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-gray-400\"\n            >\n              {importStatus === 'importing'\n                ? 'Importing...'\n                : `Import ${parsedAppointments.length} Appointments`}\n            </button>\n          )}\n        </div>\n\n        {message && (\n          <div\n            className={`p-3 rounded-md ${\n              importStatus === 'error'\n                ? 'bg-red-50 text-red-700'\n                : importStatus === 'success'\n                  ? 'bg-green-50 text-green-700'\n                  : 'bg-blue-50 text-blue-700'\n            }`}\n          >\n            {message}\n          </div>\n        )}\n\n        {showPreview && parsedAppointments.length > 0 && (\n          <div className=\"border rounded-md p-4 max-h-96 overflow-y-auto\">\n            <h4 className=\"font-medium mb-2\">Preview ({parsedAppointments.length} appointments)</h4>\n            <div className=\"space-y-2 text-sm\">\n              {parsedAppointments.map((appt, idx) => (\n                <div\n                  key={idx}\n                  className={`p-2 rounded ${\n                    appt.status === 'open'\n                      ? 'bg-gray-50'\n                      : appt.status === 'frozen'\n                        ? 'bg-yellow-50'\n                        : 'bg-blue-50'\n                  }`}\n                >\n                  <div className=\"flex justify-between\">\n                    <span className=\"font-medium\">\n                      {appt.time} - {appt.doctorName}\n                    </span>\n                    <span\n                      className={`px-2 py-0.5 rounded text-xs ${\n                        appt.status === 'open'\n                          ? 'bg-gray-200'\n                          : appt.status === 'frozen'\n                            ? 'bg-yellow-200'\n                            : appt.isVirtual\n                              ? 'bg-purple-200'\n                              : 'bg-blue-200'\n                      }`}\n                    >\n                      {appt.status === 'open'\n                        ? 'OPEN'\n                        : appt.status === 'frozen'\n                          ? 'FROZEN'\n                          : appt.isVirtual\n                            ? 'Virtual'\n                            : 'In-Person'}\n                    </span>\n                  </div>\n                  {appt.patientName && appt.patientName !== 'OPEN SLOT' && (\n                    <>\n                      <div>\n                        {appt.patientName}{' '}\n                        {appt.patientAge && `(${appt.patientAge}yo ${appt.patientGender})`}\n                      </div>\n                      <div className=\"text-gray-600\">{appt.visitReason}</div>\n                    </>\n                  )}\n                  <div className=\"text-gray-500\">{appt.duration} min</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","/**\n * Staff Workflow Dashboard - Main interface for staff members\n * Provides patient management, chart creation, calendar, and action items\n */\n\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { unifiedAuthService } from '../services/unifiedAuth.service';\nimport { chartService } from '../services/chart.service';\nimport { actionExtractionService } from '../services/actionExtraction.service';\nimport { auditService } from '../services/audit.service';\nimport { patientService } from '../services/patient.service';\nimport { noteActionsService } from '../services/noteActions.service';\nimport { simpleAppointmentService } from '../services/simpleAppointment.service';\nimport { ScheduleImporter } from '../components/ScheduleImporter';\nimport ScheduleImportModal from '../components/ScheduleImportModal';\nimport type { \n  Chart, \n  ActionItem, \n  AuditLog,\n  Appointment\n} from '../types/clinic.types';\nimport type { Patient } from '../types/patient.types';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\nexport default function StaffWorkflowDashboard() {\n  const navigate = useNavigate();\n  \n  // Auth state\n  const [currentUser] = useState(unifiedAuthService.getCurrentUser());\n  const [permissions] = useState(unifiedAuthService.getPermissions());\n  \n  // UI state\n  const [activeTab, setActiveTab] = useState<'patients' | 'charts' | 'calendar' | 'actions' | 'import'>('patients');\n  const [showCreatePatient, setShowCreatePatient] = useState(false);\n  const [showCreateChart, setShowCreateChart] = useState(false);\n  const [showOldNotes, setShowOldNotes] = useState(false);\n  const [showImportModal, setShowImportModal] = useState(false);\n  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);\n  const [selectedDoctor, setSelectedDoctor] = useState<string>('all');\n  const [calendarView, setCalendarView] = useState<'week' | 'day' | 'list'>('list'); // Default to list view for many appointments\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [showAllAppointments, setShowAllAppointments] = useState(true); // Show all by default\n  \n  // Data state\n  const [patients, setPatients] = useState<Patient[]>([]);\n  const [charts, setCharts] = useState<Chart[]>([]);\n  const [actionItems, setActionItems] = useState<any[]>([]);\n  const [recentActivity, setRecentActivity] = useState<AuditLog[]>([]);\n  const [appointments, setAppointments] = useState<any[]>([]);\n  const [actionTab, setActionTab] = useState<'medications' | 'labs'>('medications');\n  const [currentWeek, setCurrentWeek] = useState(new Date());\n  const [calendarData, setCalendarData] = useState<any>(new Map());\n  \n  // Doctor list for dropdown - must match IDs used in scheduleImport.service\n  const doctors = [\n    { id: 'all', name: 'All Doctors', email: 'all' },\n    { id: 'doc_adeleke', name: 'Dr. Adenike Adeleke', email: 'adeleke@tshla.ai' },\n    { id: 'doc_radha', name: 'Dr. Radha Bernander', email: 'radha@tshla.ai' },\n    { id: 'doc_tess', name: 'Dr. Tess Chamakkala', email: 'tess@tshla.ai' },\n    { id: 'doc_shannon', name: 'Dr. Shannon Gregorek', email: 'shannon@tshla.ai' },\n    { id: 'doc_vanessa', name: 'Dr. Cindy Laverde', email: 'vanessa@tshla.ai' },\n    { id: 'doc_elizabeth', name: 'Dr. Elizabeth Leal', email: 'elizabeth@tshla.ai' },\n    { id: 'doc_ogechi', name: 'Dr. Ogechi Nebeolisa', email: 'ogechi@tshla.ai' },\n    { id: 'doc_neha', name: 'Dr. Neha Patel', email: 'neha@tshla.ai' },\n    { id: 'doc_rakesh_patel', name: 'Dr. Rakesh Patel', email: 'rakesh.patel@tshla.ai' },\n    { id: 'doc_kruti', name: 'Dr. Kruti Patel-Konasagar', email: 'kruti@tshla.ai' },\n    { id: 'doc_preeya', name: 'Dr. Preeya Raghu', email: 'preeya@tshla.ai' },\n    { id: 'doc_elina', name: 'Dr. Elina Shakya', email: 'elina@tshla.ai' },\n    { id: 'doc_dilnavaz', name: 'Dr. Dilnavaz Subawalla', email: 'dilnavaz@tshla.ai' },\n    { id: 'doc_ghislaine', name: 'Dr. Ghislaine Tonye', email: 'ghislaine@tshla.ai' },\n    { id: 'doc_kamili', name: 'Dr. Kamili Wade-Reescano', email: 'kamili@tshla.ai' },\n    { id: 'doc_veena', name: 'Dr. Veena Watwe', email: 'veena@tshla.ai' },\n    { id: 'doc_nadia', name: 'Dr. Nadia Younus', email: 'nadia@tshla.ai' }\n  ];\n  \n  // Search state\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState<{\n    patients: Patient[];\n    charts: Chart[];\n  }>({ patients: [], charts: [] });\n  \n  // Form state\n  const [patientForm, setPatientForm] = useState({\n    firstName: '',\n    lastName: '',\n    dateOfBirth: '',\n    phone: '',\n    email: ''\n  });\n  \n  const [oldNotesForm, setOldNotesForm] = useState({\n    chartId: '',\n    notes: ''\n  });\n  \n  // Check permissions on mount\n  useEffect(() => {\n    if (!currentUser) {\n      navigate('/login');\n      return;\n    }\n    \n    loadData();\n    \n    // Log dashboard access\n    auditService.log('view', 'patient', undefined, { dashboard: 'staff-workflow' });\n  }, [currentUser, navigate]);\n  \n  // Listen for appointment updates\n  useEffect(() => {\n    const handleAppointmentUpdate = () => {\n      // Refresh calendar data\n      const weekData = simpleAppointmentService.getCalendarData(currentWeek, selectedDoctor === 'all' ? undefined : selectedDoctor);\n      setCalendarData(weekData);\n    };\n    \n    window.addEventListener('appointmentsUpdated', handleAppointmentUpdate);\n    return () => window.removeEventListener('appointmentsUpdated', handleAppointmentUpdate);\n  }, [currentWeek, selectedDoctor]);\n  \n  // Load initial data\n  const loadData = async () => {\n    try {\n      // Load recent audit logs\n      const logs = await auditService.getAuditLogs({ limit: 10 });\n      setRecentActivity(logs);\n      \n      // Load pending actions\n      const actions = noteActionsService.getPendingActions();\n      setActionItems(actions);\n      \n      // Load appointments\n      const appts = simpleAppointmentService.getAppointments({ weekOf: new Date() });\n      setAppointments(appts);\n    } catch (error) {\n      logError('StaffWorkflowDashboard', 'Error message', {});\n    }\n  };\n  \n  // Handle patient creation\n  const handleCreatePatient = async () => {\n    try {\n      // Validate required fields (at least one)\n      if (!patientForm.firstName && !patientForm.lastName && !patientForm.email) {\n        alert('Please provide at least one field (name or email)');\n        return;\n      }\n      \n      // Register patient\n      const patient = await patientService.registerPatient({\n        firstName: patientForm.firstName,\n        lastName: patientForm.lastName,\n        dateOfBirth: patientForm.dateOfBirth,\n        phone: patientForm.phone,\n        email: patientForm.email || `patient${Date.now()}@tshla.ai`,\n        program: 'pumpdrive'\n      });\n      \n      // Log creation\n      await auditService.logCreate('patient', patient.internalId, {\n        name: `${patient.firstName} ${patient.lastName}`,\n        avaId: patient.patientAvaId\n      });\n      \n      // Update UI\n      setPatients([...patients, patient]);\n      setSelectedPatient(patient);\n      setShowCreatePatient(false);\n      \n      // Reset form\n      setPatientForm({\n        firstName: '',\n        lastName: '',\n        dateOfBirth: '',\n        phone: '',\n        email: ''\n      });\n      \n      alert(`Patient created!\\nAVA ID: ${patient.patientAvaId}\\n\\nYou can now create a chart for this patient.`);\n      \n    } catch (error) {\n      logError('StaffWorkflowDashboard', 'Error message', {});\n      alert('Failed to create patient');\n    }\n  };\n  \n  // Handle chart creation\n  const handleCreateChart = async () => {\n    if (!selectedPatient) {\n      alert('Please select a patient first');\n      return;\n    }\n    \n    try {\n      const result = await chartService.createChart({\n        patientId: selectedPatient.internalId,\n        clinicId: 'default'\n      });\n      \n      // Log creation\n      await auditService.logCreate('chart', result.chart.id, {\n        patientId: selectedPatient.internalId,\n        avaId: result.avaId,\n        tshId: result.tshId\n      });\n      \n      // Update UI\n      setCharts([...charts, result.chart]);\n      setShowCreateChart(false);\n      \n      alert(`Chart created successfully!\\n\\nAVA ID (Patient Portal): ${result.avaId}\\nTSH ID (EMR/Doctor): ${result.tshId}\\n\\nThese IDs have been saved.`);\n      \n    } catch (error) {\n      logError('StaffWorkflowDashboard', 'Error message', {});\n      alert('Failed to create chart');\n    }\n  };\n  \n  // Handle adding old notes\n  const handleAddOldNotes = async () => {\n    if (!oldNotesForm.chartId || !oldNotesForm.notes) {\n      alert('Please select a chart and enter notes');\n      return;\n    }\n    \n    try {\n      await chartService.addOldNotes(oldNotesForm.chartId, oldNotesForm.notes);\n      \n      // Log the action\n      await auditService.log('update', 'chart', oldNotesForm.chartId, {\n        action: 'added_old_notes',\n        notesLength: oldNotesForm.notes.length\n      });\n      \n      // Reset form\n      setOldNotesForm({ chartId: '', notes: '' });\n      setShowOldNotes(false);\n      \n      alert('Old notes added successfully');\n      \n    } catch (error) {\n      logError('StaffWorkflowDashboard', 'Error message', {});\n      alert('Failed to add old notes');\n    }\n  };\n  \n  // Handle search\n  const handleSearch = async () => {\n    if (!searchQuery) {\n      setSearchResults({ patients: [], charts: [] });\n      return;\n    }\n    \n    // Search patients\n    const patientResults = patients.filter(p => \n      p.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      p.lastName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      p.email?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      p.patientAvaId?.includes(searchQuery)\n    );\n    \n    // Search charts\n    const chartResults = await chartService.searchCharts(searchQuery);\n    \n    setSearchResults({\n      patients: patientResults,\n      charts: chartResults\n    });\n  };\n  \n  // Handle logout\n  const handleLogout = () => {\n    auditService.logLogout();\n    unifiedAuthService.logout();\n    navigate('/login');\n  };\n  \n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <h1 className=\"text-xl font-semibold text-gray-900\">\n                Staff Workflow Dashboard\n              </h1>\n              <span className=\"ml-4 text-sm text-gray-500\">\n                {currentUser?.name} ({currentUser?.role})\n              </span>\n            </div>\n            <button\n              onClick={handleLogout}\n              className=\"text-sm text-red-600 hover:text-red-800\"\n            >\n              Logout\n            </button>\n          </div>\n        </div>\n      </header>\n      \n      {/* Navigation Tabs */}\n      <div className=\"bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <nav className=\"flex space-x-8\">\n            <button\n              onClick={() => setActiveTab('patients')}\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'patients'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              Patients\n            </button>\n            <button\n              onClick={() => setActiveTab('charts')}\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'charts'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              Charts\n            </button>\n            <button\n              onClick={() => setActiveTab('calendar')}\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'calendar'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              Calendar\n            </button>\n            <button\n              onClick={() => setActiveTab('actions')}\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'actions'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              Action Items\n              {noteActionsService.getPendingCount() > 0 && (\n                <span className=\"ml-2 bg-red-500 text-white text-xs rounded-full px-2 py-1\">\n                  {noteActionsService.getPendingCount()}\n                </span>\n              )}\n            </button>\n            <button\n              onClick={() => setActiveTab('import')}\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'import'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              Import Schedule\n            </button>\n          </nav>\n        </div>\n      </div>\n      \n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Search Bar */}\n        <div className=\"mb-6\">\n          <div className=\"flex gap-2\">\n            <input\n              type=\"text\"\n              placeholder=\"Search patients by name, email, AVA ID, or TSH ID...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && handleSearch()}\n              className=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n            <button\n              onClick={handleSearch}\n              className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n            >\n              Search\n            </button>\n          </div>\n          \n          {/* Search Results */}\n          {(searchResults.patients.length > 0 || searchResults.charts.length > 0) && (\n            <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n              <h3 className=\"font-medium text-gray-900 mb-2\">Search Results</h3>\n              {searchResults.patients.length > 0 && (\n                <div className=\"mb-2\">\n                  <h4 className=\"text-sm font-medium text-gray-700\">Patients:</h4>\n                  {searchResults.patients.map(p => (\n                    <div key={p.internalId} className=\"text-sm text-gray-600\">\n                      {p.firstName} {p.lastName} - AVA: {p.patientAvaId}\n                    </div>\n                  ))}\n                </div>\n              )}\n              {searchResults.charts.length > 0 && (\n                <div>\n                  <h4 className=\"text-sm font-medium text-gray-700\">Charts:</h4>\n                  {searchResults.charts.map(c => (\n                    <div key={c.id} className=\"text-sm text-gray-600\">\n                      AVA: {c.avaId} | TSH: {c.tshId}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n        \n        {/* Patients Tab */}\n        {activeTab === 'patients' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-lg font-medium text-gray-900\">Patients</h2>\n              <button\n                onClick={() => setShowCreatePatient(true)}\n                className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n              >\n                + New Patient\n              </button>\n            </div>\n            \n            {/* Instructions Card */}\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <h3 className=\"font-semibold text-blue-900 mb-2\">How to Get Started</h3>\n              <ol className=\"text-sm text-blue-700 space-y-1 list-decimal list-inside\">\n                <li>Click \"New Patient\" to create a patient (not all fields required)</li>\n                <li>After creating a patient, you'll receive their AVA ID</li>\n                <li>Click \"Create Chart\" to generate both AVA and TSH IDs</li>\n                <li>Use TSH ID for EMR/doctor access, AVA ID for patient portal</li>\n              </ol>\n            </div>\n            \n            {/* Patient List */}\n            {patients.length > 0 ? (\n              <div className=\"bg-white shadow overflow-hidden sm:rounded-md\">\n                <ul className=\"divide-y divide-gray-200\">\n                  {patients.map((patient) => (\n                    <li key={patient.internalId}>\n                      <div className=\"px-4 py-4 sm:px-6 hover:bg-gray-50 cursor-pointer\"\n                           onClick={() => setSelectedPatient(patient)}>\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"text-sm font-medium text-gray-900\">\n                              {patient.firstName} {patient.lastName}\n                            </p>\n                            <p className=\"text-sm text-gray-500\">\n                              AVA: {patient.patientAvaId} | Email: {patient.email}\n                            </p>\n                          </div>\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setSelectedPatient(patient);\n                              setShowCreateChart(true);\n                            }}\n                            className=\"px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700\"\n                          >\n                            Create Chart\n                          </button>\n                        </div>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            ) : (\n              <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n                <p className=\"text-gray-500 mb-4\">No patients yet</p>\n                <button\n                  onClick={() => setShowCreatePatient(true)}\n                  className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n                >\n                  Create Your First Patient\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n        \n        {/* Charts Tab */}\n        {activeTab === 'charts' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-lg font-medium text-gray-900\">Charts</h2>\n              <button\n                onClick={() => setShowOldNotes(true)}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n                disabled={charts.length === 0}\n              >\n                + Add Old Notes\n              </button>\n            </div>\n            \n            {/* ID Explanation */}\n            <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4\">\n              <h3 className=\"font-semibold text-amber-900 mb-2\">Understanding Chart IDs</h3>\n              <ul className=\"text-sm text-amber-700 space-y-1\">\n                <li><strong>AVA ID:</strong> For patient portal access (cross-clinic)</li>\n                <li><strong>TSH ID:</strong> For EMR/doctor use (clinic-specific)</li>\n              </ul>\n            </div>\n            \n            {/* Charts List */}\n            {charts.length > 0 ? (\n              <div className=\"bg-white shadow overflow-hidden sm:rounded-md\">\n                <ul className=\"divide-y divide-gray-200\">\n                  {charts.map((chart) => (\n                    <li key={chart.id}>\n                      <div className=\"px-4 py-4 sm:px-6\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"text-sm font-medium text-gray-900\">\n                              Chart ID: {chart.id}\n                            </p>\n                            <p className=\"text-sm text-blue-600 font-medium\">\n                              AVA: {chart.avaId}\n                            </p>\n                            <p className=\"text-sm text-green-600 font-medium\">\n                              TSH: {chart.tshId}\n                            </p>\n                            <p className=\"text-xs text-gray-400\">\n                              Created: {new Date(chart.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            ) : (\n              <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n                <p className=\"text-gray-500\">No charts created yet</p>\n                <p className=\"text-sm text-gray-400 mt-2\">Create a patient first, then create their chart</p>\n              </div>\n            )}\n          </div>\n        )}\n        \n        {/* Calendar Tab */}\n        {activeTab === 'calendar' && (\n          <div className=\"space-y-6\">\n            {/* Doctor Selector */}\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-medium text-gray-900\">Calendar</h2>\n              <div className=\"flex items-center space-x-2\">\n                <label className=\"text-sm font-medium text-gray-700\">View calendar for:</label>\n                <select\n                  value={selectedDoctor}\n                  onChange={(e) => setSelectedDoctor(e.target.value)}\n                  className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                >\n                  {doctors.map(doctor => (\n                    <option key={doctor.id} value={doctor.id}>\n                      {doctor.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            \n            {/* Calendar View */}\n            <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n              {/* Calendar Header */}\n              <div className=\"bg-gray-50 px-6 py-3 border-b\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <h3 className=\"text-sm font-medium text-gray-900\">\n                      {selectedDoctor === 'all' \n                        ? 'All Doctors - Combined Schedule'\n                        : `${doctors.find(d => d.id === selectedDoctor)?.name}'s Schedule`\n                      }\n                    </h3>\n                    <div className=\"flex items-center space-x-2\">\n                      <button\n                        onClick={() => {\n                          const newWeek = new Date(currentWeek);\n                          newWeek.setDate(newWeek.getDate() - 7);\n                          setCurrentWeek(newWeek);\n                        }}\n                        className=\"p-1 hover:bg-gray-200 rounded\"\n                      >\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                        </svg>\n                      </button>\n                      <span className=\"text-sm text-gray-600\">\n                        Week of {new Date(currentWeek).toLocaleDateString()}\n                      </span>\n                      <button\n                        onClick={() => {\n                          const newWeek = new Date(currentWeek);\n                          newWeek.setDate(newWeek.getDate() + 7);\n                          setCurrentWeek(newWeek);\n                        }}\n                        className=\"p-1 hover:bg-gray-200 rounded\"\n                      >\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                        </svg>\n                      </button>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm text-gray-600\">\n                      {simpleAppointmentService.getAppointmentCount(selectedDoctor === 'all' ? undefined : selectedDoctor)} total appointments\n                    </span>\n                    \n                    {/* View selector */}\n                    <select\n                      value={calendarView}\n                      onChange={(e) => setCalendarView(e.target.value as 'week' | 'day' | 'list')}\n                      className=\"px-2 py-1 text-sm border rounded\"\n                    >\n                      <option value=\"week\">Week View</option>\n                      <option value=\"day\">Day View</option>\n                      <option value=\"list\">List View</option>\n                    </select>\n                    \n                    {/* Show All toggle */}\n                    <label className=\"flex items-center space-x-1 text-sm\">\n                      <input\n                        type=\"checkbox\"\n                        checked={showAllAppointments}\n                        onChange={(e) => setShowAllAppointments(e.target.checked)}\n                        className=\"rounded\"\n                      />\n                      <span>Show All</span>\n                    </label>\n                    \n                    {/* Date picker */}\n                    <input\n                      type=\"date\"\n                      value={selectedDate.toISOString().split('T')[0]}\n                      onChange={(e) => {\n                        const newDate = new Date(e.target.value);\n                        setSelectedDate(newDate);\n                        setCurrentWeek(newDate);\n                        setShowAllAppointments(false); // Turn off show all when selecting a date\n                      }}\n                      className=\"px-2 py-1 text-sm border rounded\"\n                      disabled={showAllAppointments}\n                    />\n                    \n                    <button \n                      onClick={() => setShowImportModal(true)}\n                      className=\"px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700\"\n                    >\n                      📥 Import Schedule\n                    </button>\n                    <button \n                      onClick={() => {\n                        if (window.confirm('Are you sure you want to clear ALL appointments? This cannot be undone.')) {\n                          simpleAppointmentService.clearAllAppointments();\n                          window.location.reload(); // Refresh to show empty calendar\n                        }\n                      }}\n                      className=\"px-3 py-1 text-sm bg-red-600 text-white rounded hover:bg-red-700\"\n                    >\n                      🗑️ Clear All\n                    </button>\n                    <button className=\"px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700\">\n                      Add Appointment\n                    </button>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Calendar Views */}\n              {calendarView === 'list' ? (\n                // List View for handling many appointments\n                <div className=\"p-6\">\n                  <div className=\"space-y-2\">\n                    {(() => {\n                      // Get all appointments for selected date or week\n                      const startDate = showAllAppointments ? new Date('2000-01-01') : (() => {\n                        const week = new Date(currentWeek);\n                        const day = week.getDay();\n                        week.setDate(week.getDate() - day + (day === 0 ? -6 : 1));\n                        return week;\n                      })();\n                      \n                      const endDate = showAllAppointments ? new Date('2100-01-01') : (() => {\n                        const week = new Date(startDate);\n                        week.setDate(week.getDate() + 6);\n                        return week;\n                      })();\n                      \n                      // Get ALL appointments first to debug\n                      const allAppointments = simpleAppointmentService.getAppointments();\n                      logDebug('StaffWorkflowDashboard', 'Debug message', {});\n                      logDebug('StaffWorkflowDashboard', 'Debug message', {});\n                      if (allAppointments.length > 0) {\n                        const appointmentSummary = allAppointments.map(a => ({\n                          date: a.date,\n                          patient: a.patientName,\n                          doctorId: a.doctorId,\n                          doctorName: a.doctorName\n                        }));\n                        \n                        // Count appointments per doctor\n                        const doctorCounts = allAppointments.reduce((acc, appt) => {\n                          acc[appt.doctorId] = (acc[appt.doctorId] || 0) + 1;\n                          return acc;\n                        }, {} as Record<string, number>);\n                        logDebug('StaffWorkflowDashboard', 'Debug message', {});\n                      }\n                      \n                      // Debug date range\n                      logDebug('StaffWorkflowDashboard', 'Debug message', {}, { endDate: endDate.toISOString(),\n                        selectedDate: selectedDate.toISOString(),\n                        calendarView\n                      });\n                      \n                      // Get appointments within date range\n                      const appointments = allAppointments\n                        .filter(appt => {\n                          if (selectedDoctor !== 'all' && appt.doctorId !== selectedDoctor) return false;\n                          \n                          // Parse appointment date more carefully\n                          let apptDate;\n                          if (appt.date.includes('/')) {\n                            // Handle MM/DD/YYYY format\n                            const [month, day, year] = appt.date.split('/');\n                            apptDate = new Date(`${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`);\n                          } else {\n                            apptDate = new Date(appt.date);\n                          }\n                          \n                          // Check if date is valid\n                          if (isNaN(apptDate.getTime())) {\n                            logDebug('StaffWorkflowDashboard', 'Debug message', {});\n                            return false;\n                          }\n                          \n                          // Show all appointments if checkbox is checked\n                          if (showAllAppointments) {\n                            return true;\n                          }\n                          \n                          // Otherwise filter by date range\n                          return apptDate >= startDate && apptDate <= endDate;\n                        })\n                        .sort((a, b) => {\n                          const dateA = a.date.includes('/') ? \n                            (() => {\n                              const [m, d, y] = a.date.split('/');\n                              return new Date(`${y}-${m.padStart(2, '0')}-${d.padStart(2, '0')}`);\n                            })() : new Date(a.date);\n                          const dateB = b.date.includes('/') ? \n                            (() => {\n                              const [m, d, y] = b.date.split('/');\n                              return new Date(`${y}-${m.padStart(2, '0')}-${d.padStart(2, '0')}`);\n                            })() : new Date(b.date);\n                          \n                          const dateCompare = dateA.getTime() - dateB.getTime();\n                          if (dateCompare !== 0) return dateCompare;\n                          \n                          // Sort by time within same date\n                          const timeA = new Date(`2000-01-01 ${a.time}`).getTime();\n                          const timeB = new Date(`2000-01-01 ${b.time}`).getTime();\n                          return timeA - timeB;\n                        });\n                      \n                      logDebug('StaffWorkflowDashboard', 'Debug message', {});\n                      logDebug('StaffWorkflowDashboard', 'Debug message', {});\n                      logDebug('StaffWorkflowDashboard', 'Debug message', {});\n                      \n                      if (appointments.length === 0) {\n                        return (\n                          <div className=\"text-center py-8 text-gray-500\">\n                            <p>No appointments found for the selected period</p>\n                            <p className=\"text-sm mt-2\">Total appointments in system: {allAppointments.length}</p>\n                            {!showAllAppointments && allAppointments.length > 0 && (\n                              <p className=\"text-sm mt-1\">Try checking \"Show All\" to see all appointments</p>\n                            )}\n                          </div>\n                        );\n                      }\n                      \n                      // Group by date\n                      const groupedByDate = appointments.reduce((acc, appt) => {\n                        const dateKey = appt.date;\n                        if (!acc[dateKey]) acc[dateKey] = [];\n                        acc[dateKey].push(appt);\n                        return acc;\n                      }, {} as Record<string, typeof appointments>);\n                      \n                      return Object.entries(groupedByDate).map(([date, dayAppts]) => (\n                        <div key={date} className=\"border rounded-lg p-4\">\n                          <h3 className=\"font-semibold text-lg mb-3\">\n                            {new Date(date).toLocaleDateString('en-US', { \n                              weekday: 'long', \n                              year: 'numeric', \n                              month: 'long', \n                              day: 'numeric' \n                            })}\n                            <span className=\"ml-2 text-sm text-gray-500\">\n                              ({dayAppts.length} appointments)\n                            </span>\n                          </h3>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2\">\n                            {dayAppts.map(appt => (\n                              <div \n                                key={appt.id}\n                                className={`p-2 rounded border ${simpleAppointmentService.getDoctorColor(appt.doctorId)}`}\n                              >\n                                <div className=\"flex justify-between items-start\">\n                                  <div className=\"flex-1\">\n                                    <div className=\"font-medium\">{appt.time}</div>\n                                    <div className=\"text-sm\">{appt.patientName}</div>\n                                    <div className=\"text-xs text-gray-600\">{appt.doctorName}</div>\n                                    <div className=\"text-xs text-gray-500\">{appt.visitType}</div>\n                                  </div>\n                                  <div className=\"text-xs text-gray-400\">\n                                    ID: {appt.patientId}\n                                  </div>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      ));\n                    })()}\n                  </div>\n                </div>\n              ) : calendarView === 'day' ? (\n                // Day View\n                <div className=\"p-6\">\n                  <div className=\"grid grid-cols-2 gap-0 border-t border-l\">\n                    {/* Time Column */}\n                    <div className=\"border-r border-b bg-gray-50\">\n                      <div className=\"h-12 flex items-center justify-center text-xs font-medium text-gray-500\">\n                        Time\n                      </div>\n                    </div>\n                    \n                    {/* Day Header */}\n                    <div className=\"border-r border-b bg-gray-50\">\n                      <div className=\"h-12 flex items-center justify-center text-xs font-medium text-gray-900\">\n                        {selectedDate.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric' })}\n                      </div>\n                    </div>\n                    \n                    {/* Time Slots */}\n                    {['8:00 AM', '9:00 AM', '10:00 AM', '11:00 AM', '12:00 PM', '1:00 PM', '2:00 PM', '3:00 PM', '4:00 PM', '5:00 PM', '6:00 PM'].map(time => {\n                      // Get appointments for this time slot\n                      const calendarData = simpleAppointmentService.getCalendarData(selectedDate, selectedDoctor === 'all' ? undefined : selectedDoctor);\n                      const timeSlotData = calendarData.get(time);\n                      const dateStr = selectedDate.toISOString().split('T')[0];\n                      const dayAppointments = timeSlotData?.get(dateStr) || [];\n                      \n                      return (\n                        <React.Fragment key={time}>\n                          <div className=\"border-r border-b bg-gray-50\">\n                            <div className=\"h-20 px-2 py-1 text-xs text-gray-500\">\n                              {time}\n                            </div>\n                          </div>\n                          <div className=\"border-r border-b hover:bg-blue-50 cursor-pointer relative\">\n                            <div className=\"h-20 p-1 overflow-y-auto\">\n                              {dayAppointments.map((appt, idx) => (\n                                <div \n                                  key={appt.id} \n                                  className={`${simpleAppointmentService.getDoctorColor(appt.doctorId)} text-xs p-1 rounded border mb-1`}\n                                  title={`${appt.patientName}\\n${appt.visitReason}\\n${appt.notes || ''}`}\n                                >\n                                  {selectedDoctor === 'all' && (\n                                    <div className=\"font-semibold truncate\">{appt.doctorName}</div>\n                                  )}\n                                  <div className=\"truncate\">{appt.patientName}</div>\n                                  <div className=\"text-xs opacity-75 truncate\">{appt.visitType}</div>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        </React.Fragment>\n                      );\n                    })}\n                  </div>\n                </div>\n              ) : (\n              // Week View (original)\n              <div className=\"p-6\">\n                <div className=\"grid grid-cols-8 gap-0 border-t border-l\">\n                  {/* Time Column */}\n                  <div className=\"border-r border-b bg-gray-50\">\n                    <div className=\"h-12 flex items-center justify-center text-xs font-medium text-gray-500\">\n                      Time\n                    </div>\n                  </div>\n                  \n                  {/* Day Headers */}\n                  {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map(day => (\n                    <div key={day} className=\"border-r border-b bg-gray-50\">\n                      <div className=\"h-12 flex items-center justify-center text-xs font-medium text-gray-900\">\n                        {day}\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {/* Time Slots */}\n                  {['8:00 AM', '9:00 AM', '10:00 AM', '11:00 AM', '12:00 PM', '1:00 PM', '2:00 PM', '3:00 PM', '4:00 PM', '5:00 PM'].map(time => {\n                    // Get appointments for this time slot\n                    const calendarData = simpleAppointmentService.getCalendarData(currentWeek, selectedDoctor === 'all' ? undefined : selectedDoctor);\n                    const timeSlotData = calendarData.get(time);\n                    const weekDates = Array.from({ length: 7 }, (_, i) => {\n                      const date = new Date(currentWeek);\n                      const day = date.getDay();\n                      const diff = date.getDate() - day + (day === 0 ? -6 : 1) + i;\n                      date.setDate(diff);\n                      return date.toISOString().split('T')[0];\n                    });\n                    \n                    return (\n                      <React.Fragment key={time}>\n                        <div className=\"border-r border-b bg-gray-50\">\n                          <div className=\"h-20 px-2 py-1 text-xs text-gray-500\">\n                            {time}\n                          </div>\n                        </div>\n                        {weekDates.map((dateStr, dayIndex) => {\n                          const dayAppointments = timeSlotData?.get(dateStr) || [];\n                          \n                          return (\n                            <div key={`${time}-${dayIndex}`} className=\"border-r border-b hover:bg-blue-50 cursor-pointer relative\">\n                              <div className=\"h-20 p-1 overflow-hidden\">\n                                {dayAppointments.map((appt, idx) => (\n                                  <div \n                                    key={appt.id} \n                                    className={`${simpleAppointmentService.getDoctorColor(appt.doctorId)} text-xs p-1 rounded border mb-1`}\n                                    title={`${appt.patientName}\\n${appt.visitReason}\\n${appt.notes || ''}`}\n                                  >\n                                    {selectedDoctor === 'all' && (\n                                      <div className=\"font-semibold truncate\">{appt.doctorName}</div>\n                                    )}\n                                    <div className=\"truncate\">{appt.patientName}</div>\n                                    <div className=\"text-xs opacity-75 truncate\">{appt.visitType}</div>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </React.Fragment>\n                    );\n                  })}\n                </div>\n              </div>\n              )}\n              \n              {/* Legend */}\n              <div className=\"px-6 py-3 bg-gray-50 border-t\">\n                <div className=\"flex items-center space-x-4 text-xs\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-3 h-3 bg-blue-100 rounded mr-1\"></div>\n                    <span>Dr. Patel</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-3 h-3 bg-purple-100 rounded mr-1\"></div>\n                    <span>Dr. Watwe</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-3 h-3 bg-green-100 rounded mr-1\"></div>\n                    <span>Dr. Chamakkala</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-3 h-3 bg-yellow-100 rounded mr-1\"></div>\n                    <span>Dr. Bernander</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-3 h-3 bg-red-100 rounded mr-1\"></div>\n                    <span>Dr. Gregroek</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-3 h-3 bg-orange-100 rounded mr-1\"></div>\n                    <span>Dr. Shakya</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        {/* Action Items Tab */}\n        {activeTab === 'actions' && (\n          <div className=\"space-y-6\">\n            {/* Header with Doctor Filter */}\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-medium text-gray-900\">Action Items from Dictation</h2>\n              <div className=\"flex items-center space-x-2\">\n                <label className=\"text-sm font-medium text-gray-700\">Filter by doctor:</label>\n                <select\n                  value={selectedDoctor}\n                  onChange={(e) => {\n                    setSelectedDoctor(e.target.value);\n                    const filtered = noteActionsService.getPendingActions(\n                      e.target.value === 'all' ? undefined : { doctorId: e.target.value }\n                    );\n                    setActionItems(filtered);\n                  }}\n                  className=\"px-3 py-1 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  {doctors.map(doctor => (\n                    <option key={doctor.id} value={doctor.id}>\n                      {doctor.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            \n            {/* Medication/Lab Tabs */}\n            <div className=\"bg-white rounded-lg shadow\">\n              <div className=\"border-b border-gray-200\">\n                <nav className=\"-mb-px flex space-x-8 px-6\" aria-label=\"Tabs\">\n                  <button\n                    onClick={() => setActionTab('medications')}\n                    className={`py-3 px-1 border-b-2 font-medium text-sm ${\n                      actionTab === 'medications'\n                        ? 'border-indigo-500 text-indigo-600'\n                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                    }`}\n                  >\n                    Medications\n                    {noteActionsService.getPendingCount('medication') > 0 && (\n                      <span className=\"ml-2 bg-indigo-100 text-indigo-600 text-xs rounded-full px-2 py-0.5\">\n                        {noteActionsService.getPendingCount('medication')}\n                      </span>\n                    )}\n                  </button>\n                  <button\n                    onClick={() => setActionTab('labs')}\n                    className={`py-3 px-1 border-b-2 font-medium text-sm ${\n                      actionTab === 'labs'\n                        ? 'border-indigo-500 text-indigo-600'\n                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                    }`}\n                  >\n                    Lab Orders\n                    {noteActionsService.getPendingCount('lab') > 0 && (\n                      <span className=\"ml-2 bg-indigo-100 text-indigo-600 text-xs rounded-full px-2 py-0.5\">\n                        {noteActionsService.getPendingCount('lab')}\n                      </span>\n                    )}\n                  </button>\n                </nav>\n              </div>\n              \n              {/* Action Items List */}\n              <div className=\"p-6\">\n                {actionTab === 'medications' && (\n                  <div>\n                    <h3 className=\"text-sm font-medium text-gray-900 mb-4\">\n                      Medication Orders to Process\n                    </h3>\n                    {actionItems.filter(a => a.itemType === 'medication').length === 0 ? (\n                      <p className=\"text-gray-500 text-sm\">No pending medication orders</p>\n                    ) : (\n                      <div className=\"space-y-3\">\n                        {actionItems.filter(a => a.itemType === 'medication').map((item) => (\n                          <div key={item.id} className=\"bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800\">\n                                    {item.details?.action || 'Action'}\n                                  </span>\n                                  <p className=\"text-sm font-semibold text-gray-900\">\n                                    {item.action}\n                                  </p>\n                                </div>\n                                <div className=\"mt-2 text-sm text-gray-600\">\n                                  <p>Patient: <span className=\"font-medium\">{item.patientName}</span></p>\n                                  <p>Doctor: <span className=\"font-medium\">{item.doctorName}</span></p>\n                                  <p>Extracted: {new Date(item.dateExtracted).toLocaleString()}</p>\n                                </div>\n                              </div>\n                              <button\n                                onClick={() => {\n                                  if (noteActionsService.processAction(item.id, currentUser?.name || 'Staff')) {\n                                    // Reload actions\n                                    const updated = noteActionsService.getPendingActions(\n                                      selectedDoctor === 'all' ? undefined : { doctorId: selectedDoctor }\n                                    );\n                                    setActionItems(updated);\n                                  }\n                                }}\n                                className=\"px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700\"\n                              >\n                                Process\n                              </button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                )}\n                \n                {actionTab === 'labs' && (\n                  <div>\n                    <h3 className=\"text-sm font-medium text-gray-900 mb-4\">\n                      Lab Orders to Process\n                    </h3>\n                    {actionItems.filter(a => a.itemType === 'lab').length === 0 ? (\n                      <p className=\"text-gray-500 text-sm\">No pending lab orders</p>\n                    ) : (\n                      <div className=\"space-y-3\">\n                        {actionItems.filter(a => a.itemType === 'lab').map((item) => (\n                          <div key={item.id} className=\"bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-100 text-purple-800\">\n                                    Lab Order\n                                  </span>\n                                  <p className=\"text-sm font-semibold text-gray-900\">\n                                    {item.action}\n                                  </p>\n                                </div>\n                                <div className=\"mt-2 text-sm text-gray-600\">\n                                  <p>Patient: <span className=\"font-medium\">{item.patientName}</span></p>\n                                  <p>Doctor: <span className=\"font-medium\">{item.doctorName}</span></p>\n                                  <p>Extracted: {new Date(item.dateExtracted).toLocaleString()}</p>\n                                </div>\n                              </div>\n                              <button\n                                onClick={() => {\n                                  if (noteActionsService.processAction(item.id, currentUser?.name || 'Staff')) {\n                                    // Reload actions\n                                    const updated = noteActionsService.getPendingActions(\n                                      selectedDoctor === 'all' ? undefined : { doctorId: selectedDoctor }\n                                    );\n                                    setActionItems(updated);\n                                  }\n                                }}\n                                className=\"px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700\"\n                              >\n                                Process\n                              </button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                )}\n                \n                {/* Test Section */}\n                <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-blue-900 mb-2\">Action Management</h4>\n                    <p className=\"text-sm text-blue-700 mb-3\">\n                      Actions are automatically extracted from doctor's dictation notes during appointments.\n                    </p>\n                    <div className=\"flex space-x-2\">\n                      <button\n                        onClick={async () => {\n                          // Clear and regenerate with real patient data\n                          await noteActionsService.regenerateWithRealData();\n                          \n                          // Reload actions\n                          const updated = noteActionsService.getPendingActions(\n                            selectedDoctor === 'all' ? undefined : { doctorId: selectedDoctor }\n                          );\n                          setActionItems(updated);\n                          \n                          alert('Actions regenerated with real patient appointment data!');\n                        }}\n                        className=\"px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700\"\n                      >\n                        Load Real Patient Actions\n                      </button>\n                      <button\n                        onClick={async () => {\n                          const testText = \"Start metformin 500mg BID. Increase lisinopril to 20mg daily. Stop atorvastatin. Order A1C, CMP, and lipid panel.\";\n                          \n                          // Get a real appointment to link to\n                          const appointments = simpleAppointmentService.getAppointments({ weekOf: new Date() });\n                          const randomAppt = appointments[Math.floor(Math.random() * appointments.length)];\n                          \n                          if (randomAppt) {\n                            const extracted = await noteActionsService.extractAndSaveActions(\n                              testText,\n                              randomAppt.patientId,\n                              randomAppt.patientName,\n                              randomAppt.doctorId,\n                              randomAppt.doctorName\n                            );\n                            \n                            // Reload actions\n                            const updated = noteActionsService.getPendingActions(\n                              selectedDoctor === 'all' ? undefined : { doctorId: selectedDoctor }\n                            );\n                            setActionItems(updated);\n                            \n                            alert(`Extracted ${extracted.length} action items for ${randomAppt.patientName}!`);\n                          }\n                        }}\n                        className=\"px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700\"\n                      >\n                        Add Test Dictation\n                      </button>\n                      <button\n                        onClick={() => {\n                          noteActionsService.clearAllActions();\n                          setActionItems([]);\n                          alert('All actions cleared!');\n                        }}\n                        className=\"px-3 py-1 text-sm bg-red-600 text-white rounded hover:bg-red-700\"\n                      >\n                        Clear All\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        {/* Import Schedule Tab */}\n        {activeTab === 'import' && (\n          <div className=\"max-w-4xl mx-auto\">\n            <ScheduleImporter />\n          </div>\n        )}\n      </div>\n      \n      {/* Create Patient Modal */}\n      {showCreatePatient && (\n        <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-md w-full p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Create New Patient</h3>\n            <p className=\"text-sm text-gray-600 mb-4\">Not all fields are required - provide what you have</p>\n            <div className=\"space-y-4\">\n              <input\n                type=\"text\"\n                placeholder=\"First Name (optional)\"\n                value={patientForm.firstName}\n                onChange={(e) => setPatientForm({...patientForm, firstName: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n              />\n              <input\n                type=\"text\"\n                placeholder=\"Last Name (optional)\"\n                value={patientForm.lastName}\n                onChange={(e) => setPatientForm({...patientForm, lastName: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n              />\n              <input\n                type=\"date\"\n                placeholder=\"Date of Birth\"\n                value={patientForm.dateOfBirth}\n                onChange={(e) => setPatientForm({...patientForm, dateOfBirth: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n              />\n              <input\n                type=\"tel\"\n                placeholder=\"Phone (optional)\"\n                value={patientForm.phone}\n                onChange={(e) => setPatientForm({...patientForm, phone: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n              />\n              <input\n                type=\"email\"\n                placeholder=\"Email (optional)\"\n                value={patientForm.email}\n                onChange={(e) => setPatientForm({...patientForm, email: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n              />\n            </div>\n            <div className=\"mt-6 flex justify-end space-x-3\">\n              <button\n                onClick={() => setShowCreatePatient(false)}\n                className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleCreatePatient}\n                className=\"px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700\"\n              >\n                Create Patient\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Create Chart Modal */}\n      {showCreateChart && selectedPatient && (\n        <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-md w-full p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Create Chart</h3>\n            <p className=\"text-sm text-gray-600 mb-2\">\n              Creating chart for: <strong>{selectedPatient.firstName} {selectedPatient.lastName}</strong>\n            </p>\n            <p className=\"text-sm text-gray-500 mb-4\">\n              Current AVA ID: <strong>{selectedPatient.patientAvaId}</strong>\n            </p>\n            <div className=\"bg-blue-50 border border-blue-200 rounded p-3 mb-6\">\n              <p className=\"text-sm text-blue-700\">\n                This will generate a new TSH ID for EMR use while keeping the existing AVA ID for patient portal access.\n              </p>\n            </div>\n            <div className=\"flex justify-end space-x-3\">\n              <button\n                onClick={() => setShowCreateChart(false)}\n                className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleCreateChart}\n                className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700\"\n              >\n                Create Chart\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Add Old Notes Modal */}\n      {showOldNotes && (\n        <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-2xl w-full p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Add Old Notes to Chart</h3>\n            <div className=\"space-y-4\">\n              <select\n                value={oldNotesForm.chartId}\n                onChange={(e) => setOldNotesForm({...oldNotesForm, chartId: e.target.value})}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n              >\n                <option value=\"\">Select a chart...</option>\n                {charts.map(chart => (\n                  <option key={chart.id} value={chart.id}>\n                    AVA: {chart.avaId} | TSH: {chart.tshId}\n                  </option>\n                ))}\n              </select>\n              <textarea\n                placeholder=\"Paste old notes here...\"\n                value={oldNotesForm.notes}\n                onChange={(e) => setOldNotesForm({...oldNotesForm, notes: e.target.value})}\n                rows={10}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n              />\n            </div>\n            <div className=\"mt-6 flex justify-end space-x-3\">\n              <button\n                onClick={() => setShowOldNotes(false)}\n                className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleAddOldNotes}\n                className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700\"\n              >\n                Add Notes\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Schedule Import Modal */}\n      <ScheduleImportModal\n        isOpen={showImportModal}\n        onClose={() => setShowImportModal(false)}\n        onImportComplete={() => {\n          // Refresh calendar data\n          const weekData = simpleAppointmentService.getCalendarData(currentWeek, selectedDoctor === 'all' ? undefined : selectedDoctor);\n          setCalendarData(weekData);\n          // Refresh appointments\n          loadData();\n        }}\n      />\n      \n      {/* Recent Activity Sidebar */}\n      <div className=\"fixed right-0 top-16 w-64 h-screen bg-white border-l p-4 overflow-y-auto\">\n        <h3 className=\"font-medium text-gray-900 mb-4\">Recent Activity</h3>\n        <div className=\"space-y-3\">\n          {recentActivity.length > 0 ? (\n            recentActivity.map((log) => (\n              <div key={log.id} className=\"text-xs text-gray-600 pb-2 border-b\">\n                <p className=\"font-medium text-gray-800\">\n                  {log.action} - {log.entityType}\n                </p>\n                <p className=\"text-gray-600\">{log.actorName || log.actorId}</p>\n                <p className=\"text-gray-500\">\n                  {new Date(log.createdAt).toLocaleString()}\n                </p>\n              </div>\n            ))\n          ) : (\n            <p className=\"text-sm text-gray-500\">No recent activity</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":["ActionExtractionService","noteBody","meds","labs","logDebug","text","medications","patterns","action","actionPatterns","pattern","regex","match","drug","medication","frequency","labTests","orderPatterns","labText","extractedTests","testMentionPattern","testName","lab","t","diabetesMeds","thyroidMeds","cardiacMeds","allCommonMeds","med","contextMatch","knownTests","tests","normalizedText","test","testUpper","listPattern","potential","matchText","upper","nearIndex","frequencyPatterns","contextStart","contextEnd","context","freq","name","term","m","verb","v","seen","key","merged","existing","allTests","request","actions","actionExtractionService","NoteActionsService","noteText","patientId","patientName","doctorId","doctorName","noteId","extracted","timestamp","auditService","a","filters","b","actionId","processedBy","itemType","pending","saved","parsed","logError","appointments","simpleAppointmentService","sampleDictations","dictation","noteActionsService","DOCTOR_MAPPING","ScheduleImporter","scheduleText","setScheduleText","useState","selectedDate","setSelectedDate","parsedAppointments","setParsedAppointments","importStatus","setImportStatus","message","setMessage","showPreview","setShowPreview","parseSchedule","lines","line","currentDoctor","currentDoctorId","currentLocation","appointmentIdCounter","i","lowerLine","matchedDoctor","time","duration","patientInfo","visitReason","status","isVirtual","skipToNextTime","nextLine","durationMatch","reasonLines","lookAhead","isDuplicateSlot","appointment","infoMatch","error","importAppointments","successCount","appt","jsxs","jsx","e","idx","Fragment","StaffWorkflowDashboard","navigate","useNavigate","currentUser","unifiedAuthService","permissions","activeTab","setActiveTab","showCreatePatient","setShowCreatePatient","showCreateChart","setShowCreateChart","showOldNotes","setShowOldNotes","showImportModal","setShowImportModal","selectedPatient","setSelectedPatient","selectedDoctor","setSelectedDoctor","calendarView","setCalendarView","showAllAppointments","setShowAllAppointments","patients","setPatients","charts","setCharts","actionItems","setActionItems","recentActivity","setRecentActivity","setAppointments","actionTab","setActionTab","currentWeek","setCurrentWeek","calendarData","setCalendarData","doctors","searchQuery","setSearchQuery","searchResults","setSearchResults","patientForm","setPatientForm","oldNotesForm","setOldNotesForm","useEffect","loadData","handleAppointmentUpdate","weekData","logs","appts","handleCreatePatient","patient","patientService","handleCreateChart","result","chartService","handleAddOldNotes","handleSearch","patientResults","p","chartResults","handleLogout","c","chart","doctor","d","newWeek","newDate","startDate","week","day","endDate","allAppointments","acc","apptDate","month","year","dateA","y","dateB","dateCompare","timeA","timeB","groupedByDate","dateKey","date","dayAppts","timeSlotData","dateStr","dayAppointments","React","weekDates","_","diff","dayIndex","filtered","item","updated","testText","randomAppt","ScheduleImportModal","log"],"mappings":"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"}