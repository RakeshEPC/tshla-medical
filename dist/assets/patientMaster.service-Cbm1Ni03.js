import{b as l}from"./index-CFDQeSWK.js";class w{dbName="tshla_medical_db";version=2;db=null;async init(){return new Promise((a,n)=>{const t=indexedDB.open(this.dbName,this.version);t.onerror=()=>n(t.error),t.onsuccess=()=>{this.db=t.result,a()},t.onupgradeneeded=r=>{const e=r.target.result;if(!e.objectStoreNames.contains("appointments")){const s=e.createObjectStore("appointments",{keyPath:"id"});s.createIndex("doctor_id","doctor_id",{unique:!1}),s.createIndex("appointment_date","appointment_date",{unique:!1}),s.createIndex("appointment_slot","appointment_slot",{unique:!1}),s.createIndex("doctor_slot",["doctor_id","appointment_slot"],{unique:!0})}if(e.objectStoreNames.contains("doctors")||e.createObjectStore("doctors",{keyPath:"id"}).createIndex("email","email",{unique:!0}),!e.objectStoreNames.contains("patients_master")){const s=e.createObjectStore("patients_master",{keyPath:"patient_id"});s.createIndex("emr_number","emr_number",{unique:!1}),s.createIndex("ava_number","ava_number",{unique:!0}),s.createIndex("tsh_number","tsh_number",{unique:!0}),s.createIndex("name_dob",["name","dob"],{unique:!1}),s.createIndex("email","email",{unique:!1}),s.createIndex("created_by_ma_id","created_by_ma_id",{unique:!1})}if(!e.objectStoreNames.contains("orders")){const s=e.createObjectStore("orders",{keyPath:"order_id"});s.createIndex("patient_id","patient_id",{unique:!1}),s.createIndex("doctor_id","doctor_id",{unique:!1}),s.createIndex("ma_id","ma_id",{unique:!1}),s.createIndex("status","status",{unique:!1}),s.createIndex("order_type","order_type",{unique:!1}),s.createIndex("created_at","created_at",{unique:!1}),s.createIndex("doctor_status",["doctor_id","status"],{unique:!1})}if(!e.objectStoreNames.contains("ma_actions_log")){const s=e.createObjectStore("ma_actions_log",{keyPath:"log_id"});s.createIndex("ma_id","ma_id",{unique:!1}),s.createIndex("patient_id","patient_id",{unique:!1}),s.createIndex("action_type","action_type",{unique:!1}),s.createIndex("timestamp","timestamp",{unique:!1})}if(!e.objectStoreNames.contains("patient_summaries")){const s=e.createObjectStore("patient_summaries",{keyPath:"summary_id"});s.createIndex("patient_id","patient_id",{unique:!1}),s.createIndex("created_at","created_at",{unique:!1})}}})}async query(a,n){return this.db||await this.init(),new Promise((t,r)=>{const o=this.db.transaction([a],"readonly").objectStore(a).getAll();o.onsuccess=()=>{let c=o.result;if(n&&n.length>0){const[i,_]=n;a==="appointments"&&i&&(c=c.filter(d=>{const b=!i||d.doctor_id===i,h=!_||d.appointment_date===_,f=!d.is_deleted;return b&&h&&f}))}t(c)},o.onerror=()=>r(o.error)})}async queryOne(a,n){return this.db||await this.init(),new Promise((t,r)=>{const o=this.db.transaction([a],"readonly").objectStore(a).get(n);o.onsuccess=()=>t(o.result),o.onerror=()=>r(o.error)})}async execute(a,n){this.db||await this.init();const[t,r]=a.split(":");return new Promise((e,s)=>{const c=this.db.transaction([r],"readwrite").objectStore(r);let i;switch(t){case"add":i=c.add(n);break;case"put":i=c.put(n);break;case"delete":i=c.delete(n);break;default:s(new Error(`Unknown operation: ${t}`));return}i.onsuccess=()=>e({success:!0,id:i.result}),i.onerror=()=>s(i.error)})}async transaction(a){await a(this)}}let u=null;function y(){return u||(u=new w),u}function m(){return crypto.randomUUID()}class g{db=y();lastTshNumber=0;constructor(){this.initializeLastTshNumber()}async initializeLastTshNumber(){try{const a=await this.db.query("patients_master");if(a&&a.length>0){const n=a.map(t=>t.tsh_number).filter(t=>t&&t.startsWith("TSHMR-")).map(t=>parseInt(t.replace("TSHMR-",""),10)).filter(t=>!isNaN(t));n.length>0&&(this.lastTshNumber=Math.max(...n))}}catch{l("patientMaster","Error message",{})}}async generateAvaNumber(){const a=()=>{const r=Math.floor(Math.random()*900)+100,e=Math.floor(Math.random()*900)+100;return`${r}-${e}`};let n=a(),t=0;for(;await this.checkAvaExists(n)&&t<100;)n=a(),t++;if(t>=100)throw new Error("Unable to generate unique AVA number");return n}generateTshNumber(){return this.lastTshNumber++,`TSHMR-${this.lastTshNumber.toString().padStart(5,"0")}`}async checkAvaExists(a){try{return(await this.db.query("patients_master")).some(t=>t.ava_number===a&&!t.is_deleted)}catch{return!1}}async checkDuplicate(a,n){try{return(await this.db.query("patients_master")).find(e=>e.name.toLowerCase()===a.toLowerCase()&&e.dob===n&&!e.is_deleted)||null}catch{return l("patientMaster","Error message",{}),null}}async createPatient(a,n){const t=await this.checkDuplicate(a.name,a.dob);if(t)throw new Error(`Patient already exists: ${t.name} (DOB: ${t.dob})`);const r=await this.generateAvaNumber(),e=this.generateTshNumber(),s={...a,patient_id:m(),ava_number:r,tsh_number:e,created_by_ma_id:n,created_at:new Date,updated_at:new Date,is_deleted:!1};return await this.db.execute("add:patients_master",s),await this.logAction(n,s.patient_id,"patient_created",{ava_number:r,tsh_number:e}),s}async searchPatients(a){const n=[],t=await this.db.query("patients_master"),r=a.toLowerCase();for(const e of t)if(!e.is_deleted){if(e.emr_number&&e.emr_number.toLowerCase().includes(r)){n.push({patient:e,matchType:"emr"});continue}if(e.ava_number&&e.ava_number.toLowerCase().includes(r)){n.push({patient:e,matchType:"ava"});continue}if(e.tsh_number&&e.tsh_number.toLowerCase().includes(r)){n.push({patient:e,matchType:"tsh"});continue}if(e.name&&e.name.toLowerCase().includes(r)){n.push({patient:e,matchType:"name"});continue}if(e.email&&e.email.toLowerCase().includes(r)){n.push({patient:e,matchType:"email"});continue}}return n}async getPatientById(a,n){const t=await this.db.query("patients_master");let r;switch(n){case"emr":r=t.find(e=>e.emr_number===a&&!e.is_deleted);break;case"ava":r=t.find(e=>e.ava_number===a&&!e.is_deleted);break;case"tsh":r=t.find(e=>e.tsh_number===a&&!e.is_deleted);break;case"uuid":r=t.find(e=>e.patient_id===a&&!e.is_deleted);break}return r||null}async updatePatient(a,n,t){const r=await this.getPatientById(a,"uuid");if(!r)throw new Error("Patient not found");const e={...r,...n,patient_id:r.patient_id,ava_number:r.ava_number,tsh_number:r.tsh_number,created_at:r.created_at,created_by_ma_id:r.created_by_ma_id,updated_at:new Date};return await this.db.execute("put:patients_master",e),await this.logAction(t,a,"patient_updated",n),e}async softDeletePatient(a,n){const t=await this.getPatientById(a,"uuid");if(!t)throw new Error("Patient not found");const r={...t,is_deleted:!0,deleted_at:new Date,updated_at:new Date};await this.db.execute("put:patients_master",r),await this.logAction(n,a,"patient_deleted",{deleted_at:new Date})}async getPatientsByMA(a){return(await this.db.query("patients_master")).filter(t=>t.created_by_ma_id===a&&!t.is_deleted)}async getAllActivePatients(){return(await this.db.query("patients_master")).filter(n=>!n.is_deleted)}async updatePatientSummary(a,n,t){if(!await this.getPatientById(a,"uuid"))throw new Error("Patient not found");await this.updatePatient(a,{patient_summary:n},t);const e={summary_id:m(),patient_id:a,summary:n,created_by:t,created_at:new Date};await this.db.execute("add:patient_summaries",e)}async logAction(a,n,t,r){const e={log_id:m(),ma_id:a,patient_id:n,action_type:t,details:JSON.stringify(r||{}),timestamp:new Date,ip_address:"browser",user_agent:navigator.userAgent};await this.db.execute("add:ma_actions_log",e)}async getPatientAuditTrail(a){return(await this.db.query("ma_actions_log")).filter(t=>t.patient_id===a).sort((t,r)=>new Date(r.timestamp).getTime()-new Date(t.timestamp).getTime())}async cleanupDeletedPatients(){const a=await this.db.query("patients_master"),n=new Date;n.setDate(n.getDate()-30);let t=0;for(const r of a)r.is_deleted&&r.deleted_at&&new Date(r.deleted_at)<n&&(await this.db.execute("delete:patients_master",r.patient_id),t++);return t}}const x=new g;export{m as a,y as g,x as p};
//# sourceMappingURL=patientMaster.service-Cbm1Ni03.js.map
