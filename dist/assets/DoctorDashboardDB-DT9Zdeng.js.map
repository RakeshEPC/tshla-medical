{"version":3,"file":"DoctorDashboardDB-DT9Zdeng.js","sources":["../../src/services/appointmentBrowser.service.ts","../../src/api/appointments.api.ts","../../src/pages/DoctorDashboardDB.tsx"],"sourcesContent":["/**\n * Browser-Compatible Appointment Service\n * Uses IndexedDB for persistent browser storage\n */\n\nimport { getDb, generateId } from '../lib/db/browserClient';\nimport { auditLogService } from './auditLog.service';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface Appointment {\n  id: string;\n  doctor_id: string;\n  patient_id: string;\n  patient_name: string;\n  patient_mrn: string;\n  patient_phone?: string;\n  patient_email?: string;\n  patient_dob?: string;\n  appointment_date: string;\n  appointment_time: string;\n  appointment_slot: string;\n  duration_minutes: number;\n  status: 'scheduled' | 'confirmed' | 'in-progress' | 'completed' | 'cancelled' | 'no-show';\n  visit_type: 'new-patient' | 'follow-up' | 'urgent' | 'telehealth' | 'procedure';\n  chief_complaint?: string;\n  notes?: string;\n  practice_id?: string;\n  location?: string;\n  room_number?: string;\n  created_at: string;\n  updated_at: string;\n  created_by: string;\n  updated_by?: string;\n  is_deleted?: number;\n  deleted_at?: string;\n  deleted_by?: string;\n}\n\nexport interface AppointmentCreateData {\n  patient_name: string;\n  patient_mrn: string;\n  patient_id?: string;\n  patient_phone?: string;\n  patient_email?: string;\n  patient_dob?: string;\n  appointment_date: string;\n  appointment_time: string;\n  duration_minutes?: number;\n  visit_type?: 'new-patient' | 'follow-up' | 'urgent' | 'telehealth' | 'procedure';\n  chief_complaint?: string;\n  notes?: string;\n  location?: string;\n  room_number?: string;\n}\n\nclass AppointmentBrowserService {\n  private convertTo24HourSlot(date: string, time: string): string {\n    const [timePart, modifier] = time.split(' ');\n    let [hours, minutes] = timePart.split(':');\n\n    if (hours === '12') {\n      hours = modifier === 'AM' ? '00' : '12';\n    } else if (modifier === 'PM') {\n      hours = String(parseInt(hours, 10) + 12);\n    }\n\n    return `${date} ${hours.padStart(2, '0')}:${minutes}`;\n  }\n\n  async getDoctorAppointments(doctorId: string, date?: string): Promise<Appointment[]> {\n    const db = getDb();\n    const targetDate = date || new Date().toISOString().split('T')[0];\n\n    try {\n      const appointments = await db.query('appointments', [doctorId, targetDate]);\n      return appointments.sort((a, b) => a.appointment_slot.localeCompare(b.appointment_slot));\n    } catch (error) {\n      logError('appointmentBrowser', 'Error message', {});\n      return [];\n    }\n  }\n\n  async createAppointment(\n    doctorId: string,\n    appointmentData: AppointmentCreateData\n  ): Promise<Appointment> {\n    const db = getDb();\n    const appointmentId = generateId();\n    const appointmentSlot = this.convertTo24HourSlot(\n      appointmentData.appointment_date,\n      appointmentData.appointment_time\n    );\n\n    try {\n      // Check for conflicts\n      const existing = await db.query('appointments', [doctorId, appointmentData.appointment_date]);\n      const conflicts = existing.filter(\n        a => a.appointment_slot === appointmentSlot && !a.is_deleted\n      );\n\n      if (conflicts.length > 0) {\n        throw new Error(`Time slot ${appointmentData.appointment_time} is already booked`);\n      }\n\n      const appointment: Appointment = {\n        id: appointmentId,\n        doctor_id: doctorId,\n        patient_id: appointmentData.patient_id || `patient-${generateId()}`,\n        patient_name: appointmentData.patient_name,\n        patient_mrn: appointmentData.patient_mrn,\n        patient_phone: appointmentData.patient_phone,\n        patient_email: appointmentData.patient_email,\n        patient_dob: appointmentData.patient_dob,\n        appointment_date: appointmentData.appointment_date,\n        appointment_time: appointmentData.appointment_time,\n        appointment_slot: appointmentSlot,\n        duration_minutes: appointmentData.duration_minutes || 30,\n        status: 'scheduled',\n        visit_type: appointmentData.visit_type || 'follow-up',\n        chief_complaint: appointmentData.chief_complaint,\n        notes: appointmentData.notes,\n        location: appointmentData.location,\n        room_number: appointmentData.room_number,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        created_by: doctorId,\n      };\n\n      await db.execute('add:appointments', appointment);\n\n      // Log audit\n      await auditLogService.log({\n        action: 'CREATE_APPOINTMENT',\n        userId: doctorId,\n        resourceType: 'appointment',\n        resourceId: appointmentId,\n        details: {\n          patient_name: appointmentData.patient_name,\n          appointment_time: appointmentData.appointment_time,\n          appointment_date: appointmentData.appointment_date,\n        },\n      });\n\n      return appointment;\n    } catch (error) {\n      logError('appointmentBrowser', 'Error message', {});\n      throw error;\n    }\n  }\n\n  async updateAppointment(\n    appointmentId: string,\n    doctorId: string,\n    updates: Partial<AppointmentCreateData>\n  ): Promise<Appointment> {\n    const db = getDb();\n\n    try {\n      const existing = await db.queryOne('appointments', appointmentId);\n\n      if (!existing) {\n        throw new Error('Appointment not found');\n      }\n\n      if (existing.doctor_id !== doctorId) {\n        throw new Error('Unauthorized to update this appointment');\n      }\n\n      // Apply updates\n      const updated: Appointment = {\n        ...existing,\n        ...updates,\n        updated_at: new Date().toISOString(),\n        updated_by: doctorId,\n      };\n\n      // Update appointment slot if time changed\n      if (updates.appointment_time && updates.appointment_date) {\n        updated.appointment_slot = this.convertTo24HourSlot(\n          updates.appointment_date,\n          updates.appointment_time\n        );\n      }\n\n      await db.execute('put:appointments', updated);\n\n      // Log audit\n      await auditLogService.log({\n        action: 'UPDATE_APPOINTMENT',\n        userId: doctorId,\n        resourceType: 'appointment',\n        resourceId: appointmentId,\n        details: { updates },\n      });\n\n      return updated;\n    } catch (error) {\n      logError('appointmentBrowser', 'Error message', {});\n      throw error;\n    }\n  }\n\n  async updateStatus(\n    appointmentId: string,\n    doctorId: string,\n    status: Appointment['status']\n  ): Promise<void> {\n    const db = getDb();\n\n    try {\n      const existing = await db.queryOne('appointments', appointmentId);\n      if (!existing) throw new Error('Appointment not found');\n\n      const updated = {\n        ...existing,\n        status,\n        updated_at: new Date().toISOString(),\n        updated_by: doctorId,\n      };\n\n      await db.execute('put:appointments', updated);\n\n      await auditLogService.log({\n        action: 'UPDATE_APPOINTMENT_STATUS',\n        userId: doctorId,\n        resourceType: 'appointment',\n        resourceId: appointmentId,\n        details: { status },\n      });\n    } catch (error) {\n      logError('appointmentBrowser', 'Error message', {});\n      throw error;\n    }\n  }\n\n  async cancelAppointment(appointmentId: string, doctorId: string, reason?: string): Promise<void> {\n    const db = getDb();\n\n    try {\n      const existing = await db.queryOne('appointments', appointmentId);\n      if (!existing) throw new Error('Appointment not found');\n\n      const updated = {\n        ...existing,\n        status: 'cancelled' as const,\n        is_deleted: 1,\n        deleted_at: new Date().toISOString(),\n        deleted_by: doctorId,\n        notes: existing.notes\n          ? `${existing.notes} | Cancellation: ${reason || 'Cancelled by doctor'}`\n          : reason || 'Cancelled by doctor',\n      };\n\n      await db.execute('put:appointments', updated);\n\n      await auditLogService.log({\n        action: 'CANCEL_APPOINTMENT',\n        userId: doctorId,\n        resourceType: 'appointment',\n        resourceId: appointmentId,\n        details: { reason },\n      });\n    } catch (error) {\n      logError('appointmentBrowser', 'Error message', {});\n      throw error;\n    }\n  }\n\n  async getAvailableSlots(doctorId: string, date: string): Promise<string[]> {\n    const allSlots: string[] = [];\n    for (let hour = 9; hour < 12; hour++) {\n      allSlots.push(`${hour}:00 AM`);\n      allSlots.push(`${hour}:30 AM`);\n    }\n    allSlots.push('12:00 PM', '12:30 PM');\n    for (let hour = 1; hour <= 5; hour++) {\n      allSlots.push(`${hour}:00 PM`);\n      allSlots.push(`${hour}:30 PM`);\n    }\n\n    try {\n      const appointments = await this.getDoctorAppointments(doctorId, date);\n      const bookedTimes = appointments.map(a => a.appointment_time);\n      return allSlots.filter(slot => !bookedTimes.includes(slot));\n    } catch (error) {\n      logError('appointmentBrowser', 'Error message', {});\n      return allSlots;\n    }\n  }\n\n  async quickAddAppointment(doctorId: string, date: string, time: string): Promise<Appointment> {\n    return this.createAppointment(doctorId, {\n      patient_name: `Patient @ ${time}`,\n      patient_mrn: `TBD-${Date.now().toString().slice(-6)}`,\n      appointment_date: date,\n      appointment_time: time,\n      notes: 'Placeholder - update patient details',\n    });\n  }\n\n  async getDoctorStats(\n    doctorId: string,\n    date?: string\n  ): Promise<{\n    total: number;\n    completed: number;\n    scheduled: number;\n    cancelled: number;\n    noShow: number;\n  }> {\n    const targetDate = date || new Date().toISOString().split('T')[0];\n\n    try {\n      const appointments = await this.getDoctorAppointments(doctorId, targetDate);\n\n      return {\n        total: appointments.length,\n        completed: appointments.filter(a => a.status === 'completed').length,\n        scheduled: appointments.filter(a => a.status === 'scheduled').length,\n        cancelled: appointments.filter(a => a.status === 'cancelled').length,\n        noShow: appointments.filter(a => a.status === 'no-show').length,\n      };\n    } catch (error) {\n      logError('appointmentBrowser', 'Error message', {});\n      return { total: 0, completed: 0, scheduled: 0, cancelled: 0, noShow: 0 };\n    }\n  }\n\n  async getPatientAppointments(patientId: string): Promise<Appointment[]> {\n    const db = getDb();\n\n    try {\n      const allAppointments = await db.query('appointments');\n      return allAppointments\n        .filter(a => a.patient_id === patientId && !a.is_deleted)\n        .sort((a, b) => a.appointment_slot.localeCompare(b.appointment_slot));\n    } catch (error) {\n      logError('appointmentBrowser', 'Error message', {});\n      return [];\n    }\n  }\n\n  async getPracticeAppointments(practiceId: string, date?: string): Promise<Appointment[]> {\n    const db = getDb();\n    const targetDate = date || new Date().toISOString().split('T')[0];\n\n    try {\n      const allAppointments = await db.query('appointments');\n      return allAppointments\n        .filter(a => a.appointment_date === targetDate && !a.is_deleted)\n        .sort((a, b) => {\n          // Sort by doctor, then by time\n          if (a.doctor_id !== b.doctor_id) {\n            return a.doctor_id.localeCompare(b.doctor_id);\n          }\n          return a.appointment_slot.localeCompare(b.appointment_slot);\n        });\n    } catch (error) {\n      logError('appointmentBrowser', 'Error message', {});\n      return [];\n    }\n  }\n}\n\nexport const appointmentService = new AppointmentBrowserService();\n","/**\n * Appointment API Client\n * Handles all HTTP requests for appointment operations\n */\n\nimport {\n  appointmentService,\n  type Appointment,\n  type AppointmentCreateData,\n} from '../services/appointmentBrowser.service';\nimport { unifiedAuthService } from '../services/unifiedAuth.service';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\nconst API_BASE = import.meta.env.VITE_API_URL || '';\n\nexport class AppointmentAPI {\n  /**\n   * Get current doctor's appointments for a date\n   */\n  static async getMyAppointments(date?: string): Promise<Appointment[]> {\n    try {\n      const user = unifiedAuthService.getCurrentUser();\n      if (!user) throw new Error('Not authenticated');\n\n      // For now, use local service directly\n      // In production, this would call the backend API\n      return await appointmentService.getDoctorAppointments(user.id, date);\n    } catch (error) {\n      logError('App', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Get all appointments for the practice (multi-doctor view)\n   */\n  static async getPracticeAppointments(date?: string): Promise<Appointment[]> {\n    try {\n      const user = unifiedAuthService.getCurrentUser();\n      if (!user) throw new Error('Not authenticated');\n\n      // Get practice ID from user\n      const practiceId = user.specialty || 'default'; // Use specialty as practice for now\n\n      return await appointmentService.getPracticeAppointments(practiceId, date);\n    } catch (error) {\n      logError('App', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new appointment\n   */\n  static async createAppointment(data: AppointmentCreateData): Promise<Appointment> {\n    try {\n      const user = unifiedAuthService.getCurrentUser();\n      if (!user) throw new Error('Not authenticated');\n\n      return await appointmentService.createAppointment(user.id, data);\n    } catch (error) {\n      logError('App', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Update an appointment\n   */\n  static async updateAppointment(\n    appointmentId: string,\n    updates: Partial<AppointmentCreateData>\n  ): Promise<Appointment> {\n    try {\n      const user = unifiedAuthService.getCurrentUser();\n      if (!user) throw new Error('Not authenticated');\n\n      return await appointmentService.updateAppointment(appointmentId, user.id, updates);\n    } catch (error) {\n      logError('App', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Update appointment status\n   */\n  static async updateAppointmentStatus(\n    appointmentId: string,\n    status: Appointment['status']\n  ): Promise<void> {\n    try {\n      const user = unifiedAuthService.getCurrentUser();\n      if (!user) throw new Error('Not authenticated');\n\n      await appointmentService.updateStatus(appointmentId, user.id, status);\n    } catch (error) {\n      logError('App', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel an appointment\n   */\n  static async cancelAppointment(appointmentId: string, reason?: string): Promise<void> {\n    try {\n      const user = unifiedAuthService.getCurrentUser();\n      if (!user) throw new Error('Not authenticated');\n\n      await appointmentService.cancelAppointment(appointmentId, user.id, reason);\n    } catch (error) {\n      logError('App', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Get available time slots\n   */\n  static async getAvailableSlots(date: string): Promise<string[]> {\n    try {\n      const user = unifiedAuthService.getCurrentUser();\n      if (!user) throw new Error('Not authenticated');\n\n      return await appointmentService.getAvailableSlots(user.id, date);\n    } catch (error) {\n      logError('App', 'Error message', {});\n      // Return all slots as fallback\n      const allSlots: string[] = [];\n      for (let hour = 9; hour < 12; hour++) {\n        allSlots.push(`${hour}:00 AM`);\n        allSlots.push(`${hour}:30 AM`);\n      }\n      allSlots.push('12:00 PM', '12:30 PM');\n      for (let hour = 1; hour <= 5; hour++) {\n        allSlots.push(`${hour}:00 PM`);\n        allSlots.push(`${hour}:30 PM`);\n      }\n      return allSlots;\n    }\n  }\n\n  /**\n   * Quick add a placeholder appointment\n   */\n  static async quickAddAppointment(date: string, time: string): Promise<Appointment> {\n    try {\n      const user = unifiedAuthService.getCurrentUser();\n      if (!user) throw new Error('Not authenticated');\n\n      return await appointmentService.quickAddAppointment(user.id, date, time);\n    } catch (error) {\n      logError('App', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Get appointment statistics\n   */\n  static async getAppointmentStats(date?: string): Promise<{\n    total: number;\n    completed: number;\n    scheduled: number;\n    cancelled: number;\n    noShow: number;\n  }> {\n    try {\n      const user = unifiedAuthService.getCurrentUser();\n      if (!user) throw new Error('Not authenticated');\n\n      return await appointmentService.getDoctorStats(user.id, date);\n    } catch (error) {\n      logError('App', 'Error message', {});\n      return { total: 0, completed: 0, scheduled: 0, cancelled: 0, noShow: 0 };\n    }\n  }\n\n  /**\n   * Search for patient appointments\n   */\n  static async getPatientAppointments(patientId: string): Promise<Appointment[]> {\n    try {\n      return await appointmentService.getPatientAppointments(patientId);\n    } catch (error) {\n      logError('App', 'Error message', {});\n      throw error;\n    }\n  }\n}\n\n// Export for use in components\nexport default AppointmentAPI;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { unifiedAuthService } from '../services/unifiedAuth.service';\nimport AppointmentAPI from '../api/appointments.api';\nimport type { Appointment, AppointmentCreateData } from '../services/appointment.service';\nimport OrderStatusPanel from '../components/OrderStatusPanel';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\n// Generate time slots for the day\nconst generateTimeSlots = () => {\n  const slots = [];\n  // Morning slots (9 AM to 12 PM)\n  for (let hour = 9; hour < 12; hour++) {\n    slots.push(`${hour}:00 AM`);\n    slots.push(`${hour}:30 AM`);\n  }\n  // Noon\n  slots.push('12:00 PM');\n  slots.push('12:30 PM');\n  // Afternoon slots (1 PM to 5 PM)\n  for (let hour = 1; hour <= 5; hour++) {\n    slots.push(`${hour}:00 PM`);\n    slots.push(`${hour}:30 PM`);\n  }\n  return slots;\n};\n\nexport default function DoctorDashboardDB() {\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n  const currentUser = unifiedAuthService.getCurrentUser();\n  const currentDoctor = currentUser?.name || 'Dr. Smith';\n\n  // State for appointments from database\n  const [appointments, setAppointments] = useState<Appointment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [refreshing, setRefreshing] = useState(false);\n\n  // Current date for appointments\n  const [selectedDate] = useState(() => new Date().toISOString().split('T')[0]);\n\n  // Stats\n  const [stats, setStats] = useState({\n    total: 0,\n    completed: 0,\n    scheduled: 0,\n    cancelled: 0,\n    noShow: 0,\n  });\n\n  // Form states\n  const [showAddPatient, setShowAddPatient] = useState(false);\n  const [editingAppointment, setEditingAppointment] = useState<Appointment | null>(null);\n  const [newPatient, setNewPatient] = useState<AppointmentCreateData>({\n    patient_name: '',\n    patient_mrn: '',\n    appointment_date: selectedDate,\n    appointment_time: '',\n    patient_phone: '',\n    patient_email: '',\n    patient_dob: '',\n    chief_complaint: '',\n    visit_type: 'follow-up',\n  });\n\n  const timeSlots = generateTimeSlots();\n\n  // Load appointments from database\n  const loadAppointments = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Fetch appointments for the selected date\n      const [appointmentData, statsData] = await Promise.all([\n        AppointmentAPI.getMyAppointments(selectedDate),\n        AppointmentAPI.getAppointmentStats(selectedDate),\n      ]);\n\n      setAppointments(appointmentData);\n      setStats(statsData);\n    } catch (err) {\n      logError('DoctorDashboardDB', 'Error message', {});\n      setError('Failed to load appointments. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  }, [selectedDate]);\n\n  // Initial load and periodic refresh\n  useEffect(() => {\n    loadAppointments();\n\n    // Auto-refresh every 30 seconds for real-time updates\n    const interval = setInterval(() => {\n      setRefreshing(true);\n      loadAppointments().finally(() => setRefreshing(false));\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, [loadAppointments]);\n\n  // Start dictation for a patient\n  const startDictation = (patientId: string) => {\n    navigate(`/dictation/${patientId}`);\n  };\n\n  // Quick add placeholder patient to a time slot\n  const quickAddPatient = async (timeSlot: string) => {\n    try {\n      const newAppointment = await AppointmentAPI.quickAddAppointment(selectedDate, timeSlot);\n\n      // Update local state immediately for responsive UI\n      setAppointments(prev =>\n        [...prev, newAppointment].sort((a, b) =>\n          a.appointment_slot.localeCompare(b.appointment_slot)\n        )\n      );\n\n      // Update stats\n      setStats(prev => ({ ...prev, total: prev.total + 1, scheduled: prev.scheduled + 1 }));\n    } catch (err) {\n      logError('DoctorDashboardDB', 'Error message', {});\n      alert('Failed to add appointment. Please try again.');\n    }\n  };\n\n  // Edit appointment information\n  const editAppointmentInfo = (appointment: Appointment) => {\n    setEditingAppointment(appointment);\n    setNewPatient({\n      patient_name: appointment.patient_name.startsWith('Patient @')\n        ? ''\n        : appointment.patient_name,\n      patient_mrn: appointment.patient_mrn.startsWith('TBD-') ? '' : appointment.patient_mrn,\n      appointment_date: appointment.appointment_date,\n      appointment_time: appointment.appointment_time,\n      patient_phone: appointment.patient_phone || '',\n      patient_email: appointment.patient_email || '',\n      patient_dob: appointment.patient_dob || '',\n      chief_complaint: appointment.chief_complaint || '',\n      visit_type: appointment.visit_type || 'follow-up',\n    });\n    setShowAddPatient(true);\n  };\n\n  // Add or update appointment\n  const saveAppointment = async () => {\n    if (!newPatient.appointment_time) {\n      alert('Please select an appointment time');\n      return;\n    }\n\n    try {\n      let savedAppointment: Appointment;\n\n      if (editingAppointment) {\n        // Update existing appointment\n        savedAppointment = await AppointmentAPI.updateAppointment(\n          editingAppointment.id,\n          newPatient\n        );\n\n        // Update local state\n        setAppointments(prev =>\n          prev.map(a => (a.id === editingAppointment.id ? savedAppointment : a))\n        );\n      } else {\n        // Create new appointment\n        savedAppointment = await AppointmentAPI.createAppointment({\n          ...newPatient,\n          patient_name: newPatient.patient_name || `Patient @ ${newPatient.appointment_time}`,\n          patient_mrn: newPatient.patient_mrn || `MRN${Date.now().toString().slice(-6)}`,\n        });\n\n        // Update local state\n        setAppointments(prev =>\n          [...prev, savedAppointment].sort((a, b) =>\n            a.appointment_slot.localeCompare(b.appointment_slot)\n          )\n        );\n\n        // Update stats\n        setStats(prev => ({ ...prev, total: prev.total + 1, scheduled: prev.scheduled + 1 }));\n      }\n\n      // Reset form\n      setNewPatient({\n        patient_name: '',\n        patient_mrn: '',\n        appointment_date: selectedDate,\n        appointment_time: '',\n        patient_phone: '',\n        patient_email: '',\n        patient_dob: '',\n        chief_complaint: '',\n        visit_type: 'follow-up',\n      });\n      setShowAddPatient(false);\n      setEditingAppointment(null);\n    } catch (err: any) {\n      logError('DoctorDashboardDB', 'Error message', {});\n      alert(err.message || 'Failed to save appointment. Please try again.');\n    }\n  };\n\n  // Remove appointment\n  const removeAppointment = async (appointmentId: string) => {\n    if (!confirm('Are you sure you want to cancel this appointment?')) {\n      return;\n    }\n\n    try {\n      await AppointmentAPI.cancelAppointment(appointmentId, 'Cancelled by doctor');\n\n      // Update local state\n      setAppointments(prev => prev.filter(a => a.id !== appointmentId));\n\n      // Update stats\n      setStats(prev => ({\n        ...prev,\n        total: prev.total - 1,\n        scheduled: Math.max(0, prev.scheduled - 1),\n        cancelled: prev.cancelled + 1,\n      }));\n    } catch (err) {\n      logError('DoctorDashboardDB', 'Error message', {});\n      alert('Failed to cancel appointment. Please try again.');\n    }\n  };\n\n  // Update appointment status\n  const updateAppointmentStatus = async (appointmentId: string, status: Appointment['status']) => {\n    try {\n      await AppointmentAPI.updateAppointmentStatus(appointmentId, status);\n\n      // Update local state\n      setAppointments(prev => prev.map(a => (a.id === appointmentId ? { ...a, status } : a)));\n\n      // Update stats based on status change\n      if (status === 'completed') {\n        setStats(prev => ({\n          ...prev,\n          scheduled: Math.max(0, prev.scheduled - 1),\n          completed: prev.completed + 1,\n        }));\n      }\n    } catch (err) {\n      logError('DoctorDashboardDB', 'Error message', {});\n      alert('Failed to update status. Please try again.');\n    }\n  };\n\n  // Get occupied time slots\n  const getOccupiedSlots = () => {\n    return appointments.map(a => a.appointment_time);\n  };\n\n  const occupiedSlots = getOccupiedSlots();\n\n  if (loading && !refreshing) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading appointments...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Compact Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"px-4\">\n          <div className=\"flex justify-between items-center h-12\">\n            <div className=\"flex items-center space-x-6\">\n              <h1 className=\"text-lg font-semibold\">TSHLA Medical</h1>\n              <span className=\"text-xs text-gray-500\">\n                {currentDoctor?.name || user?.name || 'Dr. Provider'}\n                {currentDoctor?.specialty && ` • ${currentDoctor.specialty}`}\n              </span>\n              {refreshing && (\n                <span className=\"text-xs text-blue-600 animate-pulse\">Syncing...</span>\n              )}\n            </div>\n\n            {/* Quick Note Button - Center */}\n            <button\n              onClick={() => navigate('/quick-note')}\n              className=\"px-4 py-1.5 bg-purple-600 text-white text-sm font-medium rounded-lg hover:bg-purple-700 transition flex items-center gap-2\"\n            >\n              ⚡ Quick Note\n            </button>\n\n            {/* Header Links */}\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={loadAppointments}\n                className=\"text-xs text-blue-600 hover:text-blue-800 font-medium\"\n                disabled={refreshing}\n              >\n                🔄 Refresh\n              </button>\n              <button\n                onClick={() => navigate('/doctor/templates')}\n                className=\"text-xs text-blue-600 hover:text-blue-800 font-medium\"\n              >\n                📝 Templates\n              </button>\n              <button\n                onClick={() => navigate('/doctor/profile')}\n                className=\"text-xs text-blue-600 hover:text-blue-800 font-medium\"\n              >\n                ⚙️ Profile\n              </button>\n              <button onClick={logout} className=\"text-xs text-gray-600 hover:text-gray-900\">\n                Sign Out\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"bg-red-50 border-l-4 border-red-400 p-4 m-4\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">⚠️</div>\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-red-700\">{error}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Main Content - Two Column Layout */}\n      <div className=\"flex\">\n        {/* Left Side - Today's Schedule with Time Slots */}\n        <div className=\"w-1/2 p-4\">\n          <div className=\"mb-3 flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-lg font-bold text-gray-900\">Today's Schedule</h2>\n              <p className=\"text-xs text-gray-600\">\n                {new Date(selectedDate).toLocaleDateString('en-US', {\n                  weekday: 'long',\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric',\n                })}\n              </p>\n            </div>\n            <div className=\"flex gap-2\">\n              <button\n                onClick={() => {\n                  setEditingAppointment(null);\n                  setNewPatient({\n                    patient_name: '',\n                    patient_mrn: '',\n                    appointment_date: selectedDate,\n                    appointment_time: '',\n                    patient_phone: '',\n                    patient_email: '',\n                    patient_dob: '',\n                    chief_complaint: '',\n                    visit_type: 'follow-up',\n                  });\n                  setShowAddPatient(true);\n                }}\n                className=\"px-3 py-1.5 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700 transition\"\n              >\n                + Full Add\n              </button>\n            </div>\n          </div>\n\n          {/* Time Slot Grid with Appointments */}\n          <div className=\"bg-white rounded-lg shadow\">\n            <div className=\"px-3 py-2 border-b border-gray-200\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-sm font-medium text-gray-900\">Time Slots</h3>\n                <span className=\"text-xs text-gray-500\">\n                  {appointments.length} appointments scheduled\n                </span>\n              </div>\n            </div>\n            <div className=\"max-h-[calc(100vh-200px)] overflow-y-auto p-2\">\n              <div className=\"space-y-1\">\n                {timeSlots.map(slot => {\n                  const appointment = appointments.find(a => a.appointment_time === slot);\n                  const isOccupied = !!appointment;\n\n                  return (\n                    <div\n                      key={slot}\n                      className=\"flex items-center gap-2 p-2 rounded-lg hover:bg-gray-50 transition\"\n                    >\n                      <div className=\"w-20 text-xs font-medium text-gray-600\">{slot}</div>\n\n                      {isOccupied && appointment ? (\n                        <div\n                          className={`flex-1 rounded-lg p-2 border ${\n                            appointment.status === 'completed'\n                              ? 'bg-green-50 border-green-200'\n                              : appointment.status === 'in-progress'\n                                ? 'bg-yellow-50 border-yellow-200'\n                                : appointment.status === 'cancelled'\n                                  ? 'bg-red-50 border-red-200'\n                                  : 'bg-blue-50 border-blue-200'\n                          }`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex-1\">\n                              <p\n                                className={`text-sm font-medium ${\n                                  appointment.patient_name.startsWith('Patient @')\n                                    ? 'text-gray-500 italic'\n                                    : 'text-gray-900'\n                                }`}\n                              >\n                                {appointment.patient_name}\n                                {appointment.patient_name.startsWith('Patient @') &&\n                                  ' (Placeholder)'}\n                              </p>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <p className=\"text-xs text-gray-500\">{appointment.patient_mrn}</p>\n                                {appointment.status !== 'scheduled' && (\n                                  <span\n                                    className={`text-xs px-2 py-0.5 rounded-full ${\n                                      appointment.status === 'completed'\n                                        ? 'bg-green-100 text-green-700'\n                                        : appointment.status === 'in-progress'\n                                          ? 'bg-yellow-100 text-yellow-700'\n                                          : appointment.status === 'cancelled'\n                                            ? 'bg-red-100 text-red-700'\n                                            : 'bg-gray-100 text-gray-700'\n                                    }`}\n                                  >\n                                    {appointment.status}\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-1\">\n                              {appointment.status === 'scheduled' && (\n                                <button\n                                  onClick={() =>\n                                    updateAppointmentStatus(appointment.id, 'in-progress')\n                                  }\n                                  className=\"px-2 py-1 text-xs bg-yellow-500 text-white rounded hover:bg-yellow-600\"\n                                  title=\"Start appointment\"\n                                >\n                                  ▶️\n                                </button>\n                              )}\n                              {appointment.status === 'in-progress' && (\n                                <button\n                                  onClick={() =>\n                                    updateAppointmentStatus(appointment.id, 'completed')\n                                  }\n                                  className=\"px-2 py-1 text-xs bg-green-500 text-white rounded hover:bg-green-600\"\n                                  title=\"Complete appointment\"\n                                >\n                                  ✓\n                                </button>\n                              )}\n                              <button\n                                onClick={() => editAppointmentInfo(appointment)}\n                                className=\"px-2 py-1 text-xs bg-yellow-500 text-white rounded hover:bg-yellow-600\"\n                                title=\"Edit patient info\"\n                              >\n                                ✏️\n                              </button>\n                              <button\n                                onClick={() => startDictation(appointment.patient_id)}\n                                className=\"px-2 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700\"\n                              >\n                                🎤\n                              </button>\n                              <button\n                                onClick={() => removeAppointment(appointment.id)}\n                                className=\"px-2 py-1 text-xs bg-red-500 text-white rounded hover:bg-red-600\"\n                                title=\"Cancel\"\n                              >\n                                ✕\n                              </button>\n                            </div>\n                          </div>\n                        </div>\n                      ) : (\n                        <div className=\"flex-1 border-2 border-dashed border-gray-300 rounded-lg p-2 hover:border-green-400 transition\">\n                          <button\n                            onClick={() => quickAddPatient(slot)}\n                            className=\"w-full text-left flex items-center justify-between group\"\n                          >\n                            <span className=\"text-xs text-gray-400 group-hover:text-green-600\">\n                              Available slot\n                            </span>\n                            <span className=\"text-xs text-green-600 opacity-0 group-hover:opacity-100 transition\">\n                              + Quick Add\n                            </span>\n                          </button>\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"mt-4 grid grid-cols-3 gap-3\">\n            <div className=\"bg-white rounded-lg shadow p-3\">\n              <h4 className=\"text-xs font-medium text-gray-500\">Total</h4>\n              <p className=\"mt-1 text-xl font-bold text-blue-600\">{stats.total}</p>\n            </div>\n            <div className=\"bg-white rounded-lg shadow p-3\">\n              <h4 className=\"text-xs font-medium text-gray-500\">Completed</h4>\n              <p className=\"mt-1 text-xl font-bold text-green-600\">{stats.completed}</p>\n            </div>\n            <div className=\"bg-white rounded-lg shadow p-3\">\n              <h4 className=\"text-xs font-medium text-gray-500\">Available</h4>\n              <p className=\"mt-1 text-xl font-bold text-gray-600\">\n                {timeSlots.length - appointments.length}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Side - Add/Edit Patient Form */}\n        <div className=\"w-1/2 p-4\">\n          {showAddPatient ? (\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">\n                {editingAppointment ? 'Edit Appointment' : 'Add New Appointment'}\n              </h3>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Patient Name *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={newPatient.patient_name}\n                    onChange={e => setNewPatient({ ...newPatient, patient_name: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"Enter patient name\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">MRN</label>\n                    <input\n                      type=\"text\"\n                      value={newPatient.patient_mrn}\n                      onChange={e => setNewPatient({ ...newPatient, patient_mrn: e.target.value })}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"Auto-generated\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Appointment Time *\n                    </label>\n                    <select\n                      value={newPatient.appointment_time}\n                      onChange={e =>\n                        setNewPatient({ ...newPatient, appointment_time: e.target.value })\n                      }\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    >\n                      <option value=\"\">Select time</option>\n                      {timeSlots.map(slot => (\n                        <option\n                          key={slot}\n                          value={slot}\n                          disabled={\n                            occupiedSlots.includes(slot) &&\n                            (!editingAppointment || editingAppointment.appointment_time !== slot)\n                          }\n                        >\n                          {slot}{' '}\n                          {occupiedSlots.includes(slot) &&\n                          (!editingAppointment || editingAppointment.appointment_time !== slot)\n                            ? '(Occupied)'\n                            : ''}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Phone</label>\n                    <input\n                      type=\"tel\"\n                      value={newPatient.patient_phone || ''}\n                      onChange={e =>\n                        setNewPatient({ ...newPatient, patient_phone: e.target.value })\n                      }\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"(555) 123-4567\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Date of Birth\n                    </label>\n                    <input\n                      type=\"date\"\n                      value={newPatient.patient_dob || ''}\n                      onChange={e => setNewPatient({ ...newPatient, patient_dob: e.target.value })}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Email</label>\n                  <input\n                    type=\"email\"\n                    value={newPatient.patient_email || ''}\n                    onChange={e => setNewPatient({ ...newPatient, patient_email: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"patient@email.com\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Visit Type</label>\n                  <select\n                    value={newPatient.visit_type}\n                    onChange={e =>\n                      setNewPatient({ ...newPatient, visit_type: e.target.value as any })\n                    }\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  >\n                    <option value=\"follow-up\">Follow-up</option>\n                    <option value=\"new-patient\">New Patient</option>\n                    <option value=\"urgent\">Urgent</option>\n                    <option value=\"telehealth\">Telehealth</option>\n                    <option value=\"procedure\">Procedure</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Chief Complaint\n                  </label>\n                  <textarea\n                    value={newPatient.chief_complaint || ''}\n                    onChange={e =>\n                      setNewPatient({ ...newPatient, chief_complaint: e.target.value })\n                    }\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    rows={2}\n                    placeholder=\"Reason for visit...\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <button\n                    onClick={saveAppointment}\n                    className=\"flex-1 px-4 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition\"\n                  >\n                    {editingAppointment ? 'Update Appointment' : 'Add Appointment'}\n                  </button>\n                  <button\n                    onClick={() => {\n                      setShowAddPatient(false);\n                      setEditingAppointment(null);\n                      setNewPatient({\n                        patient_name: '',\n                        patient_mrn: '',\n                        appointment_date: selectedDate,\n                        appointment_time: '',\n                        patient_phone: '',\n                        patient_email: '',\n                        patient_dob: '',\n                        chief_complaint: '',\n                        visit_type: 'follow-up',\n                      });\n                    }}\n                    className=\"px-4 py-2 bg-gray-200 text-gray-700 font-medium rounded-lg hover:bg-gray-300 transition\"\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Recent Appointments */}\n              <div className=\"bg-white rounded-lg shadow p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Recent Appointments</h3>\n                <div className=\"space-y-3\">\n                  {appointments.slice(0, 5).map(appointment => (\n                    <div\n                      key={appointment.id}\n                      className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                    >\n                      <div>\n                        <p className=\"font-medium text-sm\">{appointment.patient_name}</p>\n                        <p className=\"text-xs text-gray-500\">\n                          {appointment.appointment_time} • {appointment.patient_mrn}\n                        </p>\n                      </div>\n                      <button\n                        onClick={() => startDictation(appointment.patient_id)}\n                        className=\"px-3 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700\"\n                      >\n                        Start Dictation\n                      </button>\n                    </div>\n                  ))}\n                  {appointments.length === 0 && (\n                    <p className=\"text-sm text-gray-500 text-center py-4\">\n                      No appointments scheduled yet\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              {/* Quick Actions */}\n              <div className=\"bg-white rounded-lg shadow p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Quick Actions</h3>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <button\n                    onClick={() => navigate('/quick-note')}\n                    className=\"p-3 bg-purple-50 text-purple-700 rounded-lg hover:bg-purple-100 transition text-sm font-medium\"\n                  >\n                    ⚡ Quick Note\n                  </button>\n                  <button\n                    onClick={() => navigate('/doctor/templates')}\n                    className=\"p-3 bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100 transition text-sm font-medium\"\n                  >\n                    📝 Templates\n                  </button>\n                  <button\n                    onClick={() => navigate('/doctor/patients')}\n                    className=\"p-3 bg-green-50 text-green-700 rounded-lg hover:bg-green-100 transition text-sm font-medium\"\n                  >\n                    👥 All Patients\n                  </button>\n                  <button\n                    onClick={() => navigate('/doctor/reports')}\n                    className=\"p-3 bg-gray-50 text-gray-700 rounded-lg hover:bg-gray-100 transition text-sm font-medium\"\n                  >\n                    📊 Reports\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["AppointmentBrowserService","date","time","timePart","modifier","hours","minutes","doctorId","db","getDb","targetDate","a","b","logError","appointmentData","appointmentId","generateId","appointmentSlot","appointment","auditLogService","error","updates","existing","updated","status","reason","allSlots","hour","bookedTimes","slot","appointments","patientId","practiceId","appointmentService","AppointmentAPI","user","unifiedAuthService","data","generateTimeSlots","slots","DoctorDashboardDB","logout","useAuth","navigate","useNavigate","currentDoctor","setAppointments","useState","loading","setLoading","setError","refreshing","setRefreshing","selectedDate","stats","setStats","showAddPatient","setShowAddPatient","editingAppointment","setEditingAppointment","newPatient","setNewPatient","timeSlots","loadAppointments","useCallback","statsData","useEffect","interval","startDictation","quickAddPatient","timeSlot","newAppointment","prev","editAppointmentInfo","saveAppointment","savedAppointment","err","removeAppointment","updateAppointmentStatus","occupiedSlots","jsxs","jsx","isOccupied","e"],"mappings":"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"}