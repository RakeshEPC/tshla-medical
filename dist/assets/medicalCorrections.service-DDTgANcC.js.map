{"version":3,"file":"medicalCorrections.service-DDTgANcC.js","sources":["../../src/config/specialtyTemplates.ts","../../src/services/specialty.service.ts","../../src/services/medicalCorrections.service.ts"],"sourcesContent":["/**\n * Specialty Templates for Multi-Provider Clinic\n * Supports: Endocrinology, Psychiatry, Nutrition\n */\n\nexport interface SpecialtyTemplate {\n  id: string;\n  name: string;\n  specialty: string;\n  aiPrompt: {\n    role: string;\n    focusAreas: string[];\n    specialInstructions?: string;\n  };\n  corrections: {\n    medications: Record<string, string>;\n    terms: Record<string, string>;\n    phrases: Record<string, string>;\n  };\n  highlightTerms: string[];\n  noteSections: {\n    [key: string]: {\n      title: string;\n      required: boolean;\n      order: number;\n    };\n  };\n  defaultProvider?: string;\n}\n\n// ============================================\n// ENDOCRINOLOGY TEMPLATE\n// ============================================\nexport const ENDOCRINOLOGY_TEMPLATE: SpecialtyTemplate = {\n  id: 'endocrinology',\n  name: 'Endocrinology Standard',\n  specialty: 'Endocrinology',\n  aiPrompt: {\n    role: 'an experienced medical scribe working for an ENDOCRINOLOGIST',\n    focusAreas: [\n      'Diabetes management (glucose levels, A1C, insulin regimens)',\n      'Thyroid disorders (TSH, T3, T4, thyroid medications)',\n      'Metabolic conditions (obesity, metabolic syndrome, lipids)',\n      'Hormonal imbalances (testosterone, cortisol, growth hormone)',\n      'Bone metabolism (vitamin D, calcium, osteoporosis)',\n      'Continuous glucose monitoring (CGM) data and pump settings',\n    ],\n    specialInstructions:\n      'Always include specific glucose values, A1C percentages, and exact insulin doses. Note pump settings if mentioned.',\n  },\n  corrections: {\n    medications: {\n      // Insulin corrections\n      lenses: 'Lantus',\n      'land us': 'Lantus',\n      'lance us': 'Lantus',\n      'human log': 'Humalog',\n      'nova log': 'NovoLog',\n      tresiba: 'Tresiba',\n      'to gevo': 'Toujeo',\n      basaglar: 'Basaglar',\n      // Diabetes medications\n      metformin: 'Metformin',\n      'met foreman': 'Metformin',\n      ozempic: 'Ozempic',\n      olympic: 'Ozempic',\n      mounjaro: 'Mounjaro',\n      'moon jarro': 'Mounjaro',\n      jardiance: 'Jardiance',\n      farxiga: 'Farxiga',\n      'for ziga': 'Farxiga',\n      invokana: 'Invokana',\n      trulicity: 'Trulicity',\n      'truly city': 'Trulicity',\n      victoza: 'Victoza',\n      'vic tosa': 'Victoza',\n      rybelsus: 'Rybelsus',\n      // Thyroid medications\n      levothyroxine: 'Levothyroxine',\n      'leave a thigh roxine': 'Levothyroxine',\n      synthroid: 'Synthroid',\n      'sin thyroid': 'Synthroid',\n      'armour thyroid': 'Armour Thyroid',\n      'armor thyroid': 'Armour Thyroid',\n      cytomel: 'Cytomel',\n      'sight a mel': 'Cytomel',\n    },\n    terms: {\n      a1c: 'A1C',\n      'a one c': 'A1C',\n      'a 1 c': 'A1C',\n      tsh: 'TSH',\n      't s h': 'TSH',\n      'free t4': 'Free T4',\n      'free t 4': 'Free T4',\n      'free t3': 'Free T3',\n      cgm: 'CGM',\n      'c g m': 'CGM',\n      'flash glucose': 'flash glucose monitor',\n      libre: 'FreeStyle Libre',\n      dexcom: 'Dexcom',\n      'decks com': 'Dexcom',\n    },\n    phrases: {\n      'blood sugars': 'blood glucose',\n      'sugars are': 'glucose levels are',\n      'sugar is': 'glucose is',\n      'thyroid is low': 'hypothyroid',\n      'thyroid is high': 'hyperthyroid',\n      'pump settings': 'insulin pump settings',\n      'basal rate': 'basal rate',\n      'basil rate': 'basal rate',\n      'carb ratio': 'carbohydrate ratio',\n    },\n  },\n  highlightTerms: [\n    // Diabetes\n    'diabetes',\n    'glucose',\n    'insulin',\n    'A1C',\n    'HbA1c',\n    'hypoglycemia',\n    'hyperglycemia',\n    'Lantus',\n    'Humalog',\n    'NovoLog',\n    'Metformin',\n    'Ozempic',\n    'Mounjaro',\n    'Jardiance',\n    'CGM',\n    'Dexcom',\n    'FreeStyle Libre',\n    'ketones',\n    'DKA',\n    // Thyroid\n    'thyroid',\n    'hypothyroid',\n    'hyperthyroid',\n    'TSH',\n    'T3',\n    'T4',\n    'Levothyroxine',\n    'Synthroid',\n    'goiter',\n    'thyroiditis',\n    'Hashimoto',\n    // Metabolic\n    'cholesterol',\n    'triglycerides',\n    'HDL',\n    'LDL',\n    'hyperlipidemia',\n    'statin',\n    'Lipitor',\n    'Crestor',\n    'metabolic syndrome',\n    'PCOS',\n    // Bone/Mineral\n    'osteoporosis',\n    'vitamin D',\n    'calcium',\n    'PTH',\n    'bone density',\n    'DEXA',\n  ],\n  noteSections: {\n    chiefComplaint: { title: 'CHIEF COMPLAINT', required: true, order: 1 },\n    historyOfPresentIllness: { title: 'HISTORY OF PRESENT ILLNESS', required: true, order: 2 },\n    cgmData: { title: 'CGM/GLUCOSE DATA', required: false, order: 3 },\n    reviewOfSystems: { title: 'REVIEW OF SYSTEMS', required: true, order: 4 },\n    pastMedicalHistory: { title: 'PAST MEDICAL HISTORY', required: true, order: 5 },\n    medications: { title: 'MEDICATIONS', required: true, order: 6 },\n    allergies: { title: 'ALLERGIES', required: true, order: 7 },\n    physicalExam: { title: 'PHYSICAL EXAMINATION', required: true, order: 8 },\n    labs: { title: 'LABORATORY RESULTS', required: false, order: 9 },\n    assessment: { title: 'ASSESSMENT', required: true, order: 10 },\n    plan: { title: 'PLAN', required: true, order: 11 },\n  },\n  defaultProvider: 'Endocrinologist',\n};\n\n// ============================================\n// PSYCHIATRY TEMPLATE\n// ============================================\nexport const PSYCHIATRY_TEMPLATE: SpecialtyTemplate = {\n  id: 'psychiatry',\n  name: 'Psychiatry Standard',\n  specialty: 'Psychiatry',\n  aiPrompt: {\n    role: 'an experienced medical scribe working for a PSYCHIATRIST',\n    focusAreas: [\n      'Mental status examination (appearance, mood, affect, thought process)',\n      'Psychiatric symptoms (depression, anxiety, psychosis, mania)',\n      'Medication management (antidepressants, antipsychotics, mood stabilizers)',\n      'Risk assessment (suicidal ideation, homicidal ideation, self-harm)',\n      'Substance use history (alcohol, drugs, tobacco)',\n      'Sleep patterns and disturbances',\n      'Psychiatric rating scales (PHQ-9, GAD-7, MADRS, YMRS)',\n    ],\n    specialInstructions:\n      'Always document suicide risk assessment. Include specific psychiatric rating scale scores when mentioned. Note medication side effects and adherence.',\n  },\n  corrections: {\n    medications: {\n      // Antidepressants\n      lexapro: 'Lexapro',\n      'lex a pro': 'Lexapro',\n      zoloft: 'Zoloft',\n      'so loft': 'Zoloft',\n      prozac: 'Prozac',\n      'pro zack': 'Prozac',\n      cymbalta: 'Cymbalta',\n      'sim balta': 'Cymbalta',\n      symbalta: 'Cymbalta',\n      effexor: 'Effexor',\n      'f x or': 'Effexor',\n      wellbutrin: 'Wellbutrin',\n      'well beauty in': 'Wellbutrin',\n      pristiq: 'Pristiq',\n      'pris teek': 'Pristiq',\n      remeron: 'Remeron',\n      'rem a ron': 'Remeron',\n      // Antipsychotics\n      abilify: 'Abilify',\n      'a bill if i': 'Abilify',\n      seroquel: 'Seroquel',\n      'sarah quell': 'Seroquel',\n      risperdal: 'Risperdal',\n      'risp er doll': 'Risperdal',\n      zyprexa: 'Zyprexa',\n      'zi prex a': 'Zyprexa',\n      geodon: 'Geodon',\n      'geo don': 'Geodon',\n      latuda: 'Latuda',\n      'la too da': 'Latuda',\n      vraylar: 'Vraylar',\n      clozapine: 'Clozapine',\n      'close a peen': 'Clozapine',\n      // Mood stabilizers\n      lithium: 'Lithium',\n      depakote: 'Depakote',\n      'deep a coat': 'Depakote',\n      lamictal: 'Lamictal',\n      'lam ick tall': 'Lamictal',\n      trileptal: 'Trileptal',\n      'try lep tall': 'Trileptal',\n      // Anxiety/Sleep\n      xanax: 'Xanax',\n      'zan ax': 'Xanax',\n      ativan: 'Ativan',\n      'at ivan': 'Ativan',\n      klonopin: 'Klonopin',\n      'clone a pin': 'Klonopin',\n      valium: 'Valium',\n      ambien: 'Ambien',\n      'am bee in': 'Ambien',\n      lunesta: 'Lunesta',\n      trazodone: 'Trazodone',\n      'trays a done': 'Trazodone',\n    },\n    terms: {\n      phq9: 'PHQ-9',\n      'phq 9': 'PHQ-9',\n      gad7: 'GAD-7',\n      'gad 7': 'GAD-7',\n      si: 'suicidal ideation',\n      's i': 'suicidal ideation',\n      hi: 'homicidal ideation',\n      mse: 'mental status exam',\n      'm s e': 'mental status exam',\n      adhd: 'ADHD',\n      'a d h d': 'ADHD',\n      ptsd: 'PTSD',\n      'p t s d': 'PTSD',\n      ocd: 'OCD',\n      'o c d': 'OCD',\n      bipolar: 'bipolar disorder',\n      'bi polar': 'bipolar disorder',\n    },\n    phrases: {\n      'feels depressed': 'reports depression',\n      'feels anxious': 'reports anxiety',\n      'cant sleep': \"can't sleep\",\n      'sleeping too much': 'hypersomnia',\n      'sleeping too little': 'insomnia',\n      'hearing voices': 'auditory hallucinations',\n      'seeing things': 'visual hallucinations',\n      'wants to die': 'suicidal ideation',\n      'wants to hurt': 'homicidal ideation',\n      'panic attacks': 'panic attacks',\n      'mood swings': 'mood lability',\n    },\n  },\n  highlightTerms: [\n    // Conditions\n    'depression',\n    'anxiety',\n    'bipolar',\n    'schizophrenia',\n    'PTSD',\n    'ADHD',\n    'OCD',\n    'panic disorder',\n    'GAD',\n    'MDD',\n    'psychosis',\n    'mania',\n    'hypomania',\n    // Symptoms\n    'suicidal ideation',\n    'homicidal ideation',\n    'hallucinations',\n    'delusions',\n    'paranoia',\n    'insomnia',\n    'hypersomnia',\n    'anhedonia',\n    'anergia',\n    // Medications\n    'Lexapro',\n    'Zoloft',\n    'Prozac',\n    'Cymbalta',\n    'Wellbutrin',\n    'Abilify',\n    'Seroquel',\n    'Risperdal',\n    'Lithium',\n    'Depakote',\n    'Lamictal',\n    // Scales\n    'PHQ-9',\n    'GAD-7',\n    'MADRS',\n    'YMRS',\n    'PANSS',\n    // Other\n    'mental status exam',\n    'cognitive',\n    'affect',\n    'mood',\n  ],\n  noteSections: {\n    chiefComplaint: { title: 'CHIEF COMPLAINT', required: true, order: 1 },\n    historyOfPresentIllness: { title: 'HISTORY OF PRESENT ILLNESS', required: true, order: 2 },\n    psychiatricHistory: { title: 'PSYCHIATRIC HISTORY', required: true, order: 3 },\n    substanceUse: { title: 'SUBSTANCE USE HISTORY', required: true, order: 4 },\n    mentalStatusExam: { title: 'MENTAL STATUS EXAMINATION', required: true, order: 5 },\n    medications: { title: 'MEDICATIONS', required: true, order: 6 },\n    allergies: { title: 'ALLERGIES', required: true, order: 7 },\n    riskAssessment: { title: 'RISK ASSESSMENT', required: true, order: 8 },\n    assessment: { title: 'ASSESSMENT', required: true, order: 9 },\n    plan: { title: 'PLAN', required: true, order: 10 },\n  },\n  defaultProvider: 'Psychiatrist',\n};\n\n// ============================================\n// NUTRITION TEMPLATE\n// ============================================\nexport const NUTRITION_TEMPLATE: SpecialtyTemplate = {\n  id: 'nutrition',\n  name: 'Nutrition Standard',\n  specialty: 'Nutrition',\n  aiPrompt: {\n    role: 'an experienced medical scribe working for a CLINICAL NUTRITIONIST',\n    focusAreas: [\n      'Dietary assessment (24-hour recall, food frequency)',\n      'Nutritional status (BMI, body composition, malnutrition screening)',\n      'Macronutrient distribution (carbohydrates, proteins, fats)',\n      'Micronutrient deficiencies (vitamins, minerals)',\n      'Medical nutrition therapy for chronic diseases',\n      'Eating behaviors and patterns',\n      'Food allergies and intolerances',\n      'Supplement usage and recommendations',\n    ],\n    specialInstructions:\n      'Focus on specific food intake, portion sizes, meal timing, and nutritional goals. Include BMI calculations and caloric needs when discussed.',\n  },\n  corrections: {\n    medications: {\n      // Supplements\n      'vitamin d': 'Vitamin D',\n      'vitamin d3': 'Vitamin D3',\n      'vitamin b12': 'Vitamin B12',\n      'b 12': 'B12',\n      'vitamin b complex': 'Vitamin B Complex',\n      'omega 3': 'Omega-3',\n      'omega three': 'Omega-3',\n      'fish oil': 'fish oil',\n      probiotics: 'probiotics',\n      'pro biotics': 'probiotics',\n      multivitamin: 'multivitamin',\n      'multi vitamin': 'multivitamin',\n      calcium: 'calcium',\n      magnesium: 'magnesium',\n      iron: 'iron',\n      'folic acid': 'folic acid',\n      folate: 'folate',\n      coq10: 'CoQ10',\n      'co q 10': 'CoQ10',\n      glucosamine: 'glucosamine',\n      'glue cosa mean': 'glucosamine',\n      'protein powder': 'protein powder',\n      'whey protein': 'whey protein',\n      'way protein': 'whey protein',\n      ensure: 'Ensure',\n      boost: 'Boost',\n    },\n    terms: {\n      bmi: 'BMI',\n      'b m i': 'BMI',\n      rdl: 'RDA',\n      'r d a': 'RDA',\n      dri: 'DRI',\n      'd r i': 'DRI',\n      calories: 'calories',\n      kcal: 'kcal',\n      carbs: 'carbohydrates',\n      protein: 'protein',\n      'pro teen': 'protein',\n      fat: 'fat',\n      fiber: 'fiber',\n      'glycemic index': 'glycemic index',\n      gluten: 'gluten',\n      'glue ten': 'gluten',\n      lactose: 'lactose',\n      'lack toes': 'lactose',\n      fodmap: 'FODMAP',\n      'fod map': 'FODMAP',\n    },\n    phrases: {\n      'eating habits': 'dietary patterns',\n      'food diary': 'food record',\n      'meal plan': 'nutrition plan',\n      'weight loss': 'weight reduction',\n      'weight gain': 'weight gain',\n      'build muscle': 'increase lean body mass',\n      'cut carbs': 'reduce carbohydrate intake',\n      'low carb': 'low carbohydrate',\n      'high protein': 'high protein',\n      'plant based': 'plant-based',\n      'portion control': 'portion control',\n      'mindful eating': 'mindful eating',\n      'emotional eating': 'emotional eating',\n    },\n  },\n  highlightTerms: [\n    // Measurements\n    'BMI',\n    'weight',\n    'height',\n    'body fat',\n    'muscle mass',\n    'waist circumference',\n    // Nutrients\n    'calories',\n    'carbohydrates',\n    'protein',\n    'fat',\n    'fiber',\n    'sugar',\n    'sodium',\n    'cholesterol',\n    'saturated fat',\n    'trans fat',\n    // Vitamins/Minerals\n    'Vitamin D',\n    'B12',\n    'iron',\n    'calcium',\n    'folate',\n    'Omega-3',\n    // Conditions\n    'obesity',\n    'malnutrition',\n    'diabetes',\n    'hypertension',\n    'celiac',\n    'IBS',\n    'GERD',\n    'food allergy',\n    'lactose intolerance',\n    // Diets\n    'Mediterranean',\n    'DASH',\n    'ketogenic',\n    'vegan',\n    'vegetarian',\n    'gluten-free',\n    'low-FODMAP',\n    'paleo',\n  ],\n  noteSections: {\n    chiefComplaint: { title: 'REASON FOR VISIT', required: true, order: 1 },\n    currentDiet: { title: 'CURRENT DIETARY INTAKE', required: true, order: 2 },\n    nutritionalAssessment: { title: 'NUTRITIONAL ASSESSMENT', required: true, order: 3 },\n    anthropometrics: { title: 'ANTHROPOMETRIC DATA', required: true, order: 4 },\n    biochemicalData: { title: 'BIOCHEMICAL DATA', required: false, order: 5 },\n    medicalHistory: { title: 'RELEVANT MEDICAL HISTORY', required: true, order: 6 },\n    medications: { title: 'MEDICATIONS & SUPPLEMENTS', required: true, order: 7 },\n    foodAllergies: { title: 'FOOD ALLERGIES/INTOLERANCES', required: true, order: 8 },\n    assessment: { title: 'NUTRITION DIAGNOSIS', required: true, order: 9 },\n    plan: { title: 'NUTRITION INTERVENTION PLAN', required: true, order: 10 },\n    goals: { title: 'GOALS & FOLLOW-UP', required: true, order: 11 },\n  },\n  defaultProvider: 'Clinical Nutritionist, RD',\n};\n\n// ============================================\n// TEMPLATE REGISTRY\n// ============================================\nexport const SPECIALTY_TEMPLATES = {\n  endocrinology: ENDOCRINOLOGY_TEMPLATE,\n  psychiatry: PSYCHIATRY_TEMPLATE,\n  nutrition: NUTRITION_TEMPLATE,\n};\n\n// Helper function to get template by specialty\nexport function getTemplateBySpecialty(specialty: string): SpecialtyTemplate {\n  const normalizedSpecialty = specialty.toLowerCase();\n\n  // Map various specialty names to our templates\n  const specialtyMap: Record<string, string> = {\n    endocrinology: 'endocrinology',\n    endocrine: 'endocrinology',\n    diabetes: 'endocrinology',\n    psychiatry: 'psychiatry',\n    psychiatric: 'psychiatry',\n    'mental health': 'psychiatry',\n    'behavioral health': 'psychiatry',\n    nutrition: 'nutrition',\n    dietitian: 'nutrition',\n    nutritionist: 'nutrition',\n    dietetics: 'nutrition',\n  };\n\n  const templateKey = specialtyMap[normalizedSpecialty] || 'endocrinology'; // Default to endocrinology\n  return SPECIALTY_TEMPLATES[templateKey as keyof typeof SPECIALTY_TEMPLATES];\n}\n\n// Get list of available specialties for dropdown\nexport function getAvailableSpecialties(): Array<{ value: string; label: string }> {\n  return [\n    { value: 'endocrinology', label: 'Endocrinology' },\n    { value: 'psychiatry', label: 'Psychiatry' },\n    { value: 'nutrition', label: 'Nutrition/Dietetics' },\n  ];\n}\n","/**\n * Specialty Service\n * Manages doctor specialties and template selection\n */\n\nimport {\n  ENDOCRINOLOGY_TEMPLATE,\n  PSYCHIATRY_TEMPLATE,\n  NUTRITION_TEMPLATE,\n  type SpecialtyTemplate,\n  getTemplateBySpecialty,\n} from '../config/specialtyTemplates';\n\nexport type DoctorSpecialty = 'endocrinology' | 'psychiatry' | 'nutrition';\n\nexport interface Doctor {\n  id: string;\n  name: string;\n  specialty: DoctorSpecialty;\n  code?: string;\n  customSettings?: {\n    additionalCorrections?: Record<string, string>;\n    additionalHighlightTerms?: string[];\n    customPromptAdditions?: string;\n  };\n}\n\nclass SpecialtyService {\n  private currentDoctor: Doctor | null = null;\n  private currentTemplate: SpecialtyTemplate | null = null;\n\n  /**\n   * Set the current doctor and load their template\n   */\n  setCurrentDoctor(doctor: Doctor): void {\n    this.currentDoctor = doctor;\n    this.currentTemplate = getTemplateBySpecialty(doctor.specialty);\n\n    // Apply any custom doctor-specific settings\n    if (doctor.customSettings && this.currentTemplate) {\n      this.applyCustomSettings(doctor.customSettings);\n    }\n  }\n\n  /**\n   * Get the current doctor\n   */\n  getCurrentDoctor(): Doctor | null {\n    return this.currentDoctor;\n  }\n\n  /**\n   * Get the current template\n   */\n  getCurrentTemplate(): SpecialtyTemplate {\n    // Default to endocrinology if no template is set\n    if (!this.currentTemplate) {\n      return ENDOCRINOLOGY_TEMPLATE;\n    }\n    return this.currentTemplate;\n  }\n\n  /**\n   * Apply custom doctor-specific settings to the template\n   */\n  private applyCustomSettings(customSettings: Doctor['customSettings']): void {\n    if (!this.currentTemplate || !customSettings) return;\n\n    // Create a deep copy of the template to avoid modifying the original\n    const template = JSON.parse(JSON.stringify(this.currentTemplate));\n\n    // Add custom corrections\n    if (customSettings.additionalCorrections) {\n      Object.assign(template.corrections.medications, customSettings.additionalCorrections);\n    }\n\n    // Add custom highlight terms\n    if (customSettings.additionalHighlightTerms) {\n      template.highlightTerms.push(...customSettings.additionalHighlightTerms);\n    }\n\n    // Add custom prompt additions\n    if (customSettings.customPromptAdditions) {\n      template.aiPrompt.additionalInstructions =\n        (template.aiPrompt.additionalInstructions || '') +\n        '\\n' +\n        customSettings.customPromptAdditions;\n    }\n\n    this.currentTemplate = template;\n  }\n\n  /**\n   * Get medication corrections for the current specialty\n   */\n  getMedicationCorrections(): Record<string, string> {\n    const template = this.getCurrentTemplate();\n    return template.corrections?.medications || {};\n  }\n\n  /**\n   * Get medical term corrections for the current specialty\n   */\n  getMedicalTermCorrections(): Record<string, string> {\n    const template = this.getCurrentTemplate();\n    return template.corrections?.terms || {};\n  }\n\n  /**\n   * Get phrase corrections for the current specialty\n   */\n  getPhraseCorrections(): Record<string, string> {\n    const template = this.getCurrentTemplate();\n    return template.corrections?.phrases || {};\n  }\n\n  /**\n   * Get all corrections combined\n   */\n  getAllCorrections(): {\n    medications: Record<string, string>;\n    medicalTerms: Record<string, string>;\n    phrases: Record<string, string>;\n  } {\n    const template = this.getCurrentTemplate();\n    // Ensure we always return a valid object with all properties\n    // Note: template uses 'terms' but we return as 'medicalTerms' for consistency\n    return {\n      medications: template.corrections?.medications || {},\n      medicalTerms: template.corrections?.terms || {},\n      phrases: template.corrections?.phrases || {},\n    };\n  }\n\n  /**\n   * Get highlight terms for the current specialty\n   */\n  getHighlightTerms(): string[] {\n    const template = this.getCurrentTemplate();\n    return template.highlightTerms;\n  }\n\n  /**\n   * Get AI prompt for the current specialty\n   */\n  getAIPrompt(): SpecialtyTemplate['aiPrompt'] {\n    const template = this.getCurrentTemplate();\n    return template.aiPrompt;\n  }\n\n  /**\n   * Get note sections for the current specialty\n   */\n  getNoteSections(): SpecialtyTemplate['noteSections'] {\n    const template = this.getCurrentTemplate();\n    return template.noteSections;\n  }\n\n  /**\n   * Check if a term should be highlighted\n   */\n  shouldHighlight(term: string): boolean {\n    const highlightTerms = this.getHighlightTerms();\n    const lowerTerm = term.toLowerCase();\n    return highlightTerms.some(highlightTerm => lowerTerm.includes(highlightTerm.toLowerCase()));\n  }\n\n  /**\n   * Apply corrections to text based on current specialty\n   */\n  applyCorrections(text: string): string {\n    if (!text) return '';\n\n    const corrections = this.getAllCorrections();\n    if (!corrections) return text;\n\n    let corrected = text;\n\n    // Apply medication corrections\n    if (corrections.medications && typeof corrections.medications === 'object') {\n      Object.entries(corrections.medications).forEach(([error, correction]) => {\n        const regex = new RegExp(`\\\\b${error}\\\\b`, 'gi');\n        corrected = corrected.replace(regex, correction);\n      });\n    }\n\n    // Apply medical term corrections\n    if (corrections.medicalTerms && typeof corrections.medicalTerms === 'object') {\n      Object.entries(corrections.medicalTerms).forEach(([error, correction]) => {\n        const regex = new RegExp(`\\\\b${error}\\\\b`, 'gi');\n        corrected = corrected.replace(regex, correction);\n      });\n    }\n\n    // Apply phrase corrections\n    if (corrections.phrases && typeof corrections.phrases === 'object') {\n      Object.entries(corrections.phrases).forEach(([error, correction]) => {\n        const regex = new RegExp(error, 'gi');\n        corrected = corrected.replace(regex, correction);\n      });\n    }\n\n    return corrected;\n  }\n\n  /**\n   * Format the AI prompt with patient and transcript data\n   */\n  formatAIPrompt(transcript: string, patientData?: any): string {\n    const prompt = this.getAIPrompt();\n    const sections = this.getNoteSections();\n    const template = this.getCurrentTemplate();\n\n    // Ensure focusAreas is an array\n    const focusAreas = Array.isArray(prompt.focusAreas) ? prompt.focusAreas : [];\n\n    // Convert sections object to array of section titles\n    const sectionTitles = Object.values(sections)\n      .sort((a, b) => a.order - b.order)\n      .map(section => section.title);\n\n    let formattedPrompt = `You are an experienced medical scribe working for a ${prompt.role}.\n\n${template.specialty ? `Specialty: ${template.specialty}` : ''}\n\nPay special attention to:\n${focusAreas.map(area => `- ${area}`).join('\\n')}\n\n${prompt.specialInstructions || ''}\n\nPlease format the clinical note with these sections:\n${sectionTitles.map(title => `- ${title}`).join('\\n')}\n\nPatient Information:\n${patientData ? JSON.stringify(patientData, null, 2) : 'No patient data provided'}\n\nTranscript to process:\n${transcript}\n\nImportant formatting requirements:\n1. Use markdown headers (##) for each section\n2. Be comprehensive but concise\n3. Include all relevant medical information\n4. Flag any concerning findings\n5. Suggest appropriate follow-up\n`;\n\n    return formattedPrompt;\n  }\n\n  /**\n   * Get a list of all available specialties\n   */\n  getAvailableSpecialties(): DoctorSpecialty[] {\n    return ['endocrinology', 'psychiatry', 'nutrition'];\n  }\n\n  /**\n   * Reset the service (for logout or doctor switch)\n   */\n  reset(): void {\n    this.currentDoctor = null;\n    this.currentTemplate = null;\n  }\n}\n\n// Export singleton instance\nexport const specialtyService = new SpecialtyService();\n\n// Export convenience functions\nexport const setDoctorSpecialty = (doctor: Doctor) => specialtyService.setCurrentDoctor(doctor);\nexport const getCurrentSpecialty = () => specialtyService.getCurrentDoctor()?.specialty;\nexport const getSpecialtyTemplate = () => specialtyService.getCurrentTemplate();\nexport const applySpecialtyCorrections = (text: string) => specialtyService.applyCorrections(text);\nexport const getSpecialtyHighlightTerms = () => specialtyService.getHighlightTerms();\nexport const formatSpecialtyPrompt = (transcript: string, patientData?: any) =>\n  specialtyService.formatAIPrompt(transcript, patientData);\n","/**\n * Medical Corrections Service\n * Fixes common transcription errors for medical terms\n */\n\nimport { specialtyService } from './specialty.service';\n\nexport class MedicalCorrectionsService {\n  // Common medication corrections\n  private medicationCorrections: Record<string, string> = {\n    lenses: 'Lantus',\n    lances: 'Lantus',\n    'land us': 'Lantus',\n    landis: 'Lantus',\n    'lance us': 'Lantus',\n    novolog: 'NovoLog',\n    'novo log': 'NovoLog',\n    overlock: 'NovoLog',\n    'nova log': 'NovoLog',\n    metformin: 'Metformin',\n    'met foreman': 'Metformin',\n    glucophage: 'Glucophage',\n    farxiga: 'Farxiga',\n    'for ziga': 'Farxiga',\n    'far sega': 'Farxiga',\n    jardiance: 'Jardiance',\n    ozempic: 'Ozempic',\n    olympic: 'Ozempic',\n    mounjaro: 'Mounjaro',\n    'moon jarro': 'Mounjaro',\n    trulicity: 'Trulicity',\n    'truly city': 'Trulicity',\n    glipizide: 'Glipizide',\n    glyburide: 'Glyburide',\n    lisinopril: 'Lisinopril',\n    'listen april': 'Lisinopril',\n    losartan: 'Losartan',\n    'low sartan': 'Losartan',\n    atorvastatin: 'Atorvastatin',\n    'a tor of a statin': 'Atorvastatin',\n    lipitor: 'Lipitor',\n    crestor: 'Crestor',\n    simvastatin: 'Simvastatin',\n    zocor: 'Zocor',\n    pravastatin: 'Pravastatin',\n    rosuvastatin: 'Rosuvastatin',\n    levothyroxine: 'Levothyroxine',\n    'thirdly with our oxidant': 'levothyroxine',\n    'thirdly oxidant': 'levothyroxine',\n    'third oxidant': 'levothyroxine',\n    synthroid: 'Synthroid',\n    'sin thyroid': 'Synthroid',\n    gabapentin: 'Gabapentin',\n    'gaba pentin': 'Gabapentin',\n    neurontin: 'Neurontin',\n    pregabalin: 'Pregabalin',\n    lyrica: 'Lyrica',\n    duloxetine: 'Duloxetine',\n    cymbalta: 'Cymbalta',\n    'sim balta': 'Cymbalta',\n    sertraline: 'Sertraline',\n    zoloft: 'Zoloft',\n    escitalopram: 'Escitalopram',\n    lexapro: 'Lexapro',\n    'lex a pro': 'Lexapro',\n    fluoxetine: 'Fluoxetine',\n    prozac: 'Prozac',\n    'pro zack': 'Prozac',\n    paroxetine: 'Paroxetine',\n    paxil: 'Paxil',\n    'pack sil': 'Paxil',\n    venlafaxine: 'Venlafaxine',\n    effexor: 'Effexor',\n    aspirin: 'Aspirin',\n    'ass prin': 'Aspirin',\n    plavix: 'Plavix',\n    'play vix': 'Plavix',\n    clopidogrel: 'Clopidogrel',\n    eliquis: 'Eliquis',\n    'alley quis': 'Eliquis',\n    xarelto: 'Xarelto',\n    zarelto: 'Xarelto',\n    warfarin: 'Warfarin',\n    coumadin: 'Coumadin',\n    omeprazole: 'Omeprazole',\n    prilosec: 'Prilosec',\n    pantoprazole: 'Pantoprazole',\n    protonix: 'Protonix',\n    albuterol: 'Albuterol',\n    proair: 'ProAir',\n    'pro air': 'ProAir',\n    ventolin: 'Ventolin',\n    advair: 'Advair',\n    'ad vair': 'Advair',\n    symbicort: 'Symbicort',\n    'sim be court': 'Symbicort',\n    spiriva: 'Spiriva',\n    'spear riva': 'Spiriva',\n    trelegy: 'Trelegy',\n    'tree ledgy': 'Trelegy',\n    breo: 'Breo',\n    'bree oh': 'Breo',\n  };\n\n  // Common medical terms corrections\n  private medicalTermCorrections: Record<string, string> = {\n    a1c: 'A1C',\n    'a 1 c': 'A1C',\n    'a one c': 'A1C',\n    'hemoglobin a1c': 'hemoglobin A1C',\n    hemogonal: 'hemoglobin',\n    ccnp: 'CMP',\n    hba1c: 'HbA1c',\n    cmp: 'CMP',\n    'c m p': 'CMP',\n    cbc: 'CBC',\n    'c b c': 'CBC',\n    ccbc: 'CBC',\n    'c c b c': 'CBC',\n    bmp: 'BMP',\n    'b m p': 'BMP',\n    tsh: 'TSH',\n    't s h': 'TSH',\n    ldl: 'LDL',\n    'l d l': 'LDL',\n    hdl: 'HDL',\n    'h d l': 'HDL',\n    ekg: 'EKG',\n    'e k g': 'EKG',\n    ecg: 'ECG',\n    'e c g': 'ECG',\n    mri: 'MRI',\n    'm r i': 'MRI',\n    ct: 'CT',\n    'c t scan': 'CT scan',\n    'cat scan': 'CAT scan',\n    'blood pressure': 'blood pressure',\n    'b p': 'BP',\n    'heart rate': 'heart rate',\n    'h r': 'HR',\n    'respiratory rate': 'respiratory rate',\n    'r r': 'RR',\n    'oxygen saturation': 'oxygen saturation',\n    'o2 sat': 'O2 sat',\n    'oh two sat': 'O2 sat',\n    'micro albumin': 'microalbumin',\n    'micro albumen': 'microalbumin',\n    creatinine: 'creatinine',\n    'create a nine': 'creatinine',\n    egfr: 'eGFR',\n    'e g f r': 'eGFR',\n    bun: 'BUN',\n    'b u n': 'BUN',\n    alt: 'ALT',\n    'a l t': 'ALT',\n    ast: 'AST',\n    'a s t': 'AST',\n    inr: 'INR',\n    'i n r': 'INR',\n    ptt: 'PTT',\n    'p t t': 'PTT',\n    pt: 'PT',\n    'p t': 'PT',\n  };\n\n  // Common phrases corrections\n  private phraseCorrections: Record<string, string> = {\n    'pushing complains': 'patient complains',\n    'patient complains': 'patient complains',\n    'passion complains': 'patient complains',\n    'patient complaints': 'patient complains',\n    'sugars in the': 'sugars in the',\n    'sugars and the': 'sugars in the',\n    'get the heroin': 'get the hemoglobin',\n    'get the hero in': 'get the hemoglobin',\n    'see back in': 'see back in',\n    'sea back in': 'see back in',\n    'c back in': 'see back in',\n    'follow up in': 'follow up in',\n    'follow-up in': 'follow-up in',\n    'units a day': 'units daily',\n    'units per day': 'units daily',\n    'with each meal': 'with each meal',\n    'with meals': 'with meals',\n    'at meal time': 'at mealtime',\n    'blood sugars': 'blood sugars',\n    'blood sugar is': 'blood sugars',\n    'type 2 diabetes': 'Type 2 diabetes',\n    'type two diabetes': 'Type 2 diabetes',\n    'diabetes type 2': 'diabetes Type 2',\n    'diabetes type two': 'diabetes Type 2',\n    'emergency room': 'emergency room',\n    'e r': 'ER',\n    'emergency department': 'emergency department',\n    'e d': 'ED',\n    'primary care': 'primary care',\n    'primary care doctor': 'primary care doctor',\n    pcp: 'PCP',\n    'p c p': 'PCP',\n  };\n\n  /**\n   * Correct medical transcription errors\n   */\n  public correctTranscription(transcript: string): string {\n    if (!transcript) return '';\n\n    // Check if we should use specialty-specific corrections\n    const currentDoctor = specialtyService.getCurrentDoctor();\n    if (currentDoctor) {\n      // Use specialty-specific corrections\n      return specialtyService.applyCorrections(this.fixCommonPatterns(transcript));\n    }\n\n    // Use default corrections\n    let corrected = transcript;\n\n    // Apply medication corrections (case-insensitive)\n    Object.entries(this.medicationCorrections).forEach(([error, correction]) => {\n      const regex = new RegExp(`\\\\b${error}\\\\b`, 'gi');\n      corrected = corrected.replace(regex, correction);\n    });\n\n    // Apply medical term corrections\n    Object.entries(this.medicalTermCorrections).forEach(([error, correction]) => {\n      const regex = new RegExp(`\\\\b${error}\\\\b`, 'gi');\n      corrected = corrected.replace(regex, correction);\n    });\n\n    // Apply phrase corrections\n    Object.entries(this.phraseCorrections).forEach(([error, correction]) => {\n      const regex = new RegExp(error, 'gi');\n      corrected = corrected.replace(regex, correction);\n    });\n\n    // Fix common patterns\n    corrected = this.fixCommonPatterns(corrected);\n\n    return corrected;\n  }\n\n  /**\n   * Fix common speech recognition patterns\n   */\n  private fixCommonPatterns(text: string): string {\n    // Fix \"300s\" pattern\n    text = text.replace(/(\\d+)s\\b/g, '$1s');\n\n    // Fix dosage patterns\n    text = text.replace(/(\\d+)\\s*mg\\b/gi, '$1mg');\n    text = text.replace(/(\\d+)\\s*mcg\\b/gi, '$1mcg');\n    text = text.replace(/(\\d+)\\s*units?\\b/gi, '$1 units');\n    text = text.replace(/(\\d+)\\s*mL\\b/gi, '$1mL');\n\n    // Fix time patterns\n    text = text.replace(/(\\d+)\\s+weeks?\\b/gi, '$1 weeks');\n    text = text.replace(/(\\d+)\\s+days?\\b/gi, '$1 days');\n    text = text.replace(/(\\d+)\\s+months?\\b/gi, '$1 months');\n\n    // Fix decimal numbers\n    text = text.replace(/(\\d+)\\s+point\\s+(\\d+)/gi, '$1.$2');\n\n    // Fix lab value patterns\n    text = text.replace(/A1C\\s+(?:is|was)?\\s*(\\d+(?:\\.\\d+)?)/gi, 'A1C $1');\n    text = text.replace(/blood sugar\\s+(\\d+)/gi, 'blood sugar $1');\n    text = text.replace(/glucose\\s+(\\d+)/gi, 'glucose $1');\n\n    // Remove duplicate spaces\n    text = text.replace(/\\s+/g, ' ');\n\n    // Capitalize sentences\n    text = text.replace(/(^|[.!?]\\s+)([a-z])/g, (match, p1, p2) => p1 + p2.toUpperCase());\n\n    return text.trim();\n  }\n\n  /**\n   * Get suggested corrections for a word\n   */\n  public getSuggestions(word: string): string[] {\n    const suggestions: string[] = [];\n    const lowerWord = word.toLowerCase();\n\n    // Check medications\n    Object.entries(this.medicationCorrections).forEach(([error, correction]) => {\n      if (error.includes(lowerWord) || lowerWord.includes(error)) {\n        suggestions.push(correction);\n      }\n    });\n\n    // Check medical terms\n    Object.entries(this.medicalTermCorrections).forEach(([error, correction]) => {\n      if (error.includes(lowerWord) || lowerWord.includes(error)) {\n        suggestions.push(correction);\n      }\n    });\n\n    return [...new Set(suggestions)]; // Remove duplicates\n  }\n}\n\nexport const medicalCorrections = new MedicalCorrectionsService();\n"],"names":["ENDOCRINOLOGY_TEMPLATE","PSYCHIATRY_TEMPLATE","NUTRITION_TEMPLATE","SPECIALTY_TEMPLATES","getTemplateBySpecialty","specialty","normalizedSpecialty","templateKey","SpecialtyService","doctor","customSettings","template","term","highlightTerms","lowerTerm","highlightTerm","text","corrections","corrected","error","correction","regex","transcript","patientData","prompt","sections","focusAreas","sectionTitles","a","b","section","area","title","specialtyService","MedicalCorrectionsService","match","p1","p2","word","suggestions","lowerWord","medicalCorrections"],"mappings":"AAiCO,MAAMA,EAA4C,CACvD,GAAI,gBACJ,KAAM,yBACN,UAAW,gBACX,SAAU,CACR,KAAM,+DACN,WAAY,CACV,8DACA,uDACA,6DACA,+DACA,qDACA,4DAAA,EAEF,oBACE,oHAAA,EAEJ,YAAa,CACX,YAAa,CAEX,OAAQ,SACR,UAAW,SACX,WAAY,SACZ,YAAa,UACb,WAAY,UACZ,QAAS,UACT,UAAW,SACX,SAAU,WAEV,UAAW,YACX,cAAe,YACf,QAAS,UACT,QAAS,UACT,SAAU,WACV,aAAc,WACd,UAAW,YACX,QAAS,UACT,WAAY,UACZ,SAAU,WACV,UAAW,YACX,aAAc,YACd,QAAS,UACT,WAAY,UACZ,SAAU,WAEV,cAAe,gBACf,uBAAwB,gBACxB,UAAW,YACX,cAAe,YACf,iBAAkB,iBAClB,gBAAiB,iBACjB,QAAS,UACT,cAAe,SAAA,EAEjB,MAAO,CACL,IAAK,MACL,UAAW,MACX,QAAS,MACT,IAAK,MACL,QAAS,MACT,UAAW,UACX,WAAY,UACZ,UAAW,UACX,IAAK,MACL,QAAS,MACT,gBAAiB,wBACjB,MAAO,kBACP,OAAQ,SACR,YAAa,QAAA,EAEf,QAAS,CACP,eAAgB,gBAChB,aAAc,qBACd,WAAY,aACZ,iBAAkB,cAClB,kBAAmB,eACnB,gBAAiB,wBACjB,aAAc,aACd,aAAc,aACd,aAAc,oBAAA,CAChB,EAEF,eAAgB,CAEd,WACA,UACA,UACA,MACA,QACA,eACA,gBACA,SACA,UACA,UACA,YACA,UACA,WACA,YACA,MACA,SACA,kBACA,UACA,MAEA,UACA,cACA,eACA,MACA,KACA,KACA,gBACA,YACA,SACA,cACA,YAEA,cACA,gBACA,MACA,MACA,iBACA,SACA,UACA,UACA,qBACA,OAEA,eACA,YACA,UACA,MACA,eACA,MAAA,EAEF,aAAc,CACZ,eAAgB,CAAE,MAAO,kBAAmB,SAAU,GAAM,MAAO,CAAA,EACnE,wBAAyB,CAAE,MAAO,6BAA8B,SAAU,GAAM,MAAO,CAAA,EACvF,QAAS,CAAE,MAAO,mBAAoB,SAAU,GAAO,MAAO,CAAA,EAC9D,gBAAiB,CAAE,MAAO,oBAAqB,SAAU,GAAM,MAAO,CAAA,EACtE,mBAAoB,CAAE,MAAO,uBAAwB,SAAU,GAAM,MAAO,CAAA,EAC5E,YAAa,CAAE,MAAO,cAAe,SAAU,GAAM,MAAO,CAAA,EAC5D,UAAW,CAAE,MAAO,YAAa,SAAU,GAAM,MAAO,CAAA,EACxD,aAAc,CAAE,MAAO,uBAAwB,SAAU,GAAM,MAAO,CAAA,EACtE,KAAM,CAAE,MAAO,qBAAsB,SAAU,GAAO,MAAO,CAAA,EAC7D,WAAY,CAAE,MAAO,aAAc,SAAU,GAAM,MAAO,EAAA,EAC1D,KAAM,CAAE,MAAO,OAAQ,SAAU,GAAM,MAAO,EAAA,CAAG,EAEnD,gBAAiB,iBACnB,EAKaC,EAAyC,CACpD,GAAI,aACJ,KAAM,sBACN,UAAW,aACX,SAAU,CACR,KAAM,2DACN,WAAY,CACV,wEACA,+DACA,4EACA,qEACA,kDACA,kCACA,uDAAA,EAEF,oBACE,uJAAA,EAEJ,YAAa,CACX,YAAa,CAEX,QAAS,UACT,YAAa,UACb,OAAQ,SACR,UAAW,SACX,OAAQ,SACR,WAAY,SACZ,SAAU,WACV,YAAa,WACb,SAAU,WACV,QAAS,UACT,SAAU,UACV,WAAY,aACZ,iBAAkB,aAClB,QAAS,UACT,YAAa,UACb,QAAS,UACT,YAAa,UAEb,QAAS,UACT,cAAe,UACf,SAAU,WACV,cAAe,WACf,UAAW,YACX,eAAgB,YAChB,QAAS,UACT,YAAa,UACb,OAAQ,SACR,UAAW,SACX,OAAQ,SACR,YAAa,SACb,QAAS,UACT,UAAW,YACX,eAAgB,YAEhB,QAAS,UACT,SAAU,WACV,cAAe,WACf,SAAU,WACV,eAAgB,WAChB,UAAW,YACX,eAAgB,YAEhB,MAAO,QACP,SAAU,QACV,OAAQ,SACR,UAAW,SACX,SAAU,WACV,cAAe,WACf,OAAQ,SACR,OAAQ,SACR,YAAa,SACb,QAAS,UACT,UAAW,YACX,eAAgB,WAAA,EAElB,MAAO,CACL,KAAM,QACN,QAAS,QACT,KAAM,QACN,QAAS,QACT,GAAI,oBACJ,MAAO,oBACP,GAAI,qBACJ,IAAK,qBACL,QAAS,qBACT,KAAM,OACN,UAAW,OACX,KAAM,OACN,UAAW,OACX,IAAK,MACL,QAAS,MACT,QAAS,mBACT,WAAY,kBAAA,EAEd,QAAS,CACP,kBAAmB,qBACnB,gBAAiB,kBACjB,aAAc,cACd,oBAAqB,cACrB,sBAAuB,WACvB,iBAAkB,0BAClB,gBAAiB,wBACjB,eAAgB,oBAChB,gBAAiB,qBACjB,gBAAiB,gBACjB,cAAe,eAAA,CACjB,EAEF,eAAgB,CAEd,aACA,UACA,UACA,gBACA,OACA,OACA,MACA,iBACA,MACA,MACA,YACA,QACA,YAEA,oBACA,qBACA,iBACA,YACA,WACA,WACA,cACA,YACA,UAEA,UACA,SACA,SACA,WACA,aACA,UACA,WACA,YACA,UACA,WACA,WAEA,QACA,QACA,QACA,OACA,QAEA,qBACA,YACA,SACA,MAAA,EAEF,aAAc,CACZ,eAAgB,CAAE,MAAO,kBAAmB,SAAU,GAAM,MAAO,CAAA,EACnE,wBAAyB,CAAE,MAAO,6BAA8B,SAAU,GAAM,MAAO,CAAA,EACvF,mBAAoB,CAAE,MAAO,sBAAuB,SAAU,GAAM,MAAO,CAAA,EAC3E,aAAc,CAAE,MAAO,wBAAyB,SAAU,GAAM,MAAO,CAAA,EACvE,iBAAkB,CAAE,MAAO,4BAA6B,SAAU,GAAM,MAAO,CAAA,EAC/E,YAAa,CAAE,MAAO,cAAe,SAAU,GAAM,MAAO,CAAA,EAC5D,UAAW,CAAE,MAAO,YAAa,SAAU,GAAM,MAAO,CAAA,EACxD,eAAgB,CAAE,MAAO,kBAAmB,SAAU,GAAM,MAAO,CAAA,EACnE,WAAY,CAAE,MAAO,aAAc,SAAU,GAAM,MAAO,CAAA,EAC1D,KAAM,CAAE,MAAO,OAAQ,SAAU,GAAM,MAAO,EAAA,CAAG,EAEnD,gBAAiB,cACnB,EAKaC,EAAwC,CACnD,GAAI,YACJ,KAAM,qBACN,UAAW,YACX,SAAU,CACR,KAAM,oEACN,WAAY,CACV,sDACA,qEACA,6DACA,kDACA,iDACA,gCACA,kCACA,sCAAA,EAEF,oBACE,8IAAA,EAEJ,YAAa,CACX,YAAa,CAEX,YAAa,YACb,aAAc,aACd,cAAe,cACf,OAAQ,MACR,oBAAqB,oBACrB,UAAW,UACX,cAAe,UACf,WAAY,WACZ,WAAY,aACZ,cAAe,aACf,aAAc,eACd,gBAAiB,eACjB,QAAS,UACT,UAAW,YACX,KAAM,OACN,aAAc,aACd,OAAQ,SACR,MAAO,QACP,UAAW,QACX,YAAa,cACb,iBAAkB,cAClB,iBAAkB,iBAClB,eAAgB,eAChB,cAAe,eACf,OAAQ,SACR,MAAO,OAAA,EAET,MAAO,CACL,IAAK,MACL,QAAS,MACT,IAAK,MACL,QAAS,MACT,IAAK,MACL,QAAS,MACT,SAAU,WACV,KAAM,OACN,MAAO,gBACP,QAAS,UACT,WAAY,UACZ,IAAK,MACL,MAAO,QACP,iBAAkB,iBAClB,OAAQ,SACR,WAAY,SACZ,QAAS,UACT,YAAa,UACb,OAAQ,SACR,UAAW,QAAA,EAEb,QAAS,CACP,gBAAiB,mBACjB,aAAc,cACd,YAAa,iBACb,cAAe,mBACf,cAAe,cACf,eAAgB,0BAChB,YAAa,6BACb,WAAY,mBACZ,eAAgB,eAChB,cAAe,cACf,kBAAmB,kBACnB,iBAAkB,iBAClB,mBAAoB,kBAAA,CACtB,EAEF,eAAgB,CAEd,MACA,SACA,SACA,WACA,cACA,sBAEA,WACA,gBACA,UACA,MACA,QACA,QACA,SACA,cACA,gBACA,YAEA,YACA,MACA,OACA,UACA,SACA,UAEA,UACA,eACA,WACA,eACA,SACA,MACA,OACA,eACA,sBAEA,gBACA,OACA,YACA,QACA,aACA,cACA,aACA,OAAA,EAEF,aAAc,CACZ,eAAgB,CAAE,MAAO,mBAAoB,SAAU,GAAM,MAAO,CAAA,EACpE,YAAa,CAAE,MAAO,yBAA0B,SAAU,GAAM,MAAO,CAAA,EACvE,sBAAuB,CAAE,MAAO,yBAA0B,SAAU,GAAM,MAAO,CAAA,EACjF,gBAAiB,CAAE,MAAO,sBAAuB,SAAU,GAAM,MAAO,CAAA,EACxE,gBAAiB,CAAE,MAAO,mBAAoB,SAAU,GAAO,MAAO,CAAA,EACtE,eAAgB,CAAE,MAAO,2BAA4B,SAAU,GAAM,MAAO,CAAA,EAC5E,YAAa,CAAE,MAAO,4BAA6B,SAAU,GAAM,MAAO,CAAA,EAC1E,cAAe,CAAE,MAAO,8BAA+B,SAAU,GAAM,MAAO,CAAA,EAC9E,WAAY,CAAE,MAAO,sBAAuB,SAAU,GAAM,MAAO,CAAA,EACnE,KAAM,CAAE,MAAO,8BAA+B,SAAU,GAAM,MAAO,EAAA,EACrE,MAAO,CAAE,MAAO,oBAAqB,SAAU,GAAM,MAAO,EAAA,CAAG,EAEjE,gBAAiB,2BACnB,EAKaC,EAAsB,CACjC,cAAeH,EACf,WAAYC,EACZ,UAAWC,CACb,EAGO,SAASE,EAAuBC,EAAsC,CAC3E,MAAMC,EAAsBD,EAAU,YAAA,EAiBhCE,EAduC,CAC3C,cAAe,gBACf,UAAW,gBACX,SAAU,gBACV,WAAY,aACZ,YAAa,aACb,gBAAiB,aACjB,oBAAqB,aACrB,UAAW,YACX,UAAW,YACX,aAAc,YACd,UAAW,WAAA,EAGoBD,CAAmB,GAAK,gBACzD,OAAOH,EAAoBI,CAA+C,CAC5E,CClgBA,MAAMC,CAAiB,CACb,cAA+B,KAC/B,gBAA4C,KAKpD,iBAAiBC,EAAsB,CACrC,KAAK,cAAgBA,EACrB,KAAK,gBAAkBL,EAAuBK,EAAO,SAAS,EAG1DA,EAAO,gBAAkB,KAAK,iBAChC,KAAK,oBAAoBA,EAAO,cAAc,CAElD,CAKA,kBAAkC,CAChC,OAAO,KAAK,aACd,CAKA,oBAAwC,CAEtC,OAAK,KAAK,gBAGH,KAAK,gBAFHT,CAGX,CAKQ,oBAAoBU,EAAgD,CAC1E,GAAI,CAAC,KAAK,iBAAmB,CAACA,EAAgB,OAG9C,MAAMC,EAAW,KAAK,MAAM,KAAK,UAAU,KAAK,eAAe,CAAC,EAG5DD,EAAe,uBACjB,OAAO,OAAOC,EAAS,YAAY,YAAaD,EAAe,qBAAqB,EAIlFA,EAAe,0BACjBC,EAAS,eAAe,KAAK,GAAGD,EAAe,wBAAwB,EAIrEA,EAAe,wBACjBC,EAAS,SAAS,wBACfA,EAAS,SAAS,wBAA0B,IAC7C;AAAA,EACAD,EAAe,uBAGnB,KAAK,gBAAkBC,CACzB,CAKA,0BAAmD,CAEjD,OADiB,KAAK,mBAAA,EACN,aAAa,aAAe,CAAA,CAC9C,CAKA,2BAAoD,CAElD,OADiB,KAAK,mBAAA,EACN,aAAa,OAAS,CAAA,CACxC,CAKA,sBAA+C,CAE7C,OADiB,KAAK,mBAAA,EACN,aAAa,SAAW,CAAA,CAC1C,CAKA,mBAIE,CACA,MAAMA,EAAW,KAAK,mBAAA,EAGtB,MAAO,CACL,YAAaA,EAAS,aAAa,aAAe,CAAA,EAClD,aAAcA,EAAS,aAAa,OAAS,CAAA,EAC7C,QAASA,EAAS,aAAa,SAAW,CAAA,CAAC,CAE/C,CAKA,mBAA8B,CAE5B,OADiB,KAAK,mBAAA,EACN,cAClB,CAKA,aAA6C,CAE3C,OADiB,KAAK,mBAAA,EACN,QAClB,CAKA,iBAAqD,CAEnD,OADiB,KAAK,mBAAA,EACN,YAClB,CAKA,gBAAgBC,EAAuB,CACrC,MAAMC,EAAiB,KAAK,kBAAA,EACtBC,EAAYF,EAAK,YAAA,EACvB,OAAOC,EAAe,KAAKE,GAAiBD,EAAU,SAASC,EAAc,YAAA,CAAa,CAAC,CAC7F,CAKA,iBAAiBC,EAAsB,CACrC,GAAI,CAACA,EAAM,MAAO,GAElB,MAAMC,EAAc,KAAK,kBAAA,EACzB,GAAI,CAACA,EAAa,OAAOD,EAEzB,IAAIE,EAAYF,EAGhB,OAAIC,EAAY,aAAe,OAAOA,EAAY,aAAgB,UAChE,OAAO,QAAQA,EAAY,WAAW,EAAE,QAAQ,CAAC,CAACE,EAAOC,CAAU,IAAM,CACvE,MAAMC,EAAQ,IAAI,OAAO,MAAMF,CAAK,MAAO,IAAI,EAC/CD,EAAYA,EAAU,QAAQG,EAAOD,CAAU,CACjD,CAAC,EAICH,EAAY,cAAgB,OAAOA,EAAY,cAAiB,UAClE,OAAO,QAAQA,EAAY,YAAY,EAAE,QAAQ,CAAC,CAACE,EAAOC,CAAU,IAAM,CACxE,MAAMC,EAAQ,IAAI,OAAO,MAAMF,CAAK,MAAO,IAAI,EAC/CD,EAAYA,EAAU,QAAQG,EAAOD,CAAU,CACjD,CAAC,EAICH,EAAY,SAAW,OAAOA,EAAY,SAAY,UACxD,OAAO,QAAQA,EAAY,OAAO,EAAE,QAAQ,CAAC,CAACE,EAAOC,CAAU,IAAM,CACnE,MAAMC,EAAQ,IAAI,OAAOF,EAAO,IAAI,EACpCD,EAAYA,EAAU,QAAQG,EAAOD,CAAU,CACjD,CAAC,EAGIF,CACT,CAKA,eAAeI,EAAoBC,EAA2B,CAC5D,MAAMC,EAAS,KAAK,YAAA,EACdC,EAAW,KAAK,gBAAA,EAChBd,EAAW,KAAK,mBAAA,EAGhBe,EAAa,MAAM,QAAQF,EAAO,UAAU,EAAIA,EAAO,WAAa,CAAA,EAGpEG,EAAgB,OAAO,OAAOF,CAAQ,EACzC,KAAK,CAACG,EAAGC,IAAMD,EAAE,MAAQC,EAAE,KAAK,EAChC,IAAIC,GAAWA,EAAQ,KAAK,EA4B/B,MA1BsB,uDAAuDN,EAAO,IAAI;AAAA;AAAA,EAE1Fb,EAAS,UAAY,cAAcA,EAAS,SAAS,GAAK,EAAE;AAAA;AAAA;AAAA,EAG5De,EAAW,IAAIK,GAAQ,KAAKA,CAAI,EAAE,EAAE,KAAK;AAAA,CAAI,CAAC;AAAA;AAAA,EAE9CP,EAAO,qBAAuB,EAAE;AAAA;AAAA;AAAA,EAGhCG,EAAc,IAAIK,GAAS,KAAKA,CAAK,EAAE,EAAE,KAAK;AAAA,CAAI,CAAC;AAAA;AAAA;AAAA,EAGnDT,EAAc,KAAK,UAAUA,EAAa,KAAM,CAAC,EAAI,0BAA0B;AAAA;AAAA;AAAA,EAG/ED,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAWV,CAKA,yBAA6C,CAC3C,MAAO,CAAC,gBAAiB,aAAc,WAAW,CACpD,CAKA,OAAc,CACZ,KAAK,cAAgB,KACrB,KAAK,gBAAkB,IACzB,CACF,CAGO,MAAMW,EAAmB,IAAIzB,ECpQ7B,MAAM0B,CAA0B,CAE7B,sBAAgD,CACtD,OAAQ,SACR,OAAQ,SACR,UAAW,SACX,OAAQ,SACR,WAAY,SACZ,QAAS,UACT,WAAY,UACZ,SAAU,UACV,WAAY,UACZ,UAAW,YACX,cAAe,YACf,WAAY,aACZ,QAAS,UACT,WAAY,UACZ,WAAY,UACZ,UAAW,YACX,QAAS,UACT,QAAS,UACT,SAAU,WACV,aAAc,WACd,UAAW,YACX,aAAc,YACd,UAAW,YACX,UAAW,YACX,WAAY,aACZ,eAAgB,aAChB,SAAU,WACV,aAAc,WACd,aAAc,eACd,oBAAqB,eACrB,QAAS,UACT,QAAS,UACT,YAAa,cACb,MAAO,QACP,YAAa,cACb,aAAc,eACd,cAAe,gBACf,2BAA4B,gBAC5B,kBAAmB,gBACnB,gBAAiB,gBACjB,UAAW,YACX,cAAe,YACf,WAAY,aACZ,cAAe,aACf,UAAW,YACX,WAAY,aACZ,OAAQ,SACR,WAAY,aACZ,SAAU,WACV,YAAa,WACb,WAAY,aACZ,OAAQ,SACR,aAAc,eACd,QAAS,UACT,YAAa,UACb,WAAY,aACZ,OAAQ,SACR,WAAY,SACZ,WAAY,aACZ,MAAO,QACP,WAAY,QACZ,YAAa,cACb,QAAS,UACT,QAAS,UACT,WAAY,UACZ,OAAQ,SACR,WAAY,SACZ,YAAa,cACb,QAAS,UACT,aAAc,UACd,QAAS,UACT,QAAS,UACT,SAAU,WACV,SAAU,WACV,WAAY,aACZ,SAAU,WACV,aAAc,eACd,SAAU,WACV,UAAW,YACX,OAAQ,SACR,UAAW,SACX,SAAU,WACV,OAAQ,SACR,UAAW,SACX,UAAW,YACX,eAAgB,YAChB,QAAS,UACT,aAAc,UACd,QAAS,UACT,aAAc,UACd,KAAM,OACN,UAAW,MAAA,EAIL,uBAAiD,CACvD,IAAK,MACL,QAAS,MACT,UAAW,MACX,iBAAkB,iBAClB,UAAW,aACX,KAAM,MACN,MAAO,QACP,IAAK,MACL,QAAS,MACT,IAAK,MACL,QAAS,MACT,KAAM,MACN,UAAW,MACX,IAAK,MACL,QAAS,MACT,IAAK,MACL,QAAS,MACT,IAAK,MACL,QAAS,MACT,IAAK,MACL,QAAS,MACT,IAAK,MACL,QAAS,MACT,IAAK,MACL,QAAS,MACT,IAAK,MACL,QAAS,MACT,GAAI,KACJ,WAAY,UACZ,WAAY,WACZ,iBAAkB,iBAClB,MAAO,KACP,aAAc,aACd,MAAO,KACP,mBAAoB,mBACpB,MAAO,KACP,oBAAqB,oBACrB,SAAU,SACV,aAAc,SACd,gBAAiB,eACjB,gBAAiB,eACjB,WAAY,aACZ,gBAAiB,aACjB,KAAM,OACN,UAAW,OACX,IAAK,MACL,QAAS,MACT,IAAK,MACL,QAAS,MACT,IAAK,MACL,QAAS,MACT,IAAK,MACL,QAAS,MACT,IAAK,MACL,QAAS,MACT,GAAI,KACJ,MAAO,IAAA,EAID,kBAA4C,CAClD,oBAAqB,oBACrB,oBAAqB,oBACrB,oBAAqB,oBACrB,qBAAsB,oBACtB,gBAAiB,gBACjB,iBAAkB,gBAClB,iBAAkB,qBAClB,kBAAmB,qBACnB,cAAe,cACf,cAAe,cACf,YAAa,cACb,eAAgB,eAChB,eAAgB,eAChB,cAAe,cACf,gBAAiB,cACjB,iBAAkB,iBAClB,aAAc,aACd,eAAgB,cAChB,eAAgB,eAChB,iBAAkB,eAClB,kBAAmB,kBACnB,oBAAqB,kBACrB,kBAAmB,kBACnB,oBAAqB,kBACrB,iBAAkB,iBAClB,MAAO,KACP,uBAAwB,uBACxB,MAAO,KACP,eAAgB,eAChB,sBAAuB,sBACvB,IAAK,MACL,QAAS,KAAA,EAMJ,qBAAqBZ,EAA4B,CACtD,GAAI,CAACA,EAAY,MAAO,GAIxB,GADsBW,EAAiB,iBAAA,EAGrC,OAAOA,EAAiB,iBAAiB,KAAK,kBAAkBX,CAAU,CAAC,EAI7E,IAAIJ,EAAYI,EAGhB,cAAO,QAAQ,KAAK,qBAAqB,EAAE,QAAQ,CAAC,CAACH,EAAOC,CAAU,IAAM,CAC1E,MAAMC,EAAQ,IAAI,OAAO,MAAMF,CAAK,MAAO,IAAI,EAC/CD,EAAYA,EAAU,QAAQG,EAAOD,CAAU,CACjD,CAAC,EAGD,OAAO,QAAQ,KAAK,sBAAsB,EAAE,QAAQ,CAAC,CAACD,EAAOC,CAAU,IAAM,CAC3E,MAAMC,EAAQ,IAAI,OAAO,MAAMF,CAAK,MAAO,IAAI,EAC/CD,EAAYA,EAAU,QAAQG,EAAOD,CAAU,CACjD,CAAC,EAGD,OAAO,QAAQ,KAAK,iBAAiB,EAAE,QAAQ,CAAC,CAACD,EAAOC,CAAU,IAAM,CACtE,MAAMC,EAAQ,IAAI,OAAOF,EAAO,IAAI,EACpCD,EAAYA,EAAU,QAAQG,EAAOD,CAAU,CACjD,CAAC,EAGDF,EAAY,KAAK,kBAAkBA,CAAS,EAErCA,CACT,CAKQ,kBAAkBF,EAAsB,CAE9C,OAAAA,EAAOA,EAAK,QAAQ,YAAa,KAAK,EAGtCA,EAAOA,EAAK,QAAQ,iBAAkB,MAAM,EAC5CA,EAAOA,EAAK,QAAQ,kBAAmB,OAAO,EAC9CA,EAAOA,EAAK,QAAQ,qBAAsB,UAAU,EACpDA,EAAOA,EAAK,QAAQ,iBAAkB,MAAM,EAG5CA,EAAOA,EAAK,QAAQ,qBAAsB,UAAU,EACpDA,EAAOA,EAAK,QAAQ,oBAAqB,SAAS,EAClDA,EAAOA,EAAK,QAAQ,sBAAuB,WAAW,EAGtDA,EAAOA,EAAK,QAAQ,0BAA2B,OAAO,EAGtDA,EAAOA,EAAK,QAAQ,wCAAyC,QAAQ,EACrEA,EAAOA,EAAK,QAAQ,wBAAyB,gBAAgB,EAC7DA,EAAOA,EAAK,QAAQ,oBAAqB,YAAY,EAGrDA,EAAOA,EAAK,QAAQ,OAAQ,GAAG,EAG/BA,EAAOA,EAAK,QAAQ,uBAAwB,CAACmB,EAAOC,EAAIC,IAAOD,EAAKC,EAAG,YAAA,CAAa,EAE7ErB,EAAK,KAAA,CACd,CAKO,eAAesB,EAAwB,CAC5C,MAAMC,EAAwB,CAAA,EACxBC,EAAYF,EAAK,YAAA,EAGvB,cAAO,QAAQ,KAAK,qBAAqB,EAAE,QAAQ,CAAC,CAACnB,EAAOC,CAAU,IAAM,EACtED,EAAM,SAASqB,CAAS,GAAKA,EAAU,SAASrB,CAAK,IACvDoB,EAAY,KAAKnB,CAAU,CAE/B,CAAC,EAGD,OAAO,QAAQ,KAAK,sBAAsB,EAAE,QAAQ,CAAC,CAACD,EAAOC,CAAU,IAAM,EACvED,EAAM,SAASqB,CAAS,GAAKA,EAAU,SAASrB,CAAK,IACvDoB,EAAY,KAAKnB,CAAU,CAE/B,CAAC,EAEM,CAAC,GAAG,IAAI,IAAImB,CAAW,CAAC,CACjC,CACF,CAEO,MAAME,EAAqB,IAAIP"}