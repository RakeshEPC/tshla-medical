{"version":3,"file":"QuickQualityTest-Cb0CEKR-.js","sources":["../../src/services/medicalVocabulary.service.ts","../../src/services/dictation.service.ts","../../src/pages/QuickQualityTest.tsx"],"sourcesContent":["/**\n * Medical Vocabulary Enhancement Service\n * Improves transcription accuracy by correcting common medical term errors\n */\n\nexport class MedicalVocabularyService {\n  // Common medical term corrections for speech recognition errors\n  private readonly corrections: Map<RegExp, string> = new Map([\n    // Medication corrections\n    [/\\bfenergan\\b/gi, 'Phenergan'],\n    [/\\bphenergan\\b/gi, 'Phenergan'],\n    [/\\bzofran\\b/gi, 'Zofran'],\n    [/\\bfarxiga\\b/gi, 'Farxiga'],\n    [/\\blantus\\b/gi, 'Lantus'],\n    [/\\bnovolog\\b/gi, 'Novolog'],\n    [/\\boverlock\\b/gi, 'Novolog'],\n    [/\\bnovo\\s*log\\b/gi, 'Novolog'],\n    [/\\bmetformin\\b/gi, 'Metformin'],\n    [/\\blisinopril\\b/gi, 'Lisinopril'],\n    [/\\batorvastatin\\b/gi, 'Atorvastatin'],\n    [/\\bsimvastatin\\b/gi, 'Simvastatin'],\n    [/\\bgabapentin\\b/gi, 'Gabapentin'],\n    [/\\bomeprazole\\b/gi, 'Omeprazole'],\n    [/\\bamlodipine\\b/gi, 'Amlodipine'],\n    [/\\bmetoprolol\\b/gi, 'Metoprolol'],\n    [/\\blosartan\\b/gi, 'Losartan'],\n    [/\\bhydrochlorothiazide\\b/gi, 'Hydrochlorothiazide'],\n    [/\\bhctz\\b/gi, 'HCTZ'],\n\n    // Medical conditions\n    [/\\bdiabetes mellitus\\b/gi, 'Diabetes Mellitus'],\n    [/\\bhypertension\\b/gi, 'Hypertension'],\n    [/\\bhyperlipidemia\\b/gi, 'Hyperlipidemia'],\n    [/\\bgerd\\b/gi, 'GERD'],\n    [/\\bcopd\\b/gi, 'COPD'],\n    [/\\bchf\\b/gi, 'CHF'],\n    [/\\bcad\\b/gi, 'CAD'],\n    [/\\bafib\\b/gi, 'AFib'],\n    [/\\ba fib\\b/gi, 'AFib'],\n    [/\\batrial fibrillation\\b/gi, 'Atrial Fibrillation'],\n\n    // Lab values and tests\n    [/\\ba1c\\b/gi, 'A1C'],\n    [/\\bhemoglobin a1c\\b/gi, 'Hemoglobin A1C'],\n    [/\\bcmp\\b/gi, 'CMP'],\n    [/\\bcbc\\b/gi, 'CBC'],\n    [/\\btsh\\b/gi, 'TSH'],\n    [/\\bbmp\\b/gi, 'BMP'],\n    [/\\bldl\\b/gi, 'LDL'],\n    [/\\bhdl\\b/gi, 'HDL'],\n    [/\\begfr\\b/gi, 'eGFR'],\n    [/\\bbun\\b/gi, 'BUN'],\n    [/\\bast\\b/gi, 'AST'],\n    [/\\balt\\b/gi, 'ALT'],\n\n    // Units corrections\n    [/\\bmilligrams?\\b/gi, 'mg'],\n    [/\\bunits?\\s+(?=\\d)/gi, 'units '],\n    [/\\b(\\d+)\\s*mgs?\\b/gi, '$1 mg'],\n    [/\\b(\\d+)\\s*mls?\\b/gi, '$1 mL'],\n\n    // Common speech recognition errors for medical context\n    [/\\bemail\\s+(?=insulin|meal)/gi, 'meal'],\n    [/\\bwith\\s+email\\b/gi, 'with meal'],\n    [/\\bat\\s+email\\b/gi, 'at meal'],\n    [/\\beach\\s+email\\b/gi, 'each meal'],\n    [/\\bsugar\\s+3\\s+picture\\b/gi, 'sugar 300'],\n    [/\\bsugar\\s+4\\s+picture\\b/gi, 'sugar 400'],\n    [/\\bthey're like in the (\\d+) and (\\d+)s?\\b/gi, 'blood sugars $1-$2'],\n\n    // Anatomical terms\n    [/\\babdomen\\b/gi, 'abdomen'],\n    [/\\bthorax\\b/gi, 'thorax'],\n    [/\\bextremities\\b/gi, 'extremities'],\n    [/\\bbilateral\\b/gi, 'bilateral'],\n    [/\\banterior\\b/gi, 'anterior'],\n    [/\\bposterior\\b/gi, 'posterior'],\n    [/\\blateral\\b/gi, 'lateral'],\n    [/\\bmedial\\b/gi, 'medial'],\n\n    // Vital signs\n    [/\\bblood pressure\\b/gi, 'blood pressure'],\n    [/\\bheart rate\\b/gi, 'heart rate'],\n    [/\\brespiratory rate\\b/gi, 'respiratory rate'],\n    [/\\btemperature\\b/gi, 'temperature'],\n    [/\\boxygen saturation\\b/gi, 'oxygen saturation'],\n    [/\\bO2 sat\\b/gi, 'O2 sat'],\n\n    // Common medical phrases\n    [/\\bpatient presents with\\b/gi, 'patient presents with'],\n    [/\\bchief complaint\\b/gi, 'chief complaint'],\n    [/\\bhistory of present illness\\b/gi, 'history of present illness'],\n    [/\\breview of systems\\b/gi, 'review of systems'],\n    [/\\bphysical exam\\b/gi, 'physical exam'],\n    [/\\bno acute distress\\b/gi, 'no acute distress'],\n    [/\\bwithin normal limits\\b/gi, 'within normal limits'],\n    [/\\bfollow up\\b/gi, 'follow-up'],\n    [/\\bas needed\\b/gi, 'as needed'],\n    [/\\bprn\\b/gi, 'PRN'],\n    [/\\btid\\b/gi, 'TID'],\n    [/\\bbid\\b/gi, 'BID'],\n    [/\\bqd\\b/gi, 'QD'],\n    [/\\bqid\\b/gi, 'QID'],\n    [/\\bpo\\b/gi, 'PO'],\n    [/\\bim\\b/gi, 'IM'],\n    [/\\biv\\b/gi, 'IV'],\n    [/\\bsubq\\b/gi, 'SubQ'],\n  ]);\n\n  /**\n   * Enhance transcript with medical vocabulary corrections\n   */\n  public enhanceTranscript(transcript: string): string {\n    if (!transcript) return '';\n\n    let enhanced = transcript;\n\n    // Apply all corrections\n    this.corrections.forEach((replacement, pattern) => {\n      enhanced = enhanced.replace(pattern, replacement);\n    });\n\n    // Fix common number patterns in medical context\n    enhanced = this.fixMedicalNumbers(enhanced);\n\n    // Fix dosage patterns\n    enhanced = this.fixDosagePatterns(enhanced);\n\n    // Clean up spacing around punctuation\n    enhanced = this.cleanupSpacing(enhanced);\n\n    return enhanced;\n  }\n\n  /**\n   * Fix common number patterns in medical context\n   */\n  private fixMedicalNumbers(text: string): string {\n    // Fix blood sugar readings that are transcribed as single digits\n    text = text.replace(/\\bsugar\\s+(\\d)\\s*(?:\\s|$|,|\\.|;)/gi, (match, digit) => {\n      const num = parseInt(digit);\n      if (num <= 9) {\n        return `sugar ${digit}00 `;\n      }\n      return match;\n    });\n\n    // Fix blood pressure readings\n    text = text.replace(/\\b(\\d{2,3})\\s+over\\s+(\\d{2,3})\\b/gi, '$1/$2');\n\n    // Fix \"in the 200s/300s\" patterns\n    text = text.replace(/\\bin\\s+the\\s+(\\d+)s\\b/gi, 'in the $1s');\n\n    return text;\n  }\n\n  /**\n   * Fix dosage patterns\n   */\n  private fixDosagePatterns(text: string): string {\n    // Fix \"X units with each meal\"\n    text = text.replace(\n      /(\\d+)\\s*units?\\s+(?:with\\s+)?(?:each\\s+)?(?:email|mill)\\b/gi,\n      '$1 units with each meal'\n    );\n\n    // Fix \"increase to X units\"\n    text = text.replace(/increase\\s+to\\s+(\\d+)\\s*units?\\b/gi, 'increase to $1 units');\n\n    // Fix \"X mg daily/twice daily\"\n    text = text.replace(/(\\d+)\\s*(?:mg|milligrams?)\\s+daily\\b/gi, '$1 mg daily');\n    text = text.replace(/(\\d+)\\s*(?:mg|milligrams?)\\s+twice\\s+daily\\b/gi, '$1 mg twice daily');\n\n    return text;\n  }\n\n  /**\n   * Clean up spacing around punctuation\n   */\n  private cleanupSpacing(text: string): string {\n    // Remove extra spaces\n    text = text.replace(/\\s+/g, ' ');\n\n    // Fix spacing around punctuation\n    text = text.replace(/\\s+([.,;!?])/g, '$1');\n    text = text.replace(/([.,;!?])(?=[A-Z])/g, '$1 ');\n\n    // Ensure sentences are properly spaced\n    text = text.replace(/\\.(?=[A-Z])/g, '. ');\n\n    return text.trim();\n  }\n\n  /**\n   * Get medical specialty from transcript content\n   */\n  public detectSpecialty(transcript: string): string {\n    const text = transcript.toLowerCase();\n\n    // Check for specialty-specific keywords\n    if (\n      text.includes('diabetes') ||\n      text.includes('insulin') ||\n      text.includes('a1c') ||\n      text.includes('glucose')\n    ) {\n      return 'Endocrinology';\n    }\n\n    if (\n      text.includes('chest pain') ||\n      text.includes('cardiac') ||\n      text.includes('heart') ||\n      text.includes('ekg')\n    ) {\n      return 'Cardiology';\n    }\n\n    if (\n      text.includes('depression') ||\n      text.includes('anxiety') ||\n      text.includes('psychiatric') ||\n      text.includes('mental health')\n    ) {\n      return 'Psychiatry';\n    }\n\n    if (\n      text.includes('joint') ||\n      text.includes('arthritis') ||\n      text.includes('fracture') ||\n      text.includes('orthopedic')\n    ) {\n      return 'Orthopedics';\n    }\n\n    if (\n      text.includes('headache') ||\n      text.includes('seizure') ||\n      text.includes('neurological') ||\n      text.includes('nerve')\n    ) {\n      return 'Neurology';\n    }\n\n    if (\n      text.includes('rash') ||\n      text.includes('skin') ||\n      text.includes('dermatitis') ||\n      text.includes('lesion')\n    ) {\n      return 'Dermatology';\n    }\n\n    if (\n      text.includes('pregnant') ||\n      text.includes('prenatal') ||\n      text.includes('obstetric') ||\n      text.includes('gynecologic')\n    ) {\n      return 'OB/GYN';\n    }\n\n    if (\n      text.includes('pediatric') ||\n      text.includes('child') ||\n      text.includes('infant') ||\n      text.includes('vaccination')\n    ) {\n      return 'Pediatrics';\n    }\n\n    return 'Primary Care';\n  }\n\n  /**\n   * Add medical context to improve recognition\n   */\n  public addMedicalContext(transcript: string, patientHistory?: any): string {\n    let contextualTranscript = transcript;\n\n    // If patient has known conditions, bias recognition toward related terms\n    if (patientHistory?.diagnoses) {\n      const diagnoses = patientHistory.diagnoses.toLowerCase();\n\n      if (diagnoses.includes('diabetes')) {\n        // Bias toward diabetes-related terms\n        contextualTranscript = contextualTranscript\n          .replace(/\\bsugar\\b/gi, 'blood sugar')\n          .replace(/\\binsulin\\s+pump\\b/gi, 'insulin pump')\n          .replace(/\\bcgm\\b/gi, 'CGM');\n      }\n\n      if (diagnoses.includes('hypertension')) {\n        // Bias toward hypertension-related terms\n        contextualTranscript = contextualTranscript\n          .replace(/\\bpressure\\b/gi, 'blood pressure')\n          .replace(/\\bace\\b/gi, 'ACE');\n      }\n    }\n\n    return contextualTranscript;\n  }\n}\n\n// Singleton instance\nexport const medicalVocabularyService = new MedicalVocabularyService();\n","/**\n * Centralized Dictation Service\n * Handles all voice recognition functionality\n */\n\nimport { medicalVocabularyService } from './medicalVocabulary.service';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport class DictationService {\n  private recognition: any = null;\n  private isListening = false;\n  private onTranscriptUpdate?: (text: string, isFinal: boolean) => void;\n  private onError?: (error: string) => void;\n  private onStatusChange?: (status: 'idle' | 'listening' | 'processing') => void;\n\n  constructor() {\n    this.initializeRecognition();\n  }\n\n  private initializeRecognition() {\n    if (typeof window === 'undefined') return;\n\n    const SpeechRecognition =\n      (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n\n    if (!SpeechRecognition) {\n      logError('dictation', 'Error message', {});\n      return;\n    }\n\n    try {\n      this.recognition = new SpeechRecognition();\n      this.recognition.continuous = true;\n      this.recognition.interimResults = true;\n      this.recognition.lang = 'en-US';\n      this.recognition.maxAlternatives = 1;\n\n      logDebug('dictation', 'Debug message', {});\n      this.setupEventHandlers();\n    } catch (error) {\n      logError('dictation', 'Error message', {});\n      this.recognition = null;\n    }\n  }\n\n  private setupEventHandlers() {\n    if (!this.recognition) return;\n\n    this.recognition.onstart = () => {\n      this.isListening = true;\n      this.onStatusChange?.('listening');\n    };\n\n    this.recognition.onresult = (event: any) => {\n      let finalTranscript = '';\n      let interimTranscript = '';\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          finalTranscript += transcript + ' ';\n        } else {\n          interimTranscript += transcript;\n        }\n      }\n\n      if (finalTranscript) {\n        // Enhance medical vocabulary for final transcripts\n        const enhancedTranscript = medicalVocabularyService.enhanceTranscript(finalTranscript);\n        this.onTranscriptUpdate?.(enhancedTranscript, true);\n      }\n      if (interimTranscript) {\n        // Also enhance interim results for better real-time display\n        const enhancedInterim = medicalVocabularyService.enhanceTranscript(interimTranscript);\n        this.onTranscriptUpdate?.(enhancedInterim, false);\n      }\n    };\n\n    this.recognition.onerror = (event: any) => {\n      // Don't log aborted or no-speech errors as they're normal\n      if (event.error === 'aborted' || event.error === 'no-speech') {\n        return;\n      }\n\n      logError('dictation', 'Error message', {});\n\n      if (event.error === 'not-allowed') {\n        this.onError?.(\n          'Microphone access denied. Please check your browser settings and allow microphone access for this site.'\n        );\n        this.stop();\n        return;\n      }\n\n      if (event.error === 'network') {\n        this.onError?.('Network error. Please check your internet connection.');\n        this.stop();\n        return;\n      }\n\n      if (event.error === 'audio-capture') {\n        this.onError?.(\n          'Microphone not found or not working. Please check your microphone connection.'\n        );\n        this.stop();\n        return;\n      }\n\n      if (event.error === 'aborted') {\n        // User aborted - normal\n        return;\n      }\n\n      // For other errors, try to recover\n      if (this.isListening) {\n        logDebug('dictation', 'Debug message', {});\n        setTimeout(() => this.restart(), 500);\n      }\n    };\n\n    this.recognition.onend = () => {\n      if (this.isListening) {\n        // Auto-restart if we should still be listening\n        setTimeout(() => this.restart(), 100);\n      } else {\n        this.onStatusChange?.('idle');\n      }\n    };\n  }\n\n  public start(\n    onTranscriptUpdate: (text: string, isFinal: boolean) => void,\n    onError?: (error: string) => void,\n    onStatusChange?: (status: 'idle' | 'listening' | 'processing') => void\n  ): boolean {\n    if (!this.recognition) {\n      onError?.('Speech recognition not available');\n      return false;\n    }\n\n    this.onTranscriptUpdate = onTranscriptUpdate;\n    this.onError = onError;\n    this.onStatusChange = onStatusChange;\n\n    try {\n      this.recognition.start();\n      this.isListening = true;\n      return true;\n    } catch (e) {\n      logError('dictation', 'Error message', {});\n      return false;\n    }\n  }\n\n  public stop() {\n    this.isListening = false;\n    if (this.recognition) {\n      try {\n        this.recognition.stop();\n      } catch (e) {\n        logError('dictation', 'Error message', {});\n      }\n    }\n    this.onStatusChange?.('idle');\n  }\n\n  private restart() {\n    if (!this.isListening || !this.recognition) return;\n\n    try {\n      this.recognition.start();\n    } catch (e) {\n      // Already started or other error\n      logDebug('dictation', 'Debug message', {});\n    }\n  }\n\n  public isSupported(): boolean {\n    if (typeof window === 'undefined') return false;\n    const hasSpeechRecognition =\n      !!(window as any).SpeechRecognition || !!(window as any).webkitSpeechRecognition;\n\n    // Also check if recognition was successfully initialized\n    if (hasSpeechRecognition && !this.recognition) {\n      // Try to initialize if not already done\n      this.initializeRecognition();\n    }\n\n    return hasSpeechRecognition && this.recognition !== null;\n  }\n}\n\n// Singleton instance\nexport const dictationService = new DictationService();\n","/**\n * Quick Quality Test - See the difference immediately\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { awsTranscribeSimple } from '../services/awsTranscribeSimple.service';\nimport { dictationService } from '../services/dictation.service';\nimport { medicalVocabularyEnhancer } from '../services/medicalVocabularyEnhancer.service';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\nexport default function QuickQualityTest() {\n  const [isRecording, setIsRecording] = useState(false);\n  const [rawTranscript, setRawTranscript] = useState('');\n  const [enhancedTranscript, setEnhancedTranscript] = useState('');\n  const [mode, setMode] = useState<'aws' | 'browser'>('aws');\n  const [qualityScore, setQualityScore] = useState(0);\n\n  // Test phrases to say\n  const testPhrases = [\n    'Patient has hypertension, takes lisinopril twenty milligrams daily',\n    'Blood pressure today is one forty two over eighty eight',\n    'Started metformin one thousand milligrams twice a day for diabetes',\n    'Follow up in three months with repeat A one C',\n    'Physical exam shows lungs clear to auscultation bilaterally',\n  ];\n\n  const startRecording = async () => {\n    setIsRecording(true);\n    setRawTranscript('');\n    setEnhancedTranscript('');\n\n    if (mode === 'aws') {\n      // AWS Transcribe Medical (HIPAA compliant)\n      const success = await awsTranscribeSimple.startRecording(\n        (text, isFinal) => {\n          if (isFinal) {\n            // Raw transcript (before enhancement)\n            const rawVersion = text\n              .replace(/\\bmg\\b/g, ' milligrams')\n              .replace(/\\bBID\\b/g, 'twice a day');\n            setRawTranscript(prev => prev + ' ' + rawVersion);\n\n            // Enhanced transcript (after enhancement)\n            setEnhancedTranscript(prev => prev + ' ' + text);\n\n            // Calculate quality score\n            const density = medicalVocabularyEnhancer.getMedicalTermDensity(text);\n            setQualityScore(density * 100);\n          }\n        },\n        error => {\n          logError('QuickQualityTest', 'Error message', {});\n          alert(`Error: ${error}`);\n          setIsRecording(false);\n        }\n      );\n\n      if (!success) {\n        setIsRecording(false);\n      }\n    } else {\n      // Browser Speech API fallback\n      dictationService.start(\n        (text, isFinal) => {\n          if (isFinal) {\n            setRawTranscript(prev => prev + ' ' + text);\n\n            // Apply enhancement\n            const enhanced = medicalVocabularyEnhancer.enhanceTranscript(text);\n            setEnhancedTranscript(prev => prev + ' ' + enhanced);\n\n            // Calculate quality score\n            const density = medicalVocabularyEnhancer.getMedicalTermDensity(enhanced);\n            setQualityScore(density * 100);\n          }\n        },\n        error => {\n          logError('QuickQualityTest', 'Error message', {});\n          alert(`Error: ${error}`);\n          setIsRecording(false);\n        }\n      );\n    }\n  };\n\n  const stopRecording = () => {\n    if (mode === 'aws') {\n      const final = awsTranscribeSimple.stopRecording();\n      logDebug('QuickQualityTest', 'Debug message', {});\n    } else {\n      dictationService.stop();\n    }\n    setIsRecording(false);\n  };\n\n  // Apply enhancement to raw transcript manually\n  const applyEnhancement = () => {\n    const enhanced = medicalVocabularyEnhancer.enhanceTranscript(rawTranscript);\n    setEnhancedTranscript(enhanced);\n    const density = medicalVocabularyEnhancer.getMedicalTermDensity(enhanced);\n    setQualityScore(density * 100);\n  };\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <h1 className=\"text-3xl font-bold mb-6\">🎯 Quick Quality Test</h1>\n\n      {/* Mode Selection */}\n      <div className=\"bg-white rounded-lg shadow p-4 mb-6\">\n        <h2 className=\"font-semibold mb-3\">Select Transcription Mode:</h2>\n        <div className=\"flex gap-4\">\n          <button\n            onClick={() => setMode('aws')}\n            className={`px-4 py-2 rounded ${\n              mode === 'aws' ? 'bg-blue-600 text-white' : 'bg-gray-200 hover:bg-gray-300'\n            }`}\n          >\n            AWS Transcribe Medical (HIPAA)\n          </button>\n          <button\n            onClick={() => setMode('browser')}\n            className={`px-4 py-2 rounded ${\n              mode === 'browser' ? 'bg-blue-600 text-white' : 'bg-gray-200 hover:bg-gray-300'\n            }`}\n          >\n            Browser Speech API\n          </button>\n        </div>\n      </div>\n\n      {/* Test Instructions */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n        <h3 className=\"font-semibold mb-2\">📋 Test These Phrases:</h3>\n        <ol className=\"list-decimal ml-6 space-y-1\">\n          {testPhrases.map((phrase, idx) => (\n            <li key={idx} className=\"text-sm\">\n              {phrase}\n            </li>\n          ))}\n        </ol>\n      </div>\n\n      {/* Recording Controls */}\n      <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n        <div className=\"flex gap-4 mb-4\">\n          <button\n            onClick={isRecording ? stopRecording : startRecording}\n            className={`px-6 py-3 rounded-lg font-semibold ${\n              isRecording\n                ? 'bg-red-600 hover:bg-red-700 text-white'\n                : 'bg-green-600 hover:bg-green-700 text-white'\n            }`}\n          >\n            {isRecording ? '⏹ Stop Recording' : '🎤 Start Recording'}\n          </button>\n\n          {!isRecording && rawTranscript && (\n            <button\n              onClick={applyEnhancement}\n              className=\"px-6 py-3 bg-purple-600 hover:bg-purple-700 text-white rounded-lg font-semibold\"\n            >\n              ✨ Re-Apply Enhancement\n            </button>\n          )}\n        </div>\n\n        {isRecording && (\n          <div className=\"flex items-center gap-2\">\n            <div className=\"animate-pulse bg-red-500 h-3 w-3 rounded-full\"></div>\n            <span className=\"text-sm text-gray-600\">Recording... Speak clearly</span>\n          </div>\n        )}\n      </div>\n\n      {/* Quality Score */}\n      {qualityScore > 0 && (\n        <div className=\"bg-white rounded-lg shadow p-4 mb-6\">\n          <h3 className=\"font-semibold mb-2\">Quality Score:</h3>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex-1 bg-gray-200 rounded-full h-4\">\n              <div\n                className={`h-4 rounded-full ${\n                  qualityScore > 15\n                    ? 'bg-green-500'\n                    : qualityScore > 10\n                      ? 'bg-yellow-500'\n                      : 'bg-red-500'\n                }`}\n                style={{ width: `${Math.min(qualityScore * 5, 100)}%` }}\n              />\n            </div>\n            <span className=\"font-bold\">{qualityScore.toFixed(1)}%</span>\n          </div>\n          <p className=\"text-sm text-gray-600 mt-2\">\n            Medical term density (higher is better, 15%+ is excellent)\n          </p>\n        </div>\n      )}\n\n      {/* Side by Side Comparison */}\n      {(rawTranscript || enhancedTranscript) && (\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Raw Transcript */}\n          <div className=\"bg-red-50 rounded-lg p-4\">\n            <h3 className=\"font-semibold mb-2 text-red-700\">❌ Before Enhancement (Raw)</h3>\n            <div className=\"bg-white rounded p-3 min-h-[200px]\">\n              <p className=\"whitespace-pre-wrap text-sm\">\n                {rawTranscript || 'Waiting for transcription...'}\n              </p>\n            </div>\n          </div>\n\n          {/* Enhanced Transcript */}\n          <div className=\"bg-green-50 rounded-lg p-4\">\n            <h3 className=\"font-semibold mb-2 text-green-700\">✅ After Enhancement (Fixed)</h3>\n            <div className=\"bg-white rounded p-3 min-h-[200px]\">\n              <p className=\"whitespace-pre-wrap text-sm\">\n                {enhancedTranscript || 'Waiting for transcription...'}\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* What's Different Section */}\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mt-6\">\n        <h3 className=\"font-semibold mb-2\">🔧 What We Fixed:</h3>\n        <ul className=\"text-sm space-y-1\">\n          <li>✅ AWS Transcribe set to DICTATION mode (not conversation)</li>\n          <li>✅ Disabled echo cancellation (was removing medical 's' sounds)</li>\n          <li>✅ Medical vocabulary enhancement (metformin, lisinopril, etc.)</li>\n          <li>✅ Proper formatting (142/88 instead of \"142 over 88\")</li>\n          <li>✅ Medical abbreviations (BID, TID, PRN)</li>\n          <li>✅ Dosage formatting (20mg instead of \"20 milligrams\")</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n"],"names":["MedicalVocabularyService","transcript","enhanced","replacement","pattern","text","match","digit","patientHistory","contextualTranscript","diagnoses","medicalVocabularyService","DictationService","SpeechRecognition","logError","logDebug","event","finalTranscript","interimTranscript","i","enhancedTranscript","enhancedInterim","onTranscriptUpdate","onError","onStatusChange","hasSpeechRecognition","dictationService","QuickQualityTest","isRecording","setIsRecording","useState","rawTranscript","setRawTranscript","setEnhancedTranscript","mode","setMode","qualityScore","setQualityScore","testPhrases","startRecording","awsTranscribeSimple","isFinal","rawVersion","prev","density","medicalVocabularyEnhancer","error","stopRecording","applyEnhancement","jsxs","jsx","phrase","idx"],"mappings":"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"}