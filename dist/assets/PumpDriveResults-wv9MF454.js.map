{"version":3,"file":"PumpDriveResults-wv9MF454.js","sources":["../../src/data/balancedPumpQuestions.ts","../../src/services/pumpFeatureEngine.service.ts","../../src/services/pumpDriveAI.service.ts","../../src/services/pumpDriveFeatureBased.service.ts","../../src/services/pumpAssessment.service.ts","../../src/pages/PumpDriveResults.tsx"],"sourcesContent":["// Balanced PumpDrive Questionnaire - Strategic 8-10 Questions\n// Replaces overwhelming 54 open-ended questions with focused, actionable ones\n\nexport type QuestionType = 'multiple_choice' | 'scale' | 'checkbox' | 'conditional' | 'scenario';\n\nexport interface QuestionOption {\n  value: string;\n  label: string;\n  followUp?: string[]; // Triggers additional questions\n  weight?: Record<string, number>; // Scoring weights for different pump features\n}\n\nexport interface BalancedQuestion {\n  id: string;\n  type: QuestionType;\n  phase: 'core' | 'refinement' | 'advanced'; // Progressive disclosure phases\n  category: string;\n  title: string;\n  description?: string;\n  required: boolean;\n  options: QuestionOption[];\n  skipOption: {\n    label: string;\n    value: string;\n  };\n  timeEstimate: number; // seconds\n  impactWeight: number; // How much this affects recommendations (1-10)\n}\n\nexport const BALANCED_PUMP_QUESTIONS: BalancedQuestion[] = [\n  // CORE PHASE QUESTIONS (8 questions, 4-5 minutes)\n\n  // 1. Primary Priority (High Impact)\n  {\n    id: 'primary_priority',\n    type: 'multiple_choice',\n    phase: 'core',\n    category: 'priorities',\n    title: 'What matters most to you in a pump?',\n    description: 'This helps us focus on your top priority',\n    required: true,\n    options: [\n      {\n        value: 'simplicity',\n        label: 'üéØ Simplest setup and daily use',\n        weight: { automation: 8, simplicity: 10, cost: 6 },\n      },\n      {\n        value: 'technology',\n        label: 'üöÄ Best technology and control features',\n        weight: { features: 10, automation: 9, integration: 8 },\n      },\n      {\n        value: 'cost',\n        label: 'üí∞ Lowest total cost (device + supplies)',\n        weight: { cost: 10, simplicity: 7, basic_features: 8 },\n      },\n      {\n        value: 'lifestyle',\n        label: 'üèÉ Best fit for my active lifestyle',\n        weight: { durability: 9, discretion: 8, waterproof: 9 },\n      },\n    ],\n    skipOption: { label: 'Not sure yet', value: 'skip' },\n    timeEstimate: 45,\n    impactWeight: 10,\n  },\n\n  // 2. Form Factor Preference (High Impact)\n  {\n    id: 'form_factor',\n    type: 'multiple_choice',\n    phase: 'core',\n    category: 'design',\n    title: 'Which pump design appeals to you?',\n    description: \"Think about what you'd be comfortable wearing daily\",\n    required: false,\n    options: [\n      {\n        value: 'tubeless',\n        label: 'üì± Tubeless patch pump (like a large bandage)',\n        weight: { tubeless: 10, discretion: 7, swimming: 10 },\n      },\n      {\n        value: 'tubing',\n        label: 'üìû Traditional pump with tubing',\n        weight: { traditional: 10, reliability: 8, options: 9 },\n      },\n      {\n        value: 'either',\n        label: 'ü§∑ Either works for me',\n        weight: { tubeless: 5, traditional: 5 },\n      },\n    ],\n    skipOption: { label: 'Show me both types', value: 'skip' },\n    timeEstimate: 30,\n    impactWeight: 9,\n  },\n\n  // 3. Technology Comfort Level (High Impact)\n  {\n    id: 'tech_comfort',\n    type: 'scale',\n    phase: 'core',\n    category: 'technology',\n    title: 'How comfortable are you with new technology?',\n    description: 'Be honest - this helps us match complexity to your preferences',\n    required: false,\n    options: [\n      {\n        value: 'low',\n        label: '1-3: I prefer simple, fewer tech features',\n        weight: { simplicity: 9, basic_features: 8, support: 9 },\n      },\n      {\n        value: 'medium',\n        label: \"4-6: I'm comfortable with moderate tech\",\n        weight: { moderate_features: 8, learning: 7 },\n      },\n      {\n        value: 'high',\n        label: '7-10: I love advanced features and customization',\n        weight: { advanced_features: 10, customization: 9, integration: 8 },\n      },\n    ],\n    skipOption: { label: 'Depends on the specific feature', value: 'skip' },\n    timeEstimate: 30,\n    impactWeight: 8,\n  },\n\n  // 4. Budget Reality Check (Medium Impact)\n  {\n    id: 'budget_reality',\n    type: 'multiple_choice',\n    phase: 'core',\n    category: 'cost',\n    title: \"What's your biggest cost concern?\",\n    description: 'Help us understand your financial priorities',\n    required: false,\n    options: [\n      {\n        value: 'upfront',\n        label: 'üíµ High upfront device cost',\n        weight: { low_upfront: 9, basic_model: 7 },\n      },\n      {\n        value: 'ongoing',\n        label: 'üì¶ Monthly supply costs',\n        weight: { efficient_supplies: 9, longer_wear: 8 },\n      },\n      {\n        value: 'insurance',\n        label: 'üè• Insurance coverage limitations',\n        weight: { insurance_friendly: 10, standard_options: 8 },\n      },\n      {\n        value: 'not_concerned',\n        label: \"‚ú® Cost isn't my main concern\",\n        weight: { premium_features: 7, latest_tech: 6 },\n      },\n    ],\n    skipOption: { label: 'Prefer not to discuss finances', value: 'skip' },\n    timeEstimate: 30,\n    impactWeight: 7,\n  },\n\n  // 5. Control Philosophy (High Impact)\n  {\n    id: 'control_philosophy',\n    type: 'scenario',\n    phase: 'core',\n    category: 'control',\n    title: \"At 3 AM, your glucose trends slightly high. You'd prefer:\",\n    description: 'This tells us about your automation comfort level',\n    required: false,\n    options: [\n      {\n        value: 'full_auto',\n        label: 'üò¥ System handles it automatically while I sleep',\n        weight: { automation: 10, closed_loop: 9 },\n      },\n      {\n        value: 'alert_auto',\n        label: \"üîî Gentle alert, then system adjusts if I don't respond\",\n        weight: { hybrid_automation: 9, alerts: 7 },\n      },\n      {\n        value: 'wake_me',\n        label: '‚è∞ Wake me up so I can decide what to do',\n        weight: { manual_control: 8, alerts: 10 },\n      },\n      {\n        value: 'alert_only',\n        label: 'üì± Just alert me, no automatic adjustments',\n        weight: { manual_control: 10, basic_alerts: 8 },\n      },\n    ],\n    skipOption: { label: \"I'm not sure about this scenario\", value: 'skip' },\n    timeEstimate: 45,\n    impactWeight: 9,\n  },\n\n  // 6. Activity Level Assessment (Medium Impact)\n  {\n    id: 'activity_level',\n    type: 'multiple_choice',\n    phase: 'core',\n    category: 'lifestyle',\n    title: 'How would you describe your physical activity?',\n    description: 'Helps us recommend pumps that fit your lifestyle',\n    required: false,\n    options: [\n      {\n        value: 'very_active',\n        label: 'üèãÔ∏è Very active (sports, gym, swimming regularly)',\n        weight: { waterproof: 10, durability: 9, temp_basal: 8 },\n        followUp: ['swimming_frequency', 'sport_types'],\n      },\n      {\n        value: 'moderately_active',\n        label: 'üö∂ Moderately active (regular walks, occasional activities)',\n        weight: { durability: 6, temp_basal: 6 },\n      },\n      {\n        value: 'less_active',\n        label: 'üè† Less active (mostly desk work, light activities)',\n        weight: { compact: 7, discretion: 8 },\n      },\n      {\n        value: 'varies',\n        label: 'üìÖ It varies significantly week to week',\n        weight: { flexibility: 8, temp_basal: 7 },\n      },\n    ],\n    skipOption: { label: \"Activity level isn't important to me\", value: 'skip' },\n    timeEstimate: 30,\n    impactWeight: 6,\n  },\n\n  // 7. Discretion Needs (Medium Impact)\n  {\n    id: 'discretion_needs',\n    type: 'multiple_choice',\n    phase: 'core',\n    category: 'lifestyle',\n    title: 'How important is it that your pump is discreet?',\n    description: 'Consider work, social situations, and personal comfort',\n    required: false,\n    options: [\n      {\n        value: 'very_important',\n        label: 'ü§´ Very important - must be hidden/low profile',\n        weight: { discretion: 10, compact: 9, tubeless: 7 },\n      },\n      {\n        value: 'somewhat_important',\n        label: 'üëî Somewhat important - prefer subtle',\n        weight: { discretion: 7, compact: 6 },\n      },\n      {\n        value: 'not_important',\n        label: 'ü§∑ Not important - function over form',\n        weight: { functionality: 8, features: 7 },\n      },\n      {\n        value: 'prefer_visible',\n        label: 'üëÅÔ∏è Actually prefer it visible for safety/medical ID',\n        weight: { visibility: 8, safety_features: 7 },\n      },\n    ],\n    skipOption: { label: \"Haven't thought about this\", value: 'skip' },\n    timeEstimate: 30,\n    impactWeight: 6,\n  },\n\n  // 8. Support Preferences (Medium Impact)\n  {\n    id: 'support_style',\n    type: 'multiple_choice',\n    phase: 'core',\n    category: 'support',\n    title: 'When learning something new and complex, you prefer:',\n    description: 'This helps us recommend pumps with the right support resources',\n    required: false,\n    options: [\n      {\n        value: 'hands_on',\n        label: 'ü§ù In-person training with a specialist',\n        weight: { clinic_support: 9, training_programs: 8 },\n      },\n      {\n        value: 'self_directed',\n        label: 'üìö Self-directed with good written materials/videos',\n        weight: { documentation: 8, video_resources: 7 },\n      },\n      {\n        value: 'phone_support',\n        label: 'üìû Phone support when I have questions',\n        weight: { phone_support: 9, availability: 8 },\n      },\n      {\n        value: 'trial_error',\n        label: 'üîß Figure it out myself through trial and error',\n        weight: { simple_design: 8, intuitive: 9 },\n      },\n    ],\n    skipOption: { label: 'Depends on the complexity', value: 'skip' },\n    timeEstimate: 30,\n    impactWeight: 5,\n  },\n\n  // REFINEMENT PHASE QUESTIONS (Optional, based on core answers)\n\n  // 9. Insurance Flexibility (Conditional - only if budget_reality != 'not_concerned')\n  {\n    id: 'insurance_flexibility',\n    type: 'scale',\n    phase: 'refinement',\n    category: 'cost',\n    title: 'How flexible is your insurance with pump choices?',\n    description: 'Only appears if cost is a concern',\n    required: false,\n    options: [\n      {\n        value: 'very_limited',\n        label: '1-2: Very limited - specific brands only',\n        weight: { insurance_preferred: 10, standard_options: 9 },\n      },\n      {\n        value: 'somewhat_limited',\n        label: '3-4: Somewhat limited options',\n        weight: { insurance_friendly: 8, common_brands: 7 },\n      },\n      {\n        value: 'flexible',\n        label: '5: Very flexible - most pumps covered',\n        weight: { premium_options: 6, latest_models: 5 },\n      },\n    ],\n    skipOption: { label: \"I don't know my coverage details\", value: 'skip' },\n    timeEstimate: 30,\n    impactWeight: 7,\n  },\n\n  // 10. Advanced Feature Interest (Conditional - only if tech_comfort = 'high')\n  {\n    id: 'advanced_features',\n    type: 'checkbox',\n    phase: 'refinement',\n    category: 'features',\n    title: 'Which advanced features interest you most?',\n    description: 'Select all that appeal to you',\n    required: false,\n    options: [\n      {\n        value: 'smartphone_control',\n        label: 'üì± Full smartphone app control',\n        weight: { app_control: 9, connectivity: 8 },\n      },\n      {\n        value: 'data_analysis',\n        label: 'üìä Detailed data analysis and trends',\n        weight: { analytics: 9, reporting: 8 },\n      },\n      {\n        value: 'integration',\n        label: 'üîó Integration with other health apps',\n        weight: { integration: 10, ecosystem: 8 },\n      },\n      {\n        value: 'customization',\n        label: '‚öôÔ∏è Extensive customization options',\n        weight: { customization: 10, advanced_settings: 9 },\n      },\n    ],\n    skipOption: { label: 'None of these matter to me', value: 'skip' },\n    timeEstimate: 45,\n    impactWeight: 4,\n  },\n\n  // ADVANCED PHASE QUESTIONS (Optional deep dive)\n\n  // 11. Meal Management Style (Advanced)\n  {\n    id: 'meal_management',\n    type: 'multiple_choice',\n    phase: 'advanced',\n    category: 'control',\n    title: 'How do you typically handle meal dosing?',\n    required: false,\n    options: [\n      {\n        value: 'precise_counting',\n        label: 'üî¢ I count carbs precisely and like detailed control',\n        weight: { precision_dosing: 9, carb_ratios: 8 },\n      },\n      {\n        value: 'estimated_dosing',\n        label: 'ü§∑ I prefer simple/estimated dosing',\n        weight: { simple_dosing: 8, preset_meals: 7 },\n      },\n      {\n        value: 'automation',\n        label: 'ü§ñ I want automation to help with meal decisions',\n        weight: { meal_automation: 9, ai_assistance: 8 },\n      },\n    ],\n    skipOption: { label: 'My meal patterns are too irregular', value: 'skip' },\n    timeEstimate: 30,\n    impactWeight: 3,\n  },\n\n  // 12. Alert Preferences (Advanced)\n  {\n    id: 'alert_preferences',\n    type: 'multiple_choice',\n    phase: 'advanced',\n    category: 'control',\n    title: 'During a busy workday, pump alerts should:',\n    required: false,\n    options: [\n      {\n        value: 'urgent_only',\n        label: 'üö® Only for urgent situations',\n        weight: { minimal_alerts: 9, urgent_only: 8 },\n      },\n      {\n        value: 'helpful_reminders',\n        label: 'üí° Include helpful reminders',\n        weight: { moderate_alerts: 7, reminders: 8 },\n      },\n      {\n        value: 'comprehensive',\n        label: 'üìã Comprehensive feedback and data',\n        weight: { detailed_alerts: 8, full_feedback: 9 },\n      },\n      {\n        value: 'customizable',\n        label: '‚öôÔ∏è Customizable by time/situation',\n        weight: { customizable_alerts: 10, smart_alerts: 9 },\n      },\n    ],\n    skipOption: { label: \"I haven't thought about this\", value: 'skip' },\n    timeEstimate: 30,\n    impactWeight: 3,\n  },\n];\n\n// Express Mode - Ultra Quick (3 questions, 2 minutes)\nexport const EXPRESS_QUESTIONS: BalancedQuestion[] = [\n  BALANCED_PUMP_QUESTIONS[0], // Primary priority\n  BALANCED_PUMP_QUESTIONS[1], // Form factor\n  BALANCED_PUMP_QUESTIONS[4], // Control philosophy\n];\n\n// Question flow logic\nexport const QUESTION_FLOW = {\n  core: BALANCED_PUMP_QUESTIONS.filter(q => q.phase === 'core'),\n  refinement: BALANCED_PUMP_QUESTIONS.filter(q => q.phase === 'refinement'),\n  advanced: BALANCED_PUMP_QUESTIONS.filter(q => q.phase === 'advanced'),\n  express: EXPRESS_QUESTIONS,\n};\n\n// Conditional logic for showing refinement questions\nexport const REFINEMENT_CONDITIONS = {\n  insurance_flexibility: (answers: Record<string, string>) =>\n    answers.budget_reality && answers.budget_reality !== 'not_concerned',\n\n  advanced_features: (answers: Record<string, string>) => answers.tech_comfort === 'high',\n};\n\n// Scoring weights for pump recommendations\nexport const PUMP_SCORING_WEIGHTS = {\n  // Omnipod 5\n  omnipod_5: {\n    tubeless: 10,\n    automation: 9,\n    waterproof: 10,\n    discretion: 7,\n    simplicity: 8,\n    cost: 6,\n  },\n\n  // Tandem t:slim X2\n  tandem_tslim: {\n    traditional: 9,\n    features: 10,\n    customization: 9,\n    integration: 10,\n    precision_dosing: 9,\n    cost: 7,\n  },\n\n  // Medtronic 780G\n  medtronic_780g: {\n    automation: 10,\n    traditional: 8,\n    insurance_friendly: 9,\n    clinic_support: 10,\n    reliability: 9,\n    cost: 8,\n  },\n};\n\nexport default BALANCED_PUMP_QUESTIONS;\n","/**\n * Pump Feature Matching Engine\n * Real personalization using 23-dimension pump data\n */\n\nimport { PUMP_DATABASE, type PumpData } from '../data/pumpDataSimple';\nimport { type BalancedQuestion } from '../data/balancedPumpQuestions';\n\n// Feature dimensions with weights - mapped to actual pump data dimensions\nexport interface FeatureDimension {\n  key: string; // Key in dimensions object\n  weight: number;\n  type: 'string';\n}\n\n// All pump dimensions mapped to actual data structure\nexport const PUMP_DIMENSIONS: FeatureDimension[] = [\n  { key: 'tubingStyle', weight: 10, type: 'string' },\n  { key: 'algorithm', weight: 9, type: 'string' },\n  { key: 'cgmCompatibility', weight: 8, type: 'string' },\n  { key: 'phoneControl', weight: 7, type: 'string' },\n  { key: 'waterResistance', weight: 8, type: 'string' },\n  { key: 'battery', weight: 5, type: 'string' },\n  { key: 'reservoirCapacity', weight: 4, type: 'string' },\n  { key: 'bolusWorkflow', weight: 7, type: 'string' },\n  { key: 'targetAdjustability', weight: 6, type: 'string' },\n  { key: 'exerciseMode', weight: 6, type: 'string' },\n  { key: 'alertsCustomization', weight: 6, type: 'string' },\n  { key: 'dataSharing', weight: 5, type: 'string' },\n  { key: 'userInterface', weight: 7, type: 'string' },\n  { key: 'wearability', weight: 7, type: 'string' },\n  { key: 'ecosystem', weight: 6, type: 'string' },\n  { key: 'clinicSupport', weight: 5, type: 'string' },\n  { key: 'caregiverFeatures', weight: 4, type: 'string' },\n  { key: 'adhesiveTolerance', weight: 6, type: 'string' },\n  { key: 'travelLogistics', weight: 4, type: 'string' },\n  { key: 'occlusionHandling', weight: 5, type: 'string' },\n];\n\n// Map user answers to pump features\nexport interface AnswerToFeatureMapping {\n  questionId: string;\n  answerValue: string;\n  featurePreferences: {\n    dimension: string; // Key in pump dimensions\n    desiredValue: string; // What we're looking for\n    weight: number;\n  }[];\n}\n\n// Comprehensive answer-to-feature mappings using actual pump data\nexport const ANSWER_MAPPINGS: AnswerToFeatureMapping[] = [\n  // Primary Priority mappings\n  {\n    questionId: 'primary_priority',\n    answerValue: 'simplicity',\n    featurePreferences: [\n      { dimension: 'userInterface', desiredValue: 'Touchscreen', weight: 10 }, // Favors t:slim X2\n      { dimension: 'algorithm', desiredValue: 'simplicity', weight: 9 }, // Favors Beta Bionics iLet\n      { dimension: 'userInterface', desiredValue: 'Minimalist', weight: 8 }, // Favors Beta Bionics iLet\n    ],\n  },\n  {\n    questionId: 'primary_priority',\n    answerValue: 'technology',\n    featurePreferences: [\n      { dimension: 'algorithm', desiredValue: 'Control-IQ', weight: 9 }, // Favor t:slim X2 and Mobi\n      { dimension: 'phoneControl', desiredValue: 'App', weight: 10 },\n      { dimension: 'userInterface', desiredValue: 'Phone', weight: 8 },\n      { dimension: 'dataSharing', desiredValue: 'Share', weight: 7 },\n    ],\n  },\n  {\n    questionId: 'primary_priority',\n    answerValue: 'cost',\n    featurePreferences: [\n      { dimension: 'battery', desiredValue: 'AA Battery', weight: 8 },\n      { dimension: 'reservoirCapacity', desiredValue: '300 units', weight: 7 },\n      { dimension: 'clinicSupport', desiredValue: 'Large installed base', weight: 6 },\n    ],\n  },\n  {\n    questionId: 'primary_priority',\n    answerValue: 'lifestyle',\n    featurePreferences: [\n      { dimension: 'waterResistance', desiredValue: 'Water-resistant', weight: 10 },\n      { dimension: 'tubingStyle', desiredValue: 'Tubeless pod', weight: 9 },\n      { dimension: 'wearability', desiredValue: 'Discreet', weight: 8 },\n    ],\n  },\n\n  // Form Factor mappings\n  {\n    questionId: 'form_factor',\n    answerValue: 'tubeless',\n    featurePreferences: [\n      { dimension: 'tubingStyle', desiredValue: 'Tubeless pod', weight: 10 },\n      { dimension: 'waterResistance', desiredValue: 'Water-resistant', weight: 8 },\n      { dimension: 'wearability', desiredValue: 'Discreet', weight: 7 },\n    ],\n  },\n  {\n    questionId: 'form_factor',\n    answerValue: 'tubing',\n    featurePreferences: [\n      { dimension: 'tubingStyle', desiredValue: 'Tubed pump', weight: 10 },\n      { dimension: 'reservoirCapacity', desiredValue: '300 units', weight: 7 },\n      { dimension: 'battery', desiredValue: 'AA Battery', weight: 6 },\n    ],\n  },\n\n  // Tech Comfort mappings\n  {\n    questionId: 'tech_comfort',\n    answerValue: 'low',\n    featurePreferences: [\n      { dimension: 'userInterface', desiredValue: 'Buttons', weight: 9 },\n      { dimension: 'algorithm', desiredValue: 'Basic', weight: 8 },\n      { dimension: 'clinicSupport', desiredValue: 'Large installed base', weight: 8 },\n    ],\n  },\n  {\n    questionId: 'tech_comfort',\n    answerValue: 'high',\n    featurePreferences: [\n      { dimension: 'phoneControl', desiredValue: 'App', weight: 10 },\n      { dimension: 'userInterface', desiredValue: 'Phone', weight: 9 },\n      { dimension: 'algorithm', desiredValue: 'Control-IQ', weight: 8 },\n      { dimension: 'dataSharing', desiredValue: 'Share', weight: 7 },\n    ],\n  },\n\n  // Control Philosophy mappings\n  {\n    questionId: 'control_philosophy',\n    answerValue: 'full_auto',\n    featurePreferences: [\n      { dimension: 'algorithm', desiredValue: 'auto-corr', weight: 10 }, // Matches multiple pumps\n      { dimension: 'cgmCompatibility', desiredValue: 'Dexcom', weight: 8 },\n      { dimension: 'phoneControl', desiredValue: 'App', weight: 7 },\n    ],\n  },\n  {\n    questionId: 'control_philosophy',\n    answerValue: 'wake_me',\n    featurePreferences: [\n      { dimension: 'alertsCustomization', desiredValue: 'On-pump options', weight: 10 },\n      { dimension: 'bolusWorkflow', desiredValue: 'Carb + auto-corr support', weight: 8 },\n      { dimension: 'userInterface', desiredValue: 'Buttons', weight: 7 },\n    ],\n  },\n\n  // Activity Level mappings\n  {\n    questionId: 'activity_level',\n    answerValue: 'very_active',\n    featurePreferences: [\n      { dimension: 'waterResistance', desiredValue: 'Water-resistant', weight: 10 },\n      { dimension: 'exerciseMode', desiredValue: 'Activity temp target', weight: 9 },\n      { dimension: 'tubingStyle', desiredValue: 'Tubeless pod', weight: 8 },\n      { dimension: 'wearability', desiredValue: 'Discreet', weight: 7 },\n    ],\n  },\n\n  // Discretion mappings\n  {\n    questionId: 'discretion_needs',\n    answerValue: 'very_important',\n    featurePreferences: [\n      { dimension: 'tubingStyle', desiredValue: 'Tubeless pod', weight: 10 },\n      { dimension: 'wearability', desiredValue: 'Discreet', weight: 9 },\n      { dimension: 'phoneControl', desiredValue: 'Full app control', weight: 7 },\n    ],\n  },\n\n  // Budget mappings\n  {\n    questionId: 'budget_reality',\n    answerValue: 'upfront',\n    featurePreferences: [\n      { dimension: 'battery', desiredValue: 'AA Battery', weight: 8 },\n      { dimension: 'clinicSupport', desiredValue: 'Large installed base', weight: 7 },\n    ],\n  },\n  {\n    questionId: 'budget_reality',\n    answerValue: 'ongoing',\n    featurePreferences: [\n      { dimension: 'reservoirCapacity', desiredValue: '300 units', weight: 8 },\n      { dimension: 'adhesiveTolerance', desiredValue: 'Set + separate CGM', weight: 6 },\n    ],\n  },\n\n  // Add mappings that specifically favor other pumps\n  {\n    questionId: 'primary_priority',\n    answerValue: 'lifestyle',\n    featurePreferences: [\n      { dimension: 'tubingStyle', desiredValue: 'Tubeless pod', weight: 10 }, // Omnipod 5\n      { dimension: 'phoneControl', desiredValue: 'Phone or controller', weight: 8 }, // Omnipod 5\n      { dimension: 'userInterface', desiredValue: 'Phone or controller', weight: 7 }, // Omnipod 5\n    ],\n  },\n\n  // Balance cost preferences to help other pumps\n  {\n    questionId: 'primary_priority',\n    answerValue: 'cost',\n    featurePreferences: [\n      { dimension: 'battery', desiredValue: 'Rechargeable', weight: 9 }, // t:slim X2, Mobi, Beta Bionics, Twiist\n      { dimension: 'clinicSupport', desiredValue: 'support', weight: 6 }, // All pumps match partially\n      { dimension: 'tubingStyle', desiredValue: 'compact', weight: 7 }, // Twiist advantage\n    ],\n  },\n\n  {\n    questionId: 'form_factor',\n    answerValue: 'either',\n    featurePreferences: [\n      { dimension: 'userInterface', desiredValue: 'Phone-first', weight: 8 }, // Tandem Mobi\n      { dimension: 'tubingStyle', desiredValue: 'Very short', weight: 7 }, // Tandem Mobi\n      { dimension: 'userInterface', desiredValue: 'Phone-forward', weight: 6 }, // Twiist\n    ],\n  },\n\n  {\n    questionId: 'tech_comfort',\n    answerValue: 'medium',\n    featurePreferences: [\n      { dimension: 'userInterface', desiredValue: 'Touchscreen', weight: 9 }, // t:slim X2\n      { dimension: 'algorithm', desiredValue: 'Control-IQ', weight: 8 }, // t:slim X2\n      { dimension: 'phoneControl', desiredValue: 'Mobile bolus', weight: 7 }, // t:slim X2\n    ],\n  },\n\n  {\n    questionId: 'control_philosophy',\n    answerValue: 'alert_auto',\n    featurePreferences: [\n      { dimension: 'algorithm', desiredValue: 'adaptive', weight: 10 }, // Twiist\n      { dimension: 'userInterface', desiredValue: 'Phone-forward', weight: 9 }, // Twiist\n      { dimension: 'phoneControl', desiredValue: 'Phone-centric', weight: 8 }, // Twiist\n    ],\n  },\n\n  {\n    questionId: 'control_philosophy',\n    answerValue: 'alert_only',\n    featurePreferences: [\n      { dimension: 'algorithm', desiredValue: 'Meal-announce', weight: 10 }, // Beta Bionics\n      { dimension: 'userInterface', desiredValue: 'Minimalist', weight: 9 }, // Beta Bionics\n      { dimension: 'tubingStyle', desiredValue: 'simple sets', weight: 8 }, // Beta Bionics\n    ],\n  },\n\n  // Add more specific mappings for Beta Bionics & Twiist\n  {\n    questionId: 'primary_priority',\n    answerValue: 'simplicity',\n    featurePreferences: [\n      { dimension: 'algorithm', desiredValue: 'Meal-announce', weight: 10 }, // Beta Bionics wins\n      { dimension: 'userInterface', desiredValue: 'Minimalist', weight: 9 }, // Beta Bionics wins\n      { dimension: 'tubingStyle', desiredValue: 'simple', weight: 7 }, // Beta Bionics advantage\n    ],\n  },\n\n  {\n    questionId: 'tech_comfort',\n    answerValue: 'medium',\n    featurePreferences: [\n      { dimension: 'userInterface', desiredValue: 'Phone-forward', weight: 10 }, // Twiist wins\n      { dimension: 'algorithm', desiredValue: 'adaptive', weight: 9 }, // Twiist wins\n      { dimension: 'battery', desiredValue: 'Rechargeable', weight: 8 }, // Multiple winners\n    ],\n  },\n\n  // Reduce Medtronic's unfair advantage by making tech_comfort:low less biased\n  {\n    questionId: 'tech_comfort',\n    answerValue: 'low',\n    featurePreferences: [\n      { dimension: 'userInterface', desiredValue: 'simple', weight: 8 }, // Broader match\n      { dimension: 'algorithm', desiredValue: 'simplicity', weight: 9 }, // Beta Bionics advantage\n      { dimension: 'clinicSupport', desiredValue: 'support', weight: 6 }, // All pumps match\n    ],\n  },\n\n  // Add activity mappings that favor different pumps\n  {\n    questionId: 'activity_level',\n    answerValue: 'moderately_active',\n    featurePreferences: [\n      { dimension: 'battery', desiredValue: 'Rechargeable', weight: 8 }, // Multiple winners\n      { dimension: 'tubingStyle', desiredValue: 'short', weight: 7 }, // Tandem Mobi\n      { dimension: 'userInterface', desiredValue: 'Phone', weight: 6 }, // Multiple winners\n    ],\n  },\n\n  {\n    questionId: 'discretion_needs',\n    answerValue: 'somewhat_important',\n    featurePreferences: [\n      { dimension: 'tubingStyle', desiredValue: 'compact', weight: 9 }, // Twiist\n      { dimension: 'userInterface', desiredValue: 'Phone-forward', weight: 8 }, // Twiist\n      { dimension: 'battery', desiredValue: 'new platform', weight: 6 }, // Twiist\n    ],\n  },\n];\n\nexport class PumpFeatureEngine {\n  private userProfile: Map<string, { value: string; weight: number }[]> = new Map();\n\n  /**\n   * Process user answers and build feature preference profile\n   */\n  processAnswers(answers: Record<string, string | string[]>): void {\n    this.userProfile.clear();\n\n    for (const [questionId, answer] of Object.entries(answers)) {\n      if (!answer || answer === 'skip') continue;\n\n      // Handle single or multiple answers\n      const answerValues = Array.isArray(answer) ? answer : [answer];\n\n      for (const answerValue of answerValues) {\n        const mappings = ANSWER_MAPPINGS.filter(\n          m => m.questionId === questionId && m.answerValue === answerValue\n        );\n\n        for (const mapping of mappings) {\n          for (const pref of mapping.featurePreferences) {\n            if (!this.userProfile.has(pref.dimension)) {\n              this.userProfile.set(pref.dimension, []);\n            }\n            this.userProfile.get(pref.dimension)!.push({\n              value: pref.desiredValue,\n              weight: pref.weight,\n            });\n          }\n        }\n      }\n    }\n  }\n\n  // calculatePumpScores method removed - using pure AI recommendations only\n\n  /**\n   * Generate personalized explanation for pump recommendation\n   */\n  generateExplanation(pump: PumpData, matchDetails: any, answers: Record<string, string>): string {\n    const explanations: string[] = [];\n\n    // Start with pump name and key feature\n    explanations.push(`The ${pump.name} stands out as your best match.`);\n\n    // Add top matching features\n    const topMatches = Object.entries(matchDetails)\n      .filter(([_, details]: [string, any]) => details.percentage >= 60)\n      .sort((a: any, b: any) => b[1].percentage - a[1].percentage)\n      .slice(0, 3);\n\n    if (topMatches.length > 0) {\n      explanations.push(`Key strengths that match your needs:`);\n      for (const [dimension, details] of topMatches) {\n        const featureExplanation = this.explainFeature(pump, dimension, details);\n        if (featureExplanation) {\n          explanations.push(`‚Ä¢ ${featureExplanation}`);\n        }\n      }\n    }\n\n    // Add specific answer-based insights\n    if (\n      answers.primary_priority === 'simplicity' &&\n      pump.dimensions.userInterface?.includes('Buttons')\n    ) {\n      explanations.push(\n        `Perfect for your preference for simplicity with its ${pump.dimensions.userInterface}.`\n      );\n    }\n\n    if (answers.form_factor === 'tubeless' && pump.dimensions.tubingStyle?.includes('Tubeless')) {\n      explanations.push(`The tubeless design gives you the freedom and discretion you wanted.`);\n    }\n\n    if (\n      answers.control_philosophy === 'full_auto' &&\n      pump.dimensions.algorithm?.includes('SmartGuard')\n    ) {\n      explanations.push(\n        `Its ${pump.dimensions.algorithm} provides the automation you're looking for.`\n      );\n    }\n\n    // Add practical considerations\n    if (pump.dimensions.waterResistance) {\n      explanations.push(`${pump.dimensions.waterResistance} for active lifestyles.`);\n    }\n\n    return explanations.join(' ');\n  }\n\n  /**\n   * Explain a specific feature match\n   */\n  private explainFeature(pump: PumpData, dimension: string, details: any): string | null {\n    const value = pump.dimensions[dimension];\n\n    switch (dimension) {\n      case 'tubingStyle':\n        return value?.includes('Tubeless')\n          ? 'Tubeless pod design for maximum freedom'\n          : `${value} design`;\n      case 'algorithm':\n        return `${value} for optimal glucose control`;\n      case 'waterResistance':\n        return value ? `${value} design` : null;\n      case 'phoneControl':\n        return value?.includes('Full')\n          ? 'Complete smartphone control via app'\n          : `${value} capability`;\n      case 'cgmCompatibility':\n        return value ? `Compatible with ${value} for automated adjustments` : null;\n      case 'userInterface':\n        return `${value} interface for easy operation`;\n      case 'reservoirCapacity':\n        return `${value} insulin capacity`;\n      case 'battery':\n        return `${value} for convenient power management`;\n      case 'wearability':\n        return `${value} design for comfort`;\n      case 'exerciseMode':\n        return value ? `${value} for active users` : null;\n      default:\n        return value ? `${dimension}: ${value}` : null;\n    }\n  }\n\n  /**\n   * Get pump recommendations with full details - DEPRECATED\n   * Use pumpDriveAI.service.ts for AI-based recommendations instead\n   */\n  getRecommendations(answers: Record<string, string | string[]>): {\n    topChoice: { pump: PumpData; score: number; explanation: string };\n    alternatives: Array<{ pump: PumpData; score: number; explanation: string }>;\n    decisionFactors: string[];\n  } {\n    throw new Error('Feature-based scoring removed. Use pumpDriveAI.service.ts for AI recommendations.');\n  }\n\n  /**\n   * Extract key decision factors from user answers\n   */\n  private extractDecisionFactors(answers: Record<string, string | string[]>): string[] {\n    const factors: string[] = [];\n\n    if (answers.primary_priority) {\n      const priorityMap: Record<string, string> = {\n        simplicity: 'Ease of use is your top priority',\n        technology: 'Advanced features matter most to you',\n        cost: 'Budget considerations are important',\n        lifestyle: 'Active lifestyle compatibility is crucial',\n      };\n      factors.push(priorityMap[answers.primary_priority as string] || '');\n    }\n\n    if (answers.form_factor === 'tubeless') {\n      factors.push('You prefer tubeless pod design');\n    } else if (answers.form_factor === 'tubing') {\n      factors.push('You prefer traditional tubed pumps');\n    }\n\n    if (answers.control_philosophy === 'full_auto') {\n      factors.push('You want maximum automation');\n    } else if (answers.control_philosophy === 'wake_me') {\n      factors.push('You prefer manual control with alerts');\n    }\n\n    return factors.filter(f => f.length > 0);\n  }\n}\n\nexport const pumpFeatureEngine = new PumpFeatureEngine();\n","import { openAIService } from './openai.service';\nimport { PUMP_DATABASE } from '../data/pumpDataComplete';\nimport type { PumpDetails } from '../data/pumpDataComplete';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\ninterface CategoryResponse {\n  category: string;\n  mainTranscript: string;\n  followUpTranscript: string;\n  checkedQuestions: string[];\n  timestamp: number;\n}\n\ninterface PumpRecommendation {\n  topChoice: {\n    name: string;\n    score: number;\n    reasons: string[];\n  };\n  alternatives: Array<{\n    name: string;\n    score: number;\n    reasons: string[];\n  }>;\n  keyFactors: string[];\n  personalizedInsights: string;\n}\n\nclass PumpDriveAIService {\n  async processUserResponses(\n    allResponses: Record<string, CategoryResponse>\n  ): Promise<PumpRecommendation> {\n    // Create a comprehensive summary of user responses\n    const userProfile = this.createUserProfile(allResponses);\n\n    // Extract preference keywords for better AI understanding\n    const preferenceAnalysis = this.analyzePreferences(allResponses);\n\n    // Create comprehensive pump database information for AI\n    const pumpDetails = this.formatPumpDatabase();\n\n    // Create the enhanced prompt for Claude 3.5\n    const prompt = `You are an expert diabetes educator and insulin pump specialist. Based on the following patient responses, provide personalized insulin pump recommendations using the complete 23-dimension pump database extracted from PDF documentation.\n\nCRITICAL ANALYSIS INSTRUCTIONS:\n- DO NOT use any pre-calculated scores or ranking biases\n- Analyze the patient's responses objectively without any pre-programmed scoring systems\n- Base recommendations purely on objective analysis of patient needs against pump specifications\n\nANALYSIS PRIORITY HIERARCHY:\n1. **EXPLICIT FEATURE SELECTIONS**: Features the patient specifically selected carry the highest weight\n   - If patient selected \"Apple Watch bolusing\" ‚Üí ONLY Twiist supports this (major factor)\n   - If patient selected \"2 ounces weight\" ‚Üí ONLY Twiist offers this (major factor)\n   - If patient selected \"swap batteries\" ‚Üí Favor pumps with replaceable batteries\n2. **CLARIFYING RESPONSES**: Direct answers to conflict questions are second priority\n3. **PERSONAL STORY KEYWORDS**: Specific medical/lifestyle needs mentioned in free text\n4. **SLIDER PREFERENCES**: General lifestyle ratings are lower priority than explicit selections\n\nCRITICAL DECISION RULES:\n\nWEIGHT PRIORITIZATION:\n- If user mentions \"lightest\", \"lightweight\", \"minimal weight\", or weight as a priority:\n  ‚Üí Twiist (2 oz - LIGHTEST) > Tandem Mobi (small) > Omnipod 5 (pod) > others\n- Twiist at 2 oz is BY FAR the lightest pump available\n\nTARGET GLUCOSE RANKINGS:\n- LOWEST available targets:\n  1. Twiist: 87 mg/dL (LOWEST standard target)\n  2. Beta Bionics iLet: 60 mg/dL (only in special \"lower than usual\" mode)\n  3. Medtronic 780G: 100 mg/dL (fixed aggressive target)\n- If user wants \"lowest target glucose\" ‚Üí strongly consider Twiist first\n\nCONTROL TIGHTNESS/AGGRESSIVENESS:\n- \"Tightest control\" or \"most aggressive\" means:\n  1. Medtronic 780G: 100% correction (vs 60% for others) - MOST AGGRESSIVE\n  2. Twiist: Aggressive microbolus-like basal modulations\n  3. Others: Standard 60% correction approach\n- For \"best control\" consider BOTH algorithm aggressiveness AND target flexibility\n\nTECHNOLOGY FEATURES:\n- \"Tech-savvy\" or \"modern tech\" priorities:\n  1. Twiist: Apple Watch bolusing, emoji dosing, phone-first\n  2. Tandem Mobi: Wireless charging, iPhone control\n  3. t:slim X2: Touchscreen, multiple CGM options\n\nCRITICAL PUMP FACTS:\n- Apple Watch bolusing: ONLY Twiist supports this feature\n- Lightest weight (2 oz): ONLY Twiist offers this\n- Most aggressive algorithm: Medtronic 780G (100% correction)\n- Lowest target glucose: Twiist (87 mg/dL standard target)\n\nCONFLICT RESOLUTION:\n- When patient selections conflict with slider ratings, prioritize explicit selections\n- When multiple pumps match, use clarifying responses to break ties\n- Always explain why selected features were/weren't prioritized in recommendation\n\nPATIENT PROFILE:\n${userProfile}\n\nPREFERENCE ANALYSIS:\n${preferenceAnalysis}\n\nCOMPLETE INSULIN PUMP DATABASE (ALL 23 DIMENSIONS):\n${pumpDetails}\n\nANALYSIS INSTRUCTIONS:\n1. Evaluate all pumps objectively using ALL 23 dimensions provided in the database\n2. Consider ALL pump specifications: battery type, phone control, tubing, algorithm, CGM compatibility, target adjustability, exercise mode, bolus workflow, reservoir capacity, adhesive tolerance, water resistance, alerts customization, user interface, data sharing, clinic support, travel logistics, caregiver features, discretion/wearability, ecosystem integration, reliability/occlusion handling, cost/insurance, and software updates\n3. Match patient preferences against comprehensive pump specifications\n4. Prioritize features that matter most to this specific patient's lifestyle and medical needs\n5. Explain reasoning based on how ALL relevant pump dimensions align with patient requirements\n6. Provide balanced assessment considering the complete feature set of each pump\n\nPlease analyze the patient's needs across all 23 pump dimensions and provide:\n1. Top recommended pump with detailed reasoning based on patient's specific words and comprehensive pump specifications\n2. 2-3 alternative options ranked by suitability across all dimensions\n3. Key factors that influenced your recommendation (include patient quotes and specific pump dimensions)\n4. Personalized insights explaining how the recommended pump's complete feature set matches this patient's situation\n\nFormat your response as JSON with the following structure:\n{\n  \"topChoice\": {\n    \"name\": \"exact pump name from database\",\n    \"score\": 0-100,\n    \"reasons\": [\"specific reason based on patient words\", \"technical specification match\", \"lifestyle fit\"]\n  },\n  \"alternatives\": [\n    {\n      \"name\": \"exact pump name from database\",\n      \"score\": 0-100,\n      \"reasons\": [\"why this is second choice\", \"what it offers\"]\n    }\n  ],\n  \"keyFactors\": [\"patient's stated priority 1\", \"patient's stated priority 2\", \"medical consideration\"],\n  \"personalizedInsights\": \"Detailed explanation of why the top choice specifically matches what the patient said they wanted, including quotes from their responses where relevant\"\n}`;\n\n    try {\n      // Use Claude 3.5 Sonnet for processing\n      const response = await openAIService.processText(prompt, { model: 'gpt-4', temperature: 0.7, maxTokens: 2000 });\n\n      // Parse the JSON response\n      const recommendation = this.parseClaudeResponse(response);\n\n      // Save the recommendation\n      this.saveRecommendation(recommendation);\n\n      return recommendation;\n    } catch (error) {\n      logError('pumpDriveAI', 'Error message', {});\n      throw error;\n    }\n  }\n\n  private createUserProfile(responses: Record<string, CategoryResponse>): string {\n    let profile = '';\n\n    // Map category IDs to readable names\n    const categoryNames: Record<string, string> = {\n      cost: 'BUDGET & INSURANCE',\n      lifestyle: 'LIFESTYLE',\n      algorithm: 'CONTROL PREFERENCES',\n      easeToStart: 'GETTING STARTED',\n      complexity: 'DAILY USE & COMPLEXITY',\n      support: 'SUPPORT SYSTEM',\n    };\n\n    // Process each category\n    for (const [category, data] of Object.entries(responses)) {\n      const displayName = categoryNames[category] || category.toUpperCase();\n      profile += `\\n${displayName} CATEGORY:\\n`;\n      profile += `Main Response: ${data.mainTranscript}\\n`;\n      if (data.followUpTranscript) {\n        profile += `Additional Comments: ${data.followUpTranscript}\\n`;\n      }\n      profile += `Topics Discussed: ${data.checkedQuestions.join(', ')}\\n`;\n      profile += '\\n---\\n';\n    }\n\n    return profile;\n  }\n\n  private analyzePreferences(responses: Record<string, CategoryResponse>): string {\n    let analysis = 'PATIENT PREFERENCE SUMMARY:\\n';\n\n    // Simply provide the user's responses without biased keyword detection\n    // Let the AI analyze the content naturally without pre-processing bias\n\n    const categories = Object.keys(responses);\n    analysis += `Patient provided responses across ${categories.length} categories:\\n`;\n\n    categories.forEach(category => {\n      const response = responses[category];\n      if (response.mainTranscript && response.mainTranscript.trim()) {\n        analysis += `- ${category.toUpperCase()}: Has detailed response\\n`;\n      }\n    });\n\n    analysis += '\\nNote: All user preferences will be considered equally by AI analysis.\\n';\n\n    return analysis;\n  }\n\n  private formatPumpDatabase(): string {\n    let formattedDB = '';\n\n    PUMP_DATABASE.forEach((pump, index) => {\n      formattedDB += `\\n${index + 1}. ${pump.name} (${pump.manufacturer})\\n`;\n      formattedDB += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\\n`;\n\n      // DIMENSION 1: Battery & Power\n      formattedDB += `   BATTERY: ${pump.dimensions.battery?.type || pump.dimensions.batteryInfo?.type || 'N/A'} - ${pump.dimensions.battery?.details || pump.dimensions.batteryInfo?.details || 'N/A'}\\n`;\n\n      // DIMENSION 2: Phone Control & App Features\n      formattedDB += `   PHONE CONTROL: ${pump.dimensions.phoneControl.bolusFromPhone ? 'Bolus from phone' : 'View only'} - ${pump.dimensions.phoneControl.details}\\n`;\n      if (pump.dimensions.phoneControl.appleWatch) {\n        formattedDB += `   APPLE WATCH: ${pump.dimensions.phoneControl.appleWatch ? 'Supported' : 'Not supported'}\\n`;\n      }\n\n      // DIMENSION 3: Tubing Style & Wear\n      formattedDB += `   TUBING: ${pump.dimensions.tubing.type} - ${pump.dimensions.tubing.details}\\n`;\n      if (pump.dimensions.tubing.wearOptions) {\n        formattedDB += `   WEAR OPTIONS: ${pump.dimensions.tubing.wearOptions}\\n`;\n      }\n\n      // DIMENSION 4: Algorithm & Automation\n      formattedDB += `   ALGORITHM: ${pump.dimensions.algorithm.type} (${pump.dimensions.algorithm.aggressiveness}) - ${pump.dimensions.algorithm.details}\\n`;\n      formattedDB += `   ADJUSTMENT FREQUENCY: ${pump.dimensions.algorithm.adjustmentFrequency}\\n`;\n      formattedDB += `   CARB COUNTING: ${pump.dimensions.algorithm.carbCounting ? 'Required' : 'Optional'}\\n`;\n\n      // DIMENSION 5: CGM Compatibility\n      formattedDB += `   CGM COMPATIBILITY: ${pump.dimensions.cgmCompatibility.compatible.join(', ')}\\n`;\n      if (pump.dimensions.cgmCompatibility.future && pump.dimensions.cgmCompatibility.future.length > 0) {\n        formattedDB += `   FUTURE CGM: ${pump.dimensions.cgmCompatibility.future.join(', ')}\\n`;\n      }\n\n      // DIMENSION 6: Target Adjustability\n      formattedDB += `   TARGET ADJUSTABILITY: ${pump.dimensions.targetAdjustability.customizable ? 'Customizable' : 'Limited'} - ${pump.dimensions.targetAdjustability.ranges}\\n`;\n      if (pump.dimensions.targetAdjustability.exerciseMode) {\n        formattedDB += `   EXERCISE TARGET: ${pump.dimensions.targetAdjustability.exerciseMode}\\n`;\n      }\n\n      // DIMENSION 7: Exercise Mode\n      formattedDB += `   EXERCISE MODE: ${pump.dimensions.exerciseMode.available ? pump.dimensions.exerciseMode.details : 'Not available'}\\n`;\n\n      // DIMENSION 8: Bolus Workflow\n      formattedDB += `   BOLUS WORKFLOW: ${pump.dimensions.bolusWorkflow.details}\\n`;\n\n      // DIMENSION 9: Reservoir Capacity\n      const capacity = pump.dimensions.capacity || pump.dimensions.reservoirCapacity;\n      if (capacity) {\n        formattedDB += `   RESERVOIR CAPACITY: ${capacity.units || capacity} units - ${capacity.details || capacity.changeFrequency || 'Standard'}\\n`;\n      }\n\n      // DIMENSION 10: Adhesive Tolerance\n      if (pump.dimensions.adhesive || pump.dimensions.adhesiveTolerance) {\n        const adhesive = pump.dimensions.adhesive || pump.dimensions.adhesiveTolerance;\n        formattedDB += `   ADHESIVE: ${adhesive.type || 'Standard'} - ${adhesive.details || 'Standard wear time'}\\n`;\n      }\n\n      // DIMENSION 11: Water Resistance\n      formattedDB += `   WATER RESISTANCE: ${pump.dimensions.waterResistance.rating} - ${pump.dimensions.waterResistance.details}\\n`;\n      if (pump.dimensions.waterResistance.submersible) {\n        formattedDB += `   SUBMERSIBLE: ${pump.dimensions.waterResistance.depth} for ${pump.dimensions.waterResistance.duration}\\n`;\n      }\n\n      // DIMENSION 12: Alerts Customization\n      if (pump.dimensions.alerts || pump.dimensions.alertsCustomization) {\n        const alerts = pump.dimensions.alerts || pump.dimensions.alertsCustomization;\n        formattedDB += `   ALERTS: ${alerts.customizable ? 'Customizable' : 'Standard'} - ${alerts.details}\\n`;\n      }\n\n      // DIMENSION 13: User Interface\n      formattedDB += `   INTERFACE: ${pump.dimensions.interface?.type || pump.dimensions.userInterface?.type || 'N/A'} - ${pump.dimensions.interface?.details || pump.dimensions.userInterface?.details || 'N/A'}\\n`;\n\n      // DIMENSION 14: Data Sharing\n      if (pump.dimensions.dataSharing) {\n        formattedDB += `   DATA SHARING: ${pump.dimensions.dataSharing.platform} - ${pump.dimensions.dataSharing.details}\\n`;\n        formattedDB += `   CAREGIVER SHARING: ${pump.dimensions.dataSharing.shareWithCaregivers ? 'Yes' : 'No'}\\n`;\n      }\n\n      // DIMENSION 15: Clinic Support\n      if (pump.dimensions.clinicSupport) {\n        formattedDB += `   CLINIC SUPPORT: ${pump.dimensions.clinicSupport.established} network - ${pump.dimensions.clinicSupport.details}\\n`;\n      }\n\n      // DIMENSION 16: Travel Logistics\n      if (pump.dimensions.travel || pump.dimensions.travelLogistics) {\n        const travel = pump.dimensions.travel || pump.dimensions.travelLogistics;\n        formattedDB += `   TRAVEL: ${travel.supplies || travel.details}\\n`;\n      }\n\n      // DIMENSION 17: Caregiver Features\n      if (pump.dimensions.pediatric || pump.dimensions.caregiverFeatures) {\n        const caregiver = pump.dimensions.pediatric || pump.dimensions.caregiverFeatures;\n        formattedDB += `   CAREGIVER FEATURES: Remote monitoring: ${caregiver.remoteMonitoring ? 'Yes' : 'No'}, Remote bolus: ${caregiver.remoteBolus ? 'Yes' : 'No'}\\n`;\n        formattedDB += `   CAREGIVER APP: ${caregiver.app || 'Standard'} - ${caregiver.details}\\n`;\n      }\n\n      // DIMENSION 18: Wearability & Discretion\n      if (pump.dimensions.discretion || pump.dimensions.wearability) {\n        const wear = pump.dimensions.discretion || pump.dimensions.wearability;\n        formattedDB += `   DISCRETION: ${wear.size} size, ${wear.visibility} - ${wear.details}\\n`;\n      }\n\n      // DIMENSION 19: Ecosystem Integration\n      if (pump.dimensions.ecosystem) {\n        formattedDB += `   ECOSYSTEM: Watch support: ${pump.dimensions.ecosystem.watchSupport ? 'Yes' : 'No'}, Integrations: ${pump.dimensions.ecosystem.integrations.join(', ')}\\n`;\n        formattedDB += `   ECOSYSTEM DETAILS: ${pump.dimensions.ecosystem.details}\\n`;\n      }\n\n      // DIMENSION 20: Reliability & Occlusion Handling\n      if (pump.dimensions.reliability) {\n        formattedDB += `   RELIABILITY: Occlusion detection: ${pump.dimensions.reliability.occlusionDetection ? 'Yes' : 'No'} - ${pump.dimensions.reliability.details}\\n`;\n      }\n\n      // DIMENSION 21: Cost & Insurance\n      formattedDB += `   COST: ${pump.dimensions.cost.coverage} coverage - ${pump.dimensions.cost.details}\\n`;\n      if (pump.dimensions.cost.financialAssistance) {\n        formattedDB += `   FINANCIAL ASSISTANCE: ${pump.dimensions.cost.financialAssistance}\\n`;\n      }\n\n      // DIMENSION 22: Software Updates\n      if (pump.dimensions.updates) {\n        formattedDB += `   UPDATES: ${pump.dimensions.updates.automatic ? 'Automatic' : 'Manual'} - ${pump.dimensions.updates.details}\\n`;\n      }\n\n      // Summary Information\n      formattedDB += `   PROS: ${pump.pros?.join(', ') || 'N/A'}\\n`;\n      formattedDB += `   CONS: ${pump.cons?.join(', ') || 'N/A'}\\n`;\n      formattedDB += `   IDEAL FOR: ${pump.idealFor?.join(', ') || 'N/A'}\\n`;\n      formattedDB += `\\n`;\n    });\n\n    return formattedDB;\n  }\n\n  private extractWeightInfo(pump: PumpDetails): string {\n    // Provide neutral weight/size information without bias\n    if (pump.dimensions.tubing.type === 'tubeless') {\n      return 'Tubeless design';\n    }\n\n    if (pump.dimensions.discretion.size) {\n      return `${pump.dimensions.discretion.size} size`;\n    }\n\n    return 'Standard form factor';\n  }\n\n  private parseClaudeResponse(response: string): PumpRecommendation {\n    try {\n      // Extract JSON from the response (Claude might include explanation text)\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n\n      // Fallback parsing if no clean JSON\n      return this.createFallbackRecommendation();\n    } catch (error) {\n      logError('pumpDriveAI', 'Error message', {});\n      return this.createFallbackRecommendation();\n    }\n  }\n\n  private createFallbackRecommendation(): PumpRecommendation {\n    logWarn('pumpDriveAI', 'Using fallback recommendation due to AI service failure', {});\n\n    // Provide a basic fallback recommendation\n    return {\n      topChoice: {\n        name: 'Medtronic 780G',\n        score: 85,\n        reasons: [\n          'Well-established hybrid closed-loop system',\n          'Strong clinical support and training resources',\n          'Good insurance coverage',\n          'Proven track record for glucose management'\n        ]\n      },\n      alternatives: [\n        {\n          name: 'Tandem t:slim X2',\n          score: 80,\n          reasons: [\n            'Touchscreen interface',\n            'Dexcom G6 integration',\n            'Remote software updates'\n          ]\n        },\n        {\n          name: 'Omnipod 5',\n          score: 75,\n          reasons: [\n            'Tubeless design',\n            'Phone control',\n            'Automated insulin delivery'\n          ]\n        }\n      ],\n      keyFactors: [\n        'Insulin pump therapy experience',\n        'Technology comfort level',\n        'Insurance coverage requirements'\n      ],\n      personalizedInsights: 'Due to a temporary service issue, we\\'ve provided a general recommendation. The Medtronic 780G is a solid choice for most users with its proven hybrid closed-loop technology and excellent support network. Please contact your healthcare provider to discuss the best option for your specific needs.'\n    };\n  }\n\n  private saveRecommendation(recommendation: PumpRecommendation): void {\n    // Save to session storage for results page\n    sessionStorage.setItem('pumpdrive_recommendation', JSON.stringify(recommendation));\n    sessionStorage.setItem('pumpdrive_recommendation_timestamp', Date.now().toString());\n  }\n\n  // Legacy method for compatibility with existing results page\n  async getRecommendations(formattedResponses: any[]): Promise<PumpRecommendation> {\n    // Convert the old format to new format\n    const responses: Record<string, CategoryResponse> = {};\n\n    formattedResponses.forEach((item: any) => {\n      const categoryKey = item.category;\n      const categoryData = item.responses;\n\n      // Convert to CategoryResponse format\n      responses[categoryKey] = {\n        category: categoryKey,\n        mainTranscript: categoryData.mainTranscript || '',\n        followUpTranscript: categoryData.followUpTranscript || '',\n        checkedQuestions: categoryData.checkedQuestions || [],\n        timestamp: categoryData.timestamp || Date.now(),\n      };\n    });\n\n    // Use the enhanced processing method\n    return await this.processUserResponses(responses);\n  }\n\n  async generateSummaryReport(responses: Record<string, CategoryResponse>): Promise<string> {\n    const prompt = `Create a concise summary report of this patient's insulin pump preferences based on their responses:\n\n${this.createUserProfile(responses)}\n\nProvide a 2-3 paragraph summary highlighting:\n1. Primary needs and concerns\n2. Lifestyle factors\n3. Technology comfort level\n4. Support requirements`;\n\n    try {\n      const summary = await openAIService.processText(prompt, { model: 'gpt-4', temperature: 0.7, maxTokens: 2000 });\n      return summary;\n    } catch (error) {\n      logError('pumpDriveAI', 'Error message', {});\n      return 'Summary generation failed.';\n    }\n  }\n\n  // New method for simplified flow\n  async processSimplifiedFlow(): Promise<PumpRecommendation> {\n    try {\n      // Collect all user data from session storage\n      const sliders = JSON.parse(sessionStorage.getItem('pumpDriveSliders') || '{}');\n      const features = JSON.parse(sessionStorage.getItem('selectedPumpFeatures') || '[]');\n      const freeTextData = JSON.parse(sessionStorage.getItem('pumpDriveFreeText') || '{}');\n      const clarifyingResponses = JSON.parse(sessionStorage.getItem('pumpDriveClarifyingResponses') || '{}');\n\n      // Try advanced AI processing first\n      try {\n        // Create user profile from simplified flow data\n        const userProfile = this.createSimplifiedUserProfile(sliders, features, freeTextData.currentSituation || '', clarifyingResponses);\n\n        // Format pump database\n        const pumpDetails = this.formatPumpDatabase();\n\n        // Create enhanced prompt for Claude using all 23 dimensions\n        const prompt = `You are an expert diabetes educator and insulin pump specialist. Based on the following patient assessment data, provide personalized insulin pump recommendations using the complete 23-dimension pump database extracted from PDF documentation.\n\nCRITICAL ANALYSIS INSTRUCTIONS:\n- DO NOT use any pre-calculated scores or ranking biases\n- Analyze the patient's responses objectively without any pre-programmed scoring systems\n- Base recommendations purely on objective analysis of patient needs against pump specifications\n\nANALYSIS PRIORITY HIERARCHY:\n1. **EXPLICIT FEATURE SELECTIONS**: Features the patient specifically selected carry the highest weight\n   - If patient selected \"Apple Watch bolusing\" ‚Üí ONLY Twiist supports this (major factor)\n   - If patient selected \"2 ounces weight\" ‚Üí ONLY Twiist offers this (major factor)\n   - If patient selected \"swap batteries\" ‚Üí Favor pumps with replaceable batteries\n2. **CLARIFYING RESPONSES**: Direct answers to conflict questions are second priority\n3. **PERSONAL STORY KEYWORDS**: Specific medical/lifestyle needs mentioned in free text\n4. **SLIDER PREFERENCES**: General lifestyle ratings are lower priority than explicit selections\n\nCRITICAL DECISION RULES:\n\nWEIGHT PRIORITIZATION:\n- If user mentions \"lightest\", \"lightweight\", \"minimal weight\", or weight as a priority:\n  ‚Üí Twiist (2 oz - LIGHTEST) > Tandem Mobi (small) > Omnipod 5 (pod) > others\n- Twiist at 2 oz is BY FAR the lightest pump available\n\nTARGET GLUCOSE RANKINGS:\n- LOWEST available targets:\n  1. Twiist: 87 mg/dL (LOWEST standard target)\n  2. Beta Bionics iLet: 60 mg/dL (only in special \"lower than usual\" mode)\n  3. Medtronic 780G: 100 mg/dL (fixed aggressive target)\n- If user wants \"lowest target glucose\" ‚Üí strongly consider Twiist first\n\nCONTROL TIGHTNESS/AGGRESSIVENESS:\n- \"Tightest control\" or \"most aggressive\" means:\n  1. Medtronic 780G: 100% correction (vs 60% for others) - MOST AGGRESSIVE\n  2. Twiist: Aggressive microbolus-like basal modulations\n  3. Others: Standard 60% correction approach\n- For \"best control\" consider BOTH algorithm aggressiveness AND target flexibility\n\nTECHNOLOGY FEATURES:\n- \"Tech-savvy\" or \"modern tech\" priorities:\n  1. Twiist: Apple Watch bolusing, emoji dosing, phone-first\n  2. Tandem Mobi: Wireless charging, iPhone control\n  3. t:slim X2: Touchscreen, multiple CGM options\n\nCRITICAL PUMP FACTS:\n- Apple Watch bolusing: ONLY Twiist supports this feature\n- Lightest weight (2 oz): ONLY Twiist offers this\n- Most aggressive algorithm: Medtronic 780G (100% correction)\n- Lowest target glucose: Twiist (87 mg/dL standard target)\n\nCONFLICT RESOLUTION:\n- When patient selections conflict with slider ratings, prioritize explicit selections\n- When multiple pumps match, use clarifying responses to break ties\n- Always explain why selected features were/weren't prioritized in recommendation\n\nPATIENT ASSESSMENT DATA:\n${userProfile}\n\nCOMPLETE INSULIN PUMP DATABASE (ALL 23 DIMENSIONS):\n${pumpDetails}\n\nANALYSIS INSTRUCTIONS:\n1. Evaluate all pumps objectively using ALL 23 dimensions provided in the database\n2. Consider ALL pump specifications: battery type, phone control, tubing, algorithm, CGM compatibility, target adjustability, exercise mode, bolus workflow, reservoir capacity, adhesive tolerance, water resistance, alerts customization, user interface, data sharing, clinic support, travel logistics, caregiver features, discretion/wearability, ecosystem integration, reliability/occlusion handling, cost/insurance, and software updates\n3. Match patient preferences (slider values, selected features, free text input, and clarifying responses) against comprehensive pump specifications\n4. Prioritize features that matter most to this specific patient's lifestyle and medical needs\n5. Explain reasoning based on how ALL relevant pump dimensions align with patient requirements\n6. Provide balanced assessment considering the complete feature set of each pump\n\nPlease analyze the patient's needs across all 23 pump dimensions and provide:\n1. Top recommended pump with detailed reasoning based on patient's specific preferences and comprehensive pump specifications\n2. 2-3 alternative options ranked by suitability across all dimensions\n3. Key factors that influenced your recommendation (include patient quotes and specific pump dimensions)\n4. Personalized insights explaining how the recommended pump's complete feature set matches this patient's situation\n\nFormat your response as JSON with the following structure:\n{\n  \"topChoice\": {\n    \"name\": \"exact pump name from database\",\n    \"score\": 0-100,\n    \"reasons\": [\"specific reason based on patient input\", \"feature match\", \"lifestyle fit\"]\n  },\n  \"alternatives\": [\n    {\n      \"name\": \"exact pump name from database\",\n      \"score\": 0-100,\n      \"reasons\": [\"why this is alternative choice\", \"what it offers\"]\n    }\n  ],\n  \"keyFactors\": [\"patient's stated priority 1\", \"patient's stated priority 2\", \"key consideration\"],\n  \"personalizedInsights\": \"Detailed explanation of why the top choice specifically matches what the patient indicated they wanted, including references to their slider values, selected features, and free text input where relevant\"\n}`;\n\n        // Use Claude for processing\n        const response = await openAIService.processText(prompt, { model: 'gpt-4', temperature: 0.7, maxTokens: 2000 });\n\n        // Parse the JSON response\n        const recommendation = this.parseClaudeResponse(response);\n\n        // Save the recommendation\n        this.saveRecommendation(recommendation);\n\n        return recommendation;\n      } catch (aiError) {\n        logError('pumpDriveAI', 'AI processing failed - using enhanced fallback', { error: aiError });\n\n        // Use enhanced fallback that considers user inputs\n        const fallbackRecommendation = this.createEnhancedFallbackRecommendation(\n          sliders,\n          features,\n          freeTextData,\n          clarifyingResponses\n        );\n\n        this.saveRecommendation(fallbackRecommendation);\n        return fallbackRecommendation;\n      }\n    } catch (error) {\n      logError('pumpDriveAI', 'Error processing simplified flow', { error });\n      throw error;\n    }\n  }\n\n  private createEnhancedFallbackRecommendation(\n    sliders: Record<string, number>,\n    features: Array<{ id: string; title: string; pumpId?: string }>,\n    freeTextData: any,\n    clarifyingResponses: Record<string, string>\n  ): PumpRecommendation {\n    logWarn('pumpDriveAI', 'Using enhanced fallback recommendation due to AI service failure', {\n      slidersCount: Object.keys(sliders).length,\n      featuresCount: features.length,\n      hasFreeText: !!freeTextData?.currentSituation,\n      clarifyingCount: Object.keys(clarifyingResponses).length\n    });\n\n    // Analyze user inputs to provide better fallback\n    let topRecommendation = 'Medtronic 780G';\n    let score = 85;\n    let reasons = [\n      'Well-established hybrid closed-loop system',\n      'Strong clinical support and training resources',\n      'Good insurance coverage'\n    ];\n\n    // Check for specific feature preferences\n    const selectedFeatures = features.map(f => f.title.toLowerCase());\n\n    if (selectedFeatures.some(f => f.includes('apple watch'))) {\n      topRecommendation = 'Twiist';\n      score = 90;\n      reasons = [\n        'Only pump with Apple Watch control',\n        'Lightest weight at 2 ounces',\n        'Modern smartphone integration'\n      ];\n    } else if (selectedFeatures.some(f => f.includes('tubeless') || f.includes('patch'))) {\n      topRecommendation = 'Omnipod 5';\n      score = 88;\n      reasons = [\n        'Tubeless patch design',\n        'Phone control capabilities',\n        'Automated insulin delivery'\n      ];\n    } else if (selectedFeatures.some(f => f.includes('touchscreen') || f.includes('phone'))) {\n      topRecommendation = 'Tandem t:slim X2';\n      score = 86;\n      reasons = [\n        'Color touchscreen interface',\n        'Phone app integration',\n        'Remote software updates'\n      ];\n    }\n\n    return {\n      topChoice: {\n        name: topRecommendation,\n        score,\n        reasons\n      },\n      alternatives: [\n        {\n          name: 'Medtronic 780G',\n          score: 85,\n          reasons: ['Proven hybrid closed-loop', 'Strong clinical support']\n        },\n        {\n          name: 'Tandem t:slim X2',\n          score: 80,\n          reasons: ['Touchscreen interface', 'Dexcom integration']\n        }\n      ].filter(alt => alt.name !== topRecommendation),\n      keyFactors: [\n        'Technology preferences from your selections',\n        'Insulin pump therapy experience',\n        'Lifestyle and activity level'\n      ],\n      personalizedInsights: `Based on your preferences${selectedFeatures.length > 0 ? ` (especially interest in ${selectedFeatures.slice(0, 2).join(' and ')})` : ''}, we recommend the ${topRecommendation}. While our AI service is temporarily unavailable, this recommendation considers your key requirements. Please discuss with your healthcare provider for a full personalized assessment.`\n    };\n  }\n\n  private createSimplifiedUserProfile(\n    sliders: Record<string, number>,\n    features: Array<{ id: string; title: string; pumpId?: string }>,\n    freeText: string,\n    clarifyingResponses: Record<string, string>\n  ): string {\n    let profile = 'PATIENT PUMP ASSESSMENT PROFILE:\\n\\n';\n\n    // Slider preferences\n    if (Object.keys(sliders).length > 0) {\n      profile += 'SLIDER PREFERENCES (1-10 scale):\\n';\n      Object.entries(sliders).forEach(([key, value]) => {\n        const displayName = key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1');\n        profile += `- ${displayName}: ${value}/10\\n`;\n      });\n      profile += '\\n';\n    }\n\n    // Selected features\n    if (features.length > 0) {\n      profile += 'SELECTED FEATURES (what patient specifically wants):\\n';\n      features.forEach(feature => {\n        profile += `- ${feature.title}\\n`;\n      });\n      profile += '\\n';\n    }\n\n    // Free text input\n    if (freeText.trim()) {\n      profile += 'PATIENT\\'S PERSONAL STORY:\\n';\n      profile += `\"${freeText}\"\\n\\n`;\n    }\n\n    // Clarifying responses\n    if (Object.keys(clarifyingResponses).length > 0) {\n      profile += 'CLARIFYING RESPONSES:\\n';\n      Object.entries(clarifyingResponses).forEach(([question, answer]) => {\n        profile += `Q: ${question}\\n`;\n        profile += `A: ${answer}\\n\\n`;\n      });\n    }\n\n    return profile;\n  }\n\n  /**\n   * Process a prompt with Claude AI for general pump-related queries\n   * Used for generating clarifying questions and other AI tasks\n   */\n  async processWithClaude(prompt: string, context?: string): Promise<string> {\n    try {\n      logDebug('pumpDriveAI', 'Processing prompt with Claude AI', { context });\n\n      // Use the azureAI service to process the prompt\n      const response = await openAIService.processText(prompt, { model: 'gpt-4', temperature: 0.7, maxTokens: 2000 });\n\n      logInfo('pumpDriveAI', 'Successfully processed prompt with Claude AI', {});\n      return response;\n    } catch (error) {\n      logError('pumpDriveAI', 'Failed to process prompt with Claude AI', { error });\n      throw new Error('AI processing failed. Please try again.');\n    }\n  }\n\n  /**\n   * Process follow-up questions about pump recommendations\n   * Uses complete context including original recommendation and user data\n   */\n  async processFollowUpQuestion(question: string, userContext: any): Promise<string> {\n    const maxRetries = 2;\n    const retryDelay = 1500; // 1.5 seconds\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        logDebug('pumpDriveAI', `Processing follow-up question (attempt ${attempt}/${maxRetries})`, { question });\n\n        // Format pump database with all 23 dimensions\n        const pumpDetails = this.formatPumpDatabase();\n\n        // Create comprehensive context for the follow-up question\n        const prompt = `You're a friendly diabetes educator helping someone understand their insulin pump recommendation. Answer their question in a conversational, easy-to-understand way.\n\nTHEIR RECOMMENDATION:\nTop Choice: ${userContext.currentRecommendation?.topRecommendation?.name || 'Not available'}\nScore: ${userContext.currentRecommendation?.topRecommendation?.score || 'N/A'}/100\n\nAlternative Options:\n${userContext.currentRecommendation?.alternatives?.map((alt: any, index: number) =>\n  `${index + 1}. ${alt.name} (Score: ${alt.score}/100)`\n).join('\\n') || 'None provided'}\n\nWHAT THEY TOLD US:\nPreferences: ${Object.entries(userContext.sliders || {}).map(([key, value]) => `${key}: ${value}/10`).join(', ')}\n\nFeatures they wanted: ${(userContext.features || []).map((f: any) => f.name || f.title || f.id || f).join(', ')}\n\nTheir story: \"${userContext.freeText?.currentSituation || userContext.freeText?.userStory || 'Not provided'}\"\n\nClarifying answers: ${Object.entries(userContext.clarifyingResponses || {}).map(([q, a]) => `Q: ${q} A: ${a}`).join('\\n') || 'None'}\n\nPUMP DATABASE WITH ALL FEATURES:\n${pumpDetails}\n\nTHEIR QUESTION:\n\"${question}\"\n\nHOW TO ANSWER:\n‚Ä¢ Start with a friendly response like \"Great question!\" or \"I'm happy to explain that!\"\n‚Ä¢ Use bullet points to make it easy to read\n‚Ä¢ Explain things simply - avoid medical jargon\n‚Ä¢ Use \"you\" and \"your\" (not \"patient\")\n‚Ä¢ Compare specific features when relevant\n‚Ä¢ Be honest about trade-offs\n‚Ä¢ End with encouragement\n\nRESPONSE FORMAT:\nGreat question! Here's why [explanation]:\n\n‚Ä¢ [Key point 1]\n‚Ä¢ [Key point 2]\n‚Ä¢ [Key point 3]\n\nKey differences:\n‚Ä¢ [Pump A]: [specific feature]\n‚Ä¢ [Pump B]: [specific feature]\n\nBottom line: [Simple summary of why this choice makes sense for them]\n\nKeep it friendly, clear, and helpful!`;\n\n        // Process the follow-up question with Claude\n        const response = await openAIService.processText(prompt, { model: 'gpt-4', temperature: 0.7, maxTokens: 2000 });\n\n        logInfo('pumpDriveAI', `Successfully processed follow-up question on attempt ${attempt}`, {});\n        return response;\n      } catch (error) {\n        const isLastAttempt = attempt === maxRetries;\n\n        if (isLastAttempt) {\n          logError('pumpDriveAI', `Failed to process follow-up question after ${maxRetries} attempts`, { error, question });\n\n          // Provide a helpful fallback response based on the question\n          const fallbackResponse = this.generateFallbackResponse(question, userContext);\n          return fallbackResponse;\n        } else {\n          logWarn('pumpDriveAI', `Follow-up question failed on attempt ${attempt}, retrying...`, { error, question });\n\n          // Wait before retrying\n          await new Promise(resolve => setTimeout(resolve, retryDelay));\n        }\n      }\n    }\n\n    // This should never be reached due to the fallback above, but just in case\n    throw new Error('Unable to process your question right now. Please try again.');\n  }\n\n  /**\n   * Generate a helpful fallback response when Azure AI fails\n   */\n  private generateFallbackResponse(question: string, userContext: any): string {\n    const topChoice = userContext.currentRecommendation?.topRecommendation?.name || 'the recommended pump';\n    const questionLower = question.toLowerCase();\n\n    if (questionLower.includes('why not') || questionLower.includes(\"wasn't\") || questionLower.includes('why didn\\'t')) {\n      return `Great question! I'd love to help explain the reasoning behind your recommendation, but I'm having some technical difficulties right now.\n\nBased on your preferences, ${topChoice} was recommended because it best matches what you told us about your lifestyle and priorities. Each pump has different strengths, and the recommendation considers factors like:\n\n‚Ä¢ Your technology comfort level\n‚Ä¢ Activity and lifestyle preferences\n‚Ä¢ Specific features you selected\n‚Ä¢ Your personal story and needs\n\nPlease try asking your question again in a moment, or feel free to discuss these insights with your healthcare provider for more detailed guidance.`;\n    }\n\n    if (questionLower.includes('happy') || questionLower.includes('satisfied') || questionLower.includes('right choice')) {\n      return `Great question! Based on what you shared with us, ${topChoice} seems like it could be a great fit for your lifestyle and preferences.\n\nThe recommendation takes into account:\n‚Ä¢ Your specific feature preferences\n‚Ä¢ Your comfort with technology\n‚Ä¢ Your activity level and daily routine\n‚Ä¢ The priorities you mentioned\n\nOf course, the best way to know if you'll be happy with any pump is to discuss it thoroughly with your healthcare provider, who knows your medical history and can provide personalized guidance.\n\nPlease try asking again in a moment for more detailed insights, or feel free to explore the recommendation details above!`;\n    }\n\n    // Generic fallback\n    return `I'd be happy to help answer your question about pump recommendations, but I'm experiencing some technical difficulties right now.\n\nYour recommendation for ${topChoice} was based on carefully analyzing your preferences, lifestyle, and the features that matter most to you.\n\nPlease try asking your question again in a moment, and I'll do my best to provide you with a detailed, helpful response. You can also discuss these recommendations with your healthcare provider for additional guidance.`;\n  }\n}\n\nexport const pumpDriveAIService = new PumpDriveAIService();\n","/**\n * Feature-Based PumpDrive Service\n * Enhanced with AI-powered analysis for personalized recommendations\n */\n\nimport { pumpFeatureEngine } from './pumpFeatureEngine.service';\nimport { openAIService } from './openai.service';\nimport { pumpDriveAIService } from './pumpDriveAI.service';\nimport { PUMP_DATABASE } from '../data/pumpDataComplete';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface PumpRecommendationResult {\n  topRecommendation: {\n    name: string;\n    score: number;\n    explanation: string;\n    keyFeatures: string[];\n    pros: string[];\n    cons: string[];\n  };\n  alternatives: Array<{\n    name: string;\n    score: number;\n    explanation: string;\n    keyFeatures: string[];\n  }>;\n  decisionSummary: {\n    userPriorities: string[];\n    keyFactors: string[];\n    confidence: number;\n  };\n  detailedAnalysis: string;\n}\n\nclass PumpDriveFeatureBasedService {\n  /**\n   * Generate recommendations using enhanced AI-powered analysis\n   */\n  async generateRecommendations(\n    answers: Record<string, string | string[]>\n  ): Promise<PumpRecommendationResult> {\n    logDebug('pumpDriveFeatureBased', 'Debug message', {});\n    // Removed annoying debug alert\n\n    try {\n      // ENHANCED: Try AI-first approach for better weight/preference detection\n      const aiResult = await this.tryAIRecommendation(answers);\n      if (aiResult) {\n        logInfo('pumpDriveFeatureBased', 'Info message', {});\n        return aiResult;\n      }\n    } catch (error) {\n      logWarn('pumpDriveFeatureBased', 'Warning message', {});\n    }\n\n    // Fallback: Use traditional feature-based matching with weight override\n    logDebug('pumpDriveFeatureBased', 'Debug message', {});\n    const recommendations = pumpFeatureEngine.getRecommendations(answers);\n\n    // WEIGHT OVERRIDE: If user mentioned weight, force Twiist as top choice\n    const allAnswerText = Object.values(answers).join(' ').toLowerCase();\n    const hasWeightMention =\n      allAnswerText.includes('light') ||\n      allAnswerText.includes('weight') ||\n      allAnswerText.includes('2 oz') ||\n      allAnswerText.includes('smallest');\n\n    if (hasWeightMention) {\n      logDebug('pumpDriveFeatureBased', 'Debug message', {});\n      logDebug('pumpDriveFeatureBased', 'Debug message', {});\n\n      // Find Twiist in database\n      const twiistPump = PUMP_DATABASE.find(p => p.name === 'Twiist');\n      if (twiistPump) {\n        // Override the recommendation\n        recommendations.topChoice = {\n          pump: twiistPump as any,\n          score: 95,\n          explanation: 'Selected for ultra-lightweight 2 oz design based on your weight preference',\n        };\n      }\n    }\n\n    // Extract key information\n    const topPump = recommendations.topChoice.pump;\n    const topExplanation = recommendations.topChoice.explanation;\n\n    // Generate enhanced analysis using Claude (but with real data context)\n    const detailedAnalysis = await this.generateDetailedAnalysis(\n      topPump,\n      recommendations.topChoice.score,\n      answers,\n      recommendations.decisionFactors\n    );\n\n    // Build comprehensive result\n    return {\n      topRecommendation: {\n        name: topPump.name,\n        score: recommendations.topChoice.score,\n        explanation: topExplanation,\n        keyFeatures: this.extractKeyFeatures(topPump),\n        pros: this.extractPros(topPump, answers),\n        cons: this.extractCons(topPump, answers),\n      },\n      alternatives: recommendations.alternatives.map(alt => ({\n        name: alt.pump.name,\n        score: alt.score,\n        explanation: alt.explanation,\n        keyFeatures: this.extractKeyFeatures(alt.pump),\n      })),\n      decisionSummary: {\n        userPriorities: recommendations.decisionFactors,\n        keyFactors: this.extractKeyDecisionFactors(topPump, answers),\n        confidence: this.calculateConfidence(\n          recommendations.topChoice.score,\n          recommendations.alternatives\n        ),\n      },\n      detailedAnalysis,\n    };\n  }\n\n  /**\n   * Try AI-powered recommendation first (enhanced for weight/size preferences)\n   */\n  private async tryAIRecommendation(\n    answers: Record<string, string | string[]>\n  ): Promise<PumpRecommendationResult | null> {\n    // Convert answers to CategoryResponse format for AI service\n    const responses: Record<string, any> = {};\n\n    // Handle different data formats (unified vs conversation flow)\n    const userStory = (answers.userStory as string) || '';\n    const selectedFeatures = (answers.selectedFeatures as string[]) || [];\n\n    // For conversation flow, combine all answers into user story\n    let combinedUserText = userStory;\n    if (!combinedUserText) {\n      // Extract text from conversation flow format\n      combinedUserText = Object.entries(answers)\n        .map(([key, value]) => {\n          if (Array.isArray(value)) {\n            return value.join(' ');\n          }\n          return String(value);\n        })\n        .join(' ');\n    }\n\n    // ENHANCED: Check if user mentioned weight/size preferences in ANY format\n    const allText = (combinedUserText + ' ' + selectedFeatures.join(' ')).toLowerCase();\n    const hasWeightPreference =\n      allText.includes('light') ||\n      allText.includes('weight') ||\n      allText.includes('2 oz') ||\n      allText.includes('ounce') ||\n      allText.includes('smallest') ||\n      allText.includes('small') ||\n      allText.includes('tiny') ||\n      allText.includes('compact') ||\n      allText.includes('minimal') ||\n      allText.includes('discrete') ||\n      allText.includes('discreet');\n\n    if (hasWeightPreference) {\n      logDebug('pumpDriveFeatureBased', 'Debug message', {});\n      logDebug('pumpDriveFeatureBased', 'Debug message', {});\n    }\n\n    // Create enhanced category response for AI\n    responses.lifestyle = {\n      category: 'lifestyle',\n      mainTranscript: combinedUserText + ' ' + selectedFeatures.join(', '),\n      followUpTranscript: hasWeightPreference\n        ? 'IMPORTANT: User specifically mentioned weight/size as priority - prioritize Twiist if mentioned'\n        : '',\n      checkedQuestions: Object.keys(answers),\n      timestamp: Date.now(),\n    };\n\n    // Add other answer categories with enhanced weight detection\n    Object.entries(answers).forEach(([key, value]) => {\n      if (key !== 'userStory' && key !== 'selectedFeatures') {\n        const valueText = Array.isArray(value) ? value.join(', ') : String(value);\n        responses[key] = {\n          category: key,\n          mainTranscript: valueText,\n          followUpTranscript:\n            valueText.toLowerCase().includes('weight') || valueText.toLowerCase().includes('light')\n              ? 'Contains weight preference'\n              : '',\n          checkedQuestions: [key],\n          timestamp: Date.now(),\n        };\n      }\n    });\n\n    logDebug('pumpDriveFeatureBased', 'Debug message', {});\n\n    // Get AI recommendation\n    const aiRecommendation = await pumpDriveAIService.processUserResponses(responses);\n\n    // Convert AI result to Feature-Based result format\n    const topPump = PUMP_DATABASE.find(p => p.name === aiRecommendation.topChoice.name);\n    if (!topPump) return null;\n\n    logInfo('pumpDriveFeatureBased', 'Info message', {});\n\n    return {\n      topRecommendation: {\n        name: aiRecommendation.topChoice.name,\n        score: aiRecommendation.topChoice.score,\n        explanation: aiRecommendation.topChoice.reasons.join(', '),\n        keyFeatures: this.extractKeyFeatures(topPump),\n        pros: topPump.pros || [],\n        cons: topPump.cons || [],\n      },\n      alternatives: aiRecommendation.alternatives.map(alt => {\n        const altPump = PUMP_DATABASE.find(p => p.name === alt.name);\n        return {\n          name: alt.name,\n          score: alt.score,\n          explanation: alt.reasons.join(', '),\n          keyFeatures: altPump ? this.extractKeyFeatures(altPump) : [],\n        };\n      }),\n      decisionSummary: {\n        userPriorities: aiRecommendation.keyFactors,\n        keyFactors: aiRecommendation.keyFactors,\n        confidence: aiRecommendation.topChoice.score,\n      },\n      detailedAnalysis: aiRecommendation.personalizedInsights,\n    };\n  }\n\n  /**\n   * Extract key features for a pump\n   */\n  private extractKeyFeatures(pump: any): string[] {\n    const features: string[] = [];\n\n    if (pump.tubeless) features.push('Tubeless pod design');\n    if (pump.algorithm?.includes('hybrid')) features.push('Automated insulin delivery');\n    if (pump.waterproof) features.push('Waterproof');\n    if (pump.phoneControl) features.push('Smartphone control');\n    if (pump.cgmIntegration) features.push('Built-in CGM integration');\n    if (pump.bolusCalculator) features.push('Bolus calculator');\n    if (pump.size === 'Very small') features.push('Compact size');\n\n    return features.slice(0, 5); // Top 5 features\n  }\n\n  /**\n   * Extract pros based on user answers\n   */\n  private extractPros(pump: any, answers: Record<string, string | string[]>): string[] {\n    const pros: string[] = [];\n\n    // Simplicity focus\n    if (answers.primary_priority === 'simplicity') {\n      if (pump.setupTime === '< 1 hour') pros.push('Quick and easy setup');\n      if (pump.userInterface === 'Simple touchscreen') pros.push('Intuitive interface');\n    }\n\n    // Technology focus\n    if (answers.primary_priority === 'technology') {\n      if (pump.phoneControl) pros.push('Advanced smartphone integration');\n      if (pump.dataSharing) pros.push('Comprehensive data sharing');\n      if (pump.customAlerts) pros.push('Customizable alerts');\n    }\n\n    // Active lifestyle\n    if (answers.activity_level === 'very_active') {\n      if (pump.waterproof) pros.push('Safe for swimming and sports');\n      if (pump.tubeless) pros.push('No tubing to get in the way');\n      if (pump.tempBasal) pros.push('Temporary basal for exercise');\n    }\n\n    // Form factor preference\n    if (answers.form_factor === 'tubeless' && pump.tubeless) {\n      pros.push('Discreet pod design');\n      pros.push('Freedom of movement');\n    }\n\n    // Automation preference\n    if (answers.control_philosophy === 'full_auto' && pump.algorithm?.includes('hybrid')) {\n      pros.push('Handles glucose management automatically');\n      pros.push('Reduces manual dosing decisions');\n    }\n\n    return pros.slice(0, 4); // Top 4 pros\n  }\n\n  /**\n   * Extract cons based on user answers\n   */\n  private extractCons(pump: any, answers: Record<string, string | string[]>): string[] {\n    const cons: string[] = [];\n\n    // Simplicity seekers might find advanced features overwhelming\n    if (answers.tech_comfort === 'low' && pump.phoneControl) {\n      cons.push('May have more features than needed');\n    }\n\n    // Tubeless preference but tubed pump\n    if (answers.form_factor === 'tubeless' && !pump.tubeless) {\n      cons.push('Has tubing which may be less discreet');\n    }\n\n    // Manual control preference but high automation\n    if (answers.control_philosophy === 'wake_me' && pump.algorithm?.includes('hybrid')) {\n      cons.push('More automated than you might prefer');\n    }\n\n    // Budget concerns\n    if (answers.budget_reality === 'upfront' && pump.name.includes('t:slim')) {\n      cons.push('Higher upfront cost');\n    }\n\n    // If no significant cons, add neutral considerations\n    if (cons.length === 0) {\n      if (pump.battery === 'AAA battery') cons.push('Requires regular battery replacement');\n      if (pump.insulinCapacity < 300)\n        cons.push(`${pump.insulinCapacity}U capacity may require frequent refills`);\n    }\n\n    return cons.slice(0, 3); // Top 3 cons\n  }\n\n  /**\n   * Extract key decision factors\n   */\n  private extractKeyDecisionFactors(\n    pump: any,\n    answers: Record<string, string | string[]>\n  ): string[] {\n    const factors: string[] = [];\n\n    if (pump.tubeless && answers.form_factor === 'tubeless') {\n      factors.push('Tubeless design matches your preference');\n    }\n\n    if (pump.algorithm?.includes('hybrid') && answers.control_philosophy === 'full_auto') {\n      factors.push('Automation level aligns with your needs');\n    }\n\n    if (pump.waterproof && answers.activity_level === 'very_active') {\n      factors.push('Waterproof rating suits active lifestyle');\n    }\n\n    if (pump.userInterface === 'Simple touchscreen' && answers.tech_comfort === 'low') {\n      factors.push('Simple interface matches comfort level');\n    }\n\n    return factors;\n  }\n\n  /**\n   * Calculate confidence based on score gap\n   */\n  private calculateConfidence(topScore: number, alternatives: any[]): number {\n    if (alternatives.length === 0) return 85;\n\n    const secondScore = alternatives[0]?.score || 0;\n    const gap = topScore - secondScore;\n\n    if (gap > 20) return 95;\n    if (gap > 15) return 90;\n    if (gap > 10) return 85;\n    if (gap > 5) return 75;\n    return 65;\n  }\n\n  /**\n   * Generate detailed analysis using Claude with pump data context\n   */\n  private async generateDetailedAnalysis(\n    pump: any,\n    score: number,\n    answers: Record<string, string | string[]>,\n    decisionFactors: string[]\n  ): Promise<string> {\n    const prompt = `\nYou are analyzing an insulin pump recommendation based on actual technical specifications and user preferences.\n\nPUMP RECOMMENDED: ${pump.name}\nMATCH SCORE: ${score}% based on technical feature analysis\n\nPUMP SPECIFICATIONS:\n- Form: ${pump.tubeless ? 'Tubeless pod' : 'Traditional with tubing'}\n- Algorithm: ${pump.algorithm}\n- CGM Integration: ${pump.cgmIntegration ? 'Yes' : 'No'}\n- Waterproof: ${pump.waterproof ? 'Yes' : 'No'}\n- Phone Control: ${pump.phoneControl ? 'Yes' : 'No'}\n- Insulin Capacity: ${pump.insulinCapacity}U\n- Battery: ${pump.battery}\n- Setup Time: ${pump.setupTime}\n- User Interface: ${pump.userInterface}\n- Warranty: ${pump.warranty} years\n\nUSER PRIORITIES: ${decisionFactors.join(', ')}\n\nWrite a detailed 2-3 paragraph analysis explaining why this pump is the best technical match for this user's specific needs. Focus on how the pump's actual specifications align with their stated preferences. Be specific about technical features and practical benefits.\n\nKeep it professional but approachable, like a knowledgeable diabetes educator explaining the technical rationale.\n`;\n\n    try {\n      const analysis = await openAIService.processText(prompt, { model: 'gpt-4', temperature: 0.7, maxTokens: 2000 });\n      return analysis || 'Detailed analysis temporarily unavailable.';\n    } catch (error) {\n      logError('pumpDriveFeatureBased', 'Error message', {});\n      return `The ${pump.name} is technically well-matched to your needs with a ${score}% compatibility score based on your preferences for ${decisionFactors.join(', ')}.`;\n    }\n  }\n\n  /**\n   * Compare multiple pumps side by side\n   */\n  async comparePumps(answers: Record<string, string | string[]>): Promise<{\n    comparison: Array<{\n      pump: string;\n      score: number;\n      strengths: string[];\n      weaknesses: string[];\n    }>;\n    recommendation: string;\n  }> {\n    const recommendations = pumpFeatureEngine.getRecommendations(answers);\n    const top3 = recommendations.alternatives.slice(0, 3);\n    top3.unshift(recommendations.topChoice);\n\n    const comparison = top3.map(item => ({\n      pump: item.pump.name,\n      score: item.score,\n      strengths: this.extractPros(item.pump, answers),\n      weaknesses: this.extractCons(item.pump, answers),\n    }));\n\n    const recommendationText = `Based on your preferences, the ${recommendations.topChoice.pump.name} scores highest at ${recommendations.topChoice.score}% compatibility. ${recommendations.topChoice.explanation}`;\n\n    return {\n      comparison,\n      recommendation: recommendationText,\n    };\n  }\n}\n\nexport const pumpDriveFeatureBasedService = new PumpDriveFeatureBasedService();\n","import { logError, logWarn, logInfo, logDebug } from './logger.service';\nimport { pumpAuthService } from './pumpAuth.service';\n\nexport interface AssessmentData {\n  patientName: string;\n  userId?: number; // Link to authenticated user\n  sliderValues: Record<string, number>;\n  selectedFeatures: Array<{ id: string; title: string; pumpId?: string }>;\n  personalStory: string;\n  challenges?: string;\n  priorities?: string;\n  clarifyingResponses: Record<string, string>;\n  aiRecommendation: {\n    topChoice: {\n      name: string;\n      score: number;\n      reasons: string[];\n    };\n    alternatives: Array<{\n      name: string;\n      score: number;\n      reasons: string[];\n    }>;\n    keyFactors: string[];\n    personalizedInsights: string;\n  };\n  conversationHistory: Array<{\n    question: string;\n    answer: string;\n    timestamp: string;\n  }>;\n  assessmentFlow?: string; // 'sliders' | 'conversation' | 'hybrid'\n  timestamp: string;\n}\n\nexport interface SaveAssessmentResponse {\n  success: boolean;\n  assessmentId: number;\n  message: string;\n  pdfUrl?: string;\n}\n\nclass PumpAssessmentService {\n  private baseUrl = process.env.NODE_ENV === 'production'\n    ? 'https://api.tshla.ai'\n    : 'http://localhost:3005';\n\n  /**\n   * Collect all assessment data from sessionStorage\n   */\n  collectAssessmentData(patientName: string): AssessmentData {\n    logDebug('PumpAssessment', 'Collecting assessment data from sessionStorage', {});\n\n    // Collect slider values\n    const sliderValues = JSON.parse(sessionStorage.getItem('pumpDriveSliders') || '{}');\n\n    // Collect selected features\n    const selectedFeatures = JSON.parse(sessionStorage.getItem('selectedPumpFeatures') || '[]');\n\n    // Collect personal story and text responses\n    const freeTextData = JSON.parse(sessionStorage.getItem('pumpDriveFreeText') || '{}');\n    const personalStory = freeTextData.currentSituation || freeTextData.userStory || '';\n    const challenges = freeTextData.challenges || '';\n    const priorities = freeTextData.priorities || '';\n\n    // Collect clarifying responses\n    const clarifyingResponses = JSON.parse(sessionStorage.getItem('pumpDriveClarifyingResponses') || '{}');\n\n    // Collect AI recommendation\n    const aiRecommendation = JSON.parse(sessionStorage.getItem('pumpdrive_recommendation') ||\n      sessionStorage.getItem('pumpDriveRecommendation') || 'null');\n\n    // Collect conversation history\n    const conversationHistory = JSON.parse(sessionStorage.getItem('pumpDriveConversation') || '[]');\n\n    // Determine assessment flow\n    let assessmentFlow = 'hybrid';\n    if (Object.keys(sliderValues).length > 0) {\n      assessmentFlow = 'sliders';\n    }\n    if (sessionStorage.getItem('pumpdrive_responses')) {\n      assessmentFlow = 'conversation';\n    }\n\n    return {\n      patientName,\n      sliderValues,\n      selectedFeatures,\n      personalStory,\n      challenges,\n      priorities,\n      clarifyingResponses,\n      aiRecommendation: aiRecommendation || {\n        topChoice: { name: 'Not generated', score: 0, reasons: [] },\n        alternatives: [],\n        keyFactors: [],\n        personalizedInsights: 'AI recommendation not available'\n      },\n      conversationHistory,\n      assessmentFlow,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Save complete assessment to database\n   */\n  async saveAssessment(assessmentData: AssessmentData): Promise<SaveAssessmentResponse> {\n    try {\n      logInfo('PumpAssessment', 'Saving assessment to database', {\n        patientName: assessmentData.patientName,\n        flow: assessmentData.assessmentFlow\n      });\n\n      // Get authentication headers\n      const authHeaders = pumpAuthService.getAuthHeaders();\n\n      const response = await fetch(`${this.baseUrl}/api/pump-assessments/save-complete`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...authHeaders,\n        },\n        body: JSON.stringify(assessmentData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP ${response.status}`);\n      }\n\n      const result = await response.json();\n\n      logInfo('PumpAssessment', 'Assessment saved successfully', {\n        assessmentId: result.assessmentId\n      });\n\n      return result;\n    } catch (error) {\n      logError('PumpAssessment', 'Failed to save assessment', { error });\n      throw new Error(`Failed to save assessment: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Save assessment with auto-collected data\n   */\n  async saveCurrentAssessment(patientName?: string): Promise<SaveAssessmentResponse> {\n    const defaultName = patientName || `User_${Date.now()}`;\n    const assessmentData = this.collectAssessmentData(defaultName);\n\n    return await this.saveAssessment(assessmentData);\n  }\n\n  /**\n   * Retrieve assessment by ID\n   */\n  async getAssessment(assessmentId: number): Promise<AssessmentData | null> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/pump-assessments/${assessmentId}/complete`);\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          return null;\n        }\n        throw new Error(`HTTP ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      logError('PumpAssessment', 'Failed to retrieve assessment', { error, assessmentId });\n      throw new Error(`Failed to retrieve assessment: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Generate PDF report for assessment\n   */\n  async generatePDF(assessmentId: number): Promise<string> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/pump-assessments/${assessmentId}/generate-pdf`, {\n        method: 'POST',\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n\n      const result = await response.json();\n      return result.pdfUrl;\n    } catch (error) {\n      logError('PumpAssessment', 'Failed to generate PDF', { error, assessmentId });\n      throw new Error(`Failed to generate PDF: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Clear all session storage data after successful save\n   */\n  clearSessionData(): void {\n    const keysToRemove = [\n      'pumpDriveSliders',\n      'selectedPumpFeatures',\n      'pumpDriveFreeText',\n      'pumpDriveClarifyingResponses',\n      'pumpDriveClarifyingQuestions',\n      'pumpdrive_recommendation',\n      'pumpDriveRecommendation',\n      'pumpDriveConversation',\n      'pumpdrive_responses',\n      'pumpDriveCompletedCategories',\n      'pumpdrive_category_order',\n      'pumpdrive_completed_categories',\n      'pumpdrive_priority_order'\n    ];\n\n    keysToRemove.forEach(key => {\n      sessionStorage.removeItem(key);\n    });\n\n    logDebug('PumpAssessment', 'Session storage cleared after successful save', {});\n  }\n}\n\nexport const pumpAssessmentService = new PumpAssessmentService();","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { pumpDriveFeatureBasedService } from '../services/pumpDriveFeatureBased.service';\nimport { pumpDrivePureAI } from '../services/pumpDrivePureAI.service';\nimport { pumpDriveAIService } from '../services/pumpDriveAI.service';\nimport { pumpAssessmentService, type AssessmentData } from '../services/pumpAssessment.service';\nimport { pumpAuthService } from '../services/pumpAuth.service';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\ninterface PumpRecommendation {\n  topRecommendation: {\n    name: string;\n    score: number;\n    explanation: string;\n    keyFeatures: string[];\n    pros: string[];\n    cons: string[];\n  };\n  alternatives: Array<{\n    name: string;\n    score: number;\n    explanation: string;\n    keyFeatures: string[];\n  }>;\n  decisionSummary: {\n    userPriorities: string[];\n    keyFactors: string[];\n    confidence: number;\n  };\n  detailedAnalysis: string;\n}\n\n// Legacy interface for backward compatibility\ninterface LegacyPumpRecommendation {\n  topChoice: {\n    name: string;\n    score: number;\n    reasons: string[];\n  };\n  alternatives: Array<{\n    name: string;\n    score: number;\n    reasons: string[];\n  }>;\n  keyFactors: string[];\n  personalizedInsights: string;\n}\n\n// Helper function to extract pump name from explanation text\nconst extractPumpNameFromText = (text: string): string => {\n  if (!text) return 'Insulin Pump';\n\n  // Known pump names to search for (in order of specificity)\n  const pumpNames = [\n    'Beta Bionics iLet',\n    'Omnipod 5 (Insulet)',\n    'Omnipod 5',\n    'Tandem t:slim X2',\n    'Tandem Mobi',\n    'Medtronic MiniMed 780G',\n    'Medtronic 780G',\n    'Twiist (Zealand Pharma)',\n    'Twiist',\n    'Sigi Patch Pump',\n    'Sigi'\n  ];\n\n  // Find the first pump name mentioned in the text\n  for (const pump of pumpNames) {\n    if (text.includes(pump)) {\n      return pump;\n    }\n  }\n\n  // Fallback: extract pattern \"The [Pump Name] is/offers/pump\"\n  const patterns = [\n    /The ([A-Za-z0-9\\s:]+?) (?:is|offers|provides|pump)/,\n    /([A-Za-z0-9\\s:]+?) (?:is particularly|offers|provides)/,\n    /([A-Za-z0-9\\s:]+?) pump is/\n  ];\n\n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      const extracted = match[1].trim();\n      // Basic validation - should contain letters and be reasonable length\n      if (extracted.length > 3 && extracted.length < 50 && /[A-Za-z]/.test(extracted)) {\n        return extracted;\n      }\n    }\n  }\n\n  return 'Insulin Pump'; // Final fallback\n};\n\nexport default function PumpDriveResults() {\n  const navigate = useNavigate();\n  const [recommendation, setRecommendation] = useState<PumpRecommendation | null>(null);\n  // Voice functionality removed\n  // const [isSpeaking, setIsSpeaking] = useState(false);\n  // const [hasPlayedIntro, setHasPlayedIntro] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [hasAttempted, setHasAttempted] = useState(false);\n\n  const [assessmentSaved, setAssessmentSaved] = useState(false);\n  const [assessmentId, setAssessmentId] = useState<number | null>(null);\n  const [patientName] = useState(() => {\n    return sessionStorage.getItem('pumpDrivePatientName') || '';\n  });\n\n  // Function to save assessment to database\n  const saveAssessmentToDatabase = async (recommendationData: PumpRecommendation) => {\n    try {\n      logDebug('PumpDriveResults', 'Saving assessment to database', {});\n\n      // Get current user\n      const currentUser = pumpAuthService.getUser();\n      if (!currentUser) {\n        logWarn('PumpDriveResults', 'No authenticated user found, skipping database save', {});\n        return;\n      }\n\n      // Collect conversation history\n      const existingConversation = JSON.parse(sessionStorage.getItem('pumpDriveConversation') || '[]');\n\n      // Create assessment data with user information\n      const assessmentData: AssessmentData = {\n        patientName: patientName || currentUser.username || `User_${currentUser.id}`,\n        userId: currentUser.id,\n        sliderValues: JSON.parse(sessionStorage.getItem('pumpDriveSliders') || '{}'),\n        selectedFeatures: JSON.parse(sessionStorage.getItem('selectedPumpFeatures') || '[]'),\n        personalStory: JSON.parse(sessionStorage.getItem('pumpDriveFreeText') || '{}').currentSituation || '',\n        challenges: JSON.parse(sessionStorage.getItem('pumpDriveFreeText') || '{}').challenges || '',\n        priorities: JSON.parse(sessionStorage.getItem('pumpDriveFreeText') || '{}').priorities || '',\n        clarifyingResponses: JSON.parse(sessionStorage.getItem('pumpDriveClarifyingResponses') || '{}'),\n        aiRecommendation: {\n          topChoice: {\n            name: recommendationData.topRecommendation.name,\n            score: recommendationData.topRecommendation.score,\n            reasons: recommendationData.topRecommendation.pros || []\n          },\n          alternatives: recommendationData.alternatives.map(alt => ({\n            name: alt.name,\n            score: alt.score,\n            reasons: [alt.explanation]\n          })),\n          keyFactors: recommendationData.decisionSummary.userPriorities,\n          personalizedInsights: recommendationData.detailedAnalysis\n        },\n        conversationHistory: existingConversation,\n        assessmentFlow: 'unified',\n        timestamp: new Date().toISOString()\n      };\n\n      const result = await pumpAssessmentService.saveAssessment(assessmentData);\n\n      if (result.success) {\n        setAssessmentSaved(true);\n        setAssessmentId(result.assessmentId);\n        logInfo('PumpDriveResults', 'Assessment saved successfully', {\n          assessmentId: result.assessmentId\n        });\n\n        // Update session storage to include assessment ID for future reference\n        sessionStorage.setItem('pumpdrive_assessment_id', result.assessmentId.toString());\n      }\n    } catch (error) {\n      logError('PumpDriveResults', 'Failed to save assessment to database', { error });\n      // Don't block the UI if database save fails\n    }\n  };\n\n  useEffect(() => {\n    generateRecommendations();\n  }, []);\n\n  const generateRecommendations = async () => {\n    try {\n      if (hasAttempted) {\n        console.log('PumpDriveResults: Already attempted, skipping to prevent infinite loop');\n        return;\n      }\n\n      setHasAttempted(true);\n      setLoading(true);\n      setError(null);\n\n      // Check if we have data from simplified flow\n      const sliderData = sessionStorage.getItem('pumpDriveSliders');\n      const featureData = sessionStorage.getItem('selectedPumpFeatures');\n      const freeTextData = sessionStorage.getItem('pumpDriveFreeText');\n      const clarifyingData = sessionStorage.getItem('pumpDriveClarifyingResponses');\n\n      if (sliderData || featureData || freeTextData) {\n        // Clarifying responses are optional in the unified flow\n        if (!clarifyingData) {\n          logInfo('PumpDriveResults', 'No clarifying responses - continuing with available data', {});\n        }\n\n        logDebug('PumpDriveResults', 'Using simplified AI service for final recommendation', {});\n\n        try {\n          // Call our new API endpoint with all user data\n          console.log('PumpDriveResults: Calling new API endpoint...');\n\n          const userData = {\n            sliders: JSON.parse(sliderData || '{}'),\n            features: JSON.parse(featureData || '[]'),\n            freeText: JSON.parse(freeTextData || '{}'),\n            clarifying: JSON.parse(clarifyingData || '{}')\n          };\n\n          const apiUrl = import.meta.env.VITE_PUMP_API_URL || 'http://localhost:3004';\n          const response = await fetch(`${apiUrl}/api/pumpdrive/recommend`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(userData),\n          });\n\n          if (!response.ok) {\n            throw new Error(`API error: ${response.status} ${response.statusText}`);\n          }\n\n          const apiResult = await response.json();\n          console.log('PumpDriveResults: Received API result:', apiResult);\n          console.log('PumpDriveResults: API result overallTop:', apiResult.overallTop);\n          console.log('PumpDriveResults: API result structure:', {\n            hasOverallTop: !!apiResult.overallTop,\n            overallTopLength: apiResult.overallTop?.length,\n            firstItem: apiResult.overallTop?.[0]\n          });\n\n          // Convert API format to display format\n          const simplifiedResult = {\n            topChoice: apiResult.overallTop[0],\n            alternatives: apiResult.alternatives || [],\n            keyFactors: apiResult.keyFactors || [],\n            personalizedInsights: apiResult.personalizedInsights || ''\n          };\n\n          console.log('PumpDriveResults: Converted simplifiedResult:', simplifiedResult);\n          console.log('PumpDriveResults: API alternatives:', apiResult.alternatives);\n          console.log('PumpDriveResults: Top choice from API:', apiResult.overallTop[0]);\n          console.log('PumpDriveResults: TopChoice structure:', {\n            pumpName: simplifiedResult.topChoice.pumpName,\n            name: simplifiedResult.topChoice.name,\n            score: simplifiedResult.topChoice.score,\n            fullObject: simplifiedResult.topChoice\n          });\n\n          // Convert simplified AI format to display format\n          const extractedPumpName = extractPumpNameFromText(simplifiedResult.personalizedInsights);\n          console.log('PumpDriveResults: Extracted pump name:', extractedPumpName, 'from text:', simplifiedResult.personalizedInsights.substring(0, 100));\n\n          const converted: PumpRecommendation = {\n            topRecommendation: {\n              name: simplifiedResult.topChoice.pumpName || simplifiedResult.topChoice.name || extractedPumpName,\n              score: simplifiedResult.topChoice.score || 85,\n              explanation: simplifiedResult.personalizedInsights,\n              keyFeatures: simplifiedResult.topChoice.reasons?.slice(0, 3) || ['Advanced features', 'User-friendly', 'Reliable'],\n              pros: simplifiedResult.topChoice.reasons || ['Great choice for your needs'],\n              cons: ['Discuss with your healthcare provider for personalized guidance'],\n            },\n            alternatives: simplifiedResult.alternatives?.map((alt, index) => {\n              const altText = alt.reasons?.join(' ') || '';\n              const extractedAltName = extractPumpNameFromText(altText);\n\n              console.log(`PumpDriveResults: Alt ${index}:`, {\n                originalPumpName: alt.pumpName,\n                originalName: alt.name,\n                extractedName: extractedAltName,\n                reasonsText: altText.substring(0, 100)\n              });\n\n              return {\n                name: alt.pumpName || alt.name || extractedAltName || `Alternative ${index + 1}`,\n                score: alt.score || (80 - index * 5),\n                explanation: alt.reasons?.join('. ') || 'Alternative insulin pump option',\n                keyFeatures: alt.reasons?.slice(0, 2) || ['Advanced features', 'Reliable performance'],\n              };\n            }) || [],\n            decisionSummary: {\n              userPriorities: simplifiedResult.keyFactors,\n              keyFactors: simplifiedResult.keyFactors,\n              confidence: 90,\n            },\n            detailedAnalysis: simplifiedResult.personalizedInsights,\n          };\n\n          console.log('PumpDriveResults: About to set recommendation:', converted);\n          console.log('PumpDriveResults: Top recommendation details:', {\n            name: converted.topRecommendation.name,\n            explanation: converted.topRecommendation.explanation,\n            personalizedInsights: simplifiedResult.personalizedInsights\n          });\n          setRecommendation(converted);\n          console.log('PumpDriveResults: Recommendation set successfully');\n\n          // Explicitly stop loading state\n          setLoading(false);\n          console.log('PumpDriveResults: Loading set to false');\n\n          // Save assessment to database in background (don't wait)\n          saveAssessmentToDatabase(converted).catch(error => {\n            console.error('PumpDriveResults: Database save failed (non-blocking):', error);\n          });\n\n          console.log('PumpDriveResults: Function completed successfully');\n          return;\n        } catch (simplifiedAIError) {\n          console.error('PumpDriveResults: API call failed:', simplifiedAIError);\n          logError('PumpDriveResults', 'API service failed, trying Azure AI directly', { error: simplifiedAIError });\n\n          // Try using Azure AI directly via pumpDriveAIService\n          try {\n            console.log('PumpDriveResults: Attempting Azure AI fallback via pumpDriveAIService');\n            const azureResult = await pumpDriveAIService.processSimplifiedFlow();\n            console.log('PumpDriveResults: Azure AI fallback successful:', azureResult);\n            setRecommendation(azureResult);\n            setLoading(false);\n\n            // Save assessment to database\n            saveAssessmentToDatabase(azureResult).catch(error => {\n              console.error('PumpDriveResults: Database save failed (non-blocking):', error);\n            });\n\n            return;\n          } catch (azureError) {\n            console.error('PumpDriveResults: Azure AI fallback also failed:', azureError);\n            logError('PumpDriveResults', 'Both API and Azure AI failed, using static fallback', { apiError: simplifiedAIError, azureError });\n          }\n\n          // Final fallback recommendation if everything fails\n          const fallbackRecommendation: PumpRecommendation = {\n            topRecommendation: {\n              name: 'Omnipod 5',\n              score: 85,\n              explanation: 'Recommended based on general best practices. API service temporarily unavailable.',\n              keyFeatures: ['Tubeless design', 'Automated insulin delivery', 'Waterproof'],\n              pros: ['Freedom from tubing', 'Automated adjustments', 'Active lifestyle friendly'],\n              cons: ['Pod changes every 3 days', 'Higher supply costs'],\n            },\n            alternatives: [\n              {\n                name: 'Tandem t:slim X2',\n                score: 80,\n                explanation: 'Advanced hybrid closed-loop system with Control-IQ technology.',\n                keyFeatures: ['Control-IQ', 'Touchscreen', 'Rechargeable'],\n              }\n            ],\n            decisionSummary: {\n              userPriorities: ['Active lifestyle', 'Convenience'],\n              keyFactors: ['API service unavailable - using fallback'],\n              confidence: 70,\n            },\n            detailedAnalysis: 'Recommendations generated from fallback system due to API unavailability. Please try again later for personalized AI recommendations.',\n          };\n\n          setRecommendation(fallbackRecommendation);\n          setLoading(false);\n          console.log('PumpDriveResults: Fallback recommendation set, loading stopped');\n          return;\n        }\n      }\n\n      // Fallback: Use legacy system\n      if (sliderData || featureData || freeTextData) {\n        logDebug('PumpDriveResults', 'Using legacy feature-based service', {});\n\n        // Combine all three inputs into a format the legacy service expects\n        const combinedAnswers: Record<string, string | string[]> = {};\n\n        // Add slider data\n        if (sliderData) {\n          const sliders = JSON.parse(sliderData);\n          Object.entries(sliders).forEach(([key, value]) => {\n            combinedAnswers[key] = String(value);\n          });\n        }\n\n        // Add feature selections\n        if (featureData) {\n          const features = JSON.parse(featureData);\n          combinedAnswers.selectedFeatures = features.map((f: any) => f.name || f.id);\n        }\n\n        // Add free text insights\n        if (freeTextData) {\n          const textData = JSON.parse(freeTextData);\n          if (textData.currentSituation) {\n            combinedAnswers.userStory = textData.currentSituation;\n          }\n        }\n\n        const result = await pumpDriveFeatureBasedService.generateRecommendations(combinedAnswers);\n        setRecommendation(result);\n\n        // Save assessment to database\n        await saveAssessmentToDatabase(result);\n        return;\n      }\n\n      // Try legacy stored answers\n      const storedAnswers =\n        sessionStorage.getItem('pumpDriveAnswers') || sessionStorage.getItem('pumpdrive_responses');\n      if (storedAnswers) {\n        const answers = JSON.parse(storedAnswers);\n        logDebug('PumpDriveResults', 'Using stored answers with legacy service', {});\n\n        const result = await pumpDriveFeatureBasedService.generateRecommendations(answers);\n        setRecommendation(result);\n\n        // Save assessment to database\n        await saveAssessmentToDatabase(result);\n        return;\n      }\n\n      // Last resort: Check for saved recommendation\n      const savedRec = sessionStorage.getItem('pumpdrive_recommendation');\n      if (savedRec) {\n        const legacyRec: LegacyPumpRecommendation = JSON.parse(savedRec);\n        logDebug('PumpDriveResults', 'Using saved legacy recommendation', {});\n\n        // Convert legacy format to new format\n        const converted: PumpRecommendation = {\n          topRecommendation: {\n            name: legacyRec.topChoice.name || 'Omnipod 5',\n            score: legacyRec.topChoice.score || 85,\n            explanation:\n              legacyRec.personalizedInsights ||\n              `${legacyRec.topChoice.name || 'This pump'} is recommended for you.`,\n            keyFeatures: legacyRec.topChoice.reasons?.slice(0, 3) || ['Advanced features', 'User-friendly', 'Reliable'],\n            pros: legacyRec.topChoice.reasons || ['Great choice for your needs'],\n            cons: ['Consider discussing with your healthcare provider'],\n          },\n          alternatives: legacyRec.alternatives?.map((alt, index) => ({\n            name: alt.name || ['Tandem t:slim X2', 'Medtronic 780G'][index] || 'Insulin Pump',\n            score: alt.score || (75 - index * 5),\n            explanation: alt.reasons?.join('. ') || 'Alternative option to consider',\n            keyFeatures: alt.reasons?.slice(0, 2) || ['Quality features', 'Proven technology'],\n          })) || [],\n          decisionSummary: {\n            userPriorities: legacyRec.keyFactors,\n            keyFactors: legacyRec.keyFactors,\n            confidence: 85,\n          },\n          detailedAnalysis: legacyRec.personalizedInsights || 'Analysis not available',\n        };\n        setRecommendation(converted);\n\n        // Save assessment to database for legacy recommendation\n        await saveAssessmentToDatabase(converted);\n      } else {\n        setError('No questionnaire data found. Please start the questionnaire.');\n        // Optionally redirect to assessment after a delay\n        setTimeout(() => {\n          navigate('/pumpdrive/assessment');\n        }, 3000);\n      }\n    } catch (error) {\n      logError('PumpDriveResults', 'All recommendation services failed', { error });\n      setError('Failed to generate recommendations. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Voice functionality removed\n  // useEffect(() => {\n  //   if (recommendation && !hasPlayedIntro) {\n  //     setHasPlayedIntro(true);\n  //     playResultsIntro();\n  //   }\n  // }, [recommendation]);\n\n  // const playResultsIntro = async () => {\n  //   if (!recommendation) return;\n  //\n  //   setIsSpeaking(true);\n  //   const message = `Based on your responses, I recommend the ${recommendation.topRecommendation.name} as your best match. It scored ${recommendation.topRecommendation.score} out of 100 for your specific needs, with ${recommendation.decisionSummary.confidence}% confidence.`;\n  //   // Use Rachel voice (most popular female voice on ElevenLabs)\n  //   await elevenLabsService.speak(message, '21m00Tcm4TlvDq8ikWAM');\n  //   setIsSpeaking(false);\n  // };\n\n  const resetAndStartOver = () => {\n    // Clear ALL pump drive data\n    sessionStorage.removeItem('pumpdrive_responses');\n    sessionStorage.removeItem('pumpdrive_recommendation');\n    sessionStorage.removeItem('pumpDriveSliders');\n    sessionStorage.removeItem('pumpDriveSelectedFeatures');\n    sessionStorage.removeItem('pumpDriveFreeText');\n    sessionStorage.removeItem('pumpDriveAnswers');\n    sessionStorage.removeItem('pumpDriveClarifyingResponses');\n    sessionStorage.removeItem('pumpDriveConversation');\n    navigate('/pumpdrive/unified');\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const clearDataAndRefresh = () => {\n    // Clear all data and refresh current page\n    sessionStorage.removeItem('pumpdrive_responses');\n    sessionStorage.removeItem('pumpdrive_recommendation');\n    sessionStorage.removeItem('pumpDriveSliders');\n    sessionStorage.removeItem('pumpDriveSelectedFeatures');\n    sessionStorage.removeItem('pumpDriveFreeText');\n    sessionStorage.removeItem('pumpDriveAnswers');\n    window.location.reload();\n  };\n\n\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"bg-white rounded-xl shadow-lg p-8 text-center\">\n            <div className=\"animate-spin h-12 w-12 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n            <h2 className=\"text-xl font-semibold text-gray-800 mb-2\">Analyzing Your Needs</h2>\n            <p className=\"text-gray-600\">\n              Using advanced feature matching to find your perfect pump...\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-red-50 to-pink-100 p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"bg-white rounded-xl shadow-lg p-8 text-center\">\n            <div className=\"text-red-500 text-5xl mb-4\">‚ö†Ô∏è</div>\n            <h2 className=\"text-xl font-semibold text-gray-800 mb-2\">Error</h2>\n            <p className=\"text-gray-600 mb-6\">{error}</p>\n            <button\n              onClick={() => navigate('/pumpdrive')}\n              className=\"bg-red-500 hover:bg-red-600 text-white px-6 py-2 rounded-lg font-medium transition-colors\"\n            >\n              Start Over\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!recommendation) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"bg-white rounded-xl shadow-lg p-8 text-center\">\n            <h2 className=\"text-xl font-semibold text-gray-800\">No recommendations available</h2>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const { topRecommendation, alternatives, decisionSummary, detailedAnalysis } = recommendation;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-100 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-800 mb-2\">\n            Your Personalized Pump Recommendation\n          </h1>\n          <p className=\"text-gray-600\">\n            Based on your specific preferences and AI analysis\n          </p>\n          {assessmentSaved && (\n            <div className=\"mt-3 p-2 bg-green-100 border border-green-400 rounded-lg text-green-700 text-sm\">\n              ‚úÖ Assessment saved to database (ID: {assessmentId})\n            </div>\n          )}\n        </div>\n\n        {/* User Input Summary - PROMINENT DISPLAY */}\n        <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-2 border-blue-200 rounded-xl shadow-lg p-8 mb-8\">\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-6 flex items-center\">\n            <span className=\"mr-3\">üìã</span> Your Input Summary\n          </h2>\n\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            {/* Slider Values */}\n            <div className=\"bg-white rounded-lg p-6 shadow-md\">\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-4 flex items-center\">\n                <span className=\"mr-2\">üéöÔ∏è</span> Your Lifestyle Preferences\n              </h3>\n              {(() => {\n                const sliderData = sessionStorage.getItem('pumpDriveSliders');\n                if (sliderData) {\n                  const sliders = JSON.parse(sliderData);\n                  return (\n                    <div className=\"space-y-3\">\n                      {Object.entries(sliders).map(([key, value]) => (\n                        <div key={key} className=\"flex items-center justify-between\">\n                          <span className=\"text-sm font-medium text-gray-700 capitalize\">\n                            {key.replace(/([A-Z])/g, ' $1').trim()}:\n                          </span>\n                          <div className=\"flex items-center\">\n                            <span className=\"text-sm font-bold text-blue-600 mr-2\">{value as number}/10</span>\n                            <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                              <div\n                                className=\"bg-blue-500 h-2 rounded-full\"\n                                style={{ width: `${((value as number) / 10) * 100}%` }}\n                              ></div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  );\n                }\n                return <p className=\"text-gray-500 text-sm\">No slider data available</p>;\n              })()}\n            </div>\n\n            {/* Selected Features */}\n            <div className=\"bg-white rounded-lg p-6 shadow-md\">\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-4 flex items-center\">\n                <span className=\"mr-2\">‚≠ê</span> Selected Features\n              </h3>\n              {(() => {\n                const featureData = sessionStorage.getItem('selectedPumpFeatures');\n                if (featureData) {\n                  const features = JSON.parse(featureData);\n                  return (\n                    <div className=\"space-y-2\">\n                      {features.map((feature: any, index: number) => (\n                        <div key={index} className=\"flex items-center\">\n                          <span className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></span>\n                          <span className=\"text-sm text-gray-700\">\n                            {feature.name || feature.title || feature.id || feature}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  );\n                }\n                return <p className=\"text-gray-500 text-sm\">No features selected</p>;\n              })()}\n            </div>\n\n            {/* User Story/Text */}\n            <div className=\"bg-white rounded-lg p-6 shadow-md\">\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-4 flex items-center\">\n                <span className=\"mr-2\">üí≠</span> Your Story & Priorities\n              </h3>\n              {(() => {\n                const textData = sessionStorage.getItem('pumpDriveFreeText');\n                if (textData) {\n                  const parsed = JSON.parse(textData);\n                  const userText = parsed.currentSituation || parsed.userStory || '';\n                  if (userText) {\n                    return (\n                      <div className=\"text-sm text-gray-700 leading-relaxed\">\n                        <p className=\"italic\">\"{userText}\"</p>\n                      </div>\n                    );\n                  }\n                }\n                return <p className=\"text-gray-500 text-sm\">No personal story provided</p>;\n              })()}\n            </div>\n          </div>\n\n          {/* Clarifying Responses if any */}\n          {(() => {\n            const clarifyingData = sessionStorage.getItem('pumpDriveClarifyingResponses');\n            if (clarifyingData) {\n              const responses = JSON.parse(clarifyingData);\n              return (\n                <div className=\"mt-6 bg-white rounded-lg p-6 shadow-md\">\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-4 flex items-center\">\n                    <span className=\"mr-2\">‚ùì</span> Your Clarifying Responses\n                  </h3>\n                  <div className=\"space-y-3\">\n                    {Object.entries(responses).map(([question, answer], index) => (\n                      <div key={index} className=\"border-l-4 border-purple-400 pl-4\">\n                        <p className=\"text-sm font-medium text-gray-800 mb-1\">Q: {question}</p>\n                        <p className=\"text-sm text-gray-600 italic\">A: {answer as string}</p>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              );\n            }\n            return null;\n          })()}\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              ‚úÖ All of this information was considered by our AI in making your recommendation below\n            </p>\n          </div>\n        </div>\n\n        {/* Top Recommendation Card */}\n        <div className=\"bg-white rounded-xl shadow-lg p-8 mb-8 border-l-4 border-green-500\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-800 mb-2\">\n                üèÜ Best Match: {topRecommendation.name}\n              </h2>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"bg-green-100 px-3 py-1 rounded-full\">\n                  <span className=\"text-green-800 font-semibold\">\n                    {topRecommendation.score}% Match\n                  </span>\n                </div>\n                <div className=\"bg-blue-100 px-3 py-1 rounded-full\">\n                  <span className=\"text-blue-800 font-semibold\">\n                    {decisionSummary.confidence}% Confidence\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <p className=\"text-gray-700 mb-6 text-lg leading-relaxed\">\n            {topRecommendation.explanation}\n          </p>\n\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            {/* Key Features */}\n            <div>\n              <h3 className=\"font-semibold text-gray-800 mb-3 flex items-center\">\n                <span className=\"mr-2\">‚≠ê</span> Key Features\n              </h3>\n              <ul className=\"space-y-2\">\n                {topRecommendation.keyFeatures.map((feature, index) => (\n                  <li key={index} className=\"text-gray-600 text-sm flex items-center\">\n                    <span className=\"mr-2\">‚Ä¢</span>\n                    {feature}\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            {/* Pros */}\n            <div>\n              <h3 className=\"font-semibold text-gray-800 mb-3 flex items-center\">\n                <span className=\"mr-2\">‚úÖ</span> Perfect For You\n              </h3>\n              <ul className=\"space-y-2\">\n                {topRecommendation.pros.map((pro, index) => (\n                  <li key={index} className=\"text-green-600 text-sm flex items-center\">\n                    <span className=\"mr-2\">‚Ä¢</span>\n                    {pro}\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            {/* Considerations */}\n            <div>\n              <h3 className=\"font-semibold text-gray-800 mb-3 flex items-center\">\n                <span className=\"mr-2\">üí≠</span> Consider\n              </h3>\n              <ul className=\"space-y-2\">\n                {topRecommendation.cons.map((con, index) => (\n                  <li key={index} className=\"text-amber-600 text-sm flex items-center\">\n                    <span className=\"mr-2\">‚Ä¢</span>\n                    {con}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        {/* Detailed Analysis */}\n        <div className=\"bg-white rounded-xl shadow-lg p-8 mb-8\">\n          <h3 className=\"text-xl font-semibold text-gray-800 mb-4 flex items-center\">\n            <span className=\"mr-2\">üîç</span> Expert Analysis\n          </h3>\n          <div className=\"prose text-gray-700 leading-relaxed\">{detailedAnalysis}</div>\n        </div>\n\n        {/* Decision Summary */}\n        <div className=\"bg-white rounded-xl shadow-lg p-8 mb-8\">\n          <h3 className=\"text-xl font-semibold text-gray-800 mb-4 flex items-center\">\n            <span className=\"mr-2\">üìã</span> Your Decision Factors\n          </h3>\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium text-gray-700 mb-3\">Your Priorities:</h4>\n              <ul className=\"space-y-2\">\n                {decisionSummary.userPriorities.map((priority, index) => (\n                  <li key={index} className=\"text-gray-600 text-sm flex items-center\">\n                    <span className=\"mr-2\">üéØ</span>\n                    {priority}\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-gray-700 mb-3\">Key Matching Factors:</h4>\n              <ul className=\"space-y-2\">\n                {decisionSummary.keyFactors.map((factor, index) => (\n                  <li key={index} className=\"text-gray-600 text-sm flex items-center\">\n                    <span className=\"mr-2\">üîó</span>\n                    {factor}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        {/* Alternative Options */}\n        <div className=\"bg-white rounded-xl shadow-lg p-8 mb-8\">\n          <h3 className=\"text-xl font-semibold text-gray-800 flex items-center mb-6\">\n            <span className=\"mr-2\">üîÑ</span> Other Strong Options\n          </h3>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {alternatives.map((alt, index) => (\n                <div\n                  key={index}\n                  className=\"border rounded-lg p-4 hover:border-blue-300 transition-colors\"\n                >\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <h4 className=\"font-semibold text-gray-800\">{alt.name}</h4>\n                    <span className=\"bg-gray-100 px-2 py-1 rounded text-sm text-gray-600\">\n                      {alt.score}% Match\n                    </span>\n                  </div>\n                  <p className=\"text-gray-600 text-sm mb-3\">{alt.explanation}</p>\n                  <div>\n                    <h5 className=\"text-xs font-medium text-gray-700 mb-2\">Key Features:</h5>\n                    <ul className=\"space-y-1\">\n                      {alt.keyFeatures.slice(0, 3).map((feature, i) => (\n                        <li key={i} className=\"text-xs text-gray-600\">\n                          ‚Ä¢ {feature}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              ))}\n            </div>\n        </div>\n\n\n\n\n\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-center gap-4 mb-8 flex-wrap\">\n          <button\n            onClick={handlePrint}\n            className=\"px-8 py-3 bg-gradient-to-r from-green-600 to-emerald-600 text-white font-bold text-lg rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all\"\n          >\n            üñ®Ô∏è Print Results\n          </button>\n          <button\n            onClick={resetAndStartOver}\n            className=\"px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-bold text-lg rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all\"\n          >\n            üöÄ Start New Assessment\n          </button>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n"],"names":["BALANCED_PUMP_QUESTIONS","q","ANSWER_MAPPINGS","PumpFeatureEngine","answers","questionId","answer","answerValues","answerValue","mappings","m","mapping","pref","pump","matchDetails","explanations","topMatches","_","details","a","b","dimension","featureExplanation","value","factors","priorityMap","f","pumpFeatureEngine","PumpDriveAIService","allResponses","userProfile","preferenceAnalysis","pumpDetails","prompt","response","openAIService","recommendation","error","logError","responses","profile","categoryNames","category","data","displayName","analysis","categories","formattedDB","PUMP_DATABASE","index","capacity","adhesive","alerts","travel","caregiver","wear","jsonMatch","logWarn","formattedResponses","item","categoryKey","categoryData","sliders","features","freeTextData","clarifyingResponses","aiError","fallbackRecommendation","topRecommendation","score","reasons","selectedFeatures","alt","freeText","key","feature","question","context","logDebug","logInfo","userContext","attempt","resolve","topChoice","questionLower","pumpDriveAIService","PumpDriveFeatureBasedService","aiResult","recommendations","allAnswerText","twiistPump","p","topPump","topExplanation","detailedAnalysis","userStory","combinedUserText","allText","hasWeightPreference","valueText","aiRecommendation","altPump","pros","cons","topScore","alternatives","secondScore","gap","decisionFactors","top3","comparison","recommendationText","pumpDriveFeatureBasedService","PumpAssessmentService","patientName","sliderValues","personalStory","challenges","priorities","conversationHistory","assessmentFlow","assessmentData","authHeaders","pumpAuthService","errorData","result","defaultName","assessmentId","pumpAssessmentService","extractPumpNameFromText","text","pumpNames","patterns","pattern","match","extracted","PumpDriveResults","navigate","useNavigate","setRecommendation","useState","loading","setLoading","setError","hasAttempted","setHasAttempted","assessmentSaved","setAssessmentSaved","setAssessmentId","saveAssessmentToDatabase","recommendationData","currentUser","existingConversation","useEffect","generateRecommendations","sliderData","featureData","clarifyingData","userData","apiResult","simplifiedResult","extractedPumpName","converted","altText","extractedAltName","simplifiedAIError","azureResult","azureError","combinedAnswers","textData","storedAnswers","savedRec","legacyRec","resetAndStartOver","handlePrint","jsx","jsxs","decisionSummary","parsed","userText","pro","con","priority","factor","i"],"mappings":"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"}