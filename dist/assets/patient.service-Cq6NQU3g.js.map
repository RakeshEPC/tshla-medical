{"version":3,"file":"patient.service-Cq6NQU3g.js","sources":["../../src/services/patient.service.ts"],"sourcesContent":["import type {\n  Patient,\n  PatientRegistration,\n  PatientLogin,\n  PatientSession,\n  PumpRecommendation,\n  PersonalizedReport\n} from '../types/patient.types';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nclass PatientService {\n  private readonly STORAGE_PREFIX = 'tshla_patient_';\n  private readonly SESSION_KEY = 'tshla_patient_session';\n  \n  /**\n   * Generate unique 8-digit internal ID\n   */\n  private generateInternalId(): string {\n    // Generate 8-digit number starting with non-zero\n    const min = 10000000;\n    const max = 99999999;\n    let id: string;\n    \n    do {\n      id = Math.floor(Math.random() * (max - min + 1) + min).toString();\n    } while (this.internalIdExists(id));\n    \n    return id;\n  }\n  \n  /**\n   * Generate AVA patient ID in format AVA ###-###\n   */\n  private generateAvaId(): string {\n    let avaId: string;\n    \n    do {\n      const firstPart = Math.floor(Math.random() * 900 + 100); // 100-999\n      const secondPart = Math.floor(Math.random() * 900 + 100); // 100-999\n      avaId = `AVA ${firstPart}-${secondPart}`;\n    } while (this.avaIdExists(avaId));\n    \n    return avaId;\n  }\n  \n  /**\n   * Check if internal ID already exists\n   */\n  private internalIdExists(id: string): boolean {\n    const allPatients = this.getAllPatients();\n    return allPatients.some(p => p.internalId === id);\n  }\n  \n  /**\n   * Check if AVA ID already exists\n   */\n  private avaIdExists(avaId: string): boolean {\n    const allPatients = this.getAllPatients();\n    return allPatients.some(p => p.patientAvaId === avaId);\n  }\n  \n  /**\n   * Register new patient\n   */\n  async registerPatient(registration: PatientRegistration): Promise<Patient> {\n    // Generate unique IDs\n    const internalId = this.generateInternalId();\n    const patientAvaId = this.generateAvaId();\n    \n    // Create patient object\n    const patient: Patient = {\n      internalId,\n      patientAvaId,\n      firstName: registration.firstName,\n      lastName: registration.lastName,\n      email: registration.email.toLowerCase(),\n      phone: registration.phone,\n      dateOfBirth: registration.dateOfBirth,\n      createdAt: new Date().toISOString(),\n      isActive: true,\n      hasCompletedOnboarding: false,\n      programs: {\n        pumpdrive: {\n          enrolled: registration.program === 'pumpdrive' || registration.program === 'both'\n        },\n        weightloss: {\n          enrolled: registration.program === 'weightloss' || registration.program === 'both'\n        }\n      },\n      preferences: {\n        communicationMethod: 'email',\n        language: 'en',\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n      }\n    };\n    \n    // Save to storage (in production, this would be a database call)\n    this.savePatient(patient);\n    \n    // Send welcome email with AVA ID\n    await this.sendWelcomeEmail(patient);\n    \n    return patient;\n  }\n  \n  /**\n   * Patient login with AVA ID\n   */\n  async loginWithAvaId(login: PatientLogin): Promise<{ patient: Patient; session: PatientSession }> {\n    let patient: Patient | null = null;\n    \n    // Try login with AVA ID\n    if (login.avaId) {\n      const formattedAvaId = this.formatAvaId(login.avaId);\n      patient = this.getPatientByAvaId(formattedAvaId);\n    }\n    \n    // Fallback to email if provided\n    if (!patient && login.email) {\n      patient = this.getPatientByEmail(login.email.toLowerCase());\n    }\n    \n    if (!patient) {\n      throw new Error('Invalid login credentials');\n    }\n    \n    // Update last login\n    patient.lastLogin = new Date().toISOString();\n    this.savePatient(patient);\n    \n    // Create session\n    const session = this.createSession(patient);\n    \n    return { patient, session };\n  }\n  \n  /**\n   * Format AVA ID to ensure consistent format\n   */\n  private formatAvaId(input: string): string {\n    // Remove all non-alphanumeric characters\n    const cleaned = input.replace(/[^A-Z0-9]/gi, '');\n    \n    // Check if it starts with AVA\n    if (!cleaned.toUpperCase().startsWith('AVA')) {\n      throw new Error('Invalid AVA ID format');\n    }\n    \n    // Extract numbers after AVA\n    const numbers = cleaned.substring(3);\n    if (numbers.length !== 6) {\n      throw new Error('Invalid AVA ID format');\n    }\n    \n    // Format as AVA ###-###\n    return `AVA ${numbers.substring(0, 3)}-${numbers.substring(3, 6)}`;\n  }\n  \n  /**\n   * Create patient session\n   */\n  private createSession(patient: Patient): PatientSession {\n    const session: PatientSession = {\n      sessionId: this.generateSessionId(),\n      patientAvaId: patient.patientAvaId,\n      internalId: patient.internalId,\n      startedAt: new Date().toISOString(),\n      lastActivity: new Date().toISOString(),\n      isActive: true,\n      deviceInfo: {\n        userAgent: navigator.userAgent\n      }\n    };\n    \n    // Save to session storage\n    sessionStorage.setItem(this.SESSION_KEY, JSON.stringify(session));\n    \n    return session;\n  }\n  \n  /**\n   * Generate unique session ID\n   */\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;\n  }\n  \n  /**\n   * Get current session\n   */\n  getCurrentSession(): PatientSession | null {\n    const stored = sessionStorage.getItem(this.SESSION_KEY);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (e) {\n        logError('patient', 'Error message', {});\n      }\n    }\n    return null;\n  }\n  \n  /**\n   * Get current logged-in patient\n   */\n  getCurrentPatient(): Patient | null {\n    const session = this.getCurrentSession();\n    if (session) {\n      return this.getPatientByInternalId(session.internalId);\n    }\n    return null;\n  }\n  \n  /**\n   * Logout current patient\n   */\n  logout(): void {\n    sessionStorage.removeItem(this.SESSION_KEY);\n  }\n  \n  /**\n   * Save patient to storage\n   */\n  private savePatient(patient: Patient): void {\n    // Save by internal ID\n    localStorage.setItem(\n      `${this.STORAGE_PREFIX}id_${patient.internalId}`,\n      JSON.stringify(patient)\n    );\n    \n    // Also save lookup by AVA ID\n    localStorage.setItem(\n      `${this.STORAGE_PREFIX}ava_${patient.patientAvaId.replace(/\\s/g, '_')}`,\n      patient.internalId\n    );\n    \n    // Save lookup by email\n    localStorage.setItem(\n      `${this.STORAGE_PREFIX}email_${patient.email}`,\n      patient.internalId\n    );\n    \n    // Update patient index\n    this.updatePatientIndex(patient.internalId);\n  }\n  \n  /**\n   * Update patient index\n   */\n  private updatePatientIndex(internalId: string): void {\n    const indexKey = `${this.STORAGE_PREFIX}index`;\n    const stored = localStorage.getItem(indexKey);\n    let index: string[] = [];\n    \n    if (stored) {\n      try {\n        index = JSON.parse(stored);\n      } catch (e) {\n        logError('patient', 'Error message', {});\n      }\n    }\n    \n    if (!index.includes(internalId)) {\n      index.push(internalId);\n      localStorage.setItem(indexKey, JSON.stringify(index));\n    }\n  }\n  \n  /**\n   * Get patient by internal ID\n   */\n  getPatientByInternalId(internalId: string): Patient | null {\n    const stored = localStorage.getItem(`${this.STORAGE_PREFIX}id_${internalId}`);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (e) {\n        logError('patient', 'Error message', {});\n      }\n    }\n    return null;\n  }\n  \n  /**\n   * Get patient by AVA ID\n   */\n  getPatientByAvaId(avaId: string): Patient | null {\n    const lookupKey = `${this.STORAGE_PREFIX}ava_${avaId.replace(/\\s/g, '_')}`;\n    const internalId = localStorage.getItem(lookupKey);\n    \n    if (internalId) {\n      return this.getPatientByInternalId(internalId);\n    }\n    return null;\n  }\n  \n  /**\n   * Get patient by email\n   */\n  getPatientByEmail(email: string): Patient | null {\n    const lookupKey = `${this.STORAGE_PREFIX}email_${email.toLowerCase()}`;\n    const internalId = localStorage.getItem(lookupKey);\n    \n    if (internalId) {\n      return this.getPatientByInternalId(internalId);\n    }\n    return null;\n  }\n  \n  /**\n   * Get all patients (for admin use)\n   */\n  getAllPatients(): Patient[] {\n    const indexKey = `${this.STORAGE_PREFIX}index`;\n    const stored = localStorage.getItem(indexKey);\n    \n    if (!stored) return [];\n    \n    try {\n      const index: string[] = JSON.parse(stored);\n      return index\n        .map(id => this.getPatientByInternalId(id))\n        .filter(p => p !== null) as Patient[];\n    } catch (e) {\n      logError('patient', 'Error message', {});\n      return [];\n    }\n  }\n  \n  /**\n   * Update patient program data\n   */\n  updatePatientProgram(\n    internalId: string,\n    program: 'pumpdrive' | 'weightloss',\n    data: any\n  ): Patient | null {\n    const patient = this.getPatientByInternalId(internalId);\n    if (!patient) return null;\n    \n    if (!patient.programs[program]) {\n      patient.programs[program] = { enrolled: true } as any;\n    }\n    \n    patient.programs[program] = {\n      ...patient.programs[program],\n      ...data\n    };\n    \n    this.savePatient(patient);\n    return patient;\n  }\n  \n  /**\n   * Save pump recommendations for patient\n   */\n  savePumpRecommendations(\n    internalId: string,\n    recommendations: PumpRecommendation[]\n  ): void {\n    const patient = this.getPatientByInternalId(internalId);\n    if (!patient) return;\n    \n    if (!patient.programs.pumpdrive) {\n      patient.programs.pumpdrive = { enrolled: true };\n    }\n    \n    patient.programs.pumpdrive.finalRecommendations = recommendations;\n    patient.programs.pumpdrive.lastActivity = new Date().toISOString();\n    \n    this.savePatient(patient);\n  }\n  \n  /**\n   * Save personalized report for patient\n   */\n  savePersonalizedReport(\n    internalId: string,\n    report: PersonalizedReport\n  ): void {\n    const patient = this.getPatientByInternalId(internalId);\n    if (!patient) return;\n    \n    if (!patient.programs.pumpdrive) {\n      patient.programs.pumpdrive = { enrolled: true };\n    }\n    \n    patient.programs.pumpdrive.personalReport = report;\n    patient.programs.pumpdrive.lastActivity = new Date().toISOString();\n    \n    this.savePatient(patient);\n  }\n  \n  /**\n   * Send welcome email with AVA ID\n   */\n  private async sendWelcomeEmail(patient: Patient): Promise<void> {\n    // In production, this would call an email service\n    logDebug('patient', 'Debug message', {});\n  }\n}\n\nexport const patientService = new PatientService();"],"names":["PatientService","id","avaId","firstPart","secondPart","p","registration","internalId","patientAvaId","patient","login","formattedAvaId","session","input","cleaned","numbers","stored","logError","indexKey","index","lookupKey","email","program","data","recommendations","report","logDebug","patientService"],"mappings":"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"}