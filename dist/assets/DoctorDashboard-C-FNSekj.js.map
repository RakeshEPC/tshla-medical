{"version":3,"file":"DoctorDashboard-C-FNSekj.js","sources":["../../src/lib/schedule-storage.ts","../../src/utils/appointmentMigration.ts","../../src/pages/DoctorDashboard.tsx"],"sourcesContent":["import { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n/**\n * Schedule Storage Service\n * Provides persistent storage for doctor schedules\n */\n\ninterface ScheduleData {\n  [date: string]: any[];\n}\n\nclass ScheduleStorage {\n  private storageKey = 'doctor_schedule_data';\n  private backupKey = 'doctor_schedule_backup';\n\n  /**\n   * Save schedule data for a specific date\n   */\n  saveSchedule(date: string, slots: any[]): void {\n    try {\n      // Get all schedule data\n      const allSchedules = this.getAllSchedules();\n\n      // Update the specific date\n      allSchedules[date] = slots;\n\n      // Save to localStorage\n      localStorage.setItem(this.storageKey, JSON.stringify(allSchedules));\n\n      // Create backup\n      localStorage.setItem(\n        this.backupKey,\n        JSON.stringify({\n          data: allSchedules,\n          lastSaved: new Date().toISOString(),\n        })\n      );\n\n      // Also save to sessionStorage for immediate access\n      sessionStorage.setItem(`schedule_${date}`, JSON.stringify(slots));\n    } catch (error) {\n      logError('App', 'Error message', {});\n    }\n  }\n\n  /**\n   * Load schedule data for a specific date\n   */\n  loadSchedule(date: string): any[] {\n    try {\n      // First check sessionStorage for recent data\n      const sessionData = sessionStorage.getItem(`schedule_${date}`);\n      if (sessionData) {\n        return JSON.parse(sessionData);\n      }\n\n      // Then check main storage\n      const allSchedules = this.getAllSchedules();\n      return allSchedules[date] || [];\n    } catch (error) {\n      logError('App', 'Error message', {});\n\n      // Try to restore from backup\n      return this.restoreFromBackup(date);\n    }\n  }\n\n  /**\n   * Get all schedules\n   */\n  getAllSchedules(): ScheduleData {\n    try {\n      const data = localStorage.getItem(this.storageKey);\n      return data ? JSON.parse(data) : {};\n    } catch (error) {\n      logError('App', 'Error message', {});\n      return {};\n    }\n  }\n\n  /**\n   * Restore from backup\n   */\n  private restoreFromBackup(date: string): any[] {\n    try {\n      const backup = localStorage.getItem(this.backupKey);\n      if (backup) {\n        const { data } = JSON.parse(backup);\n        return data[date] || [];\n      }\n    } catch (error) {\n      logError('App', 'Error message', {});\n    }\n    return [];\n  }\n\n  /**\n   * Export all schedule data as JSON\n   */\n  exportSchedules(): string {\n    const schedules = this.getAllSchedules();\n    return JSON.stringify(\n      {\n        version: '1.0',\n        exportDate: new Date().toISOString(),\n        schedules: schedules,\n      },\n      null,\n      2\n    );\n  }\n\n  /**\n   * Import schedule data from JSON\n   */\n  importSchedules(jsonData: string): boolean {\n    try {\n      const imported = JSON.parse(jsonData);\n\n      if (imported.schedules) {\n        // Merge with existing data\n        const existing = this.getAllSchedules();\n        const merged = { ...existing, ...imported.schedules };\n\n        localStorage.setItem(this.storageKey, JSON.stringify(merged));\n        return true;\n      }\n    } catch (error) {\n      logError('App', 'Error message', {});\n    }\n    return false;\n  }\n\n  /**\n   * Clear all schedule data\n   */\n  clearAll(): void {\n    localStorage.removeItem(this.storageKey);\n    localStorage.removeItem(this.backupKey);\n\n    // Clear sessionStorage\n    const keys = Object.keys(sessionStorage);\n    keys.forEach(key => {\n      if (key.startsWith('schedule_')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n  }\n\n  /**\n   * Initialize demo data\n   */\n  initializeDemoData(): void {\n    const today = new Date();\n    const dates = [];\n\n    // Create sample data for past 7 days and next 7 days\n    for (let i = -7; i <= 7; i++) {\n      const date = new Date(today);\n      date.setDate(date.getDate() + i);\n      const dateStr = date.toISOString().split('T')[0];\n\n      if (i < 0) {\n        // Past appointments (completed)\n        this.saveSchedule(dateStr, [\n          {\n            id: `demo_${dateStr}_1`,\n            time: '09:00',\n            initials: 'JD',\n            name: 'John Doe',\n            status: 'completed',\n            notes: 'Routine checkup',\n          },\n          {\n            id: `demo_${dateStr}_2`,\n            time: '14:00',\n            initials: 'JS',\n            name: 'Jane Smith',\n            status: 'completed',\n            notes: 'Follow-up',\n          },\n        ]);\n      } else if (i === 0) {\n        // Today - some scheduled\n        this.saveSchedule(dateStr, [\n          {\n            id: `demo_${dateStr}_1`,\n            time: '10:00',\n            initials: 'AB',\n            name: 'Alice Brown',\n            status: 'scheduled',\n            notes: '',\n          },\n        ]);\n      } else if (i <= 3) {\n        // Next few days - some scheduled\n        this.saveSchedule(dateStr, [\n          {\n            id: `demo_${dateStr}_1`,\n            time: '11:00',\n            initials: 'CD',\n            name: 'Charlie Davis',\n            status: 'scheduled',\n            notes: '',\n          },\n        ]);\n      }\n    }\n  }\n}\n\n// Export singleton instance\nexport const scheduleStorage = new ScheduleStorage();\n","/**\n * Appointment Migration Utility\n * Consolidates appointments from different storage systems\n */\n\nimport { scheduleStorage } from '../lib/schedule-storage';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\ninterface SimpleAppointment {\n  id: string;\n  patientId: string;\n  patientName: string;\n  patientPhone?: string;\n  patientEmail?: string;\n  chartId?: string;\n  doctorId: string;\n  doctorName: string;\n  date: string;\n  time: string;\n  duration: number;\n  status: 'scheduled' | 'completed' | 'cancelled' | 'no-show';\n  visitType: string;\n  visitReason: string;\n  notes?: string;\n  createdAt: Date;\n}\n\ninterface ScheduleSlot {\n  id: string;\n  time: string;\n  initials: string;\n  name?: string;\n  status: 'scheduled' | 'completed' | 'in-progress';\n  notes?: string;\n}\n\nexport class AppointmentMigration {\n  /**\n   * Get all appointments from different storage systems\n   */\n  static getAllStoredAppointments() {\n    const results = {\n      simpleAppointments: [],\n      scheduleSlots: {},\n      sessionData: {},\n    };\n\n    try {\n      // 1. Check SimpleAppointmentService storage\n      const simpleAppts = localStorage.getItem('tshla_simple_appointments');\n      if (simpleAppts) {\n        results.simpleAppointments = JSON.parse(simpleAppts);\n      }\n\n      // 2. Check ScheduleStorage\n      results.scheduleSlots = scheduleStorage.getAllSchedules();\n\n      // 3. Check session storage for recent data\n      Object.keys(sessionStorage).forEach(key => {\n        if (key.startsWith('schedule_')) {\n          const data = sessionStorage.getItem(key);\n          if (data) {\n            results.sessionData[key] = JSON.parse(data);\n          }\n        }\n      });\n\n      // 4. Check for current patient session\n      const currentPatient = sessionStorage.getItem('current_patient');\n      if (currentPatient) {\n        results.sessionData['current_patient'] = JSON.parse(currentPatient);\n      }\n    } catch (error) {\n      logError('App', 'Error message', {});\n    }\n\n    return results;\n  }\n\n  /**\n   * Convert SimpleAppointments to ScheduleSlots format\n   */\n  static convertSimpleAppointmentsToSlots(appointments: SimpleAppointment[]): {\n    [date: string]: ScheduleSlot[];\n  } {\n    const slotsByDate: { [date: string]: ScheduleSlot[] } = {};\n\n    appointments.forEach(appt => {\n      if (!slotsByDate[appt.date]) {\n        slotsByDate[appt.date] = [];\n      }\n\n      const slot: ScheduleSlot = {\n        id: appt.id,\n        time: appt.time,\n        initials: appt.patientName\n          .split(' ')\n          .map(n => n[0])\n          .join('')\n          .toUpperCase(),\n        name: appt.patientName,\n        status:\n          appt.status === 'scheduled'\n            ? 'scheduled'\n            : appt.status === 'completed'\n              ? 'completed'\n              : 'scheduled',\n        notes: appt.notes || `${appt.visitType}: ${appt.visitReason}`,\n      };\n\n      slotsByDate[appt.date].push(slot);\n    });\n\n    return slotsByDate;\n  }\n\n  /**\n   * Migrate all appointments to unified storage\n   */\n  static migrateToUnifiedStorage() {\n    logDebug('App', 'Debug message', {});\n\n    const allData = this.getAllStoredAppointments();\n    let migrationCount = 0;\n\n    // Convert SimpleAppointments to slots format\n    if (allData.simpleAppointments.length > 0) {\n      logDebug('App', 'Debug message', {});\n      const convertedSlots = this.convertSimpleAppointmentsToSlots(allData.simpleAppointments);\n\n      Object.keys(convertedSlots).forEach(date => {\n        const existingSlots = scheduleStorage.loadSchedule(date);\n        const mergedSlots = [...existingSlots, ...convertedSlots[date]];\n\n        // Remove duplicates based on patient name and time\n        const uniqueSlots = mergedSlots.filter(\n          (slot, index, arr) =>\n            arr.findIndex(s => s.name === slot.name && s.time === slot.time) === index\n        );\n\n        scheduleStorage.saveSchedule(date, uniqueSlots);\n        migrationCount += convertedSlots[date].length;\n      });\n    }\n\n    // Merge session data\n    Object.keys(allData.sessionData).forEach(key => {\n      if (key.startsWith('schedule_')) {\n        const date = key.replace('schedule_', '');\n        const existingSlots = scheduleStorage.loadSchedule(date);\n        const sessionSlots = allData.sessionData[key];\n\n        if (Array.isArray(sessionSlots)) {\n          const mergedSlots = [...existingSlots, ...sessionSlots];\n          const uniqueSlots = mergedSlots.filter(\n            (slot, index, arr) =>\n              arr.findIndex(s => s.name === slot.name && s.time === slot.time) === index\n          );\n\n          scheduleStorage.saveSchedule(date, uniqueSlots);\n        }\n      }\n    });\n\n    logInfo('App', 'Info message', {});\n    return migrationCount;\n  }\n\n  /**\n   * Debug function to show all stored data\n   */\n  static debugShowAllData() {\n    const allData = this.getAllStoredAppointments();\n    logDebug('App', 'Debug message', {});\n\n    logDebug('App', 'Debug message', {});\n    logDebug('App', 'Debug message', {});\n    logDebug('App', 'Debug message', {});\n    logDebug('App', 'Debug message', {});\n\n    return allData;\n  }\n\n  /**\n   * Create a backup of all appointment data\n   */\n  static createBackup() {\n    const allData = this.getAllStoredAppointments();\n    const backup = {\n      timestamp: new Date().toISOString(),\n      data: allData,\n    };\n\n    const backupString = JSON.stringify(backup, null, 2);\n    localStorage.setItem('appointment_backup_' + Date.now(), backupString);\n\n    logDebug('App', 'Debug message', {});\n    return backupString;\n  }\n}\n\n// Auto-run migration when this module is imported\nexport function runAppointmentMigration() {\n  try {\n    logDebug('App', 'Debug message', {});\n\n    // Create backup first\n    AppointmentMigration.createBackup();\n\n    // Show current data\n    AppointmentMigration.debugShowAllData();\n\n    // Run migration\n    const migratedCount = AppointmentMigration.migrateToUnifiedStorage();\n\n    if (migratedCount > 0) {\n      logDebug('App', 'Debug message', {});\n      logDebug('App', 'Debug message', {});\n    } else {\n      logDebug('App', 'Debug message', {});\n    }\n\n    return true;\n  } catch (error) {\n    logError('App', 'Error message', {});\n    return false;\n  }\n}\n","import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { unifiedAuthService } from '../services/unifiedAuth.service';\nimport { scheduleDatabaseService } from '../services/scheduleDatabase.service';\nimport ProviderDailySchedule from '../components/ProviderDailySchedule';\nimport ScheduleImportModal from '../components/ScheduleImportModal';\nimport { runAppointmentMigration } from '../utils/appointmentMigration';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\ninterface Patient {\n  id: string;\n  name: string;\n  mrn: string;\n  appointmentTime: string;\n  status: 'pending' | 'in-progress' | 'completed';\n  phone?: string;\n  dob?: string;\n  isPlaceholder?: boolean;\n}\n\n// Generate time slots for the day\nconst generateTimeSlots = () => {\n  const slots = [];\n  // Morning slots (9 AM to 12 PM)\n  for (let hour = 9; hour < 12; hour++) {\n    slots.push(`${hour}:00 AM`);\n    slots.push(`${hour}:30 AM`);\n  }\n  // Noon\n  slots.push('12:00 PM');\n  slots.push('12:30 PM');\n  // Afternoon slots (1 PM to 5 PM)\n  for (let hour = 1; hour <= 5; hour++) {\n    slots.push(`${hour}:00 PM`);\n    slots.push(`${hour}:30 PM`);\n  }\n  return slots;\n};\n\nexport default function DoctorDashboard() {\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n  const currentUser = unifiedAuthService.getCurrentUser();\n  const currentDoctor = currentUser?.name || \"Dr. Smith\";\n  const providerId = currentUser?.id || currentUser?.email || 'doctor-default-001';\n\n  const [viewMode, setViewMode] = useState<'slots' | 'provider-daily'>('slots');\n  const [showImportModal, setShowImportModal] = useState(false);\n  const [showNewVersion] = useState(true);\n\n  // Date navigation state\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n\n  logInfo('DoctorDashboard', 'Component initialized', { timestamp: new Date() });\n\n  // Initialize with empty array - we'll load from database\n  const [patients, setPatients] = useState<Patient[]>([]);\n\n  const [showAddPatient, setShowAddPatient] = useState(false);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState('');\n  const [editingPatient, setEditingPatient] = useState<Patient | null>(null);\n  const [newPatient, setNewPatient] = useState({\n    name: '',\n    mrn: '',\n    appointmentTime: '',\n    phone: '',\n    dob: ''\n  });\n\n  const timeSlots = generateTimeSlots();\n\n  // Run appointment migration on first load\n  useEffect(() => {\n    // Run migration to consolidate appointments from different storage systems\n    runAppointmentMigration();\n  }, []); // Run once on component mount\n\n  // Load schedule from database when date or provider changes\n  useEffect(() => {\n    loadScheduleFromDatabase();\n  }, [selectedDate, providerId]);\n\n  const loadScheduleFromDatabase = async () => {\n    setIsLoading(true);\n    try {\n      const schedule = await scheduleDatabaseService.getScheduleForDate(providerId, selectedDate);\n      setPatients(schedule);\n      logDebug('DoctorDashboard', 'Debug message', {});\n    } catch (error) {\n      logError('DoctorDashboard', 'Error message', {});\n      setSaveStatus('error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Save appointment to database\n  const saveAppointmentToDatabase = async (patient: Patient) => {\n    setSaveStatus('saving');\n    try {\n      const success = await scheduleDatabaseService.saveAppointment(\n        providerId,\n        currentDoctor,\n        patient,\n        selectedDate\n      );\n\n      if (success) {\n        setSaveStatus('saved');\n        setTimeout(() => setSaveStatus('idle'), 2000);\n        // Reload to get fresh data with IDs\n        loadScheduleFromDatabase();\n      } else {\n        setSaveStatus('error');\n      }\n    } catch (error) {\n      logError('DoctorDashboard', 'Error message', {});\n      setSaveStatus('error');\n    }\n  };\n\n  const startDictation = (patientId: string) => {\n    navigate(`/dictation/${patientId}`);\n  };\n\n  // Quick add placeholder patient to a time slot\n  const quickAddPatient = async (timeSlot: string) => {\n    const placeholder: Patient = {\n      id: `placeholder-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: `Patient @ ${timeSlot}`,\n      mrn: `TBD-${Date.now().toString().slice(-6)}`,\n      appointmentTime: timeSlot,\n      status: 'pending',\n      isPlaceholder: true\n    };\n\n    // Add to local state immediately for responsive UI\n    const updatedPatients = [...patients, placeholder].sort((a, b) => {\n      const timeA = convertTo24Hour(a.appointmentTime);\n      const timeB = convertTo24Hour(b.appointmentTime);\n      return timeA.localeCompare(timeB);\n    });\n    setPatients(updatedPatients);\n    setSelectedTimeSlot('');\n\n    // Save to database\n    await saveAppointmentToDatabase(placeholder);\n  };\n\n  // Edit patient information\n  const editPatientInfo = (patient: Patient) => {\n    setEditingPatient(patient);\n    setNewPatient({\n      name: patient.name === `Patient @ ${patient.appointmentTime}` ? '' : patient.name,\n      mrn: patient.mrn.startsWith('TBD-') ? '' : patient.mrn,\n      appointmentTime: patient.appointmentTime,\n      phone: patient.phone || '',\n      dob: patient.dob || ''\n    });\n    setShowAddPatient(true);\n  };\n\n  const addPatientToSchedule = async () => {\n    if (!newPatient.appointmentTime) {\n      alert('Please select an appointment time');\n      return;\n    }\n\n    const patient: Patient = {\n      id: editingPatient?.id || `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: newPatient.name || `Patient @ ${newPatient.appointmentTime}`,\n      mrn: newPatient.mrn || `MRN${Date.now().toString().slice(-6)}`,\n      appointmentTime: newPatient.appointmentTime,\n      status: editingPatient?.status || 'pending',\n      phone: newPatient.phone,\n      isPlaceholder: !newPatient.name\n    };\n\n    let updatedPatients;\n    if (editingPatient) {\n      // Update existing patient\n      updatedPatients = patients.map(p => p.id === editingPatient.id ? patient : p);\n\n      // Update in database if it has a numeric ID (from database)\n      if (editingPatient.id && !editingPatient.id.includes('placeholder')) {\n        await scheduleDatabaseService.updateAppointment(editingPatient.id, patient);\n      } else {\n        // New patient, save to database\n        await saveAppointmentToDatabase(patient);\n      }\n    } else {\n      // Add new patient\n      updatedPatients = [...patients, patient];\n      await saveAppointmentToDatabase(patient);\n    }\n\n    // Sort by appointment time\n    updatedPatients.sort((a, b) => {\n      const timeA = convertTo24Hour(a.appointmentTime);\n      const timeB = convertTo24Hour(b.appointmentTime);\n      return timeA.localeCompare(timeB);\n    });\n\n    setPatients(updatedPatients);\n\n    // Reset form\n    setNewPatient({\n      name: '',\n      mrn: '',\n      appointmentTime: '',\n      phone: '',\n      dob: ''\n    });\n    setShowAddPatient(false);\n    setEditingPatient(null);\n  };\n\n  const convertTo24Hour = (time12h: string): string => {\n    const [time, modifier] = time12h.split(' ');\n    let [hours, minutes] = time.split(':');\n    if (hours === '12') {\n      hours = modifier === 'AM' ? '00' : '12';\n    } else if (modifier === 'PM') {\n      hours = String(parseInt(hours, 10) + 12);\n    }\n    return `${hours.padStart(2, '0')}:${minutes}`;\n  };\n\n  const removePatient = async (patientId: string) => {\n    // Remove from local state immediately\n    const updatedPatients = patients.filter(p => p.id !== patientId);\n    setPatients(updatedPatients);\n\n    // Delete from database if it has a numeric ID (from database)\n    if (patientId && !patientId.includes('placeholder')) {\n      await scheduleDatabaseService.deleteAppointment(patientId);\n    }\n  };\n\n  // Date navigation functions\n  const changeDate = (delta: number) => {\n    const newDate = new Date(selectedDate);\n    newDate.setDate(newDate.getDate() + delta);\n    setSelectedDate(newDate.toISOString().split('T')[0]);\n  };\n\n  const goToToday = () => {\n    setSelectedDate(new Date().toISOString().split('T')[0]);\n  };\n\n  const formatDisplayDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    if (dateString === today.toISOString().split('T')[0]) {\n      return 'Today';\n    } else if (dateString === yesterday.toISOString().split('T')[0]) {\n      return 'Yesterday';\n    } else if (dateString === tomorrow.toISOString().split('T')[0]) {\n      return 'Tomorrow';\n    } else {\n      return date.toLocaleDateString('en-US', {\n        weekday: 'long',\n        month: 'short',\n        day: 'numeric'\n      });\n    }\n  };\n\n  const getOccupiedSlots = () => {\n    return patients.map(p => p.appointmentTime);\n  };\n\n  const occupiedSlots = getOccupiedSlots();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* DATABASE VERSION BANNER */}\n      {showNewVersion && (\n        <div className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white p-4 text-center text-xl font-bold\">\n          🗄️ DATABASE-ENABLED SCHEDULE - SAVE ACROSS DAYS! 🗄️\n        </div>\n      )}\n      \n      {/* Compact Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"px-4\">\n          <div className=\"flex justify-between items-center h-12\">\n            <div className=\"flex items-center space-x-6\">\n              <h1 className=\"text-lg font-semibold\">TSHLA Medical</h1>\n              <span className=\"text-xs text-gray-500\">\n                {currentDoctor?.name || user?.name || 'Dr. Provider'} \n                {currentDoctor?.specialty && ` • ${currentDoctor.specialty}`}\n              </span>\n            </div>\n            \n            {/* Quick Note Button - Center */}\n            <button\n              onClick={() => navigate('/quick-note')}\n              className=\"px-4 py-1.5 bg-purple-600 text-white text-sm font-medium rounded-lg hover:bg-purple-700 transition flex items-center gap-2\"\n            >\n              ⚡ Quick Note\n            </button>\n            \n            {/* Header Links */}\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={() => navigate('/doctor/templates')}\n                className=\"text-xs text-blue-600 hover:text-blue-800 font-medium\"\n              >\n                📝 Templates\n              </button>\n              <button\n                onClick={() => navigate('/doctor/profile')}\n                className=\"text-xs text-blue-600 hover:text-blue-800 font-medium\"\n              >\n                ⚙️ Profile\n              </button>\n              <button\n                onClick={logout}\n                className=\"text-xs text-gray-600 hover:text-gray-900\"\n              >\n                Sign Out\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n      {/* Main Content - Always show slots view */}\n      {(\n      <div className=\"flex gap-3 p-3 bg-gray-50 min-h-screen\">\n        {/* Compact Stats Bar - Left Side */}\n        <div className=\"w-44\">\n          {/* Mini Stats Card */}\n          <div className=\"bg-white rounded-lg shadow-sm p-3 mb-3\">\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div className=\"text-center py-1\">\n                <p className=\"text-xl font-bold text-blue-600\">{patients.length}</p>\n                <p className=\"text-xs text-gray-500\">Total</p>\n              </div>\n              <div className=\"text-center py-1\">\n                <p className=\"text-xl font-bold text-green-600\">{patients.filter(p => p.status === 'completed').length}</p>\n                <p className=\"text-xs text-gray-500\">Done</p>\n              </div>\n              <div className=\"text-center py-1\">\n                <p className=\"text-xl font-bold text-yellow-600\">{patients.filter(p => p.status === 'in-progress').length}</p>\n                <p className=\"text-xs text-gray-500\">Active</p>\n              </div>\n              <div className=\"text-center py-1\">\n                <p className=\"text-xl font-bold text-gray-500\">{patients.filter(p => p.status === 'pending').length}</p>\n                <p className=\"text-xs text-gray-500\">Pending</p>\n              </div>\n            </div>\n          </div>\n          \n          {/* Quick Actions */}\n          <div className=\"space-y-2\">\n            <button\n              onClick={() => navigate('/quick-note')}\n              className=\"w-full px-3 py-2 bg-purple-600 text-white text-sm font-medium rounded-lg hover:bg-purple-700 transition\"\n            >\n              ⚡ Quick Note\n            </button>\n            <button\n              onClick={() => {\n                setEditingPatient(null);\n                setNewPatient({ name: '', mrn: '', appointmentTime: '', phone: '', dob: '' });\n                setShowAddPatient(true);\n              }}\n              className=\"w-full px-3 py-2 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700 transition\"\n            >\n              + Add Patient\n            </button>\n          </div>\n        </div>\n        \n        {/* Main Schedule Area - Takes Most Space */}\n        <div className=\"flex-1\">\n          <div className=\"bg-white rounded-lg shadow-sm h-[calc(100vh-100px)]\">\n            {/* Schedule Header with Date Navigation */}\n            <div className=\"px-4 py-3 border-b bg-gradient-to-r from-blue-50 to-indigo-50\">\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <h2 className=\"text-xl font-bold text-gray-900\">📅 Schedule - DATABASE ENABLED</h2>\n\n                  {/* Date Navigation */}\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <button\n                      onClick={() => changeDate(-1)}\n                      className=\"px-2 py-1 bg-gray-200 hover:bg-gray-300 rounded text-sm transition\"\n                    >\n                      ← Previous\n                    </button>\n\n                    <span className=\"text-sm font-medium text-gray-700 px-3\">\n                      {formatDisplayDate(selectedDate)} ({selectedDate})\n                    </span>\n\n                    <button\n                      onClick={() => changeDate(1)}\n                      className=\"px-2 py-1 bg-gray-200 hover:bg-gray-300 rounded text-sm transition\"\n                    >\n                      Next →\n                    </button>\n\n                    <button\n                      onClick={goToToday}\n                      className=\"px-2 py-1 bg-blue-600 text-white hover:bg-blue-700 rounded text-sm transition ml-2\"\n                    >\n                      Today\n                    </button>\n\n                    <input\n                      type=\"date\"\n                      value={selectedDate}\n                      onChange={(e) => setSelectedDate(e.target.value)}\n                      className=\"px-2 py-1 border rounded text-sm ml-2\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"text-right\">\n                  <div className=\"flex items-center gap-2\">\n                    {saveStatus !== 'idle' && (\n                      <div className={`text-xs px-2 py-1 rounded ${\n                        saveStatus === 'saving' ? 'bg-yellow-100 text-yellow-800' :\n                        saveStatus === 'saved' ? 'bg-green-100 text-green-800' :\n                        'bg-red-100 text-red-800'\n                      }`}>\n                        {saveStatus === 'saving' ? 'Saving...' :\n                         saveStatus === 'saved' ? 'Saved ✓' : 'Error saving'}\n                      </div>\n                    )}\n\n                    <span className=\"text-sm font-medium text-blue-600 bg-blue-50 px-3 py-1 rounded-full\">\n                      {isLoading ? 'Loading...' : `${patients.length} patients • ${timeSlots.length - patients.length} open`}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Time Slots - Compact Design */}\n            <div className=\"overflow-y-auto\" style={{maxHeight: 'calc(100vh - 230px)'}}>\n              {isLoading ? (\n                <div className=\"flex items-center justify-center p-8\">\n                  <div className=\"text-gray-500\">Loading schedule from database...</div>\n                </div>\n              ) : (\n                <div>\n                  {timeSlots.map(slot => {\n                  const patient = patients.find(p => p.appointmentTime === slot);\n                  const isOccupied = !!patient;\n                  \n                  return (\n                    <div key={slot} className=\"flex items-center border-b border-gray-100 hover:bg-blue-50/50 transition-colors\">\n                      {/* Time Column - More Prominent */}\n                      <div className=\"w-24 py-3 px-4 font-semibold text-gray-700 bg-gray-50 border-r text-sm\">\n                        {slot}\n                      </div>\n                      \n                      {isOccupied && patient ? (\n                        <div className=\"flex-1 py-2.5 px-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex-1\">\n                              <p className={`text-sm font-medium ${patient.isPlaceholder ? 'text-gray-400 italic' : 'text-gray-900'}`}>\n                                {patient.name}\n                              </p>\n                              <p className=\"text-xs text-gray-500\">MRN: {patient.mrn}</p>\n                            </div>\n                            <div className=\"flex items-center gap-1\">\n                              <button\n                                onClick={() => editPatientInfo(patient)}\n                                className=\"p-1.5 text-yellow-600 hover:bg-yellow-50 rounded transition\"\n                                title=\"Edit\"\n                              >\n                                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\n                                </svg>\n                              </button>\n                              <button\n                                onClick={() => startDictation(patient.id)}\n                                className=\"p-1.5 text-blue-600 hover:bg-blue-50 rounded transition\"\n                                title=\"Dictation\"\n                              >\n                                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\" />\n                                </svg>\n                              </button>\n                              <button\n                                onClick={() => removePatient(patient.id)}\n                                className=\"p-1.5 text-red-600 hover:bg-red-50 rounded transition\"\n                                title=\"Remove\"\n                              >\n                                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                                </svg>\n                              </button>\n                            </div>\n                          </div>\n                        </div>\n                      ) : (\n                        <div className=\"flex-1 py-3 px-4\">\n                          <button\n                            onClick={() => quickAddPatient(slot)}\n                            className=\"w-full text-left flex items-center justify-between group\"\n                          >\n                            <span className=\"text-sm text-gray-400 group-hover:text-green-600 transition\">Available</span>\n                            <span className=\"text-xs text-green-600 opacity-0 group-hover:opacity-100 transition\">\n                              + Add\n                            </span>\n                          </button>\n                        </div>\n                      )}\n                    </div>\n                  );\n                  })}\n                </div>\n              )}\n            </div>\n          </div>\n\n        </div>\n\n        {/* Right Side - Patient Form (Only when needed) */}\n        <div className=\"w-96\">\n          {showAddPatient ? (\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">\n                {editingPatient ? 'Edit Patient Information' : 'Add New Patient'}\n              </h3>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Patient Name\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={newPatient.name}\n                    onChange={(e) => setNewPatient({ ...newPatient, name: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"Enter patient name (or leave blank for placeholder)\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    MRN (Medical Record Number)\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={newPatient.mrn}\n                    onChange={(e) => setNewPatient({ ...newPatient, mrn: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"Enter MRN (or leave blank to auto-generate)\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Appointment Time *\n                  </label>\n                  <select\n                    value={newPatient.appointmentTime}\n                    onChange={(e) => setNewPatient({ ...newPatient, appointmentTime: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  >\n                    <option value=\"\">Select a time slot</option>\n                    {timeSlots.map(slot => {\n                      const isOccupied = occupiedSlots.includes(slot) && (!editingPatient || editingPatient.appointmentTime !== slot);\n                      return (\n                        <option key={slot} value={slot} disabled={isOccupied}>\n                          {slot} {isOccupied ? '(Occupied)' : ''}\n                        </option>\n                      );\n                    })}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Phone Number\n                  </label>\n                  <input\n                    type=\"tel\"\n                    value={newPatient.phone}\n                    onChange={(e) => setNewPatient({ ...newPatient, phone: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"(555) 555-5555\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Date of Birth\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={newPatient.dob}\n                    onChange={(e) => setNewPatient({ ...newPatient, dob: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                </div>\n\n                <div className=\"flex space-x-3 pt-4\">\n                  <button\n                    onClick={addPatientToSchedule}\n                    className=\"flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition\"\n                  >\n                    {editingPatient ? 'Update Patient' : 'Add to Schedule'}\n                  </button>\n                  <button\n                    onClick={() => {\n                      setShowAddPatient(false);\n                      setEditingPatient(null);\n                      setNewPatient({ name: '', mrn: '', appointmentTime: '', phone: '', dob: '' });\n                    }}\n                    className=\"flex-1 px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition\"\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-center h-96\">\n              <div className=\"text-center\">\n                <div className=\"text-gray-400 text-6xl mb-4\">📋</div>\n                <p className=\"text-gray-500 text-sm\">Click <span className=\"font-semibold\">+ Full Add</span> to add a patient</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      )}\n\n      {/* Import Modal */}\n      <ScheduleImportModal\n        isOpen={showImportModal}\n        onClose={() => setShowImportModal(false)}\n        onImportComplete={() => {\n          // Refresh the schedule view\n          window.location.reload();\n        }}\n      />\n    </div>\n  );\n}\n"],"names":["ScheduleStorage","date","slots","allSchedules","logError","sessionData","data","backup","schedules","jsonData","imported","merged","key","today","i","dateStr","scheduleStorage","AppointmentMigration","results","simpleAppts","currentPatient","appointments","slotsByDate","appt","slot","n","logDebug","allData","migrationCount","convertedSlots","uniqueSlots","index","arr","s","existingSlots","sessionSlots","logInfo","backupString","runAppointmentMigration","generateTimeSlots","hour","DoctorDashboard","user","logout","useAuth","navigate","useNavigate","currentUser","unifiedAuthService","currentDoctor","providerId","viewMode","setViewMode","useState","showImportModal","setShowImportModal","showNewVersion","selectedDate","setSelectedDate","isLoading","setIsLoading","saveStatus","setSaveStatus","patients","setPatients","showAddPatient","setShowAddPatient","selectedTimeSlot","setSelectedTimeSlot","editingPatient","setEditingPatient","newPatient","setNewPatient","timeSlots","useEffect","loadScheduleFromDatabase","schedule","scheduleDatabaseService","saveAppointmentToDatabase","patient","startDictation","patientId","quickAddPatient","timeSlot","placeholder","updatedPatients","a","b","timeA","convertTo24Hour","timeB","editPatientInfo","addPatientToSchedule","p","time12h","time","modifier","hours","minutes","removePatient","changeDate","delta","newDate","goToToday","formatDisplayDate","dateString","yesterday","tomorrow","occupiedSlots","jsxs","jsx","e","isOccupied","ScheduleImportModal"],"mappings":"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"}