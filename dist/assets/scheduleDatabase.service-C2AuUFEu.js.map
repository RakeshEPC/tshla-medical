{"version":3,"file":"scheduleDatabase.service-C2AuUFEu.js","sources":["../../src/services/scheduleDatabase.service.ts"],"sourcesContent":["import { logError, logWarn, logInfo, logDebug } from './logger.service';\n/**\n * Schedule Database Service\n * Simple service for saving/loading schedules and notes from database\n * Created: September 16, 2025\n */\n\ninterface Patient {\n  id: string;\n  name: string;\n  mrn: string;\n  appointmentTime: string;\n  status: 'pending' | 'in-progress' | 'completed';\n  phone?: string;\n  isPlaceholder?: boolean;\n}\n\ninterface DictatedNote {\n  id?: number;\n  patientName: string;\n  patientMrn?: string;\n  rawTranscript: string;\n  aiProcessedNote: string;\n  recordingMode: 'dictation' | 'conversation';\n  isQuickNote?: boolean;\n  visitDate?: string;\n}\n\nclass ScheduleDatabaseService {\n  private readonly API_BASE_URL = 'http://localhost'; // FORCE localhost for debugging\n\n  /**\n   * Get schedule for a provider on a specific date\n   */\n  async getScheduleForDate(providerId: string, date: string): Promise<Patient[]> {\n    try {\n      const url = `${this.API_BASE_URL}:3003/api/simple/schedule/${providerId}/${date}`;\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch schedule: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to load schedule');\n      }\n\n      return data.appointments || [];\n    } catch (error) {\n      logError('scheduleDatabase', 'Error message', {});\n      // Return empty array as fallback\n      return [];\n    }\n  }\n\n  /**\n   * Save appointment to database\n   */\n  async saveAppointment(\n    providerId: string,\n    providerName: string,\n    patient: Patient,\n    appointmentDate: string\n  ): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.API_BASE_URL}:3003/api/appointments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          provider_id: providerId,\n          provider_name: providerName,\n          patient_name: patient.name,\n          patient_mrn: patient.mrn,\n          patient_phone: patient.phone,\n          start_time: patient.appointmentTime,\n          scheduled_date: appointmentDate,\n          status: patient.status,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to save appointment: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.success;\n    } catch (error) {\n      logError('scheduleDatabase', 'Error message', {});\n      return false;\n    }\n  }\n\n  /**\n   * Update existing appointment\n   */\n  async updateAppointment(appointmentId: string, patient: Patient): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.API_BASE_URL}:3003/api/appointments/${appointmentId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          patientName: patient.name,\n          patientMrn: patient.mrn,\n          patientPhone: patient.phone,\n          appointmentTime: patient.appointmentTime,\n          status: patient.status,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update appointment: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.success;\n    } catch (error) {\n      logError('scheduleDatabase', 'Error message', {});\n      return false;\n    }\n  }\n\n  /**\n   * Delete appointment\n   */\n  async deleteAppointment(appointmentId: string): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.API_BASE_URL}:3003/api/appointments/${appointmentId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to delete appointment: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.success;\n    } catch (error) {\n      logError('scheduleDatabase', 'Error message', {});\n      return false;\n    }\n  }\n\n  /**\n   * Save dictated note to database\n   */\n  async saveNote(\n    providerId: string,\n    providerName: string,\n    note: DictatedNote\n  ): Promise<number | null> {\n    try {\n      const response = await fetch(`${this.API_BASE_URL}:3003/api/dictated-notes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          provider_id: providerId,\n          provider_name: providerName,\n          patient_name: note.patientName,\n          patient_mrn: note.patientMrn,\n          raw_transcript: note.rawTranscript,\n          processed_note: note.aiProcessedNote,\n          recording_mode: note.recordingMode,\n          is_quick_note: note.isQuickNote,\n          visit_date: note.visitDate || new Date().toISOString().split('T')[0],\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to save note: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      if (data.success) {\n        return data.noteId;\n      } else {\n        throw new Error(data.error || 'Failed to save note');\n      }\n    } catch (error) {\n      logError('scheduleDatabase', 'Error message', {});\n      return null;\n    }\n  }\n\n  /**\n   * Get notes for provider\n   */\n  async getNotes(providerId: string, date?: string): Promise<DictatedNote[]> {\n    try {\n      let url = `${this.API_BASE_URL}:3003/api/providers/${providerId}/notes`;\n      if (date) {\n        url += `?date=${date}`;\n      }\n\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch notes: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to load notes');\n      }\n\n      return data.notes || [];\n    } catch (error) {\n      logError('scheduleDatabase', 'Error message', {});\n      return [];\n    }\n  }\n\n  /**\n   * Add patient from QuickNote to today's schedule\n   */\n  async addQuickNotePatientToSchedule(\n    providerId: string,\n    providerName: string,\n    patientName: string,\n    patientMrn?: string\n  ): Promise<boolean> {\n    try {\n      const now = new Date();\n      const appointmentDate = now.toISOString().split('T')[0];\n      const appointmentTime = now.toLocaleTimeString('en-US', {\n        hour12: true,\n        hour: 'numeric',\n        minute: '2-digit',\n      });\n\n      return await this.saveAppointment(\n        providerId,\n        providerName,\n        {\n          id: `quicknote-${Date.now()}`,\n          name: patientName,\n          mrn: patientMrn || `QN-${Date.now()}`,\n          appointmentTime,\n          status: 'completed', // Mark as completed since note was already taken\n          isPlaceholder: false,\n        },\n        appointmentDate\n      );\n    } catch (error) {\n      logError('scheduleDatabase', 'Error message', {});\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const scheduleDatabaseService = new ScheduleDatabaseService();\n"],"names":["ScheduleDatabaseService","providerId","date","url","response","data","logError","providerName","patient","appointmentDate","appointmentId","note","patientName","patientMrn","now","appointmentTime","scheduleDatabaseService"],"mappings":"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"}