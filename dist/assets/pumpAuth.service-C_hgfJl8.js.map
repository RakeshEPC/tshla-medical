{"version":3,"file":"pumpAuth.service-C_hgfJl8.js","sources":["../../src/services/pumpAuth.service.ts"],"sourcesContent":["import { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface UserRegistrationData {\n  email: string;\n  username?: string; // Optional - will be auto-generated if not provided\n  firstName: string;\n  lastName: string;\n  phoneNumber: string;\n  password: string;\n  isResearchParticipant?: boolean;\n  researchData?: ResearchParticipantData;\n  questionnaireData?: PreTreatmentQuestionnaire;\n}\n\nexport interface ResearchParticipantData {\n  fullName: string;\n  dateOfBirth: string;\n  pcpName: string;\n  pcpPhone: string;\n  pcpEmail: string;\n  pcpAddress: string;\n  endocrinologistName: string;\n  endocrinologistPhone: string;\n  endocrinologistEmail: string;\n  endocrinologistAddress: string;\n  mailingAddress: string;\n}\n\nexport interface PreTreatmentQuestionnaire {\n  overallSatisfaction: number;\n  highBloodSugarFrequency: string;\n  lowBloodSugarFrequency: string;\n  convenienceSatisfaction: number;\n  flexibilitySatisfaction: number;\n  understandingSatisfaction: number;\n  continuationLikelihood: number;\n  recommendationLikelihood: number;\n  additionalComments: string;\n}\n\nexport interface User {\n  id: number;\n  email: string;\n  username: string;\n  firstName?: string;\n  lastName?: string;\n  phoneNumber?: string;\n  isResearchParticipant: boolean;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  success: boolean;\n  message: string;\n  user?: User;\n  token?: string;\n  accessExpired?: boolean;\n  researchParticipantId?: number;\n}\n\nexport interface AccessStatus {\n  success: boolean;\n  accessStatus: 'valid' | 'expired';\n  accessExpiresAt: string;\n  hoursRemaining: number;\n}\n\nclass PumpAuthService {\n  private baseUrl = import.meta.env.VITE_PUMP_API_URL || 'https://api.tshla.ai';\n\n  private tokenKey = 'pump_auth_token';\n  private userKey = 'pump_user_data';\n\n  /**\n   * Validate password requirements\n   */\n  validatePassword(password: string): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (password.length < 8) {\n      errors.push('Password must be at least 8 characters long');\n    }\n\n    if (!/[A-Z]/.test(password)) {\n      errors.push('Password must contain at least 1 uppercase letter');\n    }\n\n    if (!/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) {\n      errors.push('Password must contain at least 1 special character (!@#$%^&*)');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Register a new user account\n   */\n  async registerUser(registrationData: UserRegistrationData): Promise<AuthResponse> {\n    try {\n      logInfo('PumpAuth', 'Registering new user', {\n        email: registrationData.email,\n        username: registrationData.username,\n        isResearchParticipant: registrationData.isResearchParticipant\n      });\n\n      const response = await fetch(`${this.baseUrl}/api/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(registrationData),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.message || result.error || `HTTP ${response.status}`);\n      }\n\n      // Store token and user data\n      if (result.token) {\n        localStorage.setItem(this.tokenKey, result.token);\n      }\n      if (result.user) {\n        localStorage.setItem(this.userKey, JSON.stringify(result.user));\n      }\n\n      logInfo('PumpAuth', 'User registered successfully', {\n        userId: result.user?.id,\n        isResearchParticipant: result.user?.isResearchParticipant\n      });\n\n      return result;\n    } catch (error) {\n      logError('PumpAuth', 'User registration failed', { error });\n      throw new Error(`Registration failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Login user with email and password\n   */\n  async loginUser(credentials: LoginCredentials): Promise<AuthResponse> {\n    try {\n      logInfo('PumpAuth', 'User login attempt', { email: credentials.email });\n\n      const response = await fetch(`${this.baseUrl}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.message || result.error || `HTTP ${response.status}`);\n      }\n\n      // Store token and user data\n      if (result.token) {\n        localStorage.setItem(this.tokenKey, result.token);\n      }\n      if (result.user) {\n        localStorage.setItem(this.userKey, JSON.stringify(result.user));\n      }\n\n      logInfo('PumpAuth', 'User logged in successfully', {\n        userId: result.user?.id,\n        accessExpired: result.accessExpired\n      });\n\n      return result;\n    } catch (error) {\n      logError('PumpAuth', 'User login failed', { error });\n      throw new Error(`Login failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Check if user has valid access\n   */\n  async checkAccess(): Promise<AccessStatus> {\n    try {\n      const token = this.getToken();\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n\n      const response = await fetch(`${this.baseUrl}/api/auth/check-access`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.message || result.error || `HTTP ${response.status}`);\n      }\n\n      logDebug('PumpAuth', 'Access check completed', {\n        accessStatus: result.accessStatus,\n        hoursRemaining: result.hoursRemaining\n      });\n\n      return result;\n    } catch (error) {\n      logError('PumpAuth', 'Access check failed', { error });\n      throw new Error(`Access check failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Renew 24-hour access after payment\n   */\n  async renewAccess(userId: number): Promise<{ success: boolean; accessExpiresAt: string }> {\n    try {\n      logInfo('PumpAuth', 'Renewing access for user', { userId });\n\n      const response = await fetch(`${this.baseUrl}/api/auth/renew-access`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userId }),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.message || result.error || `HTTP ${response.status}`);\n      }\n\n      // Update stored user data with new expiry\n      const userData = this.getUser();\n      if (userData) {\n        userData.accessExpiresAt = result.accessExpiresAt;\n        localStorage.setItem(this.userKey, JSON.stringify(userData));\n      }\n\n      logInfo('PumpAuth', 'Access renewed successfully', {\n        userId,\n        newExpiryTime: result.accessExpiresAt\n      });\n\n      return result;\n    } catch (error) {\n      logError('PumpAuth', 'Access renewal failed', { error, userId });\n      throw new Error(`Access renewal failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get stored authentication token\n   */\n  getToken(): string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  /**\n   * Get stored user data\n   */\n  getUser(): User | null {\n    const userData = localStorage.getItem(this.userKey);\n    if (!userData) return null;\n\n    try {\n      return JSON.parse(userData);\n    } catch (error) {\n      logWarn('PumpAuth', 'Failed to parse stored user data', { error });\n      return null;\n    }\n  }\n\n  /**\n   * Check if user is currently authenticated\n   */\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n    const user = this.getUser();\n    return !!(token && user);\n  }\n\n  /**\n   * Check if user's access has expired (client-side check)\n   */\n  isAccessExpired(): boolean {\n    const user = this.getUser();\n    if (!user || !user.accessExpiresAt) return true;\n\n    const expiryTime = new Date(user.accessExpiresAt);\n    const now = new Date();\n    return now >= expiryTime;\n  }\n\n  /**\n   * Get hours remaining in access period\n   */\n  getHoursRemaining(): number {\n    const user = this.getUser();\n    if (!user || !user.accessExpiresAt) return 0;\n\n    const expiryTime = new Date(user.accessExpiresAt);\n    const now = new Date();\n    const msRemaining = expiryTime.getTime() - now.getTime();\n\n    if (msRemaining <= 0) return 0;\n\n    return Math.floor(msRemaining / (1000 * 60 * 60));\n  }\n\n  /**\n   * Logout user and clear stored data\n   */\n  logout(): void {\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem(this.userKey);\n\n    logInfo('PumpAuth', 'User logged out successfully', {});\n  }\n\n  /**\n   * Alias for loginUser to maintain consistency with login page\n   */\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    return this.loginUser(credentials);\n  }\n\n  /**\n   * Clear all auth data (for debugging)\n   */\n  clearAll(): void {\n    this.logout();\n    logDebug('PumpAuth', 'All authentication data cleared', {});\n  }\n\n  /**\n   * Get authorization headers for API requests\n   */\n  getAuthHeaders(): Record<string, string> {\n    const token = this.getToken();\n    if (!token) {\n      throw new Error('No authentication token available');\n    }\n\n    return {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * Validate registration data before submission\n   */\n  validateRegistrationData(data: UserRegistrationData): string[] {\n    const errors: string[] = [];\n\n    // Email validation\n    if (!data.email) {\n      errors.push('Email is required');\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(data.email)) {\n      errors.push('Invalid email format');\n    }\n\n    // First name validation\n    if (!data.firstName) {\n      errors.push('First name is required');\n    } else if (data.firstName.length < 1) {\n      errors.push('First name must be at least 1 character');\n    } else if (data.firstName.length > 50) {\n      errors.push('First name must be less than 50 characters');\n    }\n\n    // Last name validation\n    if (!data.lastName) {\n      errors.push('Last name is required');\n    } else if (data.lastName.length < 1) {\n      errors.push('Last name must be at least 1 character');\n    } else if (data.lastName.length > 50) {\n      errors.push('Last name must be less than 50 characters');\n    }\n\n    // Phone number validation\n    if (!data.phoneNumber) {\n      errors.push('Phone number is required');\n    } else if (!/^\\+?[\\d\\s\\-\\(\\)]{10,15}$/.test(data.phoneNumber)) {\n      errors.push('Please enter a valid phone number');\n    }\n\n    // Password validation using new method\n    const passwordValidation = this.validatePassword(data.password);\n    if (!passwordValidation.isValid) {\n      errors.push(...passwordValidation.errors);\n    }\n\n    // Research participant data validation\n    if (data.isResearchParticipant && data.researchData) {\n      if (!data.researchData.fullName) {\n        errors.push('Full name is required for research participants');\n      }\n      if (!data.researchData.dateOfBirth) {\n        errors.push('Date of birth is required for research participants');\n      }\n      if (!data.researchData.mailingAddress) {\n        errors.push('Mailing address is required for research participants');\n      }\n    }\n\n    return errors;\n  }\n}\n\nexport const pumpAuthService = new PumpAuthService();"],"names":["PumpAuthService","password","errors","registrationData","logInfo","response","result","error","logError","credentials","token","logDebug","userId","userData","logWarn","user","expiryTime","now","msRemaining","data","passwordValidation","pumpAuthService"],"mappings":"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"}