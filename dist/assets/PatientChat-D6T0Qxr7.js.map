{"version":3,"file":"PatientChat-D6T0Qxr7.js","sources":["../../src/pages/PatientChat.tsx"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { patientService } from '../services/patient.service';\nimport { awsTranscribeStreamingFixed as transcribeService } from '../services/awsTranscribeMedicalStreamingFixed.service';\nimport type { Patient, ChatMessage } from '../types/patient.types';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\nexport default function PatientChat() {\n  const navigate = useNavigate();\n  const [patient, setPatient] = useState<Patient | null>(null);\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputText, setInputText] = useState('');\n  const [inputMethod, setInputMethod] = useState<'text' | 'voice'>('text');\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [currentTranscript, setCurrentTranscript] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const chatContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    loadPatientData();\n    loadChatHistory();\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const loadPatientData = () => {\n    const currentPatient = patientService.getCurrentPatient();\n    if (!currentPatient) {\n      navigate('/patient-login');\n      return;\n    }\n    setPatient(currentPatient);\n  };\n\n  const loadChatHistory = () => {\n    // Load from localStorage for now\n    const stored = localStorage.getItem('patient_chat_history');\n    if (stored) {\n      try {\n        const history = JSON.parse(stored);\n        setMessages(history);\n      } catch (e) {\n        logError('PatientChat', 'Error message', {});\n      }\n    } else {\n      // Add welcome message\n      const welcomeMessage: ChatMessage = {\n        id: `msg_${Date.now()}`,\n        patientId: '',\n        timestamp: new Date().toISOString(),\n        sender: 'ai',\n        type: 'text',\n        content:\n          \"Hello! I'm AVA, your personal health assistant. I'm here to help you with your health journey. What would you like to discuss today?\",\n        metadata: {\n          sentiment: 'positive',\n          topic: 'greeting',\n        },\n      };\n      setMessages([welcomeMessage]);\n    }\n  };\n\n  const saveChatHistory = (newMessages: ChatMessage[]) => {\n    localStorage.setItem('patient_chat_history', JSON.stringify(newMessages));\n  };\n\n  const startRecording = async () => {\n    setIsRecording(true);\n    setCurrentTranscript('');\n\n    try {\n      await transcribeService.startRecording({\n        onTranscript: (text: string) => {\n          setCurrentTranscript(text);\n        },\n        onError: (error: Error) => {\n          logError('PatientChat', 'Error message', {});\n          stopRecording();\n        },\n        mode: 'dictation',\n      });\n    } catch (error) {\n      logError('PatientChat', 'Error message', {});\n      setIsRecording(false);\n    }\n  };\n\n  const stopRecording = async () => {\n    setIsRecording(false);\n    transcribeService.stopRecording();\n\n    if (currentTranscript.length > 0) {\n      await handleSendMessage(currentTranscript, 'voice');\n      setCurrentTranscript('');\n    }\n  };\n\n  const handleSendMessage = async (text: string, type: 'text' | 'voice' = 'text') => {\n    if (!text.trim() || !patient) return;\n\n    // Create user message\n    const userMessage: ChatMessage = {\n      id: `msg_${Date.now()}`,\n      patientId: patient.internalId,\n      timestamp: new Date().toISOString(),\n      sender: 'patient',\n      type,\n      content: text,\n    };\n\n    const newMessages = [...messages, userMessage];\n    setMessages(newMessages);\n    setInputText('');\n    setIsProcessing(true);\n\n    try {\n      // Build context for AI\n      const context = await buildAIContext(text);\n\n      // Get AI response\n      const aiResponse = await azureAIService.processWithClaude(context, 'patient_chat');\n\n      // Create AI message\n      const aiMessage: ChatMessage = {\n        id: `msg_${Date.now()}_ai`,\n        patientId: patient.internalId,\n        timestamp: new Date().toISOString(),\n        sender: 'ai',\n        type: 'text',\n        content: aiResponse,\n        metadata: {\n          sentiment: detectSentiment(aiResponse),\n          topic: detectTopic(text),\n        },\n      };\n\n      const updatedMessages = [...newMessages, aiMessage];\n      setMessages(updatedMessages);\n      saveChatHistory(updatedMessages);\n\n      // Speak the response\n      await speakResponse(aiResponse);\n    } catch (error) {\n      logError('PatientChat', 'Error message', {});\n      const errorMessage: ChatMessage = {\n        id: `msg_${Date.now()}_error`,\n        patientId: patient.internalId,\n        timestamp: new Date().toISOString(),\n        sender: 'ai',\n        type: 'text',\n        content: \"I apologize, but I'm having trouble processing your message. Please try again.\",\n        metadata: {\n          sentiment: 'neutral',\n        },\n      };\n      setMessages([...newMessages, errorMessage]);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const buildAIContext = async (userMessage: string): Promise<string> => {\n    if (!patient) return userMessage;\n\n    let context = `You are AVA, a compassionate and knowledgeable AI health assistant for TSHLA Medical. \nYou are chatting with ${patient.firstName} ${patient.lastName}.\n\nPatient Information:\n- AVA ID: ${patient.patientAvaId}\n- Programs Enrolled: ${Object.entries(patient.programs)\n      .filter(([_, p]) => p?.enrolled)\n      .map(([name]) => name)\n      .join(', ')}\n`;\n\n    // Add PumpDrive context if available\n    if (patient.programs.pumpdrive?.finalRecommendations) {\n      const topPump = patient.programs.pumpdrive.finalRecommendations[0];\n      context += `\n- Recommended Pump: ${topPump.pumpName} (${topPump.matchScore}% match)\n- Key Reasons: ${topPump.keyReasons.join(', ')}\n`;\n    }\n\n    // Add Weight Loss context if available\n    if (patient.programs.weightloss?.enrolled) {\n      context += `\n- Weight Loss Program: ${patient.programs.weightloss.currentPhase || 'Active'}\n- Last Check-in: ${patient.programs.weightloss.lastCheckin || 'Not yet'}\n`;\n    }\n\n    context += `\n\nRecent Conversation:\n${messages\n  .slice(-5)\n  .map(m => `${m.sender === 'patient' ? 'Patient' : 'AVA'}: ${m.content}`)\n  .join('\\n')}\n\nPatient's Current Message: ${userMessage}\n\nGuidelines for your response:\n1. Be supportive, encouraging, and positive\n2. If discussing pumps, emphasize why their recommended pump is perfect for them\n3. Provide specific, actionable advice\n4. Use the patient's name occasionally for personalization\n5. Keep responses concise but helpful\n6. If they have concerns, address them with empathy\n7. Celebrate their progress and commitment to health\n8. For weight loss questions, provide evidence-based guidance\n9. Always maintain HIPAA compliance\n\nRespond naturally and conversationally:`;\n\n    return context;\n  };\n\n  const speakResponse = async (text: string) => {\n    setIsSpeaking(true);\n    try {\n      // Use Rachel voice for consistency\n      await elevenLabsService.speak(text, '21m00Tcm4TlvDq8ikWAM');\n    } catch (error) {\n      logError('PatientChat', 'Error message', {});\n    } finally {\n      setIsSpeaking(false);\n    }\n  };\n\n  const detectSentiment = (text: string): 'positive' | 'neutral' | 'concerned' => {\n    const positiveWords = [\n      'great',\n      'excellent',\n      'wonderful',\n      'perfect',\n      'amazing',\n      'congratulations',\n    ];\n    const concernedWords = ['concern', 'worry', 'difficult', 'challenge', 'problem'];\n\n    const lowerText = text.toLowerCase();\n\n    if (positiveWords.some(word => lowerText.includes(word))) {\n      return 'positive';\n    }\n    if (concernedWords.some(word => lowerText.includes(word))) {\n      return 'concerned';\n    }\n    return 'neutral';\n  };\n\n  const detectTopic = (text: string): string => {\n    const lowerText = text.toLowerCase();\n\n    if (lowerText.includes('pump') || lowerText.includes('insulin')) {\n      return 'pumpdrive';\n    }\n    if (\n      lowerText.includes('weight') ||\n      lowerText.includes('diet') ||\n      lowerText.includes('exercise')\n    ) {\n      return 'weightloss';\n    }\n    if (lowerText.includes('check') || lowerText.includes('progress')) {\n      return 'progress';\n    }\n    return 'general';\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    });\n  };\n\n  if (!patient) return null;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 flex flex-col\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <button\n                onClick={() => navigate('/patient/dashboard')}\n                className=\"text-gray-600 hover:text-gray-900\"\n              >\n                ‚Üê Back\n              </button>\n              <div className=\"h-8 w-px bg-gray-300\"></div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-blue-600 to-green-600 rounded-full flex items-center justify-center text-white text-xs font-bold\">\n                  AVA\n                </div>\n                <div>\n                  <div className=\"font-semibold text-gray-900\">AVA Health Assistant</div>\n                  <div className=\"text-xs text-gray-500\">Always here to help</div>\n                </div>\n              </div>\n            </div>\n\n            {isSpeaking && (\n              <div className=\"flex items-center space-x-2 bg-blue-100 px-3 py-1 rounded-full\">\n                <div className=\"flex space-x-1\">\n                  <div className=\"w-1.5 h-3 bg-blue-500 rounded-full animate-pulse\"></div>\n                  <div\n                    className=\"w-1.5 h-4 bg-blue-600 rounded-full animate-pulse\"\n                    style={{ animationDelay: '0.1s' }}\n                  ></div>\n                  <div\n                    className=\"w-1.5 h-3 bg-blue-500 rounded-full animate-pulse\"\n                    style={{ animationDelay: '0.2s' }}\n                  ></div>\n                </div>\n                <span className=\"text-xs text-blue-700\">Speaking...</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </header>\n\n      {/* Chat Messages */}\n      <div\n        ref={chatContainerRef}\n        className=\"flex-1 max-w-4xl w-full mx-auto px-4 sm:px-6 lg:px-8 py-6 overflow-y-auto\"\n      >\n        <div className=\"space-y-4\">\n          {messages.map(message => (\n            <div\n              key={message.id}\n              className={`flex ${message.sender === 'patient' ? 'justify-end' : 'justify-start'}`}\n            >\n              <div className={`max-w-2xl ${message.sender === 'patient' ? 'order-2' : 'order-1'}`}>\n                <div className=\"flex items-end space-x-2\">\n                  {message.sender === 'ai' && (\n                    <div className=\"w-8 h-8 bg-gradient-to-br from-blue-600 to-green-600 rounded-full flex items-center justify-center text-white text-xs font-bold flex-shrink-0\">\n                      AVA\n                    </div>\n                  )}\n\n                  <div>\n                    <div\n                      className={`rounded-2xl px-4 py-3 ${\n                        message.sender === 'patient'\n                          ? 'bg-blue-600 text-white'\n                          : 'bg-white shadow-md'\n                      }`}\n                    >\n                      <p className={message.sender === 'patient' ? 'text-white' : 'text-gray-800'}>\n                        {message.content}\n                      </p>\n                      {message.type === 'voice' && (\n                        <div\n                          className={`text-xs mt-1 flex items-center space-x-1 ${\n                            message.sender === 'patient' ? 'text-blue-100' : 'text-gray-400'\n                          }`}\n                        >\n                          <span>üé§</span>\n                          <span>Voice message</span>\n                        </div>\n                      )}\n                    </div>\n                    <div\n                      className={`text-xs mt-1 ${\n                        message.sender === 'patient' ? 'text-right' : 'text-left'\n                      } text-gray-400`}\n                    >\n                      {formatTime(message.timestamp)}\n                    </div>\n                  </div>\n\n                  {message.sender === 'patient' && (\n                    <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-gray-600 text-xs font-bold flex-shrink-0\">\n                      {patient.firstName[0]}\n                      {patient.lastName[0]}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n\n          {isProcessing && (\n            <div className=\"flex justify-start\">\n              <div className=\"flex items-center space-x-2 bg-white shadow-md rounded-2xl px-4 py-3\">\n                <div className=\"flex space-x-1\">\n                  <div\n                    className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"\n                    style={{ animationDelay: '0ms' }}\n                  ></div>\n                  <div\n                    className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"\n                    style={{ animationDelay: '150ms' }}\n                  ></div>\n                  <div\n                    className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"\n                    style={{ animationDelay: '300ms' }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div ref={messagesEndRef} />\n        </div>\n      </div>\n\n      {/* Input Area */}\n      <div className=\"bg-white border-t\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          {/* Input Method Toggle */}\n          <div className=\"flex justify-center mb-3\">\n            <div className=\"inline-flex bg-gray-100 rounded-lg p-0.5\">\n              <button\n                onClick={() => setInputMethod('text')}\n                className={`px-4 py-1.5 rounded-md text-sm font-medium transition-all ${\n                  inputMethod === 'text' ? 'bg-white shadow-sm text-blue-600' : 'text-gray-600'\n                }`}\n              >\n                ‚å®Ô∏è Type\n              </button>\n              <button\n                onClick={() => setInputMethod('voice')}\n                className={`px-4 py-1.5 rounded-md text-sm font-medium transition-all ${\n                  inputMethod === 'voice' ? 'bg-white shadow-sm text-blue-600' : 'text-gray-600'\n                }`}\n              >\n                üé§ Voice\n              </button>\n            </div>\n          </div>\n\n          {inputMethod === 'text' ? (\n            <div className=\"flex space-x-3\">\n              <input\n                type=\"text\"\n                value={inputText}\n                onChange={e => setInputText(e.target.value)}\n                onKeyPress={e => {\n                  if (e.key === 'Enter' && !e.shiftKey) {\n                    e.preventDefault();\n                    handleSendMessage(inputText);\n                  }\n                }}\n                placeholder=\"Type your message...\"\n                disabled={isProcessing}\n                className=\"flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n              <button\n                onClick={() => handleSendMessage(inputText)}\n                disabled={!inputText.trim() || isProcessing}\n                className={`px-6 py-3 rounded-xl font-semibold transition-all ${\n                  !inputText.trim() || isProcessing\n                    ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                    : 'bg-gradient-to-r from-blue-600 to-green-600 text-white hover:from-blue-700 hover:to-green-700'\n                }`}\n              >\n                Send\n              </button>\n            </div>\n          ) : (\n            <div className=\"text-center\">\n              {isRecording ? (\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-center\">\n                    <button\n                      onClick={stopRecording}\n                      className=\"w-20 h-20 bg-red-500 hover:bg-red-600 rounded-full flex items-center justify-center text-white shadow-lg animate-pulse\"\n                    >\n                      <svg className=\"w-8 h-8\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <rect x=\"6\" y=\"6\" width=\"12\" height=\"12\" rx=\"2\" />\n                      </svg>\n                    </button>\n                  </div>\n                  {currentTranscript && (\n                    <div className=\"bg-gray-50 rounded-lg p-3 text-sm text-gray-700\">\n                      {currentTranscript}\n                    </div>\n                  )}\n                  <p className=\"text-sm text-gray-500\">Tap to stop recording</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-center\">\n                    <button\n                      onClick={startRecording}\n                      disabled={isProcessing}\n                      className={`w-20 h-20 rounded-full flex items-center justify-center shadow-lg transition-all ${\n                        isProcessing\n                          ? 'bg-gray-300 cursor-not-allowed'\n                          : 'bg-gradient-to-r from-blue-600 to-green-600 text-white hover:from-blue-700 hover:to-green-700'\n                      }`}\n                    >\n                      <svg className=\"w-8 h-8\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path d=\"M12 14a3 3 0 0 0 3-3V6a3 3 0 0 0-6 0v5a3 3 0 0 0 3 3Z\" />\n                        <path d=\"M19 10v1a7 7 0 0 1-14 0v-1M12 18.75v3.25M8 21h8\" />\n                      </svg>\n                    </button>\n                  </div>\n                  <p className=\"text-sm text-gray-500\">Tap to start recording</p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Suggested Questions */}\n          <div className=\"mt-4 flex flex-wrap gap-2\">\n            <span className=\"text-xs text-gray-500\">Try asking:</span>\n            {patient.programs.pumpdrive?.finalRecommendations && (\n              <button\n                onClick={() => handleSendMessage('Tell me more about my recommended pump')}\n                className=\"text-xs bg-blue-100 text-blue-700 px-3 py-1 rounded-full hover:bg-blue-200\"\n              >\n                About my pump recommendation\n              </button>\n            )}\n            {patient.programs.weightloss?.enrolled && (\n              <>\n                <button\n                  onClick={() => handleSendMessage('What should I eat today?')}\n                  className=\"text-xs bg-green-100 text-green-700 px-3 py-1 rounded-full hover:bg-green-200\"\n                >\n                  Meal suggestions\n                </button>\n                <button\n                  onClick={() => handleSendMessage('How can I stay motivated?')}\n                  className=\"text-xs bg-purple-100 text-purple-700 px-3 py-1 rounded-full hover:bg-purple-200\"\n                >\n                  Motivation tips\n                </button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["PatientChat","navigate","useNavigate","patient","setPatient","useState","messages","setMessages","inputText","setInputText","inputMethod","setInputMethod","isRecording","setIsRecording","isProcessing","setIsProcessing","isSpeaking","setIsSpeaking","currentTranscript","setCurrentTranscript","messagesEndRef","useRef","chatContainerRef","useEffect","loadPatientData","loadChatHistory","scrollToBottom","currentPatient","patientService","stored","history","logError","welcomeMessage","saveChatHistory","newMessages","startRecording","transcribeService","text","error","stopRecording","handleSendMessage","type","userMessage","context","buildAIContext","aiResponse","aiMessage","detectSentiment","detectTopic","updatedMessages","speakResponse","errorMessage","_","p","name","topPump","m","positiveWords","concernedWords","lowerText","word","formatTime","timestamp","jsxs","jsx","message","e","Fragment"],"mappings":"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"}