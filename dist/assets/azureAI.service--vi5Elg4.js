import{m as V,s as D}from"./medicalCorrections.service-DDTgANcC.js";import{l as u,b as h,g,h as O}from"./index-JAW6HvUl.js";import{H as B,n as U,i as It,a as St,c as et,b as At,S as ie,m as tt,d as nt,e as ot,f as st,t as rt,g as Et,E as bt,h as it,j as xt,B as Ct,k as Ot,r as kt,l as Tt,p as Pt,N as $t,o as Dt,q as Rt,s as Nt,u as zt,v as _t,D as Mt,W as Lt,w as vt,x as Ut,y as Ft,z as Ht,A as jt,C as Bt,F as Vt,G as qt,I as Gt,J as Wt,K as Kt,L as Yt,M as Jt,O as Qt,P as Xt,Q as Zt,R as en,T as tn,U as nn,V as on,X as sn,Y as rn,Z as an,_ as cn,$ as dn,a0 as S,a1 as un,a2 as ln,a3 as mn,a4 as b,a5 as x,a6 as I,a7 as at,a8 as pn,a9 as gn,aa as fn}from"./resolveDefaultsModeConfig-R7vZuTP0.js";const hn=n=>e=>async t=>{if(!B.isInstance(t.request))return e(t);const{request:o}=t,{handlerProtocol:s=""}=n.requestHandler.metadata||{};if(s.indexOf("h2")>=0&&!o.headers[":authority"])delete o.headers.host,o.headers[":authority"]=o.hostname+(o.port?":"+o.port:"");else if(!o.headers.host){let r=o.hostname;o.port!=null&&(r+=`:${o.port}`),o.headers.host=r}return e(t)},yn={name:"hostHeaderMiddleware",step:"build",priority:"low",tags:["HOST"],override:!0},wn=n=>({applyToStack:e=>{e.add(hn(n),yn)}}),In=()=>(n,e)=>async t=>{try{const o=await n(t),{clientName:s,commandName:r,logger:i,dynamoDbDocumentClientOptions:a={}}=e,{overrideInputFilterSensitiveLog:c,overrideOutputFilterSensitiveLog:d}=a,l=c??e.inputFilterSensitiveLog,m=d??e.outputFilterSensitiveLog,{$metadata:f,...p}=o.output;return i?.info?.({clientName:s,commandName:r,input:l(t.input),output:m(p),metadata:f}),o}catch(o){const{clientName:s,commandName:r,logger:i,dynamoDbDocumentClientOptions:a={}}=e,{overrideInputFilterSensitiveLog:c}=a,d=c??e.inputFilterSensitiveLog;throw i?.error?.({clientName:s,commandName:r,input:d(t.input),error:o,metadata:o.$metadata}),o}},Sn={name:"loggerMiddleware",tags:["LOGGER"],step:"initialize",override:!0},An=n=>({applyToStack:e=>{e.add(In(),Sn)}}),En={step:"build",tags:["RECURSION_DETECTION"],name:"recursionDetectionMiddleware",override:!0,priority:"low"},bn=()=>n=>async e=>n(e),xn=n=>({applyToStack:e=>{e.add(bn(),En)}});class Cn{async sign(e,t,o){const s=B.clone(e);if(!t.token)throw new Error("request could not be signed with `token` since the `token` is not defined");return s.headers.Authorization=`Bearer ${t.token}`,s}}const On=void 0;function kn(n){return n===void 0?!0:typeof n=="string"&&n.length<=50}function Tn(n){const e=U(n.userAgentAppId??On),{customUserAgent:t}=n;return Object.assign(n,{customUserAgent:typeof t=="string"?[[t]]:t,userAgentAppId:async()=>{const o=await e();if(!kn(o)){const s=n.logger?.constructor?.name==="NoOpLogger"||!n.logger?console:n.logger;typeof o!="string"?s?.warn("userAgentAppId must be a string or undefined."):o.length>50&&s?.warn("The provided userAgentAppId exceeds the maximum length of 50 characters.")}return o}})}const ct=(n,e=!1)=>{if(e){for(const t of n.split("."))if(!ct(t))return!1;return!0}return!(!It(n)||n.length<3||n.length>63||n!==n.toLowerCase()||St(n))},ae=":",Pn="/",$n=n=>{const e=n.split(ae);if(e.length<6)return null;const[t,o,s,r,i,...a]=e;if(t!=="arn"||o===""||s===""||a.join(ae)==="")return null;const c=a.map(d=>d.split(Pn)).flat();return{partition:o,service:s,region:r,accountId:i,resourceId:c}},Dn=[{id:"aws",outputs:{dnsSuffix:"amazonaws.com",dualStackDnsSuffix:"api.aws",implicitGlobalRegion:"us-east-1",name:"aws",supportsDualStack:!0,supportsFIPS:!0},regionRegex:"^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$",regions:{"af-south-1":{description:"Africa (Cape Town)"},"ap-east-1":{description:"Asia Pacific (Hong Kong)"},"ap-east-2":{description:"Asia Pacific (Taipei)"},"ap-northeast-1":{description:"Asia Pacific (Tokyo)"},"ap-northeast-2":{description:"Asia Pacific (Seoul)"},"ap-northeast-3":{description:"Asia Pacific (Osaka)"},"ap-south-1":{description:"Asia Pacific (Mumbai)"},"ap-south-2":{description:"Asia Pacific (Hyderabad)"},"ap-southeast-1":{description:"Asia Pacific (Singapore)"},"ap-southeast-2":{description:"Asia Pacific (Sydney)"},"ap-southeast-3":{description:"Asia Pacific (Jakarta)"},"ap-southeast-4":{description:"Asia Pacific (Melbourne)"},"ap-southeast-5":{description:"Asia Pacific (Malaysia)"},"ap-southeast-6":{description:"Asia Pacific (New Zealand)"},"ap-southeast-7":{description:"Asia Pacific (Thailand)"},"aws-global":{description:"aws global region"},"ca-central-1":{description:"Canada (Central)"},"ca-west-1":{description:"Canada West (Calgary)"},"eu-central-1":{description:"Europe (Frankfurt)"},"eu-central-2":{description:"Europe (Zurich)"},"eu-north-1":{description:"Europe (Stockholm)"},"eu-south-1":{description:"Europe (Milan)"},"eu-south-2":{description:"Europe (Spain)"},"eu-west-1":{description:"Europe (Ireland)"},"eu-west-2":{description:"Europe (London)"},"eu-west-3":{description:"Europe (Paris)"},"il-central-1":{description:"Israel (Tel Aviv)"},"me-central-1":{description:"Middle East (UAE)"},"me-south-1":{description:"Middle East (Bahrain)"},"mx-central-1":{description:"Mexico (Central)"},"sa-east-1":{description:"South America (Sao Paulo)"},"us-east-1":{description:"US East (N. Virginia)"},"us-east-2":{description:"US East (Ohio)"},"us-west-1":{description:"US West (N. California)"},"us-west-2":{description:"US West (Oregon)"}}},{id:"aws-cn",outputs:{dnsSuffix:"amazonaws.com.cn",dualStackDnsSuffix:"api.amazonwebservices.com.cn",implicitGlobalRegion:"cn-northwest-1",name:"aws-cn",supportsDualStack:!0,supportsFIPS:!0},regionRegex:"^cn\\-\\w+\\-\\d+$",regions:{"aws-cn-global":{description:"aws-cn global region"},"cn-north-1":{description:"China (Beijing)"},"cn-northwest-1":{description:"China (Ningxia)"}}},{id:"aws-eusc",outputs:{dnsSuffix:"amazonaws.eu",dualStackDnsSuffix:"api.amazonwebservices.eu",implicitGlobalRegion:"eusc-de-east-1",name:"aws-eusc",supportsDualStack:!0,supportsFIPS:!0},regionRegex:"^eusc\\-(de)\\-\\w+\\-\\d+$",regions:{"eusc-de-east-1":{description:"EU (Germany)"}}},{id:"aws-iso",outputs:{dnsSuffix:"c2s.ic.gov",dualStackDnsSuffix:"api.aws.ic.gov",implicitGlobalRegion:"us-iso-east-1",name:"aws-iso",supportsDualStack:!0,supportsFIPS:!0},regionRegex:"^us\\-iso\\-\\w+\\-\\d+$",regions:{"aws-iso-global":{description:"aws-iso global region"},"us-iso-east-1":{description:"US ISO East"},"us-iso-west-1":{description:"US ISO WEST"}}},{id:"aws-iso-b",outputs:{dnsSuffix:"sc2s.sgov.gov",dualStackDnsSuffix:"api.aws.scloud",implicitGlobalRegion:"us-isob-east-1",name:"aws-iso-b",supportsDualStack:!0,supportsFIPS:!0},regionRegex:"^us\\-isob\\-\\w+\\-\\d+$",regions:{"aws-iso-b-global":{description:"aws-iso-b global region"},"us-isob-east-1":{description:"US ISOB East (Ohio)"}}},{id:"aws-iso-e",outputs:{dnsSuffix:"cloud.adc-e.uk",dualStackDnsSuffix:"api.cloud-aws.adc-e.uk",implicitGlobalRegion:"eu-isoe-west-1",name:"aws-iso-e",supportsDualStack:!0,supportsFIPS:!0},regionRegex:"^eu\\-isoe\\-\\w+\\-\\d+$",regions:{"aws-iso-e-global":{description:"aws-iso-e global region"},"eu-isoe-west-1":{description:"EU ISOE West"}}},{id:"aws-iso-f",outputs:{dnsSuffix:"csp.hci.ic.gov",dualStackDnsSuffix:"api.aws.hci.ic.gov",implicitGlobalRegion:"us-isof-south-1",name:"aws-iso-f",supportsDualStack:!0,supportsFIPS:!0},regionRegex:"^us\\-isof\\-\\w+\\-\\d+$",regions:{"aws-iso-f-global":{description:"aws-iso-f global region"},"us-isof-east-1":{description:"US ISOF EAST"},"us-isof-south-1":{description:"US ISOF SOUTH"}}},{id:"aws-us-gov",outputs:{dnsSuffix:"amazonaws.com",dualStackDnsSuffix:"api.aws",implicitGlobalRegion:"us-gov-west-1",name:"aws-us-gov",supportsDualStack:!0,supportsFIPS:!0},regionRegex:"^us\\-gov\\-\\w+\\-\\d+$",regions:{"aws-us-gov-global":{description:"aws-us-gov global region"},"us-gov-east-1":{description:"AWS GovCloud (US-East)"},"us-gov-west-1":{description:"AWS GovCloud (US-West)"}}}],Rn={partitions:Dn};let Nn=Rn;const zn=n=>{const{partitions:e}=Nn;for(const o of e){const{regions:s,outputs:r}=o;for(const[i,a]of Object.entries(s))if(i===n)return{...r,...a}}for(const o of e){const{regionRegex:s,outputs:r}=o;if(new RegExp(s).test(n))return{...r}}const t=e.find(o=>o.id==="aws");if(!t)throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");return{...t.outputs}},dt={isVirtualHostableS3Bucket:ct,parseArn:$n,partition:zn};et.aws=dt;function _n(n,e,t){return n.$source||(n.$source={}),n.$source[e]=t,n}function k(n,e,t){n.__aws_sdk_context?n.__aws_sdk_context.features||(n.__aws_sdk_context.features={}):n.__aws_sdk_context={features:{}},n.__aws_sdk_context.features[e]=t}const ce=n=>At.isInstance(n)?n.headers?.date??n.headers?.Date:void 0,ut=n=>new Date(Date.now()+n),Mn=(n,e)=>Math.abs(ut(e).getTime()-n)>=3e5,de=(n,e)=>{const t=Date.parse(n);return Mn(t,e)?t-Date.now():e},F=(n,e)=>{if(!e)throw new Error(`Property \`${n}\` is not resolved for AWS SDK SigV4Auth`);return e},Ln=async n=>{const e=F("context",n.context),t=F("config",n.config),o=e.endpointV2?.properties?.authSchemes?.[0],r=await F("signer",t.signer)(o),i=n?.signingRegion,a=n?.signingRegionSet,c=n?.signingName;return{config:t,signer:r,signingRegion:i,signingRegionSet:a,signingName:c}};class vn{async sign(e,t,o){if(!B.isInstance(e))throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");const s=await Ln(o),{config:r,signer:i}=s;let{signingRegion:a,signingName:c}=s;const d=o.context;if(d?.authSchemes?.length??!1){const[m,f]=d.authSchemes;m?.name==="sigv4a"&&f?.name==="sigv4"&&(a=f?.signingRegion??a,c=f?.signingName??c)}return await i.sign(e,{signingDate:ut(r.systemClockOffset),signingRegion:a,signingService:c})}errorHandler(e){return t=>{const o=t.ServerTime??ce(t.$response);if(o){const s=F("config",e.config),r=s.systemClockOffset;s.systemClockOffset=de(o,s.systemClockOffset),s.systemClockOffset!==r&&t.$metadata&&(t.$metadata.clockSkewCorrected=!0)}throw t}}successHandler(e,t){const o=ce(e);if(o){const s=F("config",t.config);s.systemClockOffset=de(o,s.systemClockOffset)}}}const Un=n=>{let e=n.credentials,t=!!n.credentials,o;Object.defineProperty(n,"credentials",{set(d){d&&d!==e&&d!==o&&(t=!0),e=d;const l=Fn(n,{credentials:e,credentialDefaultProvider:n.credentialDefaultProvider}),m=Hn(n,l);t&&!m.attributed?(o=async f=>m(f).then(p=>_n(p,"CREDENTIALS_CODE","e")),o.memoized=m.memoized,o.configBound=m.configBound,o.attributed=!0):o=m},get(){return o},enumerable:!0,configurable:!0}),n.credentials=e;const{signingEscapePath:s=!0,systemClockOffset:r=n.systemClockOffset||0,sha256:i}=n;let a;return n.signer?a=U(n.signer):n.regionInfoProvider?a=()=>U(n.region)().then(async d=>[await n.regionInfoProvider(d,{useFipsEndpoint:await n.useFipsEndpoint(),useDualstackEndpoint:await n.useDualstackEndpoint()})||{},d]).then(([d,l])=>{const{signingRegion:m,signingService:f}=d;n.signingRegion=n.signingRegion||m||l,n.signingName=n.signingName||f||n.serviceId;const p={...n,credentials:n.credentials,region:n.signingRegion,service:n.signingName,sha256:i,uriEscapePath:s},E=n.signerConstructor||ie;return new E(p)}):a=async d=>{d=Object.assign({},{name:"sigv4",signingName:n.signingName||n.defaultSigningName,signingRegion:await U(n.region)(),properties:{}},d);const l=d.signingRegion,m=d.signingName;n.signingRegion=n.signingRegion||l,n.signingName=n.signingName||m||n.serviceId;const f={...n,credentials:n.credentials,region:n.signingRegion,service:n.signingName,sha256:i,uriEscapePath:s},p=n.signerConstructor||ie;return new p(f)},Object.assign(n,{systemClockOffset:r,signingEscapePath:s,signer:a})};function Fn(n,{credentials:e,credentialDefaultProvider:t}){let o;return e?e?.memoized?o=e:o=tt(e,ot,nt):t?o=U(t(Object.assign({},n,{parentClientConfig:n}))):o=async()=>{throw new Error("@aws-sdk/core::resolveAwsSdkSigV4Config - `credentials` not provided and no credentialDefaultProvider was configured.")},o.memoized=!0,o}function Hn(n,e){if(e.configBound)return e;const t=async o=>e({...o,callerClientConfig:n});return t.memoized=e.memoized,t.configBound=!0,t}const lt="***SensitiveInformation***",jn=(n,e)=>st(n,e).then(t=>(e?.utf8Encoder??rt)(t)),Bn=(n,e)=>jn(n,e).then(t=>{if(t.length)try{return JSON.parse(t)}catch(o){throw o?.name==="SyntaxError"&&Object.defineProperty(o,"$responseBodyText",{value:t}),o}return{}}),Vn=async(n,e)=>{const t=await Bn(n,e);return t.message=t.message??t.Message,t},qn=(n,e)=>{const t=(r,i)=>Object.keys(r).find(a=>a.toLowerCase()===i.toLowerCase()),o=r=>{let i=r;return typeof i=="number"&&(i=i.toString()),i.indexOf(",")>=0&&(i=i.split(",")[0]),i.indexOf(":")>=0&&(i=i.split(":")[0]),i.indexOf("#")>=0&&(i=i.split("#")[1]),i},s=t(n.headers,"x-amzn-errortype");if(s!==void 0)return o(n.headers[s]);if(e&&typeof e=="object"){const r=t(e,"code");if(r&&e[r]!==void 0)return o(e[r]);if(e.__type!==void 0)return o(e.__type)}},Gn=/\d{12}\.ddb/;async function Wn(n,e,t){if(t.request?.headers?.["smithy-protocol"]==="rpc-v2-cbor"&&k(n,"PROTOCOL_RPC_V2_CBOR","M"),typeof e.retryStrategy=="function"){const r=await e.retryStrategy();typeof r.acquireInitialRetryToken=="function"?r.constructor?.name?.includes("Adaptive")?k(n,"RETRY_MODE_ADAPTIVE","F"):k(n,"RETRY_MODE_STANDARD","E"):k(n,"RETRY_MODE_LEGACY","D")}if(typeof e.accountIdEndpointMode=="function"){const r=n.endpointV2;switch(String(r?.url?.hostname).match(Gn)&&k(n,"ACCOUNT_ID_ENDPOINT","O"),await e.accountIdEndpointMode?.()){case"disabled":k(n,"ACCOUNT_ID_MODE_DISABLED","Q");break;case"preferred":k(n,"ACCOUNT_ID_MODE_PREFERRED","P");break;case"required":k(n,"ACCOUNT_ID_MODE_REQUIRED","R");break}}const s=n.__smithy_context?.selectedHttpAuthScheme?.identity;if(s?.$source){const r=s;r.accountId&&k(n,"RESOLVED_ACCOUNT_ID","T");for(const[i,a]of Object.entries(r.$source??{}))k(n,i,a)}}const ue="user-agent",q="x-amz-user-agent",le=" ",G="/",Kn=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g,Yn=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g,me="-",Jn=1024;function Qn(n){let e="";for(const t in n){const o=n[t];if(e.length+o.length+1<=Jn){e.length?e+=","+o:e+=o;continue}break}return e}const Xn=n=>(e,t)=>async o=>{const{request:s}=o;if(!B.isInstance(s))return e(o);const{headers:r}=s,i=t?.userAgent?.map(j)||[],a=(await n.defaultUserAgentProvider()).map(j);await Wn(t,n,o);const c=t;a.push(`m/${Qn(Object.assign({},t.__smithy_context?.features,c.__aws_sdk_context?.features))}`);const d=n?.customUserAgent?.map(j)||[],l=await n.userAgentAppId();l&&a.push(j([`app/${l}`]));const m=[].concat([...a,...i,...d]).join(le),f=[...a.filter(p=>p.startsWith("aws-sdk-")),...d].join(le);return n.runtime!=="browser"?(f&&(r[q]=r[q]?`${r[ue]} ${f}`:f),r[ue]=m):r[q]=m,e({...o,request:s})},j=n=>{const e=n[0].split(G).map(i=>i.replace(Kn,me)).join(G),t=n[1]?.replace(Yn,me),o=e.indexOf(G),s=e.substring(0,o);let r=e.substring(o+1);return s==="api"&&(r=r.toLowerCase()),[s,r,t].filter(i=>i&&i.length>0).reduce((i,a,c)=>{switch(c){case 0:return a;case 1:return`${i}/${a}`;default:return`${i}#${a}`}},"")},Zn={name:"getUserAgentMiddleware",step:"build",priority:"low",tags:["SET_USER_AGENT","USER_AGENT"],override:!0},eo=n=>({applyToStack:e=>{e.add(Xn(n),Zn)}}),to=(n,e,t,o)=>{let s=n;const r={start(){},async transform(i,a){try{const c=new Date(Date.now()+await o()),d={":date":{type:"timestamp",value:c}},l=await e.sign({message:{body:i,headers:d},priorSignature:s},{signingDate:c});s=l.signature;const m=t.encode({headers:{...d,":chunk-signature":{type:"binary",value:Et(l.signature)}},body:i});a.enqueue(m)}catch(c){a.error(c)}}};return new TransformStream({...r})};class no{messageSigner;eventStreamCodec;systemClockOffsetProvider;constructor(e){this.messageSigner=e.messageSigner,this.eventStreamCodec=new bt(e.utf8Encoder,e.utf8Decoder),this.systemClockOffsetProvider=async()=>e.systemClockOffset??0}async handle(e,t,o={}){const s=t.request,{body:r,headers:i,query:a}=s;if(!(r instanceof ReadableStream))throw new Error("Eventstream payload must be a ReadableStream.");const c=new TransformStream;s.body=c.readable;let d;try{d=await e(t)}catch(E){throw s.body.cancel(),E}const m=((i.authorization||"").match(/Signature=([\w]+)$/)||[])[1]||a&&a["X-Amz-Signature"]||"",f=to(m,await this.messageSigner(),this.eventStreamCodec,this.systemClockOffsetProvider);return r.pipeThrough(f).pipeThrough(c),d}}const oo=n=>new no(n),so=async(n,e,t)=>({operation:xt(e).operation,region:await it(n.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()});function ro(n){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"bedrock",region:n.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}function io(n){return{schemeId:"smithy.api#httpBearerAuth",propertiesExtractor:({profile:e,filepath:t,configFilepath:o,ignoreCache:s},r)=>({identityProperties:{profile:e,filepath:t,configFilepath:o,ignoreCache:s}})}}const ao=n=>{const e=[];switch(n.operation){default:e.push(ro(n)),e.push(io())}return e},co=n=>{const e=tt(n.token,ot,nt),t=Un(n);return Object.assign(t,{authSchemePreference:it(n.authSchemePreference??[]),token:e})},uo=n=>Object.assign(n,{useDualstackEndpoint:n.useDualstackEndpoint??!1,useFipsEndpoint:n.useFipsEndpoint??!1,defaultSigningName:"bedrock"}),lo={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}},mo="3.899.0",po={version:mo},go=({serviceId:n,clientVersion:e})=>async t=>{const o=typeof window<"u"&&window?.navigator?.userAgent?Ct.parse(window.navigator.userAgent):void 0,s=[["aws-sdk-js",e],["ua","2.1"],[`os/${o?.os?.name||"other"}`,o?.os?.version],["lang/js"],["md/browser",`${o?.browser?.name??"unknown"}_${o?.browser?.version??"unknown"}`]];n&&s.push([`api/${n}`,e]);const r=await t?.userAgentAppId?.();return r&&s.push([`app/${r}`]),s},mt="required",P="fn",$="argv",L="ref",pe=!0,ge="isSet",H="booleanEquals",N="error",v="endpoint",y="tree",W="PartitionResult",fe={[mt]:!1,type:"String"},he={[mt]:!0,default:!1,type:"Boolean"},ye={[L]:"Endpoint"},pt={[P]:H,[$]:[{[L]:"UseFIPS"},!0]},gt={[P]:H,[$]:[{[L]:"UseDualStack"},!0]},T={},we={[P]:"getAttr",[$]:[{[L]:W},"supportsFIPS"]},Ie={[P]:H,[$]:[!0,{[P]:"getAttr",[$]:[{[L]:W},"supportsDualStack"]}]},Se=[pt],Ae=[gt],Ee=[{[L]:"Region"}],fo={parameters:{Region:fe,UseDualStack:he,UseFIPS:he,Endpoint:fe},rules:[{conditions:[{[P]:ge,[$]:[ye]}],rules:[{conditions:Se,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:N},{rules:[{conditions:Ae,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:N},{endpoint:{url:ye,properties:T,headers:T},type:v}],type:y}],type:y},{rules:[{conditions:[{[P]:ge,[$]:Ee}],rules:[{conditions:[{[P]:"aws.partition",[$]:Ee,assign:W}],rules:[{conditions:[pt,gt],rules:[{conditions:[{[P]:H,[$]:[pe,we]},Ie],rules:[{rules:[{endpoint:{url:"https://bedrock-runtime-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:T,headers:T},type:v}],type:y}],type:y},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:N}],type:y},{conditions:Se,rules:[{conditions:[{[P]:H,[$]:[we,pe]}],rules:[{rules:[{endpoint:{url:"https://bedrock-runtime-fips.{Region}.{PartitionResult#dnsSuffix}",properties:T,headers:T},type:v}],type:y}],type:y},{error:"FIPS is enabled but this partition does not support FIPS",type:N}],type:y},{conditions:Ae,rules:[{conditions:[Ie],rules:[{rules:[{endpoint:{url:"https://bedrock-runtime.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:T,headers:T},type:v}],type:y}],type:y},{error:"DualStack is enabled but this partition does not support DualStack",type:N}],type:y},{rules:[{endpoint:{url:"https://bedrock-runtime.{Region}.{PartitionResult#dnsSuffix}",properties:T,headers:T},type:v}],type:y}],type:y}],type:y},{error:"Invalid Configuration: Missing Region",type:N}],type:y}]},ho=fo,yo=new Ot({size:50,params:["Endpoint","Region","UseDualStack","UseFIPS"]}),wo=(n,e={})=>yo.get(n,()=>kt(ho,{endpointParams:n,logger:e.logger}));et.aws=dt;const Io=n=>({apiVersion:"2023-09-30",base64Decoder:n?.base64Decoder??Rt,base64Encoder:n?.base64Encoder??Dt,disableHostPrefix:n?.disableHostPrefix??!1,endpointProvider:n?.endpointProvider??wo,extensions:n?.extensions??[],httpAuthSchemeProvider:n?.httpAuthSchemeProvider??ao,httpAuthSchemes:n?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new vn},{schemeId:"smithy.api#httpBearerAuth",identityProvider:e=>e.getIdentityProvider("smithy.api#httpBearerAuth"),signer:new Cn}],logger:n?.logger??new $t,serviceId:n?.serviceId??"Bedrock Runtime",urlParser:n?.urlParser??Pt,utf8Decoder:n?.utf8Decoder??Tt,utf8Encoder:n?.utf8Encoder??rt}),So=n=>{const e=Nt(n),t=()=>e().then(qt),o=Io(n);return{...o,...n,runtime:"browser",defaultsMode:e,bodyLengthChecker:n?.bodyLengthChecker??Ht,credentialDefaultProvider:n?.credentialDefaultProvider??(s=>()=>Promise.reject(new Error("Credential is missing"))),defaultUserAgentProvider:n?.defaultUserAgentProvider??go({serviceId:o.serviceId,clientVersion:po.version}),eventStreamPayloadHandlerProvider:n?.eventStreamPayloadHandlerProvider??oo,eventStreamSerdeProvider:n?.eventStreamSerdeProvider??Ft,maxAttempts:n?.maxAttempts??Ut,region:n?.region??vt("Region is missing"),requestHandler:Lt.create(n?.requestHandler??t,Vt.create(t)),retryMode:n?.retryMode??(async()=>(await t()).retryMode||Mt),sha256:n?.sha256??_t,streamCollector:n?.streamCollector??zt,useDualstackEndpoint:n?.useDualstackEndpoint??(()=>Promise.resolve(Bt)),useFipsEndpoint:n?.useFipsEndpoint??(()=>Promise.resolve(jt))}},Ao=n=>({setRegion(e){n.region=e},region(){return n.region}}),Eo=n=>({region:n.region()}),bo=n=>{const e=n.httpAuthSchemes;let t=n.httpAuthSchemeProvider,o=n.credentials,s=n.token;return{setHttpAuthScheme(r){const i=e.findIndex(a=>a.schemeId===r.schemeId);i===-1?e.push(r):e.splice(i,1,r)},httpAuthSchemes(){return e},setHttpAuthSchemeProvider(r){t=r},httpAuthSchemeProvider(){return t},setCredentials(r){o=r},credentials(){return o},setToken(r){s=r},token(){return s}}},xo=n=>({httpAuthSchemes:n.httpAuthSchemes(),httpAuthSchemeProvider:n.httpAuthSchemeProvider(),credentials:n.credentials(),token:n.token()}),Co=(n,e)=>{const t=Object.assign(Ao(n),Gt(n),Wt(n),bo(n));return e.forEach(o=>o.configure(t)),Object.assign(n,Eo(t),Kt(t),Yt(t),xo(t))};class Oo extends Jt{config;constructor(...[e]){const t=So(e||{});super(t),this.initConfig=t;const o=uo(t),s=Tn(o),r=Qt(s),i=Xt(r),a=i,c=Zt(a),d=en(c),l=co(d),m=tn(l),f=nn(m),p=Co(f,e?.extensions||[]);this.config=p,this.middlewareStack.use(eo(this.config)),this.middlewareStack.use(on(this.config)),this.middlewareStack.use(sn(this.config)),this.middlewareStack.use(wn(this.config)),this.middlewareStack.use(An(this.config)),this.middlewareStack.use(xn(this.config)),this.middlewareStack.use(rn(this.config,{httpAuthSchemeParametersProvider:so,identityProviderConfigProvider:async E=>new cn({"aws.auth#sigv4":E.credentials,"smithy.api#httpBearerAuth":E.token})})),this.middlewareStack.use(an(this.config))}destroy(){super.destroy()}}class w extends dn{constructor(e){super(e),Object.setPrototypeOf(this,w.prototype)}}class K extends w{name="AccessDeniedException";$fault="client";constructor(e){super({name:"AccessDeniedException",$fault:"client",...e}),Object.setPrototypeOf(this,K.prototype)}}var be;(function(n){n.visit=(e,t)=>e.s3OutputDataConfig!==void 0?t.s3OutputDataConfig(e.s3OutputDataConfig):t._(e.$unknown[0],e.$unknown[1])})(be||(be={}));class Y extends w{name="InternalServerException";$fault="server";constructor(e){super({name:"InternalServerException",$fault:"server",...e}),Object.setPrototypeOf(this,Y.prototype)}}class J extends w{name="ThrottlingException";$fault="client";constructor(e){super({name:"ThrottlingException",$fault:"client",...e}),Object.setPrototypeOf(this,J.prototype)}}class Q extends w{name="ValidationException";$fault="client";constructor(e){super({name:"ValidationException",$fault:"client",...e}),Object.setPrototypeOf(this,Q.prototype)}}class X extends w{name="ConflictException";$fault="client";constructor(e){super({name:"ConflictException",$fault:"client",...e}),Object.setPrototypeOf(this,X.prototype)}}class Z extends w{name="ResourceNotFoundException";$fault="client";constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),Object.setPrototypeOf(this,Z.prototype)}}class ee extends w{name="ServiceQuotaExceededException";$fault="client";constructor(e){super({name:"ServiceQuotaExceededException",$fault:"client",...e}),Object.setPrototypeOf(this,ee.prototype)}}class te extends w{name="ServiceUnavailableException";$fault="server";constructor(e){super({name:"ServiceUnavailableException",$fault:"server",...e}),Object.setPrototypeOf(this,te.prototype)}}var xe;(function(n){n.visit=(e,t)=>e.bytes!==void 0?t.bytes(e.bytes):t._(e.$unknown[0],e.$unknown[1])})(xe||(xe={}));var Ce;(function(n){n.visit=(e,t)=>e.text!==void 0?t.text(e.text):e.image!==void 0?t.image(e.image):t._(e.$unknown[0],e.$unknown[1])})(Ce||(Ce={}));var Oe;(function(n){n.visit=(e,t)=>e.valid!==void 0?t.valid(e.valid):e.invalid!==void 0?t.invalid(e.invalid):e.satisfiable!==void 0?t.satisfiable(e.satisfiable):e.impossible!==void 0?t.impossible(e.impossible):e.translationAmbiguous!==void 0?t.translationAmbiguous(e.translationAmbiguous):e.tooComplex!==void 0?t.tooComplex(e.tooComplex):e.noTranslations!==void 0?t.noTranslations(e.noTranslations):t._(e.$unknown[0],e.$unknown[1])})(Oe||(Oe={}));var ke;(function(n){n.visit=(e,t)=>e.documentChar!==void 0?t.documentChar(e.documentChar):e.documentPage!==void 0?t.documentPage(e.documentPage):e.documentChunk!==void 0?t.documentChunk(e.documentChunk):t._(e.$unknown[0],e.$unknown[1])})(ke||(ke={}));var Te;(function(n){n.visit=(e,t)=>e.text!==void 0?t.text(e.text):t._(e.$unknown[0],e.$unknown[1])})(Te||(Te={}));var Pe;(function(n){n.visit=(e,t)=>e.text!==void 0?t.text(e.text):t._(e.$unknown[0],e.$unknown[1])})(Pe||(Pe={}));var $e;(function(n){n.visit=(e,t)=>e.text!==void 0?t.text(e.text):t._(e.$unknown[0],e.$unknown[1])})($e||($e={}));var De;(function(n){n.visit=(e,t)=>e.bytes!==void 0?t.bytes(e.bytes):e.s3Location!==void 0?t.s3Location(e.s3Location):e.text!==void 0?t.text(e.text):e.content!==void 0?t.content(e.content):t._(e.$unknown[0],e.$unknown[1])})(De||(De={}));var Re;(function(n){n.visit=(e,t)=>e.bytes!==void 0?t.bytes(e.bytes):t._(e.$unknown[0],e.$unknown[1])})(Re||(Re={}));var Ne;(function(n){n.visit=(e,t)=>e.text!==void 0?t.text(e.text):e.image!==void 0?t.image(e.image):t._(e.$unknown[0],e.$unknown[1])})(Ne||(Ne={}));var ze;(function(n){n.visit=(e,t)=>e.bytes!==void 0?t.bytes(e.bytes):e.s3Location!==void 0?t.s3Location(e.s3Location):t._(e.$unknown[0],e.$unknown[1])})(ze||(ze={}));var _e;(function(n){n.visit=(e,t)=>e.reasoningText!==void 0?t.reasoningText(e.reasoningText):e.redactedContent!==void 0?t.redactedContent(e.redactedContent):t._(e.$unknown[0],e.$unknown[1])})(_e||(_e={}));var Me;(function(n){n.visit=(e,t)=>e.bytes!==void 0?t.bytes(e.bytes):e.s3Location!==void 0?t.s3Location(e.s3Location):t._(e.$unknown[0],e.$unknown[1])})(Me||(Me={}));var Le;(function(n){n.visit=(e,t)=>e.json!==void 0?t.json(e.json):e.text!==void 0?t.text(e.text):e.image!==void 0?t.image(e.image):e.document!==void 0?t.document(e.document):e.video!==void 0?t.video(e.video):t._(e.$unknown[0],e.$unknown[1])})(Le||(Le={}));var ve;(function(n){n.visit=(e,t)=>e.text!==void 0?t.text(e.text):e.image!==void 0?t.image(e.image):e.document!==void 0?t.document(e.document):e.video!==void 0?t.video(e.video):e.toolUse!==void 0?t.toolUse(e.toolUse):e.toolResult!==void 0?t.toolResult(e.toolResult):e.guardContent!==void 0?t.guardContent(e.guardContent):e.cachePoint!==void 0?t.cachePoint(e.cachePoint):e.reasoningContent!==void 0?t.reasoningContent(e.reasoningContent):e.citationsContent!==void 0?t.citationsContent(e.citationsContent):t._(e.$unknown[0],e.$unknown[1])})(ve||(ve={}));var Ue;(function(n){n.visit=(e,t)=>e.text!==void 0?t.text(e.text):t._(e.$unknown[0],e.$unknown[1])})(Ue||(Ue={}));var Fe;(function(n){n.visit=(e,t)=>e.text!==void 0?t.text(e.text):e.guardContent!==void 0?t.guardContent(e.guardContent):e.cachePoint!==void 0?t.cachePoint(e.cachePoint):t._(e.$unknown[0],e.$unknown[1])})(Fe||(Fe={}));var He;(function(n){n.visit=(e,t)=>e.auto!==void 0?t.auto(e.auto):e.any!==void 0?t.any(e.any):e.tool!==void 0?t.tool(e.tool):t._(e.$unknown[0],e.$unknown[1])})(He||(He={}));var je;(function(n){n.visit=(e,t)=>e.json!==void 0?t.json(e.json):t._(e.$unknown[0],e.$unknown[1])})(je||(je={}));var Be;(function(n){n.visit=(e,t)=>e.toolSpec!==void 0?t.toolSpec(e.toolSpec):e.cachePoint!==void 0?t.cachePoint(e.cachePoint):t._(e.$unknown[0],e.$unknown[1])})(Be||(Be={}));var Ve;(function(n){n.visit=(e,t)=>e.message!==void 0?t.message(e.message):t._(e.$unknown[0],e.$unknown[1])})(Ve||(Ve={}));class ne extends w{name="ModelErrorException";$fault="client";originalStatusCode;resourceName;constructor(e){super({name:"ModelErrorException",$fault:"client",...e}),Object.setPrototypeOf(this,ne.prototype),this.originalStatusCode=e.originalStatusCode,this.resourceName=e.resourceName}}class oe extends w{name="ModelNotReadyException";$fault="client";$retryable={};constructor(e){super({name:"ModelNotReadyException",$fault:"client",...e}),Object.setPrototypeOf(this,oe.prototype)}}class se extends w{name="ModelTimeoutException";$fault="client";constructor(e){super({name:"ModelTimeoutException",$fault:"client",...e}),Object.setPrototypeOf(this,se.prototype)}}var qe;(function(n){n.visit=(e,t)=>e.text!==void 0?t.text(e.text):e.redactedContent!==void 0?t.redactedContent(e.redactedContent):e.signature!==void 0?t.signature(e.signature):t._(e.$unknown[0],e.$unknown[1])})(qe||(qe={}));var Ge;(function(n){n.visit=(e,t)=>e.text!==void 0?t.text(e.text):e.toolUse!==void 0?t.toolUse(e.toolUse):e.reasoningContent!==void 0?t.reasoningContent(e.reasoningContent):e.citation!==void 0?t.citation(e.citation):t._(e.$unknown[0],e.$unknown[1])})(Ge||(Ge={}));var We;(function(n){n.visit=(e,t)=>e.toolUse!==void 0?t.toolUse(e.toolUse):t._(e.$unknown[0],e.$unknown[1])})(We||(We={}));class re extends w{name="ModelStreamErrorException";$fault="client";originalStatusCode;originalMessage;constructor(e){super({name:"ModelStreamErrorException",$fault:"client",...e}),Object.setPrototypeOf(this,re.prototype),this.originalStatusCode=e.originalStatusCode,this.originalMessage=e.originalMessage}}var Ke;(function(n){n.visit=(e,t)=>e.messageStart!==void 0?t.messageStart(e.messageStart):e.contentBlockStart!==void 0?t.contentBlockStart(e.contentBlockStart):e.contentBlockDelta!==void 0?t.contentBlockDelta(e.contentBlockDelta):e.contentBlockStop!==void 0?t.contentBlockStop(e.contentBlockStop):e.messageStop!==void 0?t.messageStop(e.messageStop):e.metadata!==void 0?t.metadata(e.metadata):e.internalServerException!==void 0?t.internalServerException(e.internalServerException):e.modelStreamErrorException!==void 0?t.modelStreamErrorException(e.modelStreamErrorException):e.validationException!==void 0?t.validationException(e.validationException):e.throttlingException!==void 0?t.throttlingException(e.throttlingException):e.serviceUnavailableException!==void 0?t.serviceUnavailableException(e.serviceUnavailableException):t._(e.$unknown[0],e.$unknown[1])})(Ke||(Ke={}));var Ye;(function(n){n.visit=(e,t)=>e.chunk!==void 0?t.chunk(e.chunk):t._(e.$unknown[0],e.$unknown[1])})(Ye||(Ye={}));var Je;(function(n){n.visit=(e,t)=>e.chunk!==void 0?t.chunk(e.chunk):e.internalServerException!==void 0?t.internalServerException(e.internalServerException):e.modelStreamErrorException!==void 0?t.modelStreamErrorException(e.modelStreamErrorException):e.validationException!==void 0?t.validationException(e.validationException):e.throttlingException!==void 0?t.throttlingException(e.throttlingException):e.modelTimeoutException!==void 0?t.modelTimeoutException(e.modelTimeoutException):e.serviceUnavailableException!==void 0?t.serviceUnavailableException(e.serviceUnavailableException):t._(e.$unknown[0],e.$unknown[1])})(Je||(Je={}));var Qe;(function(n){n.visit=(e,t)=>e.chunk!==void 0?t.chunk(e.chunk):e.internalServerException!==void 0?t.internalServerException(e.internalServerException):e.modelStreamErrorException!==void 0?t.modelStreamErrorException(e.modelStreamErrorException):e.validationException!==void 0?t.validationException(e.validationException):e.throttlingException!==void 0?t.throttlingException(e.throttlingException):e.modelTimeoutException!==void 0?t.modelTimeoutException(e.modelTimeoutException):e.serviceUnavailableException!==void 0?t.serviceUnavailableException(e.serviceUnavailableException):t._(e.$unknown[0],e.$unknown[1])})(Qe||(Qe={}));var Xe;(function(n){n.visit=(e,t)=>e.invokeModel!==void 0?t.invokeModel(e.invokeModel):e.converse!==void 0?t.converse(e.converse):t._(e.$unknown[0],e.$unknown[1])})(Xe||(Xe={}));const ko=n=>({...n,...n.body&&{body:lt}}),To=n=>({...n,...n.body&&{body:lt}}),Po=async(n,e)=>{const t=ln(n,e),o=S({},un,{[ht]:n[ft]||"application/octet-stream",[Ze]:n[Ze],[Jo]:n[Wo],[Ko]:n[qo],[Yo]:n[Go],[wt]:n[yt]});t.bp("/model/{modelId}/invoke"),t.p("modelId",()=>n.modelId,"{modelId}",!1);let s;return n.body!==void 0&&(s=n.body),t.m("POST").h(o).b(s),t.build()},$o=async(n,e)=>{if(n.statusCode!==200&&n.statusCode>=300)return Do(n,e);const t=S({$metadata:A(n),[ft]:[,n.headers[ht]],[yt]:[,n.headers[wt]]}),o=await st(n.body,e);return t.body=o,t},Do=async(n,e)=>{const t={...n,body:await Vn(n.body,e)},o=qn(n,t.body);switch(o){case"AccessDeniedException":case"com.amazonaws.bedrockruntime#AccessDeniedException":throw await No(t);case"InternalServerException":case"com.amazonaws.bedrockruntime#InternalServerException":throw await _o(t);case"ResourceNotFoundException":case"com.amazonaws.bedrockruntime#ResourceNotFoundException":throw await Fo(t);case"ServiceQuotaExceededException":case"com.amazonaws.bedrockruntime#ServiceQuotaExceededException":throw await Ho(t);case"ServiceUnavailableException":case"com.amazonaws.bedrockruntime#ServiceUnavailableException":throw await jo(t);case"ThrottlingException":case"com.amazonaws.bedrockruntime#ThrottlingException":throw await Bo(t);case"ValidationException":case"com.amazonaws.bedrockruntime#ValidationException":throw await Vo(t);case"ModelErrorException":case"com.amazonaws.bedrockruntime#ModelErrorException":throw await Mo(t);case"ModelNotReadyException":case"com.amazonaws.bedrockruntime#ModelNotReadyException":throw await Lo(t);case"ModelTimeoutException":case"com.amazonaws.bedrockruntime#ModelTimeoutException":throw await Uo(t);case"ModelStreamErrorException":case"com.amazonaws.bedrockruntime#ModelStreamErrorException":throw await vo(t);case"ConflictException":case"com.amazonaws.bedrockruntime#ConflictException":throw await zo(t);default:const s=t.body;return Ro({output:n,parsedBody:s,errorCode:o})}},Ro=mn(w),No=async(n,e)=>{const t=S({}),o=n.body,s=b(o,{message:I});Object.assign(t,s);const r=new K({$metadata:A(n),...t});return x(r,n.body)},zo=async(n,e)=>{const t=S({}),o=n.body,s=b(o,{message:I});Object.assign(t,s);const r=new X({$metadata:A(n),...t});return x(r,n.body)},_o=async(n,e)=>{const t=S({}),o=n.body,s=b(o,{message:I});Object.assign(t,s);const r=new Y({$metadata:A(n),...t});return x(r,n.body)},Mo=async(n,e)=>{const t=S({}),o=n.body,s=b(o,{message:I,originalStatusCode:at,resourceName:I});Object.assign(t,s);const r=new ne({$metadata:A(n),...t});return x(r,n.body)},Lo=async(n,e)=>{const t=S({}),o=n.body,s=b(o,{message:I});Object.assign(t,s);const r=new oe({$metadata:A(n),...t});return x(r,n.body)},vo=async(n,e)=>{const t=S({}),o=n.body,s=b(o,{message:I,originalMessage:I,originalStatusCode:at});Object.assign(t,s);const r=new re({$metadata:A(n),...t});return x(r,n.body)},Uo=async(n,e)=>{const t=S({}),o=n.body,s=b(o,{message:I});Object.assign(t,s);const r=new se({$metadata:A(n),...t});return x(r,n.body)},Fo=async(n,e)=>{const t=S({}),o=n.body,s=b(o,{message:I});Object.assign(t,s);const r=new Z({$metadata:A(n),...t});return x(r,n.body)},Ho=async(n,e)=>{const t=S({}),o=n.body,s=b(o,{message:I});Object.assign(t,s);const r=new ee({$metadata:A(n),...t});return x(r,n.body)},jo=async(n,e)=>{const t=S({}),o=n.body,s=b(o,{message:I});Object.assign(t,s);const r=new te({$metadata:A(n),...t});return x(r,n.body)},Bo=async(n,e)=>{const t=S({}),o=n.body,s=b(o,{message:I});Object.assign(t,s);const r=new J({$metadata:A(n),...t});return x(r,n.body)},Vo=async(n,e)=>{const t=S({}),o=n.body,s=b(o,{message:I});Object.assign(t,s);const r=new Q({$metadata:A(n),...t});return x(r,n.body)},A=n=>({httpStatusCode:n.statusCode,requestId:n.headers["x-amzn-requestid"]??n.headers["x-amzn-request-id"]??n.headers["x-amz-request-id"],extendedRequestId:n.headers["x-amz-id-2"],cfId:n.headers["x-amz-cf-id"]}),Ze="accept",ft="contentType",ht="content-type",qo="guardrailIdentifier",Go="guardrailVersion",yt="performanceConfigLatency",Wo="trace",Ko="x-amzn-bedrock-guardrailidentifier",Yo="x-amzn-bedrock-guardrailversion",wt="x-amzn-bedrock-performanceconfig-latency",Jo="x-amzn-bedrock-trace";class z extends pn.classBuilder().ep(lo).m(function(e,t,o,s){return[gn(o,this.serialize,this.deserialize),fn(o,e.getEndpointParameterInstructions())]}).s("AmazonBedrockFrontendService","InvokeModel",{}).n("BedrockRuntimeClient","InvokeModelCommand").f(ko,To).ser(Po).de($o).build(){}class Qo{medicationKeywords={start:["start","begin","initiate","prescribe","give","add"],stop:["stop","discontinue","dc","d/c","hold","cease"],continue:["continue","keep","maintain","stay on"],increase:["increase","up","raise","higher","more"],decrease:["decrease","lower","reduce","less","down","taper"]};labKeywords=["order","let's get","let's check","draw","check","labs","blood work","bloodwork","test","panel","cbc","cmp","bmp","tsh","a1c","hemoglobin","glucose","lipid","liver","kidney","electrolytes"];labValueKeywords=["sugars of","tsh of","a1c of","ldl","hdl","cholesterol","glucose of","hemoglobin of","creatinine of","a1c ","tsh is","tsh ","glucose "];demographicKeywords=["year old","years old","comes in with","patient with","history of","diagnosed with"];imagingKeywords=["x-ray","xray","ct","mri","ultrasound","echo","scan","imaging","radiograph","mammogram","dexa"];priorAuthKeywords=["prior auth","prior authorization","pre-auth","preauth","authorization","approval needed"];referralKeywords=["refer","referral","consult","send to","see","appointment with","schedule with"];commonMedications=["metformin","insulin","glipizide","januvia","ozempic","trulicity","jardiance","farxiga","humalog","lantus","levothyroxine","synthroid","lisinopril","metoprolol","atorvastatin","simvastatin","aspirin","clopidogrel","warfarin","eliquis","xarelto","gabapentin","lyrica"];extractOrders(e){const t={medications:[],labs:[],imaging:[],priorAuths:[],referrals:[],other:[],rawOrders:""},o=this.splitIntoSentences(e);for(const s of o){const r=s.toLowerCase(),i=this.extractMedicationOrder(s);if(i&&t.medications.push(i),this.containsLabOrder(r)){const a=this.extractLabOrder(s);a&&t.labs.push(a)}this.containsImagingOrder(r)&&t.imaging.push({type:"imaging",text:s,action:"order",confidence:.8}),this.containsPriorAuth(r)&&t.priorAuths.push({type:"prior_auth",text:s,action:"order",confidence:.9}),this.containsReferral(r)&&t.referrals.push({type:"referral",text:s,action:"order",confidence:.7})}return t.rawOrders="",t}splitIntoSentences(e){let t=e.split(/[.!?]+/).filter(o=>o.trim().length>0);if(t.length===1&&t[0].length>100){const o=["continue","start","begin","initiate","stop","discontinue","check","order","refer"];let s=t[0];const r=[];if(o.forEach(i=>{const a=new RegExp(`\\b${i}\\b`,"gi");let c;for(;(c=a.exec(s))!==null;)c.index>20&&r.push(c.index)}),r.length>0){r.sort((c,d)=>c-d);const i=[];let a=0;r.forEach(c=>{c>a+10&&(i.push(s.substring(a,c).trim()),a=c)}),a<s.length&&i.push(s.substring(a).trim()),t=i.filter(c=>c.length>0)}}return t.map(o=>o.trim()).filter(o=>o.length>0)}extractMedicationOrder(e){const t=e.toLowerCase();for(const[o,s]of Object.entries(this.medicationKeywords))for(const r of s)if(t.includes(r)&&(this.commonMedications.some(a=>t.includes(a.toLowerCase()))||t.includes("mg")||t.includes("medication")))return{type:"medication",text:e,action:o,confidence:.85};return null}containsLabOrder(e){const t=this.labKeywords.some(r=>e.includes(r)),o=this.labValueKeywords.some(r=>e.includes(r))&&!["check","order","get","draw","test","will check"].some(r=>e.includes(r)),s=this.demographicKeywords.some(r=>e.includes(r));return t&&!o&&!s}extractLabOrder(e){const t=this.extractUrgency(e);return{type:"lab",text:e,action:"order",urgency:t,confidence:.8}}containsImagingOrder(e){return this.imagingKeywords.some(t=>e.includes(t))}containsPriorAuth(e){return this.priorAuthKeywords.some(t=>e.includes(t))}containsReferral(e){return this.referralKeywords.some(t=>e.includes(t))}extractUrgency(e){const t=e.toLowerCase();return t.includes("stat")||t.includes("immediately")?"stat":t.includes("urgent")||t.includes("asap")?"urgent":"routine"}formatOrdersForTemplate(e){const t=[];return e.medications.length>0&&(t.push("MEDICATIONS:"),e.medications.forEach(o=>{const s=o.action?o.action.toUpperCase():"ORDER";t.push(`- ${s}: ${o.text}`)})),e.labs.length>0&&(t.push(`
LABS:`),e.labs.forEach(o=>{t.push(`- ${o.text}`)})),e.imaging.length>0&&(t.push(`
IMAGING:`),e.imaging.forEach(o=>{t.push(`- ${o.text}`)})),e.priorAuths.length>0&&(t.push(`
PRIOR AUTHORIZATIONS:`),e.priorAuths.forEach(o=>{t.push(`- ${o.text}`)})),e.referrals.length>0&&(t.push(`
REFERRALS:`),e.referrals.forEach(o=>{t.push(`- ${o.text}`)})),t.join(`
`)}parseOrdersSection(e){const t=[],o=e.split(`
`);let s="other";for(const r of o){const i=r.trim();if(i.includes("MEDICATION")){s="medication";continue}if(i.includes("LAB")){s="lab";continue}if(i.includes("IMAGING")){s="imaging";continue}if(i.includes("PRIOR AUTH")){s="prior_auth";continue}if(i.includes("REFERRAL")){s="referral";continue}if(i.startsWith("-")||i.startsWith("•")){const a=i.substring(1).trim(),c=a.match(/^(START|STOP|CONTINUE|INCREASE|DECREASE|ORDER):\s*/i);let d,l=a;c&&(d=c[1].toLowerCase(),l=a.substring(c[0].length)),t.push({type:s,text:l,action:d,confidence:1})}}return t}mergeOrders(e,t){const o=[...e];for(const s of t)o.some(i=>i.text.toLowerCase()===s.text.toLowerCase()&&i.type===s.type)||o.push(s);return o}}const _=new Qo;class Xo{endpoint;apiKey;deploymentName;apiVersion="2024-02-01";constructor(){this.endpoint="https://tshla-openai-prod.openai.azure.com/",this.apiKey=void 0,this.deploymentName="gpt-4o",this.apiVersion="2024-02-01",u("AzureOpenAI","Service initialization",{hasEndpoint:!!this.endpoint,hasApiKey:!!this.apiKey,deploymentName:this.deploymentName,apiVersion:this.apiVersion,endpointUrl:this.endpoint?this.endpoint.substring(0,30)+"...":"not set"}),this.endpoint||h("AzureOpenAI","VITE_AZURE_OPENAI_ENDPOINT environment variable is required",{}),this.apiKey||h("AzureOpenAI","VITE_AZURE_OPENAI_KEY environment variable is required",{})}async processMedicalTranscription(e,t,o,s,r){let i=`You are an expert medical scribe and clinical documentation specialist with 15+ years of experience in medical note generation. You excel at creating comprehensive, accurate, and clinically relevant SOAP notes from dictated content.

TRANSCRIPTION TO PROCESS:
${e}

PATIENT INFORMATION:
${s||"No additional patient context provided"}

CLINICAL DOCUMENTATION REQUIREMENTS:
${r||"Use comprehensive medical documentation standards"}

INSTRUCTION: Create a detailed, professional medical note following these guidelines:

🏥 **SOAP NOTE FORMAT**:
1. **CHIEF COMPLAINT**: Extract the primary reason for visit (1-2 sentences)
2. **SUBJECTIVE**:
   - History of Present Illness (HPI): Detailed narrative with timing, quality, severity, context
   - Review of Systems (ROS): Extract any mentioned systems review
   - Past Medical History (PMH): Include relevant past medical conditions
   - Medications: List current medications with dosages when mentioned
   - Allergies: Note any mentioned allergies or state "NKDA" if none
   - Social History: Include relevant social factors (smoking, alcohol, etc.)
   - Family History: Include relevant family medical history

3. **OBJECTIVE**:
   - Vital Signs: Extract any mentioned vital signs with units
   - Physical Examination: Organize by body systems, be specific about findings
   - Diagnostic Results: Include any mentioned lab results, imaging, or test results

4. **ASSESSMENT**:
   - Primary diagnosis with ICD-10 code when appropriate
   - Differential diagnoses when mentioned
   - Clinical reasoning and severity assessment

5. **PLAN**:
   - Medications: Include drug names, dosages, frequencies, and durations
   - Diagnostic Orders: Labs, imaging, or tests ordered
   - Follow-up Instructions: When and where to return
   - Patient Education: Instructions given to patient
   - Referrals: Any specialist referrals mentioned

💊 **MEDICAL TERMINOLOGY**:
- Use proper medical abbreviations (e.g., "b.i.d." not "twice daily")
- Include specific medication dosages and routes when mentioned
- Use exact vital sign measurements with units
- Include severity scales when mentioned (e.g., "7/10 pain")
- Spell out medical conditions formally

🔢 **BILLING & CODING SUPPORT**:
- Suggest appropriate ICD-10 codes in brackets after diagnoses
- Include CPT code suggestions for procedures mentioned
- Note level of medical decision making when apparent

📋 **QUALITY STANDARDS**:
- Be thorough but concise
- Use professional medical language
- Maintain chronological flow in HPI
- Separate subjective vs objective findings clearly
- Ensure all dictated information is captured
- Add clinical context when medically appropriate

⚠️ **CRITICAL REQUIREMENTS**:
- NEVER add information not mentioned in the transcription
- Use "Not mentioned" or "Not assessed" for missing elements
- Maintain medical accuracy and professional tone
- Format consistently with standard medical documentation
- Include timing and duration of symptoms when provided

Generate a comprehensive, medically accurate SOAP note that would meet hospital documentation standards:`;return{formatted:(await this.processTranscriptionWithCustomPrompt(e,i,t)).formattedNote}}async processTranscriptionWithCustomPrompt(e,t,o){const s=Date.now();if(!this.endpoint||!this.apiKey)return h("AzureOpenAI","Azure OpenAI not configured",{hasEndpoint:!!this.endpoint,hasApiKey:!!this.apiKey}),this.createBasicFormattedNote(e,o);try{const r=`${this.endpoint}/openai/deployments/${this.deploymentName}/chat/completions?api-version=${this.apiVersion}`,i=await this.makeAPICall(r,{messages:[{role:"system",content:"You are an expert medical scribe with extensive experience in clinical documentation. Generate comprehensive, accurate SOAP notes that meet hospital documentation standards. Focus on medical accuracy, proper terminology, and complete information capture."},{role:"user",content:t}],temperature:.5,max_tokens:4e3,top_p:.9,frequency_penalty:.1,presence_penalty:.1});if(!i.ok){const l=await i.text();throw new Error(`Azure OpenAI API error: ${i.status} - ${l}`)}const a=await i.json(),c=a.choices[0].message.content,d=this.parseNoteIntoSections(c);return{formattedNote:c,sections:d,metadata:{processingTime:Date.now()-s,model:`Azure OpenAI ${this.deploymentName}`,tokenCount:a.usage?.total_tokens}}}catch(r){return h("AzureOpenAI","Custom prompt processing failed",{error:r instanceof Error?r.message:"Unknown error",hasTranscription:!!e,hasPatientContext:!!o}),this.createBasicFormattedNote(e,o)}}async processTranscription(e,t,o){const s=Date.now();if(!this.endpoint||!this.apiKey)return h("AzureOpenAI","Azure OpenAI not configured",{hasEndpoint:!!this.endpoint,hasApiKey:!!this.apiKey}),this.createBasicFormattedNote(e,o);try{const r=this.createSystemPrompt(t),i=this.createUserPrompt(e,o),a=`${this.endpoint}/openai/deployments/${this.deploymentName}/chat/completions?api-version=${this.apiVersion}`,c=await this.makeAPICall(a,{messages:[{role:"system",content:r},{role:"user",content:i}],temperature:.3,max_tokens:2e3,top_p:.95,frequency_penalty:0,presence_penalty:0});if(!c.ok){const f=await c.text();throw new Error(`Azure OpenAI API error: ${c.status} - ${f}`)}const d=await c.json(),l=d.choices[0].message.content,m=this.parseNoteIntoSections(l);return{formattedNote:l,sections:m,metadata:{processingTime:Date.now()-s,model:`Azure OpenAI ${this.deploymentName}`,tokenCount:d.usage?.total_tokens}}}catch(r){return h("AzureOpenAI","Note processing failed",{error:r instanceof Error?r.message:"Unknown error",transcriptionLength:e?.length||0,templateLength:t?.length||0,hasPatientContext:!!o}),this.createBasicFormattedNote(e,o)}}createSystemPrompt(e){return`You are a medical scribe assistant. Create a clean, professional medical note from the provided transcription.

CRITICAL: Your response must ONLY contain the medical note content - no instructions, explanations, or meta-commentary.

Requirements:
- Format as proper SOAP note
- Preserve all medical information 
- Correct obvious medical terminology errors
- Use standard medical abbreviations
- Professional medical language only

Template: ${e}

Output only the formatted medical note with clear section headers (Chief Complaint, HPI, Review of Systems, Physical Exam, Assessment, Plan). Do not include any instructions or explanations in your response.`}createUserPrompt(e,t){let o="";return(t?.name||t?.mrn)&&(o+=`Patient Information:
`,t.name&&(o+=`Name: ${t.name}
`),t.mrn&&(o+=`MRN: ${t.mrn}
`),t.dob&&(o+=`DOB: ${t.dob}
`),o+=`
`),o+=`Medical Transcription:
${e}`,o}parseNoteIntoSections(e){const t={},o=["chief complaint","hpi","history of present illness","review of systems","ros","physical exam","physical examination","assessment","plan"],s=e.split(`
`);let r="",i=[];for(const a of s){const c=a.toLowerCase();let d=!1;for(const l of o)if(c.includes(l)){r&&i.length>0&&(t[this.normalizeSection(r)]=i.join(`
`).trim()),r=l,i=[a],d=!0;break}!d&&r&&i.push(a)}return r&&i.length>0&&(t[this.normalizeSection(r)]=i.join(`
`).trim()),t}normalizeSection(e){return{"chief complaint":"chiefComplaint",hpi:"hpi","history of present illness":"hpi","review of systems":"reviewOfSystems",ros:"reviewOfSystems","physical exam":"physicalExam","physical examination":"physicalExam",assessment:"assessment",plan:"plan"}[e.toLowerCase()]||e}createBasicFormattedNote(e,t){let o="";return(t?.name||t?.mrn)&&(o+=`PATIENT INFORMATION
`,t.name&&(o+=`Name: ${t.name}
`),t.mrn&&(o+=`MRN: ${t.mrn}
`),t.dob&&(o+=`DOB: ${t.dob}
`),o+=`
`),o+=`CLINICAL NOTE

`,o+=e,{formattedNote:o,sections:{chiefComplaint:"",hpi:e,reviewOfSystems:"",physicalExam:"",assessment:"",plan:""},metadata:{processingTime:0,model:"Basic Formatter (API Unavailable)"}}}async processConversationalPrompt(e){const t=performance.now();if(!this.endpoint||!this.apiKey)return h("AzureOpenAI","Azure OpenAI not configured for conversational prompt",{hasEndpoint:!!this.endpoint,hasApiKey:!!this.apiKey}),"I understand your question about pump selection. Let me help you find the best option based on your needs.";try{u("AzureOpenAI","Processing conversational prompt",{promptLength:e.length,model:this.deploymentName});const o=`${this.endpoint}/openai/deployments/${this.deploymentName}/chat/completions?api-version=${this.apiVersion}`,s=await this.makeAPICall(o,{messages:[{role:"user",content:e}],max_tokens:2e3,temperature:.7,top_p:.95,frequency_penalty:0,presence_penalty:0});if(!s.ok){const c=await s.text();throw new Error(`Azure OpenAI API error: ${s.status} - ${c}`)}const r=await s.json(),i=r.choices?.[0]?.message?.content;if(!i)throw new Error("No response from Azure OpenAI");const a=performance.now()-t;return g("AzureOpenAI","Successfully processed conversational prompt",{processingTime:Math.round(a),model:this.deploymentName,tokenCount:r.usage?.total_tokens}),i.trim()}catch(o){const s=performance.now()-t;return h("AzureOpenAI","Failed to process conversational prompt",{error:o instanceof Error?o.message:"Unknown error",processingTime:Math.round(s)}),"I'm having trouble processing your question right now, but I can help you understand your pump recommendation. Please try again or contact support if the issue persists."}}async retryWithBackoff(e,t=3,o=1e3){let s;for(let r=0;r<=t;r++)try{return await e()}catch(i){if(s=i,i instanceof Error&&i.message.includes("429")){const a=o*Math.pow(2,r);if(g("AzureOpenAI",`Rate limited, retrying in ${a}ms (attempt ${r+1}/${t+1})`,{}),r<t){await new Promise(c=>setTimeout(c,a));continue}}if(r===0&&!i.message.includes("429")||r===t)throw i}throw s}async makeAPICall(e,t){return this.retryWithBackoff(async()=>{const o=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json","api-key":this.apiKey},body:JSON.stringify(t)});if(o.status===429){const s=new Error(`Rate limited: ${o.status}`);throw s.status=429,s}if(!o.ok){const s=new Error(`API call failed: ${o.status} ${o.statusText}`);throw s.status=o.status,s}return o})}async testConnection(){try{const e=await this.processTranscription("Patient has diabetes with A1C of 9.5","Standard SOAP Note",{name:"Test Patient"});return g("AzureOpenAI","Connection test successful",{processingTime:e.metadata?.processingTime,model:e.metadata?.model,tokenCount:e.metadata?.tokenCount}),!0}catch(e){return h("AzureOpenAI","Connection test failed",{error:e instanceof Error?e.message:"Unknown error"}),!1}}}const M=new Xo;class Zo{client;primaryProvider="azure";modelId="us.anthropic.claude-opus-4-1-20250805-v1:0";fallbackModelId="anthropic.claude-3-5-sonnet-20241022-v2:0";workingModelId=null;migrationMode=!0;constructor(){this.migrationMode&&(g("azureAI","Info message",{}),g("azureAI","Info message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{})),O("azureAI","Warning message",{}),this.client=new Oo({region:"us-east-1",credentials:{accessKeyId:"not-configured",secretAccessKey:"not-configured"}})}async processMedicalTranscription(e,t,o,s,r){if(this.migrationMode||this.primaryProvider==="azure")try{u("azureAI","Debug message",{}),u("azureAI","Debug message",{});const i=await this.processWithAzureOpenAI(e,t,o,s,r);return g("azureAI","Info message",{}),i}catch{O("azureAI","Warning message",{}),u("azureAI","Debug message",{})}try{const i=r?this.buildCustomPrompt(e,t,r.template,r.doctorSettings,s):this.buildPrompt(e,t,o,s);u("azureAI","Debug message",{}),u("azureAI","Debug message",{});const a=new z({modelId:this.modelId,contentType:"application/json",accept:"application/json",body:JSON.stringify({anthropic_version:"bedrock-2023-05-31",max_tokens:2e3,temperature:.3,messages:[{role:"user",content:i}]})});let c,d=0;const l=12;for(;d<=l;)try{if(d>0){const p=Math.min(1e4*Math.pow(2,d-1),9e4),E=Math.random()*5e3,C=p+E;u("azureAI","Debug message",{}),await new Promise(R=>setTimeout(R,C))}c=await this.client.send(a),g("azureAI","Info message",{});break}catch(p){if(p?.name==="TooManyRequestsException"||p?.name==="ThrottlingException"||p?.$metadata?.httpStatusCode===429||p?.message?.toLowerCase().includes("too many requests")||p?.message?.toLowerCase().includes("throttl")||p?.message?.toLowerCase().includes("rate")){if(d++,d>l)throw h("azureAI","Error message",{}),new Error("AI service is temporarily busy. Please wait a moment and try again.");continue}if(p?.name==="AccessDeniedException"||p?.name==="ValidationException"||p?.message?.includes("Operation not allowed")||p?.message?.includes("not authorized")||p?.message?.includes("model")||p?.$metadata?.httpStatusCode===403||p?.$metadata?.httpStatusCode===400){O("azureAI","Warning message",{});const E=[this.fallbackModelId,"anthropic.claude-3-sonnet-20240229-v1:0","anthropic.claude-instant-v1","anthropic.claude-v2"];for(const C of E){u("azureAI","Debug message",{});try{const R=new z({modelId:C,contentType:"application/json",accept:"application/json",body:JSON.stringify({anthropic_version:"bedrock-2023-05-31",max_tokens:2e3,temperature:.3,messages:[{role:"user",content:i}]})});c=await this.client.send(R),this.workingModelId=C,g("azureAI","Info message",{});break}catch{u("azureAI","Debug message",{});continue}}if(!c)throw h("azureAI","Error message",{}),new Error("AWS Bedrock models not accessible. Please enable Claude models in the AWS Bedrock console at: https://console.aws.amazon.com/bedrock/");break}if(p?.name==="ValidationException"||p?.message?.includes("model")||p?.message?.includes("not found")){O("azureAI","Warning message",{});const E=new z({modelId:this.fallbackModelId,contentType:"application/json",accept:"application/json",body:JSON.stringify({anthropic_version:"bedrock-2023-05-31",max_tokens:2e3,temperature:.3,messages:[{role:"user",content:i}]})});for(d=0;d<=l;)try{if(d>0){const C=Math.min(1e3*Math.pow(2,d),8e3);u("azureAI","Debug message",{}),await new Promise(R=>setTimeout(R,C))}c=await this.client.send(E),this.modelId=this.fallbackModelId,g("azureAI","Info message",{});break}catch(C){if(C?.name==="TooManyRequestsException"||C?.name==="ThrottlingException"||C?.$metadata?.httpStatusCode===429){if(d++,d>l)throw new Error("AI service is temporarily busy. Please wait a moment and try again.");continue}throw C}break}else throw p}const m=JSON.parse(new TextDecoder().decode(c.body)),f=this.parseResponse(m.content[0].text,t,o,e);return this.validateAndCleanProcessedNote(f,e)}catch{h("azureAI","Error message",{}),O("azureAI","Warning message",{});try{const a=o?`${o.name}
${o.sections.map(l=>l.title).join(`
`)}`:"Standard SOAP Note Format",c=await M.processTranscription(e,a,{name:t.fullName,mrn:t.mrn,dob:t.dateOfBirth});g("azureAI","Info message",{});const d={formatted:c.formattedNote,sections:{chiefComplaint:c.sections.chiefComplaint,historyOfPresentIllness:c.sections.hpi,reviewOfSystems:c.sections.reviewOfSystems,physicalExam:c.sections.physicalExam,assessment:c.sections.assessment,plan:c.sections.plan},metadata:{processedAt:new Date().toISOString(),model:c.metadata?.model||"Azure OpenAI",confidence:.85}};return this.validateAndCleanProcessedNote(d,e)}catch{h("azureAI","Error message",{}),O("azureAI","Warning message",{});const c=this.createBasicFormattedNote(e,t),d=V.correctTranscription(e),l=_.extractOrders(d);if(l&&(l.medications.length>0||l.labs.length>0||l.imaging.length>0||l.priorAuths.length>0||l.referrals.length>0)){const m=_.formatOrdersForTemplate(l);c.formatted+=`

**ORDERS & ACTIONS:**
${m}`,c.sections.ordersAndActions=m,c.extractedOrders=l}return this.validateAndCleanProcessedNote(c,e)}}}async processWithAzureOpenAI(e,t,o,s,r){g("azureAI","Info message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),r?(g("azureAI","Info message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),r.template.name?.toLowerCase().includes("tess")&&(u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),Object.entries(r.template.sections).forEach(([c,d])=>{d.aiInstructions&&u("azureAI","Found section with AI instructions")}))):o?(g("azureAI","Info message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),u("azureAI","Continuing with processing")):u("azureAI","Debug message",{});let i="Standard SOAP Note Format",a="";r?(u("azureAI","Debug message",{}),a=this.buildCustomPrompt(e,t,r.template,r.doctorSettings,s),i=r.template.name,g("azureAI","Info message",{})):o&&o.sections?(u("azureAI","Debug message",{}),a=this.buildPrompt(e,t,o,s),i=o.name||"Template-based SOAP Note",g("azureAI","Info message",{})):(u("azureAI","Debug message",{}),a=this.buildPrompt(e,t,null,s),i="Standard Medical SOAP Note",g("azureAI","Info message",{})),g("azureAI","Info message",{}),u("azureAI","Debug message",{}),u("azureAI","Processing enhanced template"),u("azureAI","Debug message",{});try{u("azureAI","Debug message",{}),g("azureAI","Info message",{}),u("azureAI","Using standard SOAP format"),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),g("azureAI","Info message",{});let c;r?(u("azureAI","Debug message",{}),c=await M.processTranscriptionWithCustomPrompt(e,a,{name:t.fullName,mrn:t.mrn,dob:t.dateOfBirth})):(u("azureAI","Debug message",{}),c=await M.processTranscription(e,i,{name:t.fullName,mrn:t.mrn,dob:t.dateOfBirth}));const d=this.convertAzureToProcessedNote(c,t);return this.enhanceWithOrderExtraction(d,e)}catch(c){throw h("azureAI","Error message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),g("azureAI","Info message",{}),c}}convertAzureToProcessedNote(e,t){return{formatted:e.formattedNote,sections:{chiefComplaint:e.sections.chiefComplaint||"",historyOfPresentIllness:e.sections.hpi||e.sections.historyOfPresentIllness||"",reviewOfSystems:e.sections.reviewOfSystems||e.sections.ros||"",pastMedicalHistory:e.sections.pastMedicalHistory||"",medications:e.sections.medications||"",allergies:e.sections.allergies||"",socialHistory:e.sections.socialHistory||"",familyHistory:e.sections.familyHistory||"",physicalExam:e.sections.physicalExam||e.sections.physicalExamination||"",assessment:e.sections.assessment||"",plan:e.sections.plan||""},metadata:{processedAt:new Date().toISOString(),model:`Azure OpenAI ${e.metadata?.model||"GPT-4o"}`,confidence:.95}}}enhanceWithOrderExtraction(e,t){u("azureAI","Debug message",{});const o=V.correctTranscription(t),s=_.extractOrders(o);if(s&&(s.medications.length>0||s.labs.length>0||s.imaging.length>0||s.priorAuths.length>0||s.referrals.length>0)){const r=_.formatOrdersForTemplate(s);e.sections.ordersAndActions=r,e.extractedOrders=s,e.formatted+=`

**ORDERS & ACTIONS:**
${r}`,g("azureAI","Info message",{})}return g("azureAI","Info message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),this.validateAndCleanProcessedNote(e,t)}validateAndCleanProcessedNote(e,t){u("azureAI","Debug message",{}),t.toLowerCase().split(/\s+/);const o=t.toLowerCase();return Object.keys(e.sections).forEach(s=>{const r=e.sections[s];if(r&&typeof r=="string"){const i=r.toLowerCase();this.calculateTextOverlap(i,o)>.8&&(u("azureAI","Debug message",{}),e.sections[s]="See transcript for details");let c=r.replace(/45 year old female with pashmikos to attack 2 diabetes nausea vomiting comes in blood sugar 400.*?hemoglobin A1C 9/gi,"").replace(/this is the transcript\./gi,"").replace(/^- START:.*$/gm,"").trim();c!==r&&(u("azureAI","Debug message",{}),e.sections[s]=c)}}),this.validateNumericExtraction(e,t),e.formatted=this.rebuildFormattedNote(e),g("azureAI","Info message",{}),e}calculateTextOverlap(e,t){const o=e.split(/\s+/),s=t.split(/\s+/);if(o.length===0)return 0;let r=0;return o.forEach(i=>{s.includes(i)&&i.length>3&&r++}),r/o.length}validateNumericExtraction(e,t){[{pattern:/blood sugar (\d+)/i,description:"blood sugar"},{pattern:/a1c (\d+(?:\.\d+)?)/i,description:"A1C"},{pattern:/(\d+) year old/i,description:"age"},{pattern:/lantus (\d+) units/i,description:"Lantus dosage"}].forEach(({pattern:s,description:r})=>{const i=t.match(s);if(i){const a=i[1];e.formatted.toLowerCase().includes(a)||(u("azureAI","Debug message",{}),(r==="blood sugar"||r==="A1C")&&e.sections.assessment&&(e.sections.assessment+=`
- ${r}: ${a}`))}})}rebuildFormattedNote(e){const t=new Date().toLocaleDateString(),o=e.sections;let s=`CLINICAL NOTE
════════════════════════════════════════════════════════
Date: ${t}
════════════════════════════════════════════════════════

`;return o.chiefComplaint&&(s+=`CHIEF COMPLAINT:
${o.chiefComplaint}

`),o.historyOfPresentIllness&&(s+=`HISTORY OF PRESENT ILLNESS:
${o.historyOfPresentIllness}

`),o.reviewOfSystems&&(s+=`REVIEW OF SYSTEMS:
${o.reviewOfSystems}

`),o.pastMedicalHistory&&(s+=`PAST MEDICAL HISTORY:
${o.pastMedicalHistory}

`),o.medications&&(s+=`MEDICATIONS:
${o.medications}

`),o.allergies&&(s+=`ALLERGIES:
${o.allergies}

`),o.socialHistory&&(s+=`SOCIAL HISTORY:
${o.socialHistory}

`),o.familyHistory&&(s+=`FAMILY HISTORY:
${o.familyHistory}

`),o.physicalExam&&(s+=`PHYSICAL EXAMINATION:
${o.physicalExam}

`),o.assessment&&(s+=`ASSESSMENT:
${o.assessment}

`),o.plan&&(s+=`PLAN:
${o.plan}

`),o.ordersAndActions&&(s+=`ORDERS & ACTIONS:
${o.ordersAndActions}

`),s}buildCustomPrompt(e,t,o,s,r){u("azureAI","Debug message",{});const i=[];Object.entries(o.sections).forEach(([c,d])=>{const l=d.format||"paragraph",m=l==="bullets"?"Use bullet points.":l==="numbered"?"Use numbered list.":"Use paragraph format.";i.push(`
### ${d.title}
Instructions: ${d.aiInstructions}
Format: ${m}
${d.keywords?`Keywords to look for: ${d.keywords.join(", ")}`:""}
${d.exampleText?`Example format: ${d.exampleText}`:""}
${d.required?"This section is REQUIRED.":"This section is optional."}
`)}),g("azureAI","Info message",{});const a={formal:"Use formal medical terminology and third-person perspective.",conversational:"Use a natural, conversational tone while maintaining professionalism.",concise:"Be extremely concise and to the point. Avoid unnecessary detail.",detailed:"Include comprehensive details and thorough documentation."};return`You are a medical scribe AI configured for Dr. ${t.name||"Unknown"}'s specific preferences.

PATIENT INFORMATION:
- Name: ${t.name}
- MRN: ${t.mrn}
- DOB: ${t.dob||"Not provided"}
${r?`
ADDITIONAL CONTEXT:
${r}
`:""}

MEDICAL DICTATION:
"${e}"

${o.generalInstructions?`
GENERAL INSTRUCTIONS FROM DOCTOR:
${o.generalInstructions}
`:""}

WRITING STYLE: ${a[s.aiStyle]}

SECTION-SPECIFIC INSTRUCTIONS:
Process the dictation into the following sections, following each section's specific instructions:

${i.join(`
`)}

OUTPUT REQUIREMENTS:
1. Generate a well-formatted clinical note following the template structure
2. Follow the specified format for each section (bullets, numbered, or paragraph)
3. Use the specified writing style throughout
4. Include all required sections; optional sections only if relevant information is present
5. Extract ACTUAL information from the dictation - do not use placeholder text
6. Maintain medical accuracy and appropriate terminology
7. CRITICAL: Only extract information that is explicitly present in the dictation transcript
8. Do NOT add information that is not stated in the dictation (no hallucinations)
9. If specific numeric values are mentioned (blood sugar, A1C, age, etc.), include them exactly as stated
10. If patient demographics are mentioned (age, gender), include them in the assessment
11. If no relevant information exists for a section, write "Not provided" or "See transcript"

Please process the dictation now.`}buildPrompt(e,t,o,s){const r=D.getCurrentDoctor();if(r&&!o)return D.formatAIPrompt(e,t);if(o&&o.sections){const d=Object.entries(o.sections).map(([l,m])=>typeof m=="object"&&m.title&&m.aiInstructions?`"${l}": "${m.aiInstructions.replace(/"/g,'\\"')}"`:typeof m=="object"&&m.title?`"${l}": "Extract information for ${m.title}"`:`"${l}": "Extract relevant information"`).join(`,
    `);return o.generalInstructions,`You are a medical scribe. Create a professional medical note from this dictation.

PATIENT: ${t.name} (MRN: ${t.mrn})

DICTATION:
"${e}"

Generate a JSON response with these sections:
{
  "sections": {
    ${d}
  }
}

CRITICAL EXTRACTION RULES:
1. Only extract information explicitly present in the dictation
2. Do NOT add information not stated in the dictation (no hallucinations)
3. Include exact numeric values mentioned (blood sugar, A1C, age, vital signs)
4. Capture patient demographics if mentioned (age, gender)
5. If no information exists for a section, write "Not provided"

IMPORTANT: Only return the medical note content. Do not include any instructions, explanations, or meta-commentary in your response.`}const i=e.includes("CONVERSATION TRANSCRIPT:")||e.includes("[DOCTOR]:")||e.includes("[PATIENT]:"),a=r?D.getAIPrompt().role:"an ENDOCRINOLOGIST";return(i?`You are an experienced medical scribe working for ${a}. Extract medical information from this doctor-patient conversation and create a structured SOAP note.

CONVERSATION:
"${e}"

IMPORTANT: This is a conversation between a doctor and patient. Extract the medical information from their dialogue.`:`You are an experienced medical scribe working for ${a}. Convert this medical dictation into a structured SOAP note with special attention to ${r?D.getAIPrompt().specialty:"endocrine conditions"}.

DICTATION:
"${e}"`)+(s?`

CONTEXT: ${s}`:"")+`

Create a medical note in JSON format:
{
  "sections": {
    "chiefComplaint": "[reason for visit]",
    "historyOfPresentIllness": "[story of current illness]",
    "reviewOfSystems": "[review of symptoms]",
    "pastMedicalHistory": "[chronic conditions]",
    "medications": "[current medications with doses]",
    "allergies": "[drug allergies]",
    "socialHistory": "[smoking, alcohol, drug use]",
    "familyHistory": "[family medical history]",
    "physicalExam": "[exam findings, vitals]",
    "assessment": "[today's problems]",
    "plan": "[treatment plan, medications, labs, follow-up]",
    "patientSummary": "[2-3 sentence summary]"
  }
}

CRITICAL EXTRACTION RULES:
1. Only extract information explicitly present in the dictation
2. Do NOT hallucinate or add information not stated
3. Include exact numeric values (blood sugar 400, A1C 9, age 45)
4. Capture demographics if mentioned (45 year old female)
5. If no information exists for a section, write "Not provided"

IMPORTANT: Only return the medical note content. Do not include instructions or explanations in your response.`}parseResponse(e,t,o,s){try{const r=e.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g,"").replace(/\r\n/g,`
`).replace(/\r/g,`
`).trim();let i;if(s){u("azureAI","Debug message",{});const m=V.correctTranscription(s);i=_.extractOrders(m),g("azureAI","Info message",{})}let a;if(r.startsWith("{")||r.startsWith("["))try{a=JSON.parse(r)}catch{return h("azureAI","Error message",{}),this.parseMarkdownResponse(r,t)}else return u("azureAI","Debug message",{}),this.parseMarkdownResponse(r,t);let c;u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),u("azureAI","Debug message",{}),o&&o.sections&&a.sections?(u("azureAI","Debug message",{}),c=this.formatCustomTemplate(a.sections,t,o)):(u("azureAI","Debug message",{}),c=this.formatNote(a.sections,t));let d="";i&&(i.medications.length>0||i.labs.length>0||i.imaging.length>0||i.priorAuths.length>0||i.referrals.length>0)&&(d=_.formatOrdersForTemplate(i),c+=`

**ORDERS & ACTIONS:**
${d}`,a.sections.ordersAndActions=d,g("azureAI","Info message",{}));let l=a.sections.patientSummary||"";return!l&&s&&(l=s.split(/[.!?]+/).slice(0,3).join(". ").trim()+".",a.sections.patientSummary=l),{formatted:c,sections:a.sections,extractedOrders:i,metadata:{processedAt:new Date().toISOString(),model:this.modelId.includes("claude-opus-4")?"claude-opus-4.1":this.modelId.includes("claude-3-5-sonnet")?"claude-3.5-sonnet":this.modelId.includes("claude-3-sonnet")?"claude-3-sonnet":"claude-3-haiku",confidence:.95}}}catch{throw h("azureAI","Error message",{}),u("azureAI","Debug message",{}),new Error("Failed to parse AI response. The AI may have returned an invalid format.")}}parseMarkdownResponse(e,t){return{patient:t,sections:{fullNote:e},formatted:e,timestamp:new Date().toISOString()}}formatCustomTemplate(e,t,o){const s=new Date().toLocaleDateString(),r=new Date().toLocaleTimeString();let i=`CLINICAL NOTE - ${o.name}
════════════════════════════════════════════════════════
Patient: ${t.name}
MRN: ${t.mrn}
Date: ${s}
Time: ${r}
════════════════════════════════════════════════════════

`;return Object.entries(o.sections).forEach(([a,c])=>{if(typeof c=="object"&&c.title){const d=c.title,l=e[a];i+=`
${d}:
`,l&&l.trim()!==""&&l!=="See transcript for details"?i+=`${l}

`:i+=`[No relevant information extracted from dictation]

`}}),i}highlightEndocrineTerms(e){if(!e)return e;const t=D.getCurrentDoctor()?D.getHighlightTerms():["diabetes","glucose","insulin","A1C","HbA1c","hypoglycemia","hyperglycemia","Lantus","Humalog","NovoLog","Metformin","Ozempic","Mounjaro","Jardiance","blood sugar","diabetic","DKA","ketoacidosis","thyroid","hypothyroid","hyperthyroid","TSH","T3","T4","Levothyroxine","Synthroid","goiter","thyroiditis","cholesterol","triglycerides","HDL","LDL","hyperlipidemia","statin","Lipitor","Crestor","Simvastatin","testosterone","estrogen","cortisol","PCOS","adrenal","pituitary"];let o=e;return t.forEach(s=>{const r=new RegExp(`\\b(${s}s?)\\b`,"gi");o=o.replace(r,"**$1**")}),o=o.replace(/\b(\d+(?:\.\d+)?)\s*(mg\/dL|mg|mcg|units?|mL|%)/gi,"**$1 $2**"),o}formatNote(e,t){return`CLINICAL NOTE - ${D.getCurrentDoctor()?.specialty?.toUpperCase()||"ENDOCRINOLOGY"}
====================
Patient: ${t.name}
MRN: ${t.mrn}
Date: ${new Date().toLocaleDateString()}
Provider: ${e.provider||D.getCurrentDoctor()?.name||"Dr. Rakesh Patel, MD"}

CHIEF COMPLAINT:
${this.highlightEndocrineTerms(e.chiefComplaint||"Not specified")}

HISTORY OF PRESENT ILLNESS:
${this.highlightEndocrineTerms(e.historyOfPresentIllness||"See transcript")}

REVIEW OF SYSTEMS:
${this.highlightEndocrineTerms(e.reviewOfSystems||"Negative except as noted in HPI")}

PAST MEDICAL HISTORY:
${this.highlightEndocrineTerms(e.pastMedicalHistory||t.diagnosis.join(", "))}

MEDICATIONS:
${this.highlightEndocrineTerms(e.medications||t.medications.map(s=>`- ${s.name} ${s.dosage} - ${s.frequency}`).join(`
`))}

ALLERGIES:
${e.allergies||"NKDA"}

SOCIAL HISTORY:
${e.socialHistory||""}

FAMILY HISTORY:
${this.highlightEndocrineTerms(e.familyHistory||"")}

PHYSICAL EXAMINATION:
${this.highlightEndocrineTerms(e.physicalExam||"Deferred")}

${e.diagnosticResults?`DIAGNOSTIC RESULTS:
${this.highlightEndocrineTerms(e.diagnosticResults)}

`:""}ASSESSMENT:
${this.highlightEndocrineTerms(e.assessment||"See HPI")}

PLAN:
${this.highlightEndocrineTerms(e.plan||"Continue current management")}

====================
Generated by AWS Bedrock ${this.modelId.includes("3-5-sonnet")?"Claude 3.5 Sonnet":"Claude 3 Sonnet"} (HIPAA Compliant)
Processed: ${new Date().toLocaleString()}`}async testConnection(){try{const e=new z({modelId:this.modelId,contentType:"application/json",accept:"application/json",body:JSON.stringify({anthropic_version:"bedrock-2023-05-31",max_tokens:10,messages:[{role:"user",content:'Say "ok"'}]})});return await this.client.send(e),!0}catch{return h("azureAI","Error message",{}),!1}}async generateResponse(e,t){let o=0;const s=5,r=3e3;for(;o<s;)try{const i=`${e}

${t}`,a=new z({modelId:this.modelId,contentType:"application/json",accept:"application/json",body:JSON.stringify({anthropic_version:"bedrock-2023-05-31",max_tokens:2e3,temperature:.7,messages:[{role:"user",content:i}]})}),c=await this.client.send(a),d=new TextDecoder().decode(c.body);return(JSON.parse(d).content?.[0]?.text||"I can help you choose the right pump. What matters most to you?").trim()}catch(i){if(h("azureAI","Error message",{}),i.name==="ThrottlingException"||i.name==="TooManyRequestsException"||i.$metadata?.httpStatusCode===429||i.message?.includes("Too many requests"))if(o++,o<s){const a=r*Math.pow(2,o-1);u("azureAI","Debug message",{}),await new Promise(c=>setTimeout(c,a));continue}else return O("azureAI","Warning message",{}),"I understand your needs. Let me analyze this information to find your best pump match.";return h("azureAI","Error message",{}),"I'm analyzing your preferences to find the best pump for you. Let's continue with the next category."}return O("azureAI","Warning message",{}),"I understand your needs. Let me analyze this information to find your best pump match."}async processWithClaude(e,t){const o=t==="followup_question"||t==="pump_recommendation"||t==="clarifying_question"||e.includes("Great question!")||e.includes("friendly diabetes educator")||e.includes("conversational, easy-to-understand way");if(this.migrationMode||this.primaryProvider==="azure")try{if(u("azureAI","Processing prompt with Azure OpenAI",{context:t,isConversational:o}),o){const s=await M.processConversationalPrompt(e);return g("azureAI","Successfully processed conversational prompt via Azure OpenAI",{}),s}else{const s=await M.processTranscription(e,"Standard Response",{name:"System"});return g("azureAI","Successfully processed medical transcription via Azure OpenAI",{}),s.formattedNote}}catch(s){O("azureAI","Azure OpenAI processing failed, falling back to AWS Bedrock",{error:s})}try{u("azureAI","Debug message",{});const s=new z({modelId:this.modelId,contentType:"application/json",accept:"application/json",body:JSON.stringify({anthropic_version:"bedrock-2023-05-31",max_tokens:3e3,temperature:.7,messages:[{role:"user",content:e}]})}),r=await this.client.send(s);return JSON.parse(new TextDecoder().decode(r.body)).content[0].text}catch{h("azureAI","Error message",{}),O("azureAI","Warning message",{});try{const r=await M.processTranscription(e,"Standard Response",{name:"System"});return g("azureAI","Info message",{}),r.formattedNote}catch{throw h("azureAI","Error message",{}),new Error("AI processing failed. Please try again later.")}}}createBasicFormattedNote(e,t){const o=new Date().toISOString(),s=e.split(/[.!?]+/).filter(i=>i.trim());return{formatted:`
**PATIENT INFORMATION:**
Name: ${t.name||"Not provided"}
MRN: ${t.mrn||"Not provided"}
DOB: ${t.dob||"Not provided"}
Visit Date: ${new Date().toLocaleDateString()}

**CLINICAL NOTE:**
${s.map(i=>i.trim()).join(". ")}.

**NOTE:** This is a basic transcription without AI processing. 
To enable AI-powered medical note formatting:
1. Go to https://console.aws.amazon.com/bedrock/
2. Enable Claude models
3. Try processing again

---
*Transcribed at ${new Date().toLocaleString()}*
    `.trim(),sections:{chiefComplaint:"",historyOfPresentIllness:e,assessment:"",plan:""},metadata:{processedAt:o,model:"basic-formatter",confidence:.5}}}}const os=new Zo;export{os as a};
//# sourceMappingURL=azureAI.service--vi5Elg4.js.map
