{"version":3,"mappings":";8IAQA,SAAwBA,EAAmB,CAAE,SAAAC,GAAqC,CAChF,KAAM,CAACC,EAAiBC,CAAkB,EAAIC,WAAyB,IAAI,EACrEC,EAAWC,EAAA,EAEjBC,YAAU,IAAM,CACdC,EAAA,CACF,EAAG,EAAE,EAEL,MAAMA,EAAsB,SAAY,CACtC,GAAI,CAEF,MAAMC,EAAQC,EAAgB,WACxBC,EAAOD,EAAgB,UAE7B,GAAI,CAACD,GAAS,CAACE,EAAM,CACnBR,EAAmB,EAAK,EACxB,MACF,CAKAA,EAAmB,EAAI,CACzB,OAASS,EAAO,CACd,QAAQ,MAAM,+BAAgCA,CAAK,EACnDT,EAAmB,EAAK,CAC1B,CACF,EAGA,GAAID,IAAoB,KACtB,aACG,OAAI,UAAU,6FACb,SAAAW,OAAC,OAAI,UAAU,cACb,UAAAC,MAAC,OAAI,UAAU,kGAAkG,EACjHA,MAAC,KAAE,UAAU,oCAAoC,8BAAkB,GACrE,EACF,EAKJ,GAAI,CAACZ,EAAiB,CAEpB,MAAMa,EAAeV,EAAS,SAAWA,EAAS,OAClD,sBAAe,QAAQ,8BAA+BU,CAAY,EAG3DD,MAACE,EAAA,CAAS,GAAG,4BAA4B,QAAO,GAAC,CAC1D,CAGA,yBAAU,SAAAf,EAAS,CACrB,CCnDA,MAAMgB,EAAkB,IACtBH,MAAC,OAAI,UAAU,6FACb,SAAAD,OAAC,OAAI,UAAU,cACb,UAAAC,MAAC,OAAI,UAAU,kGAAkG,EACjHA,MAAC,KAAE,UAAU,oCAAoC,gCAAoB,GACvE,EACF,EAIII,EAAyBC,OAAK,IAAAC,EAAA,IAAM,OAAO,sCAAoC,6BAAC,EAChFC,EAAiBF,OAAK,IAAAC,EAAA,IAAM,OAAO,8BAA4B,6BAAC,EAGhEE,EAAmBH,OAAK,IAAAC,EAAA,IAAM,OAAO,gCAA8B,mCAAC,EACpEG,EAAmBJ,OAAK,IAAAC,EAAA,IAAM,OAAO,gCAA8B,mCAAC,EACpEI,EAAsBL,OAAK,IAAAC,EAAA,IAAM,OAAO,mCAAiC,+BAAC,EAC1EK,EAAmBN,OAAK,IAAAC,EAAA,IAAM,OAAO,gCAA8B,8BAAC,EAM1E,SAAwBM,GAAkB,CACxC,aACGC,WAAA,CAAS,eAAWV,EAAA,EAAgB,EACnC,gBAACW,EAAA,CAEC,UAAAd,MAACe,GAAM,KAAK,iBAAiB,QAASf,MAACI,IAAuB,EAAI,QACjEW,EAAA,CAAM,KAAK,QAAQ,QAASf,MAACO,IAAe,EAAI,EAGjDP,MAACe,EAAA,CAAM,KAAK,aAAa,cACtB7B,EAAA,CACC,SAAAc,MAACQ,EAAA,EAAiB,EACpB,EACA,EACFR,MAACe,EAAA,CAAM,KAAK,UAAU,cACnB7B,EAAA,CACC,SAAAc,MAACW,EAAA,EAAiB,EACpB,EACA,EACFX,MAACe,EAAA,CAAM,KAAK,UAAU,cACnB7B,EAAA,CACC,SAAAc,MAACS,EAAA,EAAiB,EACpB,EACA,EACFT,MAACe,EAAA,CAAM,KAAK,SAAS,cAClB7B,EAAA,CACC,SAAAc,MAACU,EAAA,EAAoB,EACvB,EACA,EACFV,MAACe,EAAA,CAAM,KAAK,uBAAuB,cAChC7B,EAAA,CACC,SAAAc,MAACU,EAAA,EAAoB,EACvB,EACA,EAQFV,MAACe,EAAA,CAAM,MAAK,GAAC,QACXf,MAACd,EAAA,CACC,SAAAc,MAACE,EAAA,CAAS,GAAG,wBAAwB,QAAO,GAAC,EAC/C,EACA,EAGFF,MAACe,EAAA,CAAM,KAAK,IAAI,QAASf,MAACE,EAAA,CAAS,GAAG,4BAA4B,QAAO,GAAC,EAAI,GAChF,EACF,CAEJ","names":["PumpDriveAuthGuard","children","isAuthenticated","setIsAuthenticated","useState","location","useLocation","useEffect","checkAuthentication","token","pumpAuthService","user","error","jsxs","jsx","redirectPath","Navigate","PumpDriveLoader","PumpDriveCreateAccount","lazy","__vitePreload","PumpDriveLogin","PumpDriveUnified","PumpDriveResults","PumpDriveHTMLReport","PumpDriveBilling","PumpDriveBundle","Suspense","Routes","Route"],"ignoreList":[],"sources":["../../src/components/PumpDriveAuthGuard.tsx","../../src/components/bundles/PumpDriveBundle.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { pumpAuthService } from '../services/pumpAuth.service';\n\ninterface PumpDriveAuthGuardProps {\n  children: React.ReactNode;\n}\n\nexport default function PumpDriveAuthGuard({ children }: PumpDriveAuthGuardProps) {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    checkAuthentication();\n  }, []);\n\n  const checkAuthentication = async () => {\n    try {\n      // Check if user has valid token and access\n      const token = pumpAuthService.getToken();\n      const user = pumpAuthService.getUser();\n\n      if (!token || !user) {\n        setIsAuthenticated(false);\n        return;\n      }\n\n      // No access expiry check - users have unlimited access\n      // Just verify the token is valid\n\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Authentication check failed:', error);\n      setIsAuthenticated(false);\n    }\n  };\n\n  // Loading state\n  if (isAuthenticated === null) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-pink-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-purple-200 border-t-purple-600 rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-lg font-medium text-gray-700\">Checking access...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Not authenticated - redirect to create account or login\n  if (!isAuthenticated) {\n    // Store current location to redirect back after login\n    const redirectPath = location.pathname + location.search;\n    sessionStorage.setItem('pumpDriveRedirectAfterLogin', redirectPath);\n\n    // Redirect to create account (default) or login page\n    return <Navigate to=\"/pumpdrive/create-account\" replace />;\n  }\n\n  // Authenticated - render protected content\n  return <>{children}</>;\n}","/**\n * PumpDrive Bundle - Lazy loaded insulin pump selection system\n * Groups all PumpDrive-related components for code splitting\n */\n\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport { lazy, Suspense } from 'react';\nimport PumpDriveAuthGuard from '../PumpDriveAuthGuard';\n\n// Loading spinner for PumpDrive features\nconst PumpDriveLoader = () => (\n  <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-pink-100 flex items-center justify-center\">\n    <div className=\"text-center\">\n      <div className=\"w-16 h-16 border-4 border-purple-200 border-t-purple-600 rounded-full animate-spin mx-auto mb-4\"></div>\n      <p className=\"text-lg font-medium text-gray-700\">Loading PumpDrive...</p>\n    </div>\n  </div>\n);\n\n// Authentication components\nconst PumpDriveCreateAccount = lazy(() => import('../../pages/PumpDriveCreateAccount'));\nconst PumpDriveLogin = lazy(() => import('../../pages/PumpDriveLogin'));\n\n// PumpDrive components (require authentication)\nconst PumpDriveUnified = lazy(() => import('../../pages/PumpDriveUnified'));\nconst PumpDriveResults = lazy(() => import('../../pages/PumpDriveResults'));\nconst PumpDriveHTMLReport = lazy(() => import('../../pages/PumpDriveHTMLReport'));\nconst PumpDriveBilling = lazy(() => import('../../pages/PumpDriveBilling'));\n\n// Text-based assessment components (to be implemented)\n// const PumpDriveTextAssessment = lazy(() => import('../../pages/PumpDriveTextAssessment'));\n// const PumpDrivePaymentProvider = lazy(() => import('../../pages/PumpDrivePaymentProvider'));\n\nexport default function PumpDriveBundle() {\n  return (\n    <Suspense fallback={<PumpDriveLoader />}>\n      <Routes>\n        {/* Authentication Routes (Public) */}\n        <Route path=\"create-account\" element={<PumpDriveCreateAccount />} />\n        <Route path=\"login\" element={<PumpDriveLogin />} />\n\n        {/* Protected Assessment Routes */}\n        <Route path=\"assessment\" element={\n          <PumpDriveAuthGuard>\n            <PumpDriveUnified />\n          </PumpDriveAuthGuard>\n        } />\n        <Route path=\"billing\" element={\n          <PumpDriveAuthGuard>\n            <PumpDriveBilling />\n          </PumpDriveAuthGuard>\n        } />\n        <Route path=\"results\" element={\n          <PumpDriveAuthGuard>\n            <PumpDriveResults />\n          </PumpDriveAuthGuard>\n        } />\n        <Route path=\"report\" element={\n          <PumpDriveAuthGuard>\n            <PumpDriveHTMLReport />\n          </PumpDriveAuthGuard>\n        } />\n        <Route path=\"report/:assessmentId\" element={\n          <PumpDriveAuthGuard>\n            <PumpDriveHTMLReport />\n          </PumpDriveAuthGuard>\n        } />\n\n        {/* Text-Based Assessment Flow (Future) */}\n        {/* <Route path=\"text-assessment\" element={<PumpDriveTextAssessment />} /> */}\n        {/* <Route path=\"payment-provider\" element={<PumpDrivePaymentProvider />} /> */}\n        {/* <Route path=\"provider-sent\" element={<PumpDriveProviderSent />} /> */}\n\n        {/* Main Assessment Route (Protected) */}\n        <Route index element={\n          <PumpDriveAuthGuard>\n            <Navigate to=\"/pumpdrive/assessment\" replace />\n          </PumpDriveAuthGuard>\n        } />\n\n        {/* Fallback - redirect to account creation */}\n        <Route path=\"*\" element={<Navigate to=\"/pumpdrive/create-account\" replace />} />\n      </Routes>\n    </Suspense>\n  );\n}\n"],"file":"assets/PumpDriveBundle-6qrAXTs0.js"}