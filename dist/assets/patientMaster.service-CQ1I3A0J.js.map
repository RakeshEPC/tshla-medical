{"version":3,"file":"patientMaster.service-CQ1I3A0J.js","sources":["../../src/lib/db/browserClient.ts","../../src/services/patientMaster.service.ts"],"sourcesContent":["/**\n * Browser-Compatible Database Client\n * Uses IndexedDB for persistent storage in the browser\n */\n\nexport interface DbClient {\n  query: (sql: string, params?: any[]) => Promise<any>;\n  queryOne: (sql: string, params?: any[]) => Promise<any>;\n  execute: (sql: string, params?: any[]) => Promise<any>;\n  transaction: (callback: (client: DbClient) => Promise<void>) => Promise<void>;\n}\n\nclass BrowserDatabase implements DbClient {\n  private dbName = 'tshla_medical_db';\n  private version = 2; // Increment version to trigger upgrade\n  private db: IDBDatabase | null = null;\n\n  async init() {\n    return new Promise<void>((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // Create appointments store\n        if (!db.objectStoreNames.contains('appointments')) {\n          const appointmentsStore = db.createObjectStore('appointments', { keyPath: 'id' });\n          appointmentsStore.createIndex('doctor_id', 'doctor_id', { unique: false });\n          appointmentsStore.createIndex('appointment_date', 'appointment_date', { unique: false });\n          appointmentsStore.createIndex('appointment_slot', 'appointment_slot', { unique: false });\n          appointmentsStore.createIndex('doctor_slot', ['doctor_id', 'appointment_slot'], {\n            unique: true,\n          });\n        }\n\n        // Create doctors store\n        if (!db.objectStoreNames.contains('doctors')) {\n          const doctorsStore = db.createObjectStore('doctors', { keyPath: 'id' });\n          doctorsStore.createIndex('email', 'email', { unique: true });\n        }\n\n        // Create patients_master store with triple IDs\n        if (!db.objectStoreNames.contains('patients_master')) {\n          const patientsStore = db.createObjectStore('patients_master', { keyPath: 'patient_id' });\n          patientsStore.createIndex('emr_number', 'emr_number', { unique: false });\n          patientsStore.createIndex('ava_number', 'ava_number', { unique: true });\n          patientsStore.createIndex('tsh_number', 'tsh_number', { unique: true });\n          patientsStore.createIndex('name_dob', ['name', 'dob'], { unique: false });\n          patientsStore.createIndex('email', 'email', { unique: false });\n          patientsStore.createIndex('created_by_ma_id', 'created_by_ma_id', { unique: false });\n        }\n\n        // Create orders store for MA workflow\n        if (!db.objectStoreNames.contains('orders')) {\n          const ordersStore = db.createObjectStore('orders', { keyPath: 'order_id' });\n          ordersStore.createIndex('patient_id', 'patient_id', { unique: false });\n          ordersStore.createIndex('doctor_id', 'doctor_id', { unique: false });\n          ordersStore.createIndex('ma_id', 'ma_id', { unique: false });\n          ordersStore.createIndex('status', 'status', { unique: false });\n          ordersStore.createIndex('order_type', 'order_type', { unique: false });\n          ordersStore.createIndex('created_at', 'created_at', { unique: false });\n          ordersStore.createIndex('doctor_status', ['doctor_id', 'status'], { unique: false });\n        }\n\n        // Create ma_actions_log for audit trail\n        if (!db.objectStoreNames.contains('ma_actions_log')) {\n          const actionsStore = db.createObjectStore('ma_actions_log', { keyPath: 'log_id' });\n          actionsStore.createIndex('ma_id', 'ma_id', { unique: false });\n          actionsStore.createIndex('patient_id', 'patient_id', { unique: false });\n          actionsStore.createIndex('action_type', 'action_type', { unique: false });\n          actionsStore.createIndex('timestamp', 'timestamp', { unique: false });\n        }\n\n        // Create patient_summaries for 2-3 sentence summaries\n        if (!db.objectStoreNames.contains('patient_summaries')) {\n          const summariesStore = db.createObjectStore('patient_summaries', {\n            keyPath: 'summary_id',\n          });\n          summariesStore.createIndex('patient_id', 'patient_id', { unique: false });\n          summariesStore.createIndex('created_at', 'created_at', { unique: false });\n        }\n      };\n    });\n  }\n\n  async query(storeName: string, params?: any[]): Promise<any[]> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], 'readonly');\n      const store = transaction.objectStore(storeName);\n      const request = store.getAll();\n\n      request.onsuccess = () => {\n        let results = request.result;\n\n        // Apply basic filtering if params provided\n        if (params && params.length > 0) {\n          const [doctorId, date] = params;\n          if (storeName === 'appointments' && doctorId) {\n            results = results.filter((a: any) => {\n              const matchDoctor = !doctorId || a.doctor_id === doctorId;\n              const matchDate = !date || a.appointment_date === date;\n              const notDeleted = !a.is_deleted;\n              return matchDoctor && matchDate && notDeleted;\n            });\n          }\n        }\n\n        resolve(results);\n      };\n\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async queryOne(storeName: string, id: string): Promise<any> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], 'readonly');\n      const store = transaction.objectStore(storeName);\n      const request = store.get(id);\n\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async execute(operation: string, data?: any): Promise<any> {\n    if (!this.db) await this.init();\n\n    const [action, storeName] = operation.split(':');\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], 'readwrite');\n      const store = transaction.objectStore(storeName);\n      let request: IDBRequest;\n\n      switch (action) {\n        case 'add':\n          request = store.add(data);\n          break;\n        case 'put':\n          request = store.put(data);\n          break;\n        case 'delete':\n          request = store.delete(data);\n          break;\n        default:\n          reject(new Error(`Unknown operation: ${action}`));\n          return;\n      }\n\n      request.onsuccess = () => resolve({ success: true, id: request.result });\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async transaction(callback: (client: DbClient) => Promise<void>): Promise<void> {\n    // IndexedDB handles transactions automatically\n    await callback(this);\n  }\n}\n\n// Export singleton instance\nlet dbInstance: BrowserDatabase | null = null;\n\nexport function getDb(): DbClient {\n  if (!dbInstance) {\n    dbInstance = new BrowserDatabase();\n  }\n  return dbInstance;\n}\n\n// Helper to generate UUID (browser-compatible)\nexport function generateId(): string {\n  return crypto.randomUUID();\n}\n\n// Helper for password hashing (using Web Crypto API)\nexport async function hashPassword(password: string): Promise<string> {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(password);\n  const hash = await crypto.subtle.digest('SHA-256', data);\n  return Array.from(new Uint8Array(hash))\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('');\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  const testHash = await hashPassword(password);\n  return testHash === hash;\n}\n","/**\n * Patient Master Service\n * Manages patient records with triple ID system:\n * - EMR#: External EMR number (manually entered)\n * - TSH#: TSHMR-XXXXX (sequential, starting at 00001)\n * - AVA#: XXX-XXX (random unique identifier)\n */\n\nimport { getDb, generateId } from '../lib/db/browserClient';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface PatientMaster {\n  patient_id: string; // UUID\n  emr_number?: string; // From external EMR system\n  ava_number: string; // AVA XXX-XXX format\n  tsh_number: string; // TSHMR-XXXXX format\n  name: string;\n  dob: string; // Date of birth\n  email?: string;\n  phone?: string;\n  address?: string;\n  insurance_info?: string;\n  emergency_contact?: string;\n  medical_history?: string;\n  allergies?: string;\n  medications?: string;\n  created_by_ma_id: string; // MA who created the record\n  created_at: Date;\n  updated_at: Date;\n  is_deleted?: boolean; // Soft delete flag\n  deleted_at?: Date;\n  patient_summary?: string; // 2-3 sentence summary\n}\n\nexport interface PatientSearchResult {\n  patient: PatientMaster;\n  matchType: 'emr' | 'ava' | 'tsh' | 'name' | 'email';\n}\n\nclass PatientMasterService {\n  private db = getDb();\n  private lastTshNumber: number = 0;\n\n  constructor() {\n    this.initializeLastTshNumber();\n  }\n\n  /**\n   * Initialize the last TSH number from existing records\n   */\n  private async initializeLastTshNumber() {\n    try {\n      const patients = await this.db.query('patients_master');\n      if (patients && patients.length > 0) {\n        // Extract numbers from TSH format (TSHMR-XXXXX)\n        const tshNumbers = patients\n          .map((p: any) => p.tsh_number)\n          .filter((tsh: string) => tsh && tsh.startsWith('TSHMR-'))\n          .map((tsh: string) => parseInt(tsh.replace('TSHMR-', ''), 10))\n          .filter((num: number) => !isNaN(num));\n\n        if (tshNumbers.length > 0) {\n          this.lastTshNumber = Math.max(...tshNumbers);\n        }\n      }\n    } catch (error) {\n      logError('patientMaster', 'Error message', {});\n    }\n  }\n\n  /**\n   * Generate a unique AVA number (XXX-XXX format)\n   */\n  private async generateAvaNumber(): Promise<string> {\n    const generateRandom = () => {\n      const part1 = Math.floor(Math.random() * 900) + 100; // 100-999\n      const part2 = Math.floor(Math.random() * 900) + 100; // 100-999\n      return `${part1}-${part2}`;\n    };\n\n    let avaNumber = generateRandom();\n    let attempts = 0;\n\n    // Keep generating until we find a unique one\n    while ((await this.checkAvaExists(avaNumber)) && attempts < 100) {\n      avaNumber = generateRandom();\n      attempts++;\n    }\n\n    if (attempts >= 100) {\n      throw new Error('Unable to generate unique AVA number');\n    }\n\n    return avaNumber;\n  }\n\n  /**\n   * Generate the next TSH number (TSHMR-XXXXX format)\n   */\n  private generateTshNumber(): string {\n    this.lastTshNumber++;\n    const paddedNumber = this.lastTshNumber.toString().padStart(5, '0');\n    return `TSHMR-${paddedNumber}`;\n  }\n\n  /**\n   * Check if AVA number already exists\n   */\n  private async checkAvaExists(avaNumber: string): Promise<boolean> {\n    try {\n      const patients = await this.db.query('patients_master');\n      return patients.some((p: any) => p.ava_number === avaNumber && !p.is_deleted);\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Check for duplicate patient by name and DOB\n   */\n  async checkDuplicate(name: string, dob: string): Promise<PatientMaster | null> {\n    try {\n      const patients = await this.db.query('patients_master');\n      const duplicate = patients.find(\n        (p: any) => p.name.toLowerCase() === name.toLowerCase() && p.dob === dob && !p.is_deleted\n      );\n      return duplicate || null;\n    } catch (error) {\n      logError('patientMaster', 'Error message', {});\n      return null;\n    }\n  }\n\n  /**\n   * Create a new patient with triple ID system\n   */\n  async createPatient(\n    patientData: Omit<\n      PatientMaster,\n      'patient_id' | 'ava_number' | 'tsh_number' | 'created_at' | 'updated_at'\n    >,\n    maId: string\n  ): Promise<PatientMaster> {\n    // Check for duplicates\n    const duplicate = await this.checkDuplicate(patientData.name, patientData.dob);\n    if (duplicate) {\n      throw new Error(`Patient already exists: ${duplicate.name} (DOB: ${duplicate.dob})`);\n    }\n\n    // Generate unique IDs\n    const avaNumber = await this.generateAvaNumber();\n    const tshNumber = this.generateTshNumber();\n\n    const newPatient: PatientMaster = {\n      ...patientData,\n      patient_id: generateId(),\n      ava_number: avaNumber,\n      tsh_number: tshNumber,\n      created_by_ma_id: maId,\n      created_at: new Date(),\n      updated_at: new Date(),\n      is_deleted: false,\n    };\n\n    await this.db.execute('add:patients_master', newPatient);\n\n    // Log the action\n    await this.logAction(maId, newPatient.patient_id, 'patient_created', {\n      ava_number: avaNumber,\n      tsh_number: tshNumber,\n    });\n\n    return newPatient;\n  }\n\n  /**\n   * Search for patients by any of the three IDs or other fields\n   */\n  async searchPatients(query: string): Promise<PatientSearchResult[]> {\n    const results: PatientSearchResult[] = [];\n    const patients = await this.db.query('patients_master');\n    const queryLower = query.toLowerCase();\n\n    for (const patient of patients) {\n      if (patient.is_deleted) continue;\n\n      // Check EMR number\n      if (patient.emr_number && patient.emr_number.toLowerCase().includes(queryLower)) {\n        results.push({ patient, matchType: 'emr' });\n        continue;\n      }\n\n      // Check AVA number\n      if (patient.ava_number && patient.ava_number.toLowerCase().includes(queryLower)) {\n        results.push({ patient, matchType: 'ava' });\n        continue;\n      }\n\n      // Check TSH number\n      if (patient.tsh_number && patient.tsh_number.toLowerCase().includes(queryLower)) {\n        results.push({ patient, matchType: 'tsh' });\n        continue;\n      }\n\n      // Check name\n      if (patient.name && patient.name.toLowerCase().includes(queryLower)) {\n        results.push({ patient, matchType: 'name' });\n        continue;\n      }\n\n      // Check email\n      if (patient.email && patient.email.toLowerCase().includes(queryLower)) {\n        results.push({ patient, matchType: 'email' });\n        continue;\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get patient by any of the three IDs\n   */\n  async getPatientById(\n    id: string,\n    idType: 'emr' | 'ava' | 'tsh' | 'uuid'\n  ): Promise<PatientMaster | null> {\n    const patients = await this.db.query('patients_master');\n\n    let patient: any;\n    switch (idType) {\n      case 'emr':\n        patient = patients.find((p: any) => p.emr_number === id && !p.is_deleted);\n        break;\n      case 'ava':\n        patient = patients.find((p: any) => p.ava_number === id && !p.is_deleted);\n        break;\n      case 'tsh':\n        patient = patients.find((p: any) => p.tsh_number === id && !p.is_deleted);\n        break;\n      case 'uuid':\n        patient = patients.find((p: any) => p.patient_id === id && !p.is_deleted);\n        break;\n    }\n\n    return patient || null;\n  }\n\n  /**\n   * Update patient information\n   */\n  async updatePatient(\n    patientId: string,\n    updates: Partial<PatientMaster>,\n    maId: string\n  ): Promise<PatientMaster> {\n    const patient = await this.getPatientById(patientId, 'uuid');\n    if (!patient) {\n      throw new Error('Patient not found');\n    }\n\n    const updatedPatient = {\n      ...patient,\n      ...updates,\n      patient_id: patient.patient_id, // Preserve ID\n      ava_number: patient.ava_number, // Preserve AVA\n      tsh_number: patient.tsh_number, // Preserve TSH\n      created_at: patient.created_at, // Preserve creation date\n      created_by_ma_id: patient.created_by_ma_id, // Preserve creator\n      updated_at: new Date(),\n    };\n\n    await this.db.execute('put:patients_master', updatedPatient);\n\n    // Log the action\n    await this.logAction(maId, patientId, 'patient_updated', updates);\n\n    return updatedPatient;\n  }\n\n  /**\n   * Soft delete a patient (HIPAA compliance - 30 day retention)\n   */\n  async softDeletePatient(patientId: string, maId: string): Promise<void> {\n    const patient = await this.getPatientById(patientId, 'uuid');\n    if (!patient) {\n      throw new Error('Patient not found');\n    }\n\n    const deletedPatient = {\n      ...patient,\n      is_deleted: true,\n      deleted_at: new Date(),\n      updated_at: new Date(),\n    };\n\n    await this.db.execute('put:patients_master', deletedPatient);\n\n    // Log the action\n    await this.logAction(maId, patientId, 'patient_deleted', {\n      deleted_at: new Date(),\n    });\n  }\n\n  /**\n   * Get all patients created by a specific MA\n   */\n  async getPatientsByMA(maId: string): Promise<PatientMaster[]> {\n    const patients = await this.db.query('patients_master');\n    return patients.filter((p: any) => p.created_by_ma_id === maId && !p.is_deleted);\n  }\n\n  /**\n   * Get all active patients\n   */\n  async getAllActivePatients(): Promise<PatientMaster[]> {\n    const patients = await this.db.query('patients_master');\n    return patients.filter((p: any) => !p.is_deleted);\n  }\n\n  /**\n   * Update patient summary (2-3 sentence medical summary)\n   */\n  async updatePatientSummary(patientId: string, summary: string, maId: string): Promise<void> {\n    const patient = await this.getPatientById(patientId, 'uuid');\n    if (!patient) {\n      throw new Error('Patient not found');\n    }\n\n    // Store in patient record\n    await this.updatePatient(patientId, { patient_summary: summary }, maId);\n\n    // Also store in summaries table for history\n    const summaryRecord = {\n      summary_id: generateId(),\n      patient_id: patientId,\n      summary: summary,\n      created_by: maId,\n      created_at: new Date(),\n    };\n\n    await this.db.execute('add:patient_summaries', summaryRecord);\n  }\n\n  /**\n   * Log MA actions for audit trail (HIPAA compliance)\n   */\n  private async logAction(\n    maId: string,\n    patientId: string,\n    actionType: string,\n    details?: any\n  ): Promise<void> {\n    const logEntry = {\n      log_id: generateId(),\n      ma_id: maId,\n      patient_id: patientId,\n      action_type: actionType,\n      details: JSON.stringify(details || {}),\n      timestamp: new Date(),\n      ip_address: 'browser', // In real app, get actual IP\n      user_agent: navigator.userAgent,\n    };\n\n    await this.db.execute('add:ma_actions_log', logEntry);\n  }\n\n  /**\n   * Get audit trail for a patient\n   */\n  async getPatientAuditTrail(patientId: string): Promise<any[]> {\n    const logs = await this.db.query('ma_actions_log');\n    return logs\n      .filter((log: any) => log.patient_id === patientId)\n      .sort((a: any, b: any) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n  }\n\n  /**\n   * Clean up soft-deleted patients older than 30 days (HIPAA compliance)\n   */\n  async cleanupDeletedPatients(): Promise<number> {\n    const patients = await this.db.query('patients_master');\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    let deletedCount = 0;\n\n    for (const patient of patients) {\n      if (patient.is_deleted && patient.deleted_at) {\n        const deletedDate = new Date(patient.deleted_at);\n        if (deletedDate < thirtyDaysAgo) {\n          // Permanently delete\n          await this.db.execute('delete:patients_master', patient.patient_id);\n          deletedCount++;\n        }\n      }\n    }\n\n    return deletedCount;\n  }\n}\n\n// Export singleton instance\nexport const patientMasterService = new PatientMasterService();\n"],"names":["BrowserDatabase","resolve","reject","request","event","db","appointmentsStore","patientsStore","ordersStore","actionsStore","summariesStore","storeName","params","results","doctorId","date","a","matchDoctor","matchDate","notDeleted","id","operation","data","action","store","callback","dbInstance","getDb","generateId","PatientMasterService","patients","tshNumbers","p","tsh","num","logError","generateRandom","part1","part2","avaNumber","attempts","name","dob","patientData","maId","duplicate","tshNumber","newPatient","query","queryLower","patient","idType","patientId","updates","updatedPatient","deletedPatient","summary","summaryRecord","actionType","details","logEntry","log","b","thirtyDaysAgo","deletedCount","patientMasterService"],"mappings":"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"}