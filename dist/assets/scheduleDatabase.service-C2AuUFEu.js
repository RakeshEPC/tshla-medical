import{b as o}from"./index-JAW6HvUl.js";class c{API_BASE_URL="http://localhost";async getScheduleForDate(s,t){try{const e=`${this.API_BASE_URL}:3003/api/simple/schedule/${s}/${t}`,r=await fetch(e);if(!r.ok)throw new Error(`Failed to fetch schedule: ${r.statusText}`);const a=await r.json();if(!a.success)throw new Error(a.error||"Failed to load schedule");return a.appointments||[]}catch{return o("scheduleDatabase","Error message",{}),[]}}async saveAppointment(s,t,e,r){try{const a=await fetch(`${this.API_BASE_URL}:3003/api/appointments`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({provider_id:s,provider_name:t,patient_name:e.name,patient_mrn:e.mrn,patient_phone:e.phone,start_time:e.appointmentTime,scheduled_date:r,status:e.status})});if(!a.ok)throw new Error(`Failed to save appointment: ${a.statusText}`);return(await a.json()).success}catch{return o("scheduleDatabase","Error message",{}),!1}}async updateAppointment(s,t){try{const e=await fetch(`${this.API_BASE_URL}:3003/api/appointments/${s}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({patientName:t.name,patientMrn:t.mrn,patientPhone:t.phone,appointmentTime:t.appointmentTime,status:t.status})});if(!e.ok)throw new Error(`Failed to update appointment: ${e.statusText}`);return(await e.json()).success}catch{return o("scheduleDatabase","Error message",{}),!1}}async deleteAppointment(s){try{const t=await fetch(`${this.API_BASE_URL}:3003/api/appointments/${s}`,{method:"DELETE"});if(!t.ok)throw new Error(`Failed to delete appointment: ${t.statusText}`);return(await t.json()).success}catch{return o("scheduleDatabase","Error message",{}),!1}}async saveNote(s,t,e){try{const r=await fetch(`${this.API_BASE_URL}:3003/api/dictated-notes`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({provider_id:s,provider_name:t,patient_name:e.patientName,patient_mrn:e.patientMrn,raw_transcript:e.rawTranscript,processed_note:e.aiProcessedNote,recording_mode:e.recordingMode,is_quick_note:e.isQuickNote,visit_date:e.visitDate||new Date().toISOString().split("T")[0]})});if(!r.ok)throw new Error(`Failed to save note: ${r.statusText}`);const a=await r.json();if(a.success)return a.noteId;throw new Error(a.error||"Failed to save note")}catch{return o("scheduleDatabase","Error message",{}),null}}async getNotes(s,t){try{let e=`${this.API_BASE_URL}:3003/api/providers/${s}/notes`;t&&(e+=`?date=${t}`);const r=await fetch(e);if(!r.ok)throw new Error(`Failed to fetch notes: ${r.statusText}`);const a=await r.json();if(!a.success)throw new Error(a.error||"Failed to load notes");return a.notes||[]}catch{return o("scheduleDatabase","Error message",{}),[]}}async addQuickNotePatientToSchedule(s,t,e,r){try{const a=new Date,n=a.toISOString().split("T")[0],i=a.toLocaleTimeString("en-US",{hour12:!0,hour:"numeric",minute:"2-digit"});return await this.saveAppointment(s,t,{id:`quicknote-${Date.now()}`,name:e,mrn:r||`QN-${Date.now()}`,appointmentTime:i,status:"completed",isPlaceholder:!1},n)}catch{return o("scheduleDatabase","Error message",{}),!1}}}const h=new c;export{h as s};
//# sourceMappingURL=scheduleDatabase.service-C2AuUFEu.js.map
