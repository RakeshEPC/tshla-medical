{"version":3,"file":"templateStorage-1vthnjN2.js","sources":["../../src/lib/templateStorage.ts"],"sourcesContent":["// Client-side template storage service\n// Uses localStorage for persistent template storage without database\n\nimport type { Template } from '../types/template.types';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\nexport type { Template } from '../types/template.types';\n\nclass TemplateStorageService {\n  private readonly STORAGE_KEY = 'medical_templates_v2';\n  private readonly MAX_TEMPLATES = 50;\n\n  // Get all templates\n  getTemplates(): Template[] {\n    if (typeof window === 'undefined') return [];\n\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (!stored) return this.getDefaultTemplates();\n\n      const templates = JSON.parse(stored);\n      return Array.isArray(templates) ? templates : this.getDefaultTemplates();\n    } catch (error) {\n      logError('App', 'Error message', {});\n      return this.getDefaultTemplates();\n    }\n  }\n\n  // Get single template by ID\n  getTemplate(id: string): Template | null {\n    const templates = this.getTemplates();\n    return templates.find(t => t.id === id) || null;\n  }\n\n  // Create new template\n  createTemplate(template: Omit<Template, 'id' | 'created_at' | 'usage_count'>): Template {\n    const templates = this.getTemplates();\n\n    const newTemplate: Template = {\n      ...template,\n      id: `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      created_at: new Date().toISOString(),\n      usage_count: 0,\n    };\n\n    // Add new template (limit total number)\n    const updatedTemplates = [...templates, newTemplate].slice(-this.MAX_TEMPLATES);\n    this.saveTemplates(updatedTemplates);\n\n    return newTemplate;\n  }\n\n  // Update existing template\n  updateTemplate(id: string, updates: Partial<Template>): boolean {\n    const templates = this.getTemplates();\n    const index = templates.findIndex(t => t.id === id);\n\n    if (index === -1) return false;\n\n    templates[index] = {\n      ...templates[index],\n      ...updates,\n      id: templates[index].id, // Prevent ID change\n      updated_at: new Date().toISOString(),\n    };\n\n    this.saveTemplates(templates);\n    return true;\n  }\n\n  // Delete template\n  deleteTemplate(id: string): boolean {\n    const templates = this.getTemplates();\n    const filtered = templates.filter(t => t.id !== id);\n\n    if (filtered.length === templates.length) return false;\n\n    this.saveTemplates(filtered);\n    return true;\n  }\n\n  // Increment usage count\n  incrementUsage(id: string): void {\n    const templates = this.getTemplates();\n    const template = templates.find(t => t.id === id);\n\n    if (template) {\n      template.usage_count = (template.usage_count || 0) + 1;\n      template.last_used = new Date().toISOString();\n      this.saveTemplates(templates);\n    }\n  }\n\n  // Alias for backward compatibility\n  trackUsage(id: string): void {\n    this.incrementUsage(id);\n  }\n\n  // Save templates to localStorage\n  private saveTemplates(templates: Template[]): void {\n    if (typeof window === 'undefined') return;\n\n    try {\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(templates));\n    } catch (error) {\n      logError('App', 'Error message', {});\n      // If localStorage is full, remove oldest templates\n      if (error.name === 'QuotaExceededError') {\n        const reduced = templates.slice(-Math.floor(this.MAX_TEMPLATES / 2));\n        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(reduced));\n      }\n    }\n  }\n\n  // Get default templates - YOUR 4 TEMPLATES ONLY\n  private getDefaultTemplates(): Template[] {\n    return [\n      {\n        id: 'diabetes_followup',\n        name: 'Diabetes Follow Up',\n        specialty: 'Endocrinology',\n        template_type: 'soap',\n        is_system_template: true,\n        sections: {\n          subjective: {\n            prompts: [\n              'Current blood sugar levels',\n              'Medication compliance',\n              'Diet and exercise habits',\n              'Hypoglycemic episodes',\n              'Symptoms: polyuria, polydipsia, polyphagia',\n            ],\n            aiInstructions:\n              'Focus on diabetes-specific symptoms, blood sugar patterns, medication adherence, and lifestyle factors. Document any episodes of hypoglycemia or hyperglycemia with timing and triggers.',\n          },\n          objective: {\n            prompts: [\n              'Vital signs',\n              'Weight/BMI',\n              'Foot examination',\n              'A1C level',\n              'Glucose readings review',\n            ],\n            aiInstructions:\n              'Include specific A1C values, glucose ranges, BMI calculations, and detailed foot exam findings including sensation, pulses, and skin integrity.',\n          },\n          assessment: {\n            prompts: [\n              'Diabetes control status',\n              'Complications assessment',\n              'Medication effectiveness',\n            ],\n            aiInstructions:\n              'Assess diabetes control based on A1C and glucose patterns. Evaluate for microvascular and macrovascular complications. Comment on medication efficacy and side effects.',\n          },\n          plan: {\n            prompts: [\n              'Medication adjustments',\n              'Lab orders: A1C, lipids, kidney function',\n              'Referrals: ophthalmology, podiatry',\n              'Lifestyle counseling',\n              'Follow-up interval',\n            ],\n            aiInstructions:\n              'Provide specific medication dosing changes, target A1C goals, preventive care recommendations, and clear follow-up timeline. Include patient education points.',\n          },\n        },\n        usage_count: 0,\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: 'hypertension_management',\n        name: 'Hypertension Management',\n        specialty: 'Cardiology',\n        template_type: 'soap',\n        is_system_template: true,\n        sections: {\n          subjective: {\n            prompts: [\n              'Home blood pressure readings',\n              'Medication compliance',\n              'Side effects',\n              'Symptoms: headaches, dizziness, chest pain',\n              'Salt intake and lifestyle',\n            ],\n            aiInstructions:\n              'Document blood pressure patterns, medication adherence, and any cardiovascular symptoms. Note lifestyle factors affecting BP control.',\n          },\n          objective: {\n            prompts: [\n              'Blood pressure readings',\n              'Heart rate and rhythm',\n              'Cardiac examination',\n              'Peripheral edema',\n              'Weight changes',\n            ],\n            aiInstructions:\n              'Record multiple BP readings if available, cardiac exam findings, and signs of end-organ damage.',\n          },\n          assessment: {\n            prompts: [\n              'Blood pressure control status',\n              'Target organ damage',\n              'Cardiovascular risk assessment',\n            ],\n            aiInstructions:\n              'Evaluate BP control, assess for target organ damage, and calculate cardiovascular risk.',\n          },\n          plan: {\n            prompts: [\n              'Medication titration',\n              'Lifestyle modifications',\n              'Lab work: BMP, lipids',\n              'ECG if indicated',\n              'Follow-up schedule',\n            ],\n            aiInstructions:\n              'Provide specific medication adjustments, lifestyle recommendations, and follow-up plan.',\n          },\n        },\n        usage_count: 0,\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: 'general_soap',\n        name: 'General SOAP Note',\n        specialty: 'General Medicine',\n        template_type: 'soap',\n        is_system_template: true,\n        sections: {\n          subjective: {\n            prompts: [\n              'Chief complaint',\n              'History of present illness',\n              'Review of systems',\n              'Past medical history',\n              'Current medications',\n              'Allergies',\n            ],\n            aiInstructions:\n              \"Document the patient's chief complaint and relevant history. Include pertinent positives and negatives from review of systems.\",\n          },\n          objective: {\n            prompts: [\n              'Vital signs',\n              'Physical examination',\n              'Laboratory results',\n              'Imaging results if available',\n            ],\n            aiInstructions:\n              'Record objective findings including vital signs and physical exam findings.',\n          },\n          assessment: {\n            prompts: ['Primary diagnosis', 'Differential diagnoses', 'Clinical impression'],\n            aiInstructions: 'Provide assessment with primary diagnosis and relevant differentials.',\n          },\n          plan: {\n            prompts: [\n              'Medications prescribed',\n              'Tests ordered',\n              'Referrals',\n              'Follow-up instructions',\n              'Patient education',\n            ],\n            aiInstructions:\n              'Detail the treatment plan including medications, tests, and follow-up.',\n          },\n        },\n        usage_count: 0,\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: 'rakesh_template',\n        name: 'Rakesh',\n        specialty: 'Endocrinology',\n        template_type: 'soap',\n        is_system_template: true,\n        sections: {\n          subjective: {\n            prompts: [\n              'Chief complaint',\n              'Current symptoms',\n              'Blood sugar patterns',\n              'Medication adherence',\n              'Diet and exercise',\n            ],\n            aiInstructions:\n              \"Document patient's current concerns and diabetes management status using Dr. Rakesh's preferred format.\",\n          },\n          objective: {\n            prompts: [\n              'Vital signs including BP and weight',\n              'Physical exam with focus on diabetic complications',\n              'Latest A1C and glucose values',\n              'Other relevant labs',\n            ],\n            aiInstructions:\n              'Record objective findings with emphasis on endocrine-related parameters.',\n          },\n          assessment: {\n            prompts: [\n              'Diabetes control assessment',\n              'Complications status',\n              'Other endocrine issues',\n            ],\n            aiInstructions: 'Assess overall endocrine status and diabetes control.',\n          },\n          plan: {\n            prompts: [\n              'Medication adjustments',\n              'Lab orders',\n              'Lifestyle recommendations',\n              'Follow-up plan',\n            ],\n            aiInstructions: 'Provide comprehensive endocrine management plan.',\n          },\n        },\n        usage_count: 0,\n        created_at: new Date().toISOString(),\n      },\n    ];\n  }\n\n  // Clear all templates (except system templates)\n  clearUserTemplates(): void {\n    const templates = this.getTemplates();\n    const systemTemplates = templates.filter(t => t.is_system_template);\n    this.saveTemplates(systemTemplates);\n  }\n\n  // Export templates as JSON\n  exportTemplates(): string {\n    const templates = this.getTemplates();\n    return JSON.stringify(templates, null, 2);\n  }\n\n  // Import templates from JSON\n  importTemplates(jsonString: string): boolean {\n    try {\n      const imported = JSON.parse(jsonString);\n      if (!Array.isArray(imported)) return false;\n\n      const templates = this.getTemplates();\n      const merged = [...templates, ...imported].slice(-this.MAX_TEMPLATES);\n      this.saveTemplates(merged);\n      return true;\n    } catch (error) {\n      logError('App', 'Error message', {});\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const templateStorage = new TemplateStorageService();\n"],"names":["TemplateStorageService","stored","templates","logError","id","template","newTemplate","updatedTemplates","updates","index","t","filtered","error","reduced","systemTemplates","jsonString","imported","merged","templateStorage"],"mappings":"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"}