{"version":3,"file":"SimranPumpLLM-ZLi5nc1G.js","sources":["../../src/data/pumpQuestions.ts","../../src/services/pumpRecommendationEngine.ts","../../src/pages/SimranPumpLLM.tsx"],"sourcesContent":["export type Option = { label: string; score: number };\nexport type PumpQuestion = { dimension: string; question: string; options: Option[] };\n\nexport const PUMP_QUESTIONS: PumpQuestion[] = [\n  {\n    dimension: 'Tubing Preference',\n    question: \"You're about to head out for a workout or swim. Which setup sounds best?\",\n    options: [\n      {\n        label:\n          \"I don't want to remove or disconnect anything — I want it to just stay on and work.\",\n        score: 3,\n      },\n      { label: \"I'm okay quickly detaching something or tucking it away.\", score: 1 },\n      { label: 'Either is fine depending on the day — I’m flexible.', score: 2 },\n    ],\n  },\n  {\n    dimension: 'Tubing Preference',\n    question: \"When you're getting dressed or wearing tighter clothes...\",\n    options: [\n      { label: 'I want my device completely hidden and wire-free.', score: 3 },\n      { label: 'A little tubing is fine; I don’t mind managing it.', score: 1 },\n      { label: 'I’m okay either way; comfort matters more than style.', score: 2 },\n    ],\n  },\n  {\n    dimension: 'Control Preference',\n    question: 'How do you prefer to make adjustments (bolus, temp targets, etc.)?',\n    options: [\n      { label: 'I want a phone app to do almost everything quickly.', score: 3 },\n      { label: 'I prefer using the pump device itself.', score: 1 },\n      { label: 'I want both options available.', score: 2 },\n    ],\n  },\n  {\n    dimension: 'Control Preference',\n    question: 'If your phone dies or isn’t with you…',\n    options: [\n      { label: 'I still want full control from the pump.', score: 1 },\n      { label: 'I’m fine losing app control if the pump can maintain automation.', score: 2 },\n      { label: 'I mostly care about the app; I rarely touch the pump.', score: 3 },\n    ],\n  },\n  {\n    dimension: 'Target Adjustability',\n    question: 'How specific do you want to be with glucose targets?',\n    options: [\n      { label: 'Very specific; I want to set exact targets.', score: 3 },\n      { label: 'I’m fine with a reasonable default target.', score: 1 },\n      { label: 'A mix: default most days, tweak when needed.', score: 2 },\n    ],\n  },\n  {\n    dimension: 'App Control',\n    question: 'Using your phone for daily pump tasks…',\n    options: [\n      { label: 'Essential — I want a great app and do most things there.', score: 3 },\n      { label: 'Nice to have — basic things on app are enough.', score: 2 },\n      { label: 'Not important — I prefer the pump hardware.', score: 1 },\n    ],\n  },\n  {\n    dimension: 'Carb Counting',\n    question: 'Carb entry for meals…',\n    options: [\n      { label: 'I want to enter precise carbs and fine tune.', score: 3 },\n      { label: 'I’d rather keep it simple or use presets.', score: 1 },\n      { label: 'I can do either depending on the situation.', score: 2 },\n    ],\n  },\n  {\n    dimension: 'Automation Trust',\n    question: 'How much do you trust closed-loop automation?',\n    options: [\n      { label: 'A lot — I want it handling most of the work.', score: 3 },\n      { label: 'Some — I want to oversee and step in often.', score: 2 },\n      { label: 'Little — I prefer manual control.', score: 1 },\n    ],\n  },\n  {\n    dimension: 'Exercise Mode',\n    question: 'During exercise, what’s most important?',\n    options: [\n      { label: 'Smart, automatic adjustments with minimal fiddling.', score: 3 },\n      { label: 'Simple manual options to raise targets/lessen insulin.', score: 2 },\n      { label: 'I’ll manage it manually; don’t need special modes.', score: 1 },\n    ],\n  },\n  {\n    dimension: 'Visibility',\n    question: 'On-body visibility:',\n    options: [\n      { label: 'I want low-profile and discreet.', score: 3 },\n      { label: 'Doesn’t matter to me.', score: 2 },\n      { label: 'I’m fine with a visible device/tube.', score: 1 },\n    ],\n  },\n  {\n    dimension: 'Clinic Support',\n    question: 'Training & clinic familiarity:',\n    options: [\n      { label: 'I want widely supported options my clinic knows well.', score: 3 },\n      { label: 'I don’t mind newer options if they fit me better.', score: 2 },\n      { label: 'I’m happy to self-learn with minimal clinic help.', score: 1 },\n    ],\n  },\n];\n","// Enhanced Pump Recommendation Engine with Multi-Category Analysis\n// Uses Claude 3.5 Sonnet for intelligent recommendations\n\nimport { PUMP_DATABASE } from '../data/pumpDataComplete';\nimport type { PumpDetails } from '../data/pumpDataComplete';\nimport { azureAIService } from './azureAI.service';\n\nexport interface UserPreferences {\n  // From questionnaire answers\n  tubingPreference?: number; // 1-3 scale\n  controlPreference?: number;\n  targetAdjustability?: number;\n  appControl?: number;\n  carbCounting?: number;\n  automationTrust?: number;\n  exerciseMode?: number;\n  visibility?: number;\n  clinicSupport?: number;\n\n  // Additional patient data\n  age?: number;\n  techComfort?: number; // 1-10 scale\n  activityLevel?: 'sedentary' | 'moderate' | 'active' | 'very_active';\n  travelFrequency?: 'never' | 'occasional' | 'frequent';\n  insurance?: 'excellent' | 'good' | 'limited' | 'none';\n  cgmUsage?: string;\n  priorityFactors?: string[]; // e.g., ['comfort', 'algorithm', 'cost', 'ease', 'support']\n}\n\nexport interface CategoryRecommendation {\n  category: string;\n  pump: PumpDetails;\n  score: number;\n  reasoning: string;\n  keyPoints: string[];\n}\n\nexport interface ComprehensiveRecommendation {\n  comfort: CategoryRecommendation;\n  algorithm: CategoryRecommendation;\n  cost: CategoryRecommendation;\n  easeOfSetup: CategoryRecommendation;\n  ongoingSupport: CategoryRecommendation;\n  overallTop: CategoryRecommendation;\n  summary: string;\n  conversationStarters: string[];\n}\n\nclass PumpRecommendationEngine {\n  // Calculate comfort score based on physical wearing experience\n  private calculateComfortScore(pump: PumpDetails, preferences: UserPreferences): number {\n    let score = 0;\n\n    // Tubing preference is major factor for comfort\n    if (preferences.tubingPreference) {\n      if (preferences.tubingPreference === 3 && pump.dimensions.tubing.type === 'tubeless') {\n        score += 30;\n      } else if (\n        preferences.tubingPreference === 2 &&\n        pump.dimensions.tubing.type === 'short-tube'\n      ) {\n        score += 25;\n      } else if (preferences.tubingPreference === 1 && pump.dimensions.tubing.type === 'tubed') {\n        score += 20;\n      }\n    }\n\n    // Discretion and visibility\n    if (preferences.visibility === 3 && pump.dimensions.discretion.visibility === 'low') {\n      score += 20;\n    }\n\n    // Water resistance for active users\n    if (\n      preferences.activityLevel === 'very_active' &&\n      pump.dimensions.waterResistance.submersible\n    ) {\n      score += 15;\n    }\n\n    // Battery convenience\n    if (pump.dimensions.battery.type === 'pod-integrated') {\n      score += 15; // No charging hassle\n    } else if (pump.dimensions.battery.type === 'rechargeable') {\n      score += 10;\n    }\n\n    // Size and weight\n    if (\n      pump.dimensions.discretion.size === 'compact' ||\n      pump.dimensions.discretion.size === 'small'\n    ) {\n      score += 10;\n    }\n\n    // Interface ease\n    if (pump.dimensions.interface.type === 'touchscreen') {\n      score += 10;\n    }\n\n    return Math.min(100, score);\n  }\n\n  // Calculate algorithm performance score\n  private calculateAlgorithmScore(pump: PumpDetails, preferences: UserPreferences): number {\n    let score = 0;\n\n    // Automation trust and capability\n    if (preferences.automationTrust === 3) {\n      if (pump.dimensions.algorithm.aggressiveness === 'aggressive') {\n        score += 30;\n      } else if (pump.dimensions.algorithm.aggressiveness === 'moderate') {\n        score += 20;\n      }\n    }\n\n    // Adjustment frequency (all are 5 minutes, so equal)\n    score += 15;\n\n    // Target customization\n    if (preferences.targetAdjustability === 3 && pump.dimensions.targetAdjustability.customizable) {\n      score += 20;\n    }\n\n    // Exercise modes for active users\n    if (preferences.exerciseMode === 3 && pump.dimensions.exerciseMode.available) {\n      score += 15;\n    }\n\n    // Carb counting preference\n    if (\n      preferences.carbCounting === 1 &&\n      pump.dimensions.bolusWorkflow.carbCounting === 'not-required'\n    ) {\n      score += 20; // Beta Bionics iLet advantage\n    } else if (\n      preferences.carbCounting === 3 &&\n      pump.dimensions.bolusWorkflow.carbCounting !== 'not-required'\n    ) {\n      score += 15;\n    }\n\n    return Math.min(100, score);\n  }\n\n  // Calculate cost-effectiveness score\n  private calculateCostScore(pump: PumpDetails, preferences: UserPreferences): number {\n    let score = 0;\n\n    // Insurance coverage type\n    if (pump.dimensions.cost.coverage === 'pharmacy') {\n      score += 30; // Often easier to get covered\n    } else if (pump.dimensions.cost.coverage === 'both') {\n      score += 25; // Flexible options\n    } else {\n      score += 15; // DME only\n    }\n\n    // Financial assistance programs\n    if (pump.dimensions.cost.financialAssistance) {\n      score += 25;\n    }\n\n    // Pod systems may have higher ongoing costs but easier coverage\n    if (pump.dimensions.tubing.type === 'tubeless') {\n      score += 10; // Pharmacy benefits often better\n    }\n\n    // Battery costs (AA batteries vs rechargeable)\n    if (\n      pump.dimensions.battery.type === 'rechargeable' ||\n      pump.dimensions.battery.type === 'pod-integrated'\n    ) {\n      score += 15; // No battery purchases\n    }\n\n    // Supply simplicity\n    if (pump.name === 'Omnipod 5') {\n      score += 10; // Simple pod replacements\n    }\n\n    // Travel programs\n    if (pump.dimensions.travel.loanerProgram) {\n      score += 10; // t:slim X2 advantage\n    }\n\n    return Math.min(100, score);\n  }\n\n  // Calculate ease of setup score\n  private calculateEaseOfSetupScore(pump: PumpDetails, preferences: UserPreferences): number {\n    let score = 0;\n\n    // Simplicity of interface\n    if (pump.dimensions.interface.type === 'touchscreen') {\n      score += 20;\n    } else if (pump.dimensions.interface.type === 'phone-only') {\n      if (preferences.techComfort && preferences.techComfort >= 7) {\n        score += 25; // Tech-savvy users prefer phone control\n      } else {\n        score += 10;\n      }\n    }\n\n    // CGM compatibility with current CGM\n    if (\n      preferences.cgmUsage &&\n      pump.dimensions.cgmCompatibility.compatible.includes(preferences.cgmUsage)\n    ) {\n      score += 25;\n    }\n\n    // No carb counting requirement (Beta Bionics iLet)\n    if (pump.dimensions.bolusWorkflow.carbCounting === 'not-required') {\n      score += 20;\n    }\n\n    // Clinic familiarity\n    if (\n      pump.dimensions.clinicSupport.established === 'large' ||\n      pump.dimensions.clinicSupport.established === 'broad'\n    ) {\n      score += 20;\n    }\n\n    // Automatic updates\n    if (pump.dimensions.updates.automatic) {\n      score += 15;\n    }\n\n    return Math.min(100, score);\n  }\n\n  // Calculate ongoing support needs score (lower is better - less burden)\n  private calculateSupportScore(pump: PumpDetails, preferences: UserPreferences): number {\n    let score = 0;\n\n    // Established support network\n    if (\n      pump.dimensions.clinicSupport.established === 'large' ||\n      pump.dimensions.clinicSupport.established === 'broad'\n    ) {\n      score += 30;\n    } else if (pump.dimensions.clinicSupport.established === 'growing') {\n      score += 15;\n    }\n\n    // Remote monitoring for caregivers\n    if (pump.dimensions.pediatric.remoteMonitoring) {\n      score += 20;\n    }\n\n    // Simplified alerts (less alarm fatigue)\n    if (pump.name === 'Beta Bionics iLet') {\n      score += 15; // Only 4 essential alerts\n    }\n\n    // Data sharing platform quality\n    if (pump.dimensions.dataSharing.platform) {\n      score += 15;\n    }\n\n    // Reliability and occlusion handling\n    if (pump.dimensions.reliability.occlusionDetection) {\n      score += 10;\n    }\n\n    // Ecosystem maturity\n    if (pump.dimensions.ecosystem.integrations.length > 1) {\n      score += 10;\n    }\n\n    return Math.min(100, score);\n  }\n\n  // Get pump recommendation for a specific category\n  private getCategoryRecommendation(\n    category: 'comfort' | 'algorithm' | 'cost' | 'easeOfSetup' | 'ongoingSupport',\n    preferences: UserPreferences\n  ): CategoryRecommendation {\n    const scores = PUMP_DATABASE.map(pump => {\n      let score: number;\n      switch (category) {\n        case 'comfort':\n          score = this.calculateComfortScore(pump, preferences);\n          break;\n        case 'algorithm':\n          score = this.calculateAlgorithmScore(pump, preferences);\n          break;\n        case 'cost':\n          score = this.calculateCostScore(pump, preferences);\n          break;\n        case 'easeOfSetup':\n          score = this.calculateEaseOfSetupScore(pump, preferences);\n          break;\n        case 'ongoingSupport':\n          score = this.calculateSupportScore(pump, preferences);\n          break;\n      }\n      return { pump, score };\n    });\n\n    // Sort by score and get the top pump\n    scores.sort((a, b) => b.score - a.score);\n    const topPump = scores[0];\n\n    // Generate reasoning based on category\n    const reasoning = this.generateCategoryReasoning(category, topPump.pump, preferences);\n    const keyPoints = this.generateKeyPoints(category, topPump.pump);\n\n    return {\n      category: this.getCategoryTitle(category),\n      pump: topPump.pump,\n      score: topPump.score,\n      reasoning,\n      keyPoints,\n    };\n  }\n\n  private getCategoryTitle(category: string): string {\n    const titles: Record<string, string> = {\n      comfort: 'Daily Comfort & Wearability',\n      algorithm: 'Algorithm Performance & Control',\n      cost: 'Cost-Effectiveness & Coverage',\n      easeOfSetup: 'Ease of Getting Started',\n      ongoingSupport: 'Ongoing Support & Management',\n    };\n    return titles[category] || category;\n  }\n\n  private generateCategoryReasoning(\n    category: string,\n    pump: PumpDetails,\n    preferences: UserPreferences\n  ): string {\n    switch (category) {\n      case 'comfort':\n        return `The ${pump.name} offers the best comfort for your lifestyle. ${\n          pump.dimensions.tubing.type === 'tubeless'\n            ? 'Its tubeless design means no tubing to manage during daily activities.'\n            : pump.dimensions.tubing.type === 'short-tube'\n              ? 'Its short-tube design minimizes tubing management while maintaining flexibility.'\n              : 'Its traditional tubing provides reliable insulin delivery with familiar wear options.'\n        } ${pump.dimensions.discretion.details}`;\n\n      case 'algorithm':\n        return `The ${pump.name} provides ${pump.dimensions.algorithm.aggressiveness} algorithm performance with ${pump.dimensions.algorithm.type}. ${pump.dimensions.algorithm.details} This pump adjusts insulin ${pump.dimensions.algorithm.adjustmentFrequency.toLowerCase()}, ${\n          pump.dimensions.bolusWorkflow.carbCounting === 'not-required'\n            ? 'and uniquely does not require carb counting.'\n            : 'with flexible carb counting options.'\n        }`;\n\n      case 'cost':\n        return `The ${pump.name} offers excellent value through ${pump.dimensions.cost.coverage} coverage. ${\n          pump.dimensions.cost.financialAssistance\n            ? `Financial assistance available: ${pump.dimensions.cost.financialAssistance}. `\n            : ''\n        }${pump.dimensions.cost.details}`;\n\n      case 'easeOfSetup':\n        return `The ${pump.name} is one of the easiest to start with. ${\n          pump.dimensions.clinicSupport.established === 'large' ||\n          pump.dimensions.clinicSupport.established === 'broad'\n            ? 'Most clinics are very familiar with this system. '\n            : ''\n        }${pump.dimensions.interface.details} ${\n          pump.dimensions.bolusWorkflow.carbCounting === 'not-required'\n            ? 'No carb counting required makes it especially simple to learn.'\n            : ''\n        }`;\n\n      case 'ongoingSupport':\n        return `The ${pump.name} requires ${\n          pump.name === 'Beta Bionics iLet'\n            ? 'minimal ongoing management with only 4 essential alerts and no carb counting.'\n            : pump.name === 'Omnipod 5'\n              ? 'simple pod changes every 3 days with no other maintenance.'\n              : `standard pump maintenance with ${pump.dimensions.clinicSupport.details.toLowerCase()}.`\n        } ${pump.dimensions.dataSharing.details}`;\n\n      default:\n        return '';\n    }\n  }\n\n  private generateKeyPoints(category: string, pump: PumpDetails): string[] {\n    const points: string[] = [];\n\n    switch (category) {\n      case 'comfort':\n        points.push(`${pump.dimensions.tubing.type} design`);\n        if (pump.dimensions.waterResistance.submersible) {\n          points.push(`Waterproof to ${pump.dimensions.waterResistance.depth}`);\n        }\n        points.push(pump.dimensions.battery.details);\n        if (pump.dimensions.discretion.details) {\n          points.push(pump.dimensions.discretion.details);\n        }\n        break;\n\n      case 'algorithm':\n        points.push(`${pump.dimensions.algorithm.type} algorithm`);\n        points.push(`Adjusts ${pump.dimensions.algorithm.adjustmentFrequency.toLowerCase()}`);\n        if (pump.dimensions.targetAdjustability.customizable) {\n          points.push('Customizable glucose targets');\n        }\n        if (pump.dimensions.exerciseMode.available) {\n          points.push(\n            `Exercise mode: ${pump.dimensions.exerciseMode.targetRange || pump.dimensions.exerciseMode.type}`\n          );\n        }\n        break;\n\n      case 'cost':\n        points.push(`${pump.dimensions.cost.coverage} coverage`);\n        if (pump.dimensions.cost.financialAssistance) {\n          points.push(pump.dimensions.cost.financialAssistance);\n        }\n        if (\n          pump.dimensions.battery.type === 'rechargeable' ||\n          pump.dimensions.battery.type === 'pod-integrated'\n        ) {\n          points.push('No battery costs');\n        }\n        break;\n\n      case 'easeOfSetup':\n        points.push(`${pump.dimensions.interface.type} interface`);\n        points.push(`${pump.dimensions.clinicSupport.established} clinic support`);\n        if (pump.dimensions.cgmCompatibility.compatible.length > 0) {\n          points.push(`Works with ${pump.dimensions.cgmCompatibility.compatible.join(', ')}`);\n        }\n        break;\n\n      case 'ongoingSupport':\n        if (pump.dimensions.pediatric.remoteMonitoring) {\n          points.push('Remote monitoring available');\n        }\n        points.push(pump.dimensions.updates.details);\n        if (pump.dimensions.alerts.customizable) {\n          points.push('Customizable alerts');\n        } else if (pump.name === 'Beta Bionics iLet') {\n          points.push('Only 4 essential alerts');\n        }\n        break;\n    }\n\n    return points;\n  }\n\n  // Generate comprehensive recommendations\n  async generateComprehensiveRecommendations(\n    preferences: UserPreferences\n  ): Promise<ComprehensiveRecommendation> {\n    // Get recommendations for each category\n    const comfort = this.getCategoryRecommendation('comfort', preferences);\n    const algorithm = this.getCategoryRecommendation('algorithm', preferences);\n    const cost = this.getCategoryRecommendation('cost', preferences);\n    const easeOfSetup = this.getCategoryRecommendation('easeOfSetup', preferences);\n    const ongoingSupport = this.getCategoryRecommendation('ongoingSupport', preferences);\n\n    // Calculate overall top recommendation\n    const overallScores = PUMP_DATABASE.map(pump => {\n      const totalScore =\n        this.calculateComfortScore(pump, preferences) * 0.25 +\n        this.calculateAlgorithmScore(pump, preferences) * 0.3 +\n        this.calculateCostScore(pump, preferences) * 0.15 +\n        this.calculateEaseOfSetupScore(pump, preferences) * 0.15 +\n        this.calculateSupportScore(pump, preferences) * 0.15;\n\n      return { pump, score: totalScore };\n    });\n\n    overallScores.sort((a, b) => b.score - a.score);\n    const overallTop = {\n      category: 'Overall Best Match',\n      pump: overallScores[0].pump,\n      score: Math.round(overallScores[0].score),\n      reasoning: `Considering all factors, the ${overallScores[0].pump.name} is your best overall match. It balances your preferences across comfort, algorithm performance, cost, ease of setup, and ongoing support needs.`,\n      keyPoints: [\n        `Best overall score: ${Math.round(overallScores[0].score)}%`,\n        `Top choice in ${this.countTopCategories(overallScores[0].pump, [comfort, algorithm, cost, easeOfSetup, ongoingSupport])} categories`,\n        'Balances all your priorities effectively',\n      ],\n    };\n\n    // Generate summary using AI if available\n    const summary = await this.generateAISummary(preferences, {\n      comfort,\n      algorithm,\n      cost,\n      easeOfSetup,\n      ongoingSupport,\n      overallTop,\n    });\n\n    // Generate conversation starters\n    const conversationStarters = this.generateConversationStarters(overallTop.pump, preferences);\n\n    return {\n      comfort,\n      algorithm,\n      cost,\n      easeOfSetup,\n      ongoingSupport,\n      overallTop,\n      summary,\n      conversationStarters,\n    };\n  }\n\n  private countTopCategories(pump: PumpDetails, categories: CategoryRecommendation[]): number {\n    return categories.filter(cat => cat.pump.name === pump.name).length;\n  }\n\n  private async generateAISummary(\n    preferences: UserPreferences,\n    recommendations: any\n  ): Promise<string> {\n    // For now, return a structured summary\n    // In production, this would call Claude 3.5 via Bedrock\n    const topPump = recommendations.overallTop.pump.name;\n    const comfortPump = recommendations.comfort.pump.name;\n    const algorithmPump = recommendations.algorithm.pump.name;\n\n    let summary = `Based on your preferences and lifestyle, here's your personalized pump analysis:\\n\\n`;\n\n    if (topPump === comfortPump && topPump === algorithmPump) {\n      summary += `**Clear Winner:** The ${topPump} excels across multiple categories and is your best choice for both daily comfort and diabetes management.\\n\\n`;\n    } else {\n      summary += `**Your Best Options:**\\n`;\n      summary += `• **For daily comfort:** ${comfortPump} - ${recommendations.comfort.pump.dimensions.tubing.type} design\\n`;\n      summary += `• **For best control:** ${algorithmPump} - ${recommendations.algorithm.pump.dimensions.algorithm.type}\\n`;\n      summary += `• **Overall best match:** ${topPump}\\n\\n`;\n    }\n\n    summary += `**Key Insights:**\\n`;\n    if (preferences.automationTrust === 3) {\n      summary += `• You trust automation, making advanced algorithms a priority\\n`;\n    }\n    if (preferences.tubingPreference === 3) {\n      summary += `• Tubeless or minimal tubing is important for your lifestyle\\n`;\n    }\n    if (preferences.carbCounting === 1) {\n      summary += `• Simplified meal management without carb counting would benefit you\\n`;\n    }\n\n    return summary;\n  }\n\n  private generateConversationStarters(pump: PumpDetails, preferences: UserPreferences): string[] {\n    const starters: string[] = [];\n\n    starters.push(`Tell me more about ${pump.name}'s ${pump.dimensions.algorithm.type} algorithm`);\n\n    if (pump.dimensions.tubing.type === 'tubeless') {\n      starters.push('How do I manage pod changes and placement sites?');\n    } else {\n      starters.push('What are my infusion set options?');\n    }\n\n    if (preferences.activityLevel === 'active' || preferences.activityLevel === 'very_active') {\n      starters.push('How does this pump handle exercise and sports?');\n    }\n\n    starters.push('What training and support is available in my area?');\n    starters.push('Can you compare insurance coverage options?');\n\n    return starters;\n  }\n}\n\nexport const pumpRecommendationEngine = new PumpRecommendationEngine();\n","import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { PUMP_QUESTIONS } from '../data/pumpQuestions';\nimport { PUMP_DATABASE, PUMP_NAMES } from '../data/pumpDataComplete';\nimport { pumpRecommendationEngine } from '../services/pumpRecommendationEngine';\nimport type {\n  UserPreferences,\n  ComprehensiveRecommendation,\n} from '../services/pumpRecommendationEngine';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\nexport default function SimranPumpLLM() {\n  const navigate = useNavigate();\n  const [selectedVoice, setSelectedVoice] = useState(elevenLabsService.getVoice());\n  const [apiKey, setApiKey] = useState(elevenLabsService.getApiKey() || '');\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const [recognition, setRecognition] = useState<any>(null);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n\n  // Pump selection state\n  const [mode, setMode] = useState<'chat' | 'questionnaire'>('questionnaire');\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<Record<string, number>>({});\n  const [comprehensiveRecs, setComprehensiveRecs] = useState<ComprehensiveRecommendation | null>(\n    null\n  );\n  const [showResults, setShowResults] = useState(false);\n  const [activeCategory, setActiveCategory] = useState<\n    'comfort' | 'algorithm' | 'cost' | 'easeOfSetup' | 'ongoingSupport' | 'overall'\n  >('overall');\n\n  useEffect(() => {\n    // Initialize speech recognition\n    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n      const SpeechRecognition =\n        (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;\n      const recognitionInstance = new SpeechRecognition();\n\n      recognitionInstance.continuous = true;\n      recognitionInstance.interimResults = true;\n      recognitionInstance.lang = 'en-US';\n\n      recognitionInstance.onresult = (event: any) => {\n        let final = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          if (event.results[i].isFinal) {\n            final += event.results[i][0].transcript + ' ';\n          }\n        }\n        if (final) {\n          setTranscript(prev => prev + final);\n        }\n      };\n\n      recognitionInstance.onerror = (event: any) => {\n        logError('SimranPumpLLM', 'Error message', {});\n        setIsRecording(false);\n        elevenLabsService.speak('Speech recognition error. Please try again.');\n      };\n\n      recognitionInstance.onend = () => {\n        setIsRecording(false);\n      };\n\n      setRecognition(recognitionInstance);\n    }\n\n    return () => {\n      if (recognition) {\n        recognition.stop();\n      }\n      elevenLabsService.stop();\n    };\n  }, []);\n\n  const toggleRecording = () => {\n    if (!recognition) {\n      elevenLabsService.speak('Speech recognition not supported in this browser');\n      return;\n    }\n\n    if (isRecording) {\n      recognition.stop();\n      setIsRecording(false);\n      elevenLabsService.speak('Recording stopped');\n    } else {\n      recognition.start();\n      setIsRecording(true);\n      elevenLabsService.speak('Listening. Please speak your question.');\n    }\n  };\n\n  const processWithAI = async () => {\n    if (!transcript.trim()) return;\n\n    setIsSpeaking(true);\n\n    // Check if user is answering a pump question\n    if (mode === 'questionnaire' && !showResults) {\n      processQuestionnaireAnswer(transcript);\n    } else {\n      // General pump advice\n      const mockResponse = `Based on your symptoms, I recommend monitoring your glucose levels closely. \n      The pump settings appear to be within normal range, but you may want to consider adjusting your basal rate \n      during the evening hours. Please consult with your endocrinologist for personalized adjustments.`;\n\n      setAiResponse(mockResponse);\n      await elevenLabsService.speak(mockResponse);\n    }\n\n    setIsSpeaking(false);\n  };\n\n  const processQuestionnaireAnswer = async (answer: string) => {\n    const currentQuestion = PUMP_QUESTIONS[currentQuestionIndex];\n    const lowerAnswer = answer.toLowerCase();\n\n    // Try to match the answer to an option\n    let selectedOption = null;\n    if (lowerAnswer.includes('first') || lowerAnswer.includes('1')) {\n      selectedOption = 0;\n    } else if (lowerAnswer.includes('second') || lowerAnswer.includes('2')) {\n      selectedOption = 1;\n    } else if (lowerAnswer.includes('third') || lowerAnswer.includes('3')) {\n      selectedOption = 2;\n    }\n\n    if (selectedOption !== null && currentQuestion.options[selectedOption]) {\n      const score = currentQuestion.options[selectedOption].score;\n      setAnswers(prev => ({ ...prev, [currentQuestion.dimension]: score }));\n\n      if (currentQuestionIndex < PUMP_QUESTIONS.length - 1) {\n        setCurrentQuestionIndex(prev => prev + 1);\n        await askNextQuestion(currentQuestionIndex + 1);\n      } else {\n        // All questions answered, calculate results\n        calculatePumpRecommendations();\n      }\n    } else {\n      await elevenLabsService.speak(\n        \"I didn't understand your answer. Please say 'first', 'second', or 'third' to select an option.\"\n      );\n    }\n  };\n\n  const askNextQuestion = async (index: number) => {\n    const question = PUMP_QUESTIONS[index];\n    const questionText = `Question ${index + 1} of ${PUMP_QUESTIONS.length}: ${question.question}\\n\\n`;\n    const optionsText = question.options\n      .map((opt, i) => `Option ${i + 1}: ${opt.label}`)\n      .join('\\n\\n');\n    const fullText =\n      questionText + optionsText + '\\n\\nPlease say first, second, or third to choose.';\n\n    await elevenLabsService.speak(fullText);\n  };\n\n  const calculatePumpRecommendations = async () => {\n    // Create user preferences from answers\n    const userPreferences: UserPreferences = {\n      tubingPreference: answers['Tubing Preference'],\n      controlPreference: answers['Control Preference'],\n      targetAdjustability: answers['Target Adjustability'],\n      appControl: answers['App Control'],\n      carbCounting: answers['Carb Counting'],\n      automationTrust: answers['Automation Trust'],\n      exerciseMode: answers['Exercise Mode'],\n      visibility: answers['Visibility'],\n      clinicSupport: answers['Clinic Support'],\n      techComfort: answers['Control Preference'] === 3 ? 8 : 5,\n      activityLevel: answers['Exercise Mode'] === 3 ? 'active' : 'moderate',\n      travelFrequency: 'occasional',\n      insurance: 'good',\n      cgmUsage: 'Dexcom G6',\n      priorityFactors: ['comfort', 'algorithm', 'cost'],\n    };\n\n    const recommendations =\n      await pumpRecommendationEngine.generateComprehensiveRecommendations(userPreferences);\n    setComprehensiveRecs(recommendations);\n    setShowResults(true);\n\n    // Announce comprehensive results\n    const announcement = `I've analyzed your preferences across 5 key categories. \n      For daily comfort, I recommend the ${recommendations.comfort.pump.name}.\n      For algorithm performance, the ${recommendations.algorithm.pump.name} excels.\n      For cost-effectiveness, consider the ${recommendations.cost.pump.name}.\n      For ease of setup, the ${recommendations.easeOfSetup.pump.name} is ideal.\n      For ongoing support, the ${recommendations.ongoingSupport.pump.name} stands out.\n      Overall, your best match is the ${recommendations.overallTop.pump.name}.\n      Let me show you the detailed analysis.`;\n    await elevenLabsService.speak(announcement);\n  };\n\n  const startQuestionnaire = async () => {\n    setMode('questionnaire');\n    setCurrentQuestionIndex(0);\n    setAnswers({});\n    setShowResults(false);\n    await elevenLabsService.speak(\n      \"Let's find the perfect insulin pump for you. I'll ask you some questions about your preferences and lifestyle.\"\n    );\n    await askNextQuestion(0);\n  };\n\n  const handleVoiceChange = (voiceId: string) => {\n    setSelectedVoice(voiceId);\n    elevenLabsService.setVoice(voiceId);\n  };\n\n  const handleApiKeyChange = (key: string) => {\n    setApiKey(key);\n    elevenLabsService.setApiKey(key);\n  };\n\n  const testVoice = () => {\n    elevenLabsService.testVoice(selectedVoice);\n  };\n\n  const stopSpeaking = () => {\n    elevenLabsService.stop();\n    setIsSpeaking(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={() => navigate('/doctor')}\n                className=\"text-gray-600 hover:text-gray-900\"\n              >\n                ← Back\n              </button>\n              <h1 className=\"text-xl font-bold text-purple-800\">Simran PumpLLM Assistant</h1>\n            </div>\n            <button\n              onClick={() => setShowSettings(!showSettings)}\n              className=\"px-4 py-2 text-sm bg-purple-600 text-white rounded-lg hover:bg-purple-700\"\n            >\n              ⚙️ Voice Settings\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Settings Panel */}\n      {showSettings && (\n        <div className=\"bg-white shadow-lg border-b\">\n          <div className=\"max-w-7xl mx-auto px-4 py-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Voice Selection */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Voice Selection\n                </label>\n                <select\n                  value={selectedVoice}\n                  onChange={e => handleVoiceChange(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500\"\n                >\n                  {ELEVENLABS_VOICES.map(voice => (\n                    <option key={voice.id} value={voice.id}>\n                      {voice.name} - {voice.description}\n                    </option>\n                  ))}\n                </select>\n                <button\n                  onClick={testVoice}\n                  className=\"mt-2 px-4 py-2 text-sm bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200\"\n                >\n                  🔊 Test Voice\n                </button>\n              </div>\n\n              {/* API Key */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  ElevenLabs API Status\n                </label>\n                <div className=\"w-full px-3 py-2 bg-green-50 border border-green-300 rounded-lg\">\n                  <p className=\"text-sm text-green-700 font-medium\">\n                    ✓ API Key Configured (Enterprise HIPAA-Compliant)\n                  </p>\n                  <p className=\"text-xs text-green-600 mt-1\">\n                    Using high-quality neural voices with ultra-low latency\n                  </p>\n                </div>\n                {!apiKey && (\n                  <p className=\"mt-1 text-xs text-amber-600\">\n                    Note: If API key is not detected, browser voice will be used as fallback\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Main Content */}\n      <div className=\"max-w-6xl mx-auto px-4 py-8\">\n        {/* AI Assistant Card */}\n        <div className=\"bg-white rounded-2xl shadow-xl p-8 mb-6\">\n          <div className=\"text-center mb-6\">\n            <div className=\"w-24 h-24 bg-gradient-to-br from-purple-400 to-blue-500 rounded-full mx-auto mb-4 flex items-center justify-center\">\n              <span className=\"text-4xl\">🤖</span>\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-800\">\n              AI Pump Selection & Management Assistant\n            </h2>\n            <p className=\"text-gray-600 mt-2\">\n              I'll help you find the perfect insulin pump based on 23 dimensions of compatibility\n            </p>\n          </div>\n\n          {/* Recording Controls */}\n          <div className=\"flex justify-center space-x-4 mb-6\">\n            <button\n              onClick={toggleRecording}\n              className={`px-8 py-4 rounded-full font-medium transition-all transform hover:scale-105 ${\n                isRecording\n                  ? 'bg-red-500 text-white shadow-lg animate-pulse'\n                  : 'bg-gradient-to-r from-purple-500 to-blue-500 text-white shadow-lg'\n              }`}\n            >\n              {isRecording ? '⏹ Stop Recording' : '🎤 Start Conversation'}\n            </button>\n\n            {isSpeaking && (\n              <button\n                onClick={stopSpeaking}\n                className=\"px-8 py-4 bg-gray-600 text-white rounded-full hover:bg-gray-700\"\n              >\n                🔇 Stop Speaking\n              </button>\n            )}\n          </div>\n\n          {/* Status Indicator */}\n          {(isRecording || isSpeaking) && (\n            <div className=\"flex justify-center items-center space-x-2 mb-4\">\n              <div className=\"flex space-x-1\">\n                <div\n                  className=\"w-3 h-3 bg-purple-500 rounded-full animate-bounce\"\n                  style={{ animationDelay: '0ms' }}\n                ></div>\n                <div\n                  className=\"w-3 h-3 bg-purple-500 rounded-full animate-bounce\"\n                  style={{ animationDelay: '150ms' }}\n                ></div>\n                <div\n                  className=\"w-3 h-3 bg-purple-500 rounded-full animate-bounce\"\n                  style={{ animationDelay: '300ms' }}\n                ></div>\n              </div>\n              <span className=\"text-sm text-gray-600\">\n                {isRecording ? 'Listening...' : 'Speaking...'}\n              </span>\n            </div>\n          )}\n        </div>\n\n        {/* User Question */}\n        {transcript && (\n          <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n              <span className=\"mr-2\">👤</span> Your Question\n            </h3>\n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              <p className=\"text-gray-800\">{transcript}</p>\n            </div>\n            <div className=\"mt-4 flex space-x-4\">\n              <button\n                onClick={processWithAI}\n                className=\"px-6 py-3 bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-lg hover:shadow-lg transition\"\n              >\n                Get AI Response\n              </button>\n              <button\n                onClick={() => setTranscript('')}\n                className=\"px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50\"\n              >\n                Clear\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* AI Response */}\n        {aiResponse && (\n          <div className=\"bg-gradient-to-br from-purple-50 to-blue-50 rounded-lg shadow-sm p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center text-purple-800\">\n              <span className=\"mr-2\">🤖</span> AI Assistant Response\n            </h3>\n            <div className=\"bg-white rounded-lg p-4\">\n              <p className=\"text-gray-800 leading-relaxed\">{aiResponse}</p>\n            </div>\n          </div>\n        )}\n\n        {/* Pump Questionnaire Section */}\n        {mode === 'questionnaire' && !showResults && (\n          <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\n            <div className=\"mb-4\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <h3 className=\"text-lg font-semibold\">Pump Selection Questionnaire</h3>\n                <span className=\"text-sm text-gray-500\">\n                  Question {currentQuestionIndex + 1} of {PUMP_QUESTIONS.length}\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div\n                  className=\"bg-gradient-to-r from-purple-500 to-blue-500 h-2 rounded-full transition-all\"\n                  style={{\n                    width: `${((currentQuestionIndex + 1) / PUMP_QUESTIONS.length) * 100}%`,\n                  }}\n                />\n              </div>\n            </div>\n\n            {PUMP_QUESTIONS[currentQuestionIndex] && (\n              <div>\n                <h4 className=\"text-xl mb-4 text-gray-800\">\n                  {PUMP_QUESTIONS[currentQuestionIndex].question}\n                </h4>\n                <div className=\"space-y-3\">\n                  {PUMP_QUESTIONS[currentQuestionIndex].options.map((option, index) => (\n                    <button\n                      key={index}\n                      onClick={() => {\n                        const question = PUMP_QUESTIONS[currentQuestionIndex];\n                        setAnswers(prev => ({ ...prev, [question.dimension]: option.score }));\n                        if (currentQuestionIndex < PUMP_QUESTIONS.length - 1) {\n                          setCurrentQuestionIndex(prev => prev + 1);\n                          askNextQuestion(currentQuestionIndex + 1);\n                        } else {\n                          calculatePumpRecommendations();\n                        }\n                      }}\n                      className=\"w-full text-left p-4 border border-gray-300 rounded-lg hover:bg-purple-50 hover:border-purple-500 transition\"\n                    >\n                      <span className=\"font-medium\">Option {index + 1}:</span> {option.label}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Comprehensive Results Section */}\n        {showResults && comprehensiveRecs && (\n          <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\n            <h3 className=\"text-2xl font-bold mb-6 text-purple-800\">\n              Your Comprehensive Pump Analysis\n            </h3>\n\n            {/* Category Tabs */}\n            <div className=\"flex flex-wrap gap-2 mb-6 border-b\">\n              <button\n                onClick={() => setActiveCategory('overall')}\n                className={`px-4 py-2 font-medium transition ${activeCategory === 'overall' ? 'border-b-2 border-purple-600 text-purple-600' : 'text-gray-600 hover:text-purple-600'}`}\n              >\n                Overall Best\n              </button>\n              <button\n                onClick={() => setActiveCategory('comfort')}\n                className={`px-4 py-2 font-medium transition ${activeCategory === 'comfort' ? 'border-b-2 border-purple-600 text-purple-600' : 'text-gray-600 hover:text-purple-600'}`}\n              >\n                Comfort\n              </button>\n              <button\n                onClick={() => setActiveCategory('algorithm')}\n                className={`px-4 py-2 font-medium transition ${activeCategory === 'algorithm' ? 'border-b-2 border-purple-600 text-purple-600' : 'text-gray-600 hover:text-purple-600'}`}\n              >\n                Algorithm\n              </button>\n              <button\n                onClick={() => setActiveCategory('cost')}\n                className={`px-4 py-2 font-medium transition ${activeCategory === 'cost' ? 'border-b-2 border-purple-600 text-purple-600' : 'text-gray-600 hover:text-purple-600'}`}\n              >\n                Cost\n              </button>\n              <button\n                onClick={() => setActiveCategory('easeOfSetup')}\n                className={`px-4 py-2 font-medium transition ${activeCategory === 'easeOfSetup' ? 'border-b-2 border-purple-600 text-purple-600' : 'text-gray-600 hover:text-purple-600'}`}\n              >\n                Setup\n              </button>\n              <button\n                onClick={() => setActiveCategory('ongoingSupport')}\n                className={`px-4 py-2 font-medium transition ${activeCategory === 'ongoingSupport' ? 'border-b-2 border-purple-600 text-purple-600' : 'text-gray-600 hover:text-purple-600'}`}\n              >\n                Support\n              </button>\n            </div>\n\n            {/* Active Category Detail */}\n            <div className=\"mb-6\">\n              {(() => {\n                const rec =\n                  activeCategory === 'overall'\n                    ? comprehensiveRecs.overallTop\n                    : activeCategory === 'comfort'\n                      ? comprehensiveRecs.comfort\n                      : activeCategory === 'algorithm'\n                        ? comprehensiveRecs.algorithm\n                        : activeCategory === 'cost'\n                          ? comprehensiveRecs.cost\n                          : activeCategory === 'easeOfSetup'\n                            ? comprehensiveRecs.easeOfSetup\n                            : comprehensiveRecs.ongoingSupport;\n\n                return (\n                  <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-6\">\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <div>\n                        <h4 className=\"text-xl font-bold text-purple-800\">{rec.pump.name}</h4>\n                        <p className=\"text-sm text-purple-600 mt-1\">{rec.category}</p>\n                      </div>\n                      <span className=\"px-4 py-2 bg-purple-600 text-white rounded-full font-bold\">\n                        {rec.score}% Match\n                      </span>\n                    </div>\n\n                    <p className=\"text-gray-700 mb-4\">{rec.reasoning}</p>\n\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <h5 className=\"font-semibold text-gray-800 mb-2\">Key Points:</h5>\n                        <ul className=\"list-disc list-inside text-sm text-gray-600 space-y-1\">\n                          {rec.keyPoints.map((point, i) => (\n                            <li key={i}>{point}</li>\n                          ))}\n                        </ul>\n                      </div>\n\n                      <div>\n                        <h5 className=\"font-semibold text-gray-800 mb-2\">Pump Details:</h5>\n                        <div className=\"text-sm text-gray-600 space-y-1\">\n                          <p>• Manufacturer: {rec.pump.manufacturer}</p>\n                          <p>• Type: {rec.pump.dimensions.tubing.type}</p>\n                          <p>• Algorithm: {rec.pump.dimensions.algorithm.type}</p>\n                          <p>\n                            • Phone Control:{' '}\n                            {rec.pump.dimensions.phoneControl.bolusFromPhone ? 'Yes' : 'View Only'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <button\n                      onClick={async () => {\n                        const details = `Let me tell you more about the ${rec.pump.name} for ${rec.category}. ${rec.reasoning} ${rec.keyPoints.join('. ')}`;\n                        await elevenLabsService.speak(details);\n                      }}\n                      className=\"mt-4 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700\"\n                    >\n                      🔊 Hear Details\n                    </button>\n                  </div>\n                );\n              })()}\n            </div>\n\n            {/* Summary Section */}\n            <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n              <h5 className=\"font-semibold text-gray-800 mb-2\">Summary:</h5>\n              <p className=\"text-sm text-gray-700 whitespace-pre-line\">\n                {comprehensiveRecs.summary}\n              </p>\n            </div>\n\n            {/* Conversation Starters */}\n            <div className=\"mb-4\">\n              <h5 className=\"font-semibold text-gray-800 mb-2\">Questions to explore:</h5>\n              <div className=\"flex flex-wrap gap-2\">\n                {comprehensiveRecs.conversationStarters.map((starter, i) => (\n                  <button\n                    key={i}\n                    onClick={async () => {\n                      setTranscript(starter);\n                      await elevenLabsService.speak(\n                        `You asked: ${starter}. Let me help you with that.`\n                      );\n                    }}\n                    className=\"px-3 py-1 bg-white border border-purple-300 rounded-full text-sm hover:bg-purple-50\"\n                  >\n                    {starter}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"mt-6 flex flex-wrap gap-4\">\n              <button\n                onClick={() => {\n                  setShowResults(false);\n                  setCurrentQuestionIndex(0);\n                  setAnswers({});\n                  startQuestionnaire();\n                }}\n                className=\"px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700\"\n              >\n                Retake Questionnaire\n              </button>\n              <button\n                onClick={() => setMode('chat')}\n                className=\"px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50\"\n              >\n                Continue Conversation\n              </button>\n              <button\n                onClick={async () => {\n                  const fullSummary = `Here's your complete pump analysis. \n                    For comfort: ${comprehensiveRecs.comfort.pump.name}. \n                    For algorithm: ${comprehensiveRecs.algorithm.pump.name}. \n                    For cost: ${comprehensiveRecs.cost.pump.name}. \n                    For setup: ${comprehensiveRecs.easeOfSetup.pump.name}. \n                    For support: ${comprehensiveRecs.ongoingSupport.pump.name}. \n                    Overall best: ${comprehensiveRecs.overallTop.pump.name}.`;\n                  await elevenLabsService.speak(fullSummary);\n                }}\n                className=\"px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n              >\n                🔊 Hear Full Summary\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Quick Actions */}\n        <div className=\"mt-8 grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <button\n            onClick={startQuestionnaire}\n            className=\"p-4 bg-gradient-to-br from-purple-100 to-blue-100 rounded-lg shadow hover:shadow-lg transition text-center\"\n          >\n            <span className=\"text-2xl mb-2 block\">🎯</span>\n            <span className=\"text-sm text-gray-700\">Start Pump Selection</span>\n          </button>\n          <button className=\"p-4 bg-white rounded-lg shadow hover:shadow-lg transition text-center\">\n            <span className=\"text-2xl mb-2 block\">⚙️</span>\n            <span className=\"text-sm text-gray-700\">Pump Settings</span>\n          </button>\n          <button className=\"p-4 bg-white rounded-lg shadow hover:shadow-lg transition text-center\">\n            <span className=\"text-2xl mb-2 block\">💉</span>\n            <span className=\"text-sm text-gray-700\">Bolus Calculator</span>\n          </button>\n          <button className=\"p-4 bg-white rounded-lg shadow hover:shadow-lg transition text-center\">\n            <span className=\"text-2xl mb-2 block\">📱</span>\n            <span className=\"text-sm text-gray-700\">Contact Doctor</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["PUMP_QUESTIONS","PumpRecommendationEngine","pump","preferences","score","category","scores","PUMP_DATABASE","a","b","topPump","reasoning","keyPoints","points","comfort","algorithm","cost","easeOfSetup","ongoingSupport","overallScores","totalScore","overallTop","summary","conversationStarters","categories","cat","recommendations","comfortPump","algorithmPump","starters","pumpRecommendationEngine","SimranPumpLLM","navigate","useNavigate","selectedVoice","setSelectedVoice","useState","apiKey","setApiKey","isRecording","setIsRecording","transcript","setTranscript","aiResponse","setAiResponse","recognition","setRecognition","isSpeaking","setIsSpeaking","showSettings","setShowSettings","mode","setMode","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","comprehensiveRecs","setComprehensiveRecs","showResults","setShowResults","activeCategory","setActiveCategory","useEffect","SpeechRecognition","recognitionInstance","event","final","i","prev","logError","toggleRecording","processWithAI","processQuestionnaireAnswer","mockResponse","answer","currentQuestion","lowerAnswer","selectedOption","askNextQuestion","calculatePumpRecommendations","index","question","questionText","optionsText","opt","fullText","userPreferences","announcement","startQuestionnaire","handleVoiceChange","voiceId","testVoice","stopSpeaking","jsxs","jsx","e","voice","option","rec","point","details","starter","fullSummary"],"mappings":"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"}