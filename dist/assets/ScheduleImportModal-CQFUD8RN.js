import{b as I,l as h,h as O,d as j,g as M,r as L,j as l,e as G}from"./index-CFDQeSWK.js";import{a as W}from"./azureAI.service-CZPi9VqR.js";class B{STORAGE_PREFIX="tshla_chart_";generateTshId(){let t;do{const a=Math.floor(Math.random()*900+100),e=Math.floor(Math.random()*900+100);t=`TSH-${a}-${e}`}while(this.tshIdExists(t));return t}generateAvaId(){let t;do{const a=Math.floor(Math.random()*900+100),e=Math.floor(Math.random()*900+100);t=`AVA-${a}-${e}`}while(this.avaIdExists(t));return t}tshIdExists(t){return this.getAllCharts().some(e=>e.tshId===t)}avaIdExists(t){return this.getAllCharts().some(e=>e.avaId===t)}getAllCharts(){const t=[];if(typeof window>"u")return t;for(let a=0;a<localStorage.length;a++){const e=localStorage.key(a);if(e?.startsWith(this.STORAGE_PREFIX)){const i=localStorage.getItem(e);if(i)try{t.push(JSON.parse(i))}catch{I("chart","Error message",{})}}}return t}saveChart(t){typeof window<"u"&&localStorage.setItem(`${this.STORAGE_PREFIX}${t.id}`,JSON.stringify(t))}async createChart(t){const a=this.generateAvaId(),e=this.generateTshId(),i=`chart-${Date.now()}-${Math.random().toString(36).substring(2,9)}`,n=localStorage.getItem("user_data"),d=n?JSON.parse(n):{email:"system"},s={id:i,patientId:t.patientId,avaId:a,tshId:e,clinicId:t.clinicId,oldNotes:t.oldNotes,createdBy:d.email,createdAt:new Date,updatedAt:new Date};return this.saveChart(s),h("chart","Debug message",{}),{chart:s,avaId:a,tshId:e}}async getChartById(t){if(typeof window>"u")return null;const a=localStorage.getItem(`${this.STORAGE_PREFIX}${t}`);if(!a)return null;try{return JSON.parse(a)}catch{return I("chart","Error message",{}),null}}async getChartByAvaId(t){return this.getAllCharts().find(e=>e.avaId===t)||null}async getChartByTshId(t){return this.getAllCharts().find(e=>e.tshId===t)||null}async getChartsByPatientId(t){return this.getAllCharts().filter(e=>e.patientId===t)}async updateChart(t,a){const e=await this.getChartById(t);if(!e)return null;const i={...e,...a,updatedAt:new Date};return this.saveChart(i),h("chart","Debug message",{}),i}async addOldNotes(t,a){const e=await this.getChartById(t);if(!e)return null;const i=e.oldNotes||"",n=i?`

---

`:"";return this.updateChart(t,{oldNotes:i+n+a})}async searchCharts(t){const a=this.getAllCharts(),e=t.toLowerCase();return a.filter(i=>i.avaId.toLowerCase().includes(e)||i.tshId.toLowerCase().includes(e))}async getChartsByClinicId(t){return this.getAllCharts().filter(e=>e.clinicId===t)}async validateChartAccess(t,a){const e=await this.getChartById(t);return e?e.clinicId?e.clinicId===a:!0:!1}}const U=new B;class Y{STORAGE_PREFIX="tshla_audit_";MAX_LOGS=1e4;context={};constructor(){this.initializeContext()}initializeContext(){if(typeof window>"u")return;const t=localStorage.getItem("user_data");if(t)try{const a=JSON.parse(t);this.context.userId=a.id||a.email,this.context.userName=a.name,this.context.userRole=a.role}catch{I("audit","Error message",{})}typeof navigator<"u"&&(this.context.userAgent=navigator.userAgent)}updateContext(t){this.context={...this.context,...t}}async log(t,a,e,i,n){const d={id:this.generateId(),actorId:this.context.userId||"anonymous",actorName:this.context.userName,actorRole:this.context.userRole,action:t,entityType:a,entityId:e,entityDetails:i,changes:n,ipAddress:this.context.ipAddress,userAgent:this.context.userAgent,createdAt:new Date};this.saveLog(d),this.cleanupOldLogs()}async logCreate(t,a,e){await this.log("create",t,a,e)}async logUpdate(t,a,e,i){const n=this.calculateChanges(e,i);await this.log("update",t,a,{updated:Object.keys(n)},{before:n.before,after:n.after})}async logDelete(t,a,e){await this.log("delete",t,a,e)}async logView(t,a,e){await this.log("view",t,a,e)}async logLogin(t,a,e){this.updateContext({userId:t,userName:a,userRole:e}),await this.log("login","patient",t,{userName:a,role:e,timestamp:new Date().toISOString()})}async logLogout(){const t=this.context.userId;await this.log("logout","patient",t,{timestamp:new Date().toISOString()}),this.context={}}async logNoteSigned(t,a){await this.log("sign","note",t,{patientId:a,signedBy:this.context.userId,signedAt:new Date().toISOString()})}async logActionItemProcessed(t,a,e,i){await this.log("process","action_item",t,{itemType:a,action:e,patientId:i,processedBy:this.context.userId,processedAt:new Date().toISOString()})}async getAuditLogs(t){let e=this.getAllLogs();return t&&(t.actorId&&(e=e.filter(i=>i.actorId===t.actorId)),t.entityType&&(e=e.filter(i=>i.entityType===t.entityType)),t.entityId&&(e=e.filter(i=>i.entityId===t.entityId)),t.action&&(e=e.filter(i=>i.action===t.action)),t.startDate&&(e=e.filter(i=>new Date(i.createdAt)>=t.startDate)),t.endDate&&(e=e.filter(i=>new Date(i.createdAt)<=t.endDate))),e.sort((i,n)=>new Date(n.createdAt).getTime()-new Date(i.createdAt).getTime()),t?.limit&&(e=e.slice(0,t.limit)),e}async getEntityAuditTrail(t,a){return this.getAuditLogs({entityType:t,entityId:a})}async getUserAuditTrail(t){return this.getAuditLogs({actorId:t})}generateId(){return Date.now()+Math.floor(Math.random()*1e3)}saveLog(t){if(typeof window>"u")return;const a=`${this.STORAGE_PREFIX}${t.id}`;localStorage.setItem(a,JSON.stringify(t))}getAllLogs(){const t=[];if(typeof window>"u")return t;for(let a=0;a<localStorage.length;a++){const e=localStorage.key(a);if(e?.startsWith(this.STORAGE_PREFIX)){const i=localStorage.getItem(e);if(i)try{t.push(JSON.parse(i))}catch{I("audit","Error message",{})}}}return t}cleanupOldLogs(){const t=this.getAllLogs();if(t.length>this.MAX_LOGS){t.sort((e,i)=>new Date(e.createdAt).getTime()-new Date(i.createdAt).getTime());const a=t.slice(0,t.length-this.MAX_LOGS);for(const e of a){const i=`${this.STORAGE_PREFIX}${e.id}`;localStorage.removeItem(i)}h("audit","Debug message",{})}}calculateChanges(t,a){const e={before:{},after:{}},i=new Set([...Object.keys(t),...Object.keys(a)]);for(const n of i){const d=t[n],s=a[n];JSON.stringify(d)!==JSON.stringify(s)&&(e.before[n]=d,e.after[n]=s)}return e}async exportAuditLogs(t){const a=await this.getAuditLogs(t),e=["Timestamp","Actor ID","Actor Name","Actor Role","Action","Entity Type","Entity ID","Details"],i=a.map(d=>[new Date(d.createdAt).toISOString(),d.actorId,d.actorName||"",d.actorRole||"",d.action,d.entityType,d.entityId||"",JSON.stringify(d.entityDetails||{})]);return[e.join(","),...i.map(d=>d.map(s=>`"${s}"`).join(","))].join(`
`)}}const J=new Y;class z{appointments=[];constructor(){this.loadAppointments(),this.appointments.length===0&&this.initializeSampleData()}async initializeSampleData(){const t=new Date,a=this.getWeekDates(t),e=[{id:"p001",name:"John Smith",phone:"555-0101",email:"john@email.com"},{id:"p002",name:"Sarah Johnson",phone:"555-0102",email:"sarah@email.com"},{id:"p003",name:"Michael Brown",phone:"555-0103"},{id:"p004",name:"Emily Davis",phone:"555-0104",email:"emily@email.com"},{id:"p005",name:"Robert Wilson",phone:"555-0105"},{id:"p006",name:"Lisa Anderson",phone:"555-0106"},{id:"p007",name:"David Martinez",phone:"555-0107"},{id:"p008",name:"Jennifer Taylor",email:"jen@email.com"},{id:"p009",name:"Christopher Lee",phone:"555-0109"},{id:"p010",name:"Amanda White",phone:"555-0110"},{id:"p011",name:"Thomas Garcia",phone:"555-0111"},{id:"p012",name:"Patricia Rodriguez",phone:"555-0112",email:"patricia@email.com"},{id:"p013",name:"Daniel Thompson",phone:"555-0113"},{id:"p014",name:"Mary Johnson",phone:"555-0114"},{id:"p015",name:"James Williams",phone:"555-0115",email:"james@email.com"},{id:"p016",name:"Emma Chen",phone:"555-0116",email:"emma@email.com"},{id:"p017",name:"William Davis",phone:"555-0117"},{id:"p018",name:"Sophia Martinez",phone:"555-0118",email:"sophia@email.com"},{id:"p019",name:"Oliver Harris",phone:"555-0119"},{id:"p020",name:"Isabella White",phone:"555-0120",email:"isabella@email.com"}],i=new Map,n=[{id:"doc1",name:"Dr. Rakesh Patel"},{id:"doc2",name:"Dr. Veena Watwe"},{id:"doc3",name:"Dr. Tess Chamakkala"},{id:"doc4",name:"Dr. Radha Bernander"},{id:"doc5",name:"Dr. Shannon Gregroek"},{id:"doc6",name:"Dr. Elinia Shakya"}];for(let s=0;s<e.length;s++){const o=e[s],r=n[s%n.length],c=await U.createChart(o.id,o.name,r.id,r.name);i.set(o.id,c)}const d=[{id:"apt001",patientId:"p001",patientName:"John Smith",patientPhone:"555-0101",patientEmail:"john@email.com",chartId:i.get("p001")?.id,doctorId:"doc1",doctorName:"Dr. Rakesh Patel",date:this.formatDate(a[0]),time:"9:00 AM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"Diabetes follow-up - A1C review",notes:"Patient on metformin 500mg BID for 3 months",createdAt:new Date(Date.now()-864e5*7)},{id:"apt002",patientId:"p002",patientName:"Sarah Johnson",patientPhone:"555-0102",chartId:i.get("p002")?.id,doctorId:"doc2",doctorName:"Dr. Veena Watwe",date:this.formatDate(a[0]),time:"10:00 AM",duration:45,status:"scheduled",visitType:"new-patient",visitReason:"Initial consultation - Hypertension",createdAt:new Date(Date.now()-864e5*5)},{id:"apt003",patientId:"p003",patientName:"Michael Brown",chartId:i.get("p003")?.id,doctorId:"doc1",doctorName:"Dr. Rakesh Patel",date:this.formatDate(a[0]),time:"11:00 AM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"Blood pressure check",createdAt:new Date(Date.now()-864e5*3)},{id:"apt004",patientId:"p004",patientName:"Emily Davis",chartId:i.get("p004")?.id,doctorId:"doc3",doctorName:"Dr. Tess Chamakkala",date:this.formatDate(a[0]),time:"2:00 PM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"Thyroid medication adjustment",notes:"Review TSH levels",createdAt:new Date(Date.now()-864e5*10)},{id:"apt005",patientId:"p005",patientName:"Robert Wilson",chartId:i.get("p005")?.id,doctorId:"doc2",doctorName:"Dr. Veena Watwe",date:this.formatDate(a[1]),time:"9:30 AM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"Cholesterol management",notes:"Review lipid panel, consider statin adjustment",createdAt:new Date(Date.now()-864e5*8)},{id:"apt006",patientId:"p006",patientName:"Lisa Anderson",chartId:i.get("p006")?.id,doctorId:"doc1",doctorName:"Dr. Rakesh Patel",date:this.formatDate(a[1]),time:"10:30 AM",duration:60,status:"scheduled",visitType:"procedure",visitReason:"Annual physical exam",createdAt:new Date(Date.now()-864e5*14)},{id:"apt007",patientId:"p007",patientName:"David Martinez",chartId:i.get("p007")?.id,doctorId:"doc4",doctorName:"Dr. Radha Bernander",date:this.formatDate(a[1]),time:"2:30 PM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"Weight management consultation",createdAt:new Date(Date.now()-864e5*6)},{id:"apt008",patientId:"p008",patientName:"Jennifer Taylor",chartId:i.get("p008")?.id,doctorId:"doc3",doctorName:"Dr. Tess Chamakkala",date:this.formatDate(a[1]),time:"4:00 PM",duration:45,status:"scheduled",visitType:"follow-up",visitReason:"Migraine management",notes:"Consider preventive medication",createdAt:new Date(Date.now()-864e5*4)},{id:"apt009",patientId:"p009",patientName:"Christopher Lee",chartId:i.get("p009")?.id,doctorId:"doc2",doctorName:"Dr. Veena Watwe",date:this.formatDate(a[2]),time:"8:00 AM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"Asthma control",notes:"Check inhaler technique, spirometry if needed",createdAt:new Date(Date.now()-864e5*12)},{id:"apt010",patientId:"p010",patientName:"Amanda White",chartId:i.get("p010")?.id,doctorId:"doc5",doctorName:"Dr. Shannon Gregroek",date:this.formatDate(a[2]),time:"10:00 AM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"Anxiety medication review",createdAt:new Date(Date.now()-864e5*9)},{id:"apt011",patientId:"p011",patientName:"Thomas Garcia",chartId:i.get("p011")?.id,doctorId:"doc1",doctorName:"Dr. Rakesh Patel",date:this.formatDate(a[2]),time:"11:30 AM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"Post-surgery follow-up",notes:"Check surgical site, remove sutures if healed",createdAt:new Date(Date.now()-864e5*2)},{id:"apt012",patientId:"p001",patientName:"John Smith",chartId:i.get("p001")?.id,doctorId:"doc3",doctorName:"Dr. Tess Chamakkala",date:this.formatDate(a[2]),time:"3:00 PM",duration:30,status:"scheduled",visitType:"lab-review",visitReason:"Review recent lab results",createdAt:new Date(Date.now()-864e5*1)},{id:"apt013",patientId:"p012",patientName:"Patricia Rodriguez",chartId:i.get("p012")?.id,doctorId:"doc3",doctorName:"Dr. Tess Chamakkala",date:this.formatDate(a[3]),time:"9:00 AM",duration:30,status:"scheduled",visitType:"lab-review",visitReason:"Discuss A1C and lipid panel results",notes:"A1C trending up, may need medication adjustment",createdAt:new Date(Date.now()-864e5*11)},{id:"apt014",patientId:"p013",patientName:"Daniel Thompson",chartId:i.get("p013")?.id,doctorId:"doc4",doctorName:"Dr. Radha Bernander",date:this.formatDate(a[3]),time:"10:00 AM",duration:45,status:"scheduled",visitType:"new-patient",visitReason:"Sleep apnea evaluation",createdAt:new Date(Date.now()-864e5*7)},{id:"apt015",patientId:"p014",patientName:"Mary Johnson",chartId:i.get("p014")?.id,doctorId:"doc1",doctorName:"Dr. Rakesh Patel",date:this.formatDate(a[3]),time:"2:00 PM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"Osteoporosis management",notes:"Discuss bone density results",createdAt:new Date(Date.now()-864e5*5)},{id:"apt016",patientId:"p015",patientName:"James Williams",chartId:i.get("p015")?.id,doctorId:"doc2",doctorName:"Dr. Veena Watwe",date:this.formatDate(a[3]),time:"3:30 PM",duration:30,status:"scheduled",visitType:"urgent",visitReason:"Acute back pain",createdAt:new Date},{id:"apt017",patientId:"p002",patientName:"Sarah Johnson",chartId:i.get("p002")?.id,doctorId:"doc5",doctorName:"Dr. Shannon Gregroek",date:this.formatDate(a[4]),time:"8:30 AM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"Depression screening",createdAt:new Date(Date.now()-864e5*3)},{id:"apt018",patientId:"p006",patientName:"Lisa Anderson",chartId:i.get("p006")?.id,doctorId:"doc1",doctorName:"Dr. Rakesh Patel",date:this.formatDate(a[4]),time:"10:00 AM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"Vaccine administration",notes:"Flu shot and COVID booster",createdAt:new Date(Date.now()-864e5*2)},{id:"apt019",patientId:"p009",patientName:"Christopher Lee",chartId:i.get("p009")?.id,doctorId:"doc4",doctorName:"Dr. Radha Bernander",date:this.formatDate(a[4]),time:"1:00 PM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"COPD management",createdAt:new Date(Date.now()-864e5*8)},{id:"apt020",patientId:"p011",patientName:"Thomas Garcia",chartId:i.get("p011")?.id,doctorId:"doc2",doctorName:"Dr. Veena Watwe",date:this.formatDate(a[4]),time:"3:00 PM",duration:45,status:"scheduled",visitType:"procedure",visitReason:"Skin biopsy",notes:"Suspicious mole on back",createdAt:new Date(Date.now()-864e5*4)},{id:"apt021",patientId:"p016",patientName:"Emma Chen",chartId:i.get("p016")?.id,doctorId:"doc6",doctorName:"Dr. Elinia Shakya",date:this.formatDate(a[0]),time:"3:30 PM",duration:30,status:"scheduled",visitType:"new-patient",visitReason:"Initial endocrinology consultation",notes:"Referred for possible thyroid disorder",createdAt:new Date(Date.now()-864e5*5)},{id:"apt022",patientId:"p017",patientName:"William Davis",chartId:i.get("p017")?.id,doctorId:"doc6",doctorName:"Dr. Elinia Shakya",date:this.formatDate(a[1]),time:"4:00 PM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"Diabetes management - insulin adjustment",notes:"Review continuous glucose monitor data",createdAt:new Date(Date.now()-864e5*7)},{id:"apt023",patientId:"p018",patientName:"Sophia Martinez",chartId:i.get("p018")?.id,doctorId:"doc6",doctorName:"Dr. Elinia Shakya",date:this.formatDate(a[2]),time:"9:00 AM",duration:45,status:"scheduled",visitType:"procedure",visitReason:"Thyroid ultrasound and FNA",notes:"Nodule found on previous exam",createdAt:new Date(Date.now()-864e5*10)},{id:"apt024",patientId:"p019",patientName:"Oliver Harris",chartId:i.get("p019")?.id,doctorId:"doc6",doctorName:"Dr. Elinia Shakya",date:this.formatDate(a[3]),time:"2:00 PM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"Growth hormone therapy review",notes:"Pediatric patient - check growth charts",createdAt:new Date(Date.now()-864e5*3)},{id:"apt025",patientId:"p020",patientName:"Isabella White",chartId:i.get("p020")?.id,doctorId:"doc6",doctorName:"Dr. Elinia Shakya",date:this.formatDate(a[4]),time:"11:00 AM",duration:30,status:"scheduled",visitType:"follow-up",visitReason:"PCOS management",notes:"Review hormone levels and medication compliance",createdAt:new Date(Date.now()-864e5*6)}];this.appointments=d,this.saveAppointments()}getAppointments(t){let a=[...this.appointments];if(t?.doctorId&&t.doctorId!=="all"&&(a=a.filter(e=>e.doctorId===t.doctorId)),t?.date&&(a=a.filter(e=>e.date===t.date)),t?.weekOf){const i=this.getWeekDates(t.weekOf).map(n=>this.formatDate(n));a=a.filter(n=>i.includes(n.date))}return a.sort((e,i)=>e.date!==i.date?e.date.localeCompare(i.date):this.timeToMinutes(e.time)-this.timeToMinutes(i.time))}getCalendarData(t,a){const e=this.getWeekDates(t),i=new Map;return["8:00 AM","9:00 AM","10:00 AM","11:00 AM","12:00 PM","1:00 PM","2:00 PM","3:00 PM","4:00 PM","5:00 PM"].forEach(d=>{const s=new Map;e.forEach(o=>{const r=this.formatDate(o),c=this.getAppointments({doctorId:a,date:r}).filter(g=>this.getTimeSlot(g.time)===d);s.set(r,c)}),i.set(d,s)}),i}getTimeSlot(t){const[a,e]=t.split(" "),[i]=a.split(":");return`${i}:00 ${e}`}timeToMinutes(t){const[a,e]=t.split(" ");let[i,n]=a.split(":").map(Number);return e==="PM"&&i!==12&&(i+=12),e==="AM"&&i===12&&(i=0),i*60+n}getWeekDates(t){const a=[],e=new Date(t),i=e.getDay(),n=e.getDate()-i+(i===0?-6:1);e.setDate(n);for(let d=0;d<7;d++){const s=new Date(e);s.setDate(e.getDate()+d),a.push(s)}return a}formatDate(t){const a=t.getFullYear(),e=String(t.getMonth()+1).padStart(2,"0"),i=String(t.getDate()).padStart(2,"0");return`${a}-${e}-${i}`}saveAppointments(){try{localStorage.setItem("tshla_simple_appointments",JSON.stringify(this.appointments))}catch{I("simpleAppointment","Error message",{})}}loadAppointments(){try{const t=localStorage.getItem("tshla_simple_appointments");t&&(this.appointments=JSON.parse(t))}catch{I("simpleAppointment","Error message",{})}}clearAllAppointments(){this.appointments=[],this.saveAppointments(),h("simpleAppointment","Debug message",{})}async createAppointment(t){const a={id:`apt-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,...t,status:"scheduled",createdAt:new Date};if(!a.chartId){const e=await U.createChart(t.patientId,t.patientName,t.doctorId,t.doctorName);a.chartId=e.id}return this.appointments.push(a),this.saveAppointments(),await J.log("create","appointment",a.id,{patientName:t.patientName,doctorName:t.doctorName,date:t.date,time:t.time}),a}getAppointmentCount(t){return!t||t==="all"?this.appointments.length:this.appointments.filter(a=>a.doctorId===t).length}getDoctorColor(t){return{doc1:"bg-blue-100 text-blue-800 border-blue-200",doc2:"bg-purple-100 text-purple-800 border-purple-200",doc3:"bg-green-100 text-green-800 border-green-200",doc4:"bg-yellow-100 text-yellow-800 border-yellow-200",doc5:"bg-red-100 text-red-800 border-red-200",doc6:"bg-orange-100 text-orange-800 border-orange-200"}[t]||"bg-gray-100 text-gray-800 border-gray-200"}}const F=new z,K=()=>`${Date.now()}-${Math.random().toString(36).substr(2,9)}`,C=()=>q,q={query:async()=>(O("App","Warning message",{}),{rows:[]}),execute:async()=>(O("App","Warning message",{}),{rows:[]}),all:async()=>(O("App","Warning message",{}),[]),get:async()=>(O("App","Warning message",{}),null),run:async()=>(O("App","Warning message",{}),{changes:0,lastInsertRowid:0}),prepare:()=>({all:()=>[],get:()=>null,run:()=>({changes:0,lastInsertRowid:0})}),transaction:S=>S};class X{convertTo24HourSlot(t,a){const[e,i]=a.split(" ");let[n,d]=e.split(":");return n==="12"?n=i==="AM"?"00":"12":i==="PM"&&(n=String(parseInt(n,10)+12)),`${t} ${n.padStart(2,"0")}:${d}`}async getDoctorAppointments(t,a){const e=C(),i=a||new Date().toISOString().split("T")[0];try{return await e.query(`SELECT 
          a.*,
          d.first_name || ' ' || d.last_name as doctor_name,
          d.specialty as doctor_specialty
        FROM appointments a
        JOIN doctors d ON a.doctor_id = d.id
        WHERE a.doctor_id = $1 
          AND a.appointment_date = $2
          AND a.is_deleted = 0
        ORDER BY a.appointment_slot`,[t,i])}catch(n){throw I("appointment","Error message",{}),n}}async getPracticeAppointments(t,a){const e=C(),i=a||new Date().toISOString().split("T")[0];try{return await e.query(`SELECT 
          a.*,
          d.first_name || ' ' || d.last_name as doctor_name,
          d.specialty as doctor_specialty
        FROM appointments a
        JOIN doctors d ON a.doctor_id = d.id
        WHERE a.practice_id = $1 
          AND a.appointment_date = $2
          AND a.is_deleted = 0
        ORDER BY a.doctor_id, a.appointment_slot`,[t,i])}catch(n){throw I("appointment","Error message",{}),n}}async getPatientAppointments(t){const a=C();try{return await a.query(`SELECT 
          a.*,
          d.first_name || ' ' || d.last_name as doctor_name,
          d.specialty as doctor_specialty
        FROM appointments a
        JOIN doctors d ON a.doctor_id = d.id
        WHERE a.patient_id = $1 
          AND a.appointment_date >= DATE('now')
          AND a.is_deleted = 0
        ORDER BY a.appointment_slot
        LIMIT 10`,[t])}catch(e){throw I("appointment","Error message",{}),e}}async createAppointment(t,a,e){const i=C(),n=K(),d=this.convertTo24HourSlot(a.appointment_date,a.appointment_time);try{if((await i.query(`SELECT id FROM appointments 
        WHERE doctor_id = $1 
          AND appointment_slot = $2 
          AND is_deleted = 0`,[t,d])).length>0)throw new Error(`Time slot ${a.appointment_time} is already booked`);const o=await i.queryOne("SELECT practice_name FROM doctors WHERE id = $1",[t]),r={id:n,doctor_id:t,patient_id:a.patient_id||`patient-${K()}`,patient_name:a.patient_name,patient_mrn:a.patient_mrn,patient_phone:a.patient_phone,patient_email:a.patient_email,patient_dob:a.patient_dob,appointment_date:a.appointment_date,appointment_time:a.appointment_time,appointment_slot:d,duration_minutes:a.duration_minutes||30,status:"scheduled",visit_type:a.visit_type||"follow-up",chief_complaint:a.chief_complaint,notes:a.notes,practice_id:o?.practice_name,location:a.location,room_number:a.room_number,created_at:new Date().toISOString(),updated_at:new Date().toISOString(),created_by:t};return await i.execute(`INSERT INTO appointments (
          id, doctor_id, patient_id, patient_name, patient_mrn,
          patient_phone, patient_email, patient_dob,
          appointment_date, appointment_time, appointment_slot,
          duration_minutes, status, visit_type, chief_complaint,
          notes, practice_id, location, room_number,
          created_by
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20)`,[r.id,r.doctor_id,r.patient_id,r.patient_name,r.patient_mrn,r.patient_phone,r.patient_email,r.patient_dob,r.appointment_date,r.appointment_time,r.appointment_slot,r.duration_minutes,r.status,r.visit_type,r.chief_complaint,r.notes,r.practice_id,r.location,r.room_number,r.created_by]),await j.log({action:"CREATE_APPOINTMENT",userId:t,resourceType:"appointment",resourceId:n,details:{patient_name:a.patient_name,appointment_time:a.appointment_time,appointment_date:a.appointment_date}}),r}catch(s){throw I("appointment","Error message",{}),s}}async updateAppointment(t,a,e){const i=C();try{const n=await i.queryOne("SELECT * FROM appointments WHERE id = $1 AND is_deleted = 0",[t]);if(!n)throw new Error("Appointment not found");if(n.doctor_id!==a)throw new Error("Unauthorized to update this appointment");const d=[],s=[];let o=1;if(e.patient_name!==void 0&&(d.push(`patient_name = $${o++}`),s.push(e.patient_name)),e.patient_mrn!==void 0&&(d.push(`patient_mrn = $${o++}`),s.push(e.patient_mrn)),e.patient_phone!==void 0&&(d.push(`patient_phone = $${o++}`),s.push(e.patient_phone)),e.patient_email!==void 0&&(d.push(`patient_email = $${o++}`),s.push(e.patient_email)),e.patient_dob!==void 0&&(d.push(`patient_dob = $${o++}`),s.push(e.patient_dob)),e.appointment_time!==void 0&&e.appointment_date){const c=this.convertTo24HourSlot(e.appointment_date,e.appointment_time);if(c!==n.appointment_slot&&(await i.query(`SELECT id FROM appointments 
            WHERE doctor_id = $1 
              AND appointment_slot = $2 
              AND id != $3
              AND is_deleted = 0`,[a,c,t])).length>0)throw new Error(`Time slot ${e.appointment_time} is already booked`);d.push(`appointment_time = $${o++}`),s.push(e.appointment_time),d.push(`appointment_slot = $${o++}`),s.push(c)}e.appointment_date!==void 0&&(d.push(`appointment_date = $${o++}`),s.push(e.appointment_date)),e.chief_complaint!==void 0&&(d.push(`chief_complaint = $${o++}`),s.push(e.chief_complaint)),e.visit_type!==void 0&&(d.push(`visit_type = $${o++}`),s.push(e.visit_type)),e.notes!==void 0&&(d.push(`notes = $${o++}`),s.push(e.notes)),d.push(`updated_by = $${o++}`),s.push(a),d.push("updated_at = CURRENT_TIMESTAMP"),s.push(t),await i.execute(`UPDATE appointments 
        SET ${d.join(", ")}
        WHERE id = $${o}`,s);const r=await i.queryOne("SELECT * FROM appointments WHERE id = $1",[t]);return await j.log({action:"UPDATE_APPOINTMENT",userId:a,resourceType:"appointment",resourceId:t,details:{updates:e}}),r}catch(n){throw I("appointment","Error message",{}),n}}async updateStatus(t,a,e){const i=C();try{await i.execute(`UPDATE appointments 
        SET status = $1, updated_by = $2, updated_at = CURRENT_TIMESTAMP
        WHERE id = $3 AND doctor_id = $4`,[e,a,t,a]),await j.log({action:"UPDATE_APPOINTMENT_STATUS",userId:a,resourceType:"appointment",resourceId:t,details:{status:e}})}catch(n){throw I("appointment","Error message",{}),n}}async cancelAppointment(t,a,e){const i=C();try{await i.execute(`UPDATE appointments 
        SET status = 'cancelled', 
            is_deleted = 1, 
            deleted_at = CURRENT_TIMESTAMP,
            deleted_by = $1,
            notes = COALESCE(notes || ' | Cancellation: ' || $2, $2)
        WHERE id = $3 AND doctor_id = $4`,[a,e||"Cancelled by doctor",t,a]),await j.log({action:"CANCEL_APPOINTMENT",userId:a,resourceType:"appointment",resourceId:t,details:{reason:e}})}catch(n){throw I("appointment","Error message",{}),n}}async getAvailableSlots(t,a){const e=C(),i=[];for(let n=9;n<12;n++)i.push(`${n}:00 AM`),i.push(`${n}:30 AM`);i.push("12:00 PM","12:30 PM");for(let n=1;n<=5;n++)i.push(`${n}:00 PM`),i.push(`${n}:30 PM`);try{const d=(await e.query(`SELECT appointment_time FROM appointments 
        WHERE doctor_id = $1 
          AND appointment_date = $2 
          AND is_deleted = 0`,[t,a])).map(s=>s.appointment_time);return i.filter(s=>!d.includes(s))}catch{return I("appointment","Error message",{}),i}}async quickAddAppointment(t,a,e){return this.createAppointment(t,{patient_name:`Patient @ ${e}`,patient_mrn:`TBD-${Date.now().toString().slice(-6)}`,appointment_date:a,appointment_time:e,notes:"Placeholder - update patient details"})}async getDoctorStats(t,a){const e=C(),i=a||new Date().toISOString().split("T")[0];try{const n=await e.queryOne(`SELECT 
          COUNT(*) as total,
          SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
          SUM(CASE WHEN status = 'scheduled' THEN 1 ELSE 0 END) as scheduled,
          SUM(CASE WHEN status = 'cancelled' THEN 1 ELSE 0 END) as cancelled,
          SUM(CASE WHEN status = 'no-show' THEN 1 ELSE 0 END) as no_show
        FROM appointments
        WHERE doctor_id = $1 
          AND appointment_date = $2
          AND is_deleted = 0`,[t,i]);return{total:n.total||0,completed:n.completed||0,scheduled:n.scheduled||0,cancelled:n.cancelled||0,noShow:n.no_show||0}}catch{return I("appointment","Error message",{}),{total:0,completed:0,scheduled:0,cancelled:0,noShow:0}}}}const Z=new X;class Q{async parseScheduleWithAI(t){try{const a=t.trim().split(`
`),e=Math.min(10,a.length),i=a.slice(0,e).join(`
`);if(!(W&&typeof W.processWithAI=="function"))return h("aiScheduleParser","Debug message",{}),this.fallbackParse(t);const d=`Analyze this CSV/TSV data and identify what each column represents. Be flexible with variations and missing data.

Data sample:
${i}

Please respond in JSON format with:
{
  "columnMapping": {
    "0": "field_name",
    "1": "field_name",
    ...
  },
  "dateFormat": "MM/DD/YYYY or similar",
  "hasHeader": true/false,
  "delimiter": "tab" or "comma",
  "detectedFields": ["list", "of", "detected", "fields"],
  "confidence": 0.0-1.0
}

Common field types to look for:
- Appointment date (could be labeled as date, apptdate, appointment date, etc.)
- Appointment time (time, schedule time, appt time, apptstarttime, apptscheduletime, start time, etc.)
- Patient first name (first, firstname, patient firstname, fname, etc.)
- Patient last name (last, lastname, patient lastname, lname, etc.)
- Patient ID (id, mrn, patient id, patient number, medical record number, patientid)
- Date of birth (dob, birthdate, patient dob, birth date, patientdob)
- Email (email, patient email, e-mail, patient_email)
- Phone (phone, home phone, telephone, contact, patient homephone, patient_homephone)
- Mobile (mobile, cell, cell phone, patient mobile no, patient_mobile)
- Provider/Doctor name (provider, doctor, physician, prvdr, rendering provider, appt schdlng prvdrfullnme, prvdrfullnme)
- Provider code (provider code, prvdr code, doctor id)

Be intelligent about detecting:
- Names (typically contain letters, may have spaces/hyphens)
- Dates (formats like MM/DD/YYYY, DD-MM-YYYY, YYYY-MM-DD)
- IDs (typically numeric or alphanumeric codes)
- Phone numbers (various formats with parentheses, dashes, spaces)
- Emails (contains @ symbol)`,s=await W.processWithAI(d);let o={},r=!0,c="	",g=.8;try{const A=JSON.parse(s);o=A.columnMapping||{},r=A.hasHeader!==!1,c=A.delimiter==="comma"?",":"	",g=A.confidence||.8}catch{h("aiScheduleParser","Debug message",{}),o=this.detectColumnsIntelligently(a,c)}const p=r?1:0,D=[],_=[];h("aiScheduleParser","Debug message",{});for(let A=p;A<a.length;A++){const E=a[A].trim();if(!E)continue;const P=E.split(c).map(T=>T.trim()),R=await this.parseRowWithAI(P,o,A);if(R?D.push(R):_.push(`Could not parse row ${A+1}`),A>=p+100){h("aiScheduleParser","Debug message",{});const T=a.slice(A+1);h("aiScheduleParser","Debug message",{});const y=this.parseRemainingRowsWithPattern(T,o,c);D.push(...y),M("aiScheduleParser","Info message",{});break}}const f=this.generateSuggestions(D,_);return{appointments:D,columnMapping:o,detectedFormat:`${r?"With header":"No header"}, ${c===","?"Comma":"Tab"} delimited`,parseErrors:_,suggestions:f}}catch{return I("aiScheduleParser","Error message",{}),h("aiScheduleParser","Debug message",{}),this.fallbackParse(t)}}async parseRowWithAI(t,a,e){try{const n=`Extract appointment information from this row of data. Be flexible with formats and handle missing data gracefully.

${t.map((s,o)=>{const r=Object.entries(a).find(([c,g])=>g===o)?.[0];return`Column ${o} (${r||"unknown"}): "${s}"`}).join(`
`)}

Return JSON with these fields (use null for missing data):
{
  "date": "appointment date in MM/DD/YYYY format",
  "time": "appointment time - CRITICAL: Extract the actual appointment time value (e.g., '09:00 AM', '05:00 PM'). Look for columns labeled: apptstarttime, apptscheduletime, time, appointment_time, start_time, etc. The time should be in format like '09:00 AM' or '2:30 PM'",
  "patientFirstName": "patient's first name",
  "patientLastName": "patient's last name",
  "patientId": "patient ID or MRN",
  "patientDob": "patient date of birth",
  "patientEmail": "email address",
  "patientPhone": "phone number",
  "patientMobile": "mobile number",
  "providerName": "doctor/provider FULL name exactly as shown",
  "providerCode": "provider code if available",
  "confidence": 0.0-1.0
}

CRITICAL for provider identification:
- Look for columns with names like: rndrng_prvdr, appt_schdlng_prvdrfullnme, provider, doctor
- Provider names may be in formats like:
  * "LASTNAME, FIRSTNAME" (e.g., "CHAMAKKALA, TESS")
  * "GC_EPC_Lastname_F" (e.g., "GC_EPC_Chamakkala_T")
  * "FIRSTNAME LASTNAME" (e.g., "Tess Chamakkala")
  * Specialty names like "IDEAL PROTEIN COACH," or "CGMS KATY,"
- ALWAYS extract the FULL provider name/code exactly as shown
- If you see names like ADELEKE, BERNANDER, CHAMAKKALA, GREGOREK, LAVERDE, PATEL, SHAKYA, TONYE, WATWE, YOUNUS - these are provider last names
- Patient names are usually in separate first/last name columns
- Provider is the DOCTOR, not the patient`,d=await W.processWithAI(n);try{const s=JSON.parse(d);return{...s,confidence:s.confidence||.7}}catch{return this.parseRowWithPatterns(t,a)}}catch{return I("aiScheduleParser","Error message",{}),this.parseRowWithPatterns(t,a)}}parseRowWithPatterns(t,a){const e={confidence:.5};t.forEach((n,d)=>{n.match(/^\d{1,2}[\/\-]\d{1,2}[\/\-]\d{2,4}$/)&&(!e.date&&n.includes("/")?e.date=n:e.patientDob||(e.patientDob=n)),n.match(/^\d{1,2}:\d{2}\s*(AM|PM|am|pm)?$/i)&&(e.time=n),n.includes("@")&&n.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)&&(e.patientEmail=n),n.match(/^[\d\s\-\(\)\.]+$/)&&n.replace(/\D/g,"").length>=10&&(e.patientPhone?e.patientMobile=n:e.patientPhone=n),n.match(/^[A-Z0-9]{6,}$/i)&&!n.includes("@")&&(e.patientId=n),(n.match(/^GC_EPC_/i)||n.match(/^[A-Z]{2,}_[A-Z]{2,}/))&&(e.providerCode=n)});const i=t.filter(n=>n.match(/^[A-Za-z\s\-']+$/)&&n.length>1&&!n.match(/^(AM|PM|Dr|MD|DO|NP|PA)$/i));return i.length>=2&&(e.patientFirstName=i[0],e.patientLastName=i[1]),e}parseRemainingRowsWithPattern(t,a,e){const i=[];for(const n of t){if(!n.trim())continue;const d=n.split(e).map(r=>r.trim()),s=this.parseRowWithPatterns(d,a);s&&s.date&&s.time&&((!s.patientFirstName||s.patientFirstName==="-")&&(s.patientFirstName="Available"),(!s.patientLastName||s.patientLastName==="-")&&(s.patientLastName="Slot"),(!s.patientId||s.patientId==="-")&&(s.patientId=`slot-${Date.now()}-${Math.random().toString(36).substr(2,9)}`),i.push(s))}return i}detectColumnsIntelligently(t,a){const e=t.slice(1,Math.min(6,t.length)),i={};return e.length===0?this.detectColumnsHeuristically(t[0],a):(e[0].split(a).forEach((d,s)=>{const o=e.map(r=>{const c=r.split(a);return c[s]?c[s].trim():""}).filter(r=>r);!o.length||s===0&&o.every(r=>r.match(/^\d{1,3}$/))||(o.every(r=>r&&r.match(/^\d{1,2}\/\d{1,2}\/\d{4}$/))?parseInt(o[0].split("/")[2])>=2024?i.appointment_date=s:i.dob=s:o.every(r=>r&&r.match(/^\d{1,2}:\d{2}\s*(AM|PM)$/i))?i.appointment_time=s:o.every(r=>r&&r.includes(",")&&r.match(/^[A-Z]+,\s*[A-Z]/))?i.provider=s:o.every(r=>r.match(/^\d{7,9}$/))?i.patient_id=s:o.some(r=>r.includes("@")&&r.includes("."))?i.email=s:o.some(r=>{const c=r.replace(/\D/g,"");return c.length===10||c.length>=10&&r.includes("(")})?i.phone?i.mobile||(i.mobile=s):i.phone=s:o.every(r=>r.match(/^[A-Za-z\s\-'\.]+$/))&&(o.some(c=>c.includes(","))||(i.first_name?i.last_name||(i.last_name=s):i.first_name=s)))}),i)}detectColumnsHeuristically(t,a){const e=t.split(a).map(n=>n.trim().toLowerCase()),i={};return e.forEach((n,d)=>{n.includes("date")&&!n.includes("birth")?i.appointment_date=d:n.includes("time")||n.includes("apptstarttime")||n.includes("apptscheduletime")?i.appointment_time=d:n.includes("first")?i.first_name=d:n.includes("last")?i.last_name=d:n.includes("id")||n.includes("mrn")||n.includes("patientid")?i.patient_id=d:n.includes("dob")||n.includes("birth")?i.dob=d:n.includes("email")?i.email=d:(n.includes("phone")||n.includes("homephone"))&&!n.includes("mobile")?i.phone=d:n.includes("mobile")||n.includes("cell")||n.includes("mobileno")?i.mobile=d:(n.includes("prvdr")||n.includes("provider")||n.includes("doctor")||n.includes("prvdrfullnme"))&&(i.provider=d)}),i}fallbackParse(t){const a=t.trim().split(`
`),e=a[0].includes("	")?"	":",",i=a.length>1?this.detectColumnsIntelligently(a,e):this.detectColumnsHeuristically(a[0],e);h("aiScheduleParser","Debug message",{});const n=[],d=[];for(let s=1;s<a.length;s++){const o=a[s].trim();if(!o)continue;const r=o.split(e).map(p=>p.trim()),c=this.parseRowWithPatterns(r,i);c&&c.date&&c.time?((!c.patientFirstName||c.patientFirstName==="-")&&(c.patientFirstName="Available"),(!c.patientLastName||c.patientLastName==="-")&&(c.patientLastName="Slot"),(!c.patientId||c.patientId==="-")&&(c.patientId=`slot-${Date.now()}-${Math.random().toString(36).substr(2,9)}`),n.push(c)):d.push(`Could not parse row ${s+1}`)}return{appointments:n,columnMapping:i,detectedFormat:"Fallback parsing",parseErrors:d,suggestions:["Consider using a more standard CSV format for better results"]}}generateSuggestions(t,a){const e=[],i=t.filter(o=>!o.date).length,n=t.filter(o=>!o.patientLastName).length,d=t.filter(o=>!o.patientId).length;return i>0&&e.push(`${i} appointments are missing dates`),n>0&&e.push(`${n} appointments are missing patient names`),d>0&&e.push(`${d} appointments are missing patient IDs`),a.length>10&&e.push("Many parsing errors detected - consider checking data format"),t.filter(o=>o.confidence<.6).length>t.length*.3&&e.push("Low confidence in parsing - data may need manual review"),e}}const ee=new Q,$={GC_EPC_Adeleke_A:{email:"adeleke@tshla.ai",name:"Dr. Adenike Adeleke",id:"doc_adeleke"},GC_EPC_Chamakkala_T:{email:"tess@tshla.ai",name:"Dr. Tess Chamakkala",id:"doc_tess"},GC_EPC_Shakya_E:{email:"elina@tshla.ai",name:"Dr. Elina Shakya",id:"doc_elina"},GC_EPC_Watwe_V:{email:"veena@tshla.ai",name:"Dr. Veena Watwe",id:"doc_veena"},GC_EPC_Bernander_R:{email:"radha@tshla.ai",name:"Dr. Radha Bernander",id:"doc_radha"},GC_EPC_Laverde_V:{email:"vanessa@tshla.ai",name:"Dr. Cindy Laverde",id:"doc_vanessa"},GC_EPC_Laverde_C:{email:"vanessa@tshla.ai",name:"Dr. Cindy Laverde",id:"doc_vanessa"},GC_EPC_Tonye_G:{email:"ghislaine@tshla.ai",name:"Dr. Ghislaine Tonye",id:"doc_ghislaine"},GC_EPC_Gregorek_S:{email:"shannon@tshla.ai",name:"Dr. Shannon Gregorek",id:"doc_shannon"},GC_EPC_Gregroek_S:{email:"shannon@tshla.ai",name:"Dr. Shannon Gregorek",id:"doc_shannon"},"ADELEKE, ADENIKE":{email:"adeleke@tshla.ai",name:"Dr. Adenike Adeleke",id:"doc_adeleke"},"BERNANDER, RADHA":{email:"radha@tshla.ai",name:"Dr. Radha Bernander",id:"doc_radha"},"CHAMAKKALA, TESS":{email:"tess@tshla.ai",name:"Dr. Tess Chamakkala",id:"doc_tess"},"GREGOREK, SHANNON":{email:"shannon@tshla.ai",name:"Dr. Shannon Gregorek",id:"doc_shannon"},"LAVERDE, CINDY":{email:"vanessa@tshla.ai",name:"Dr. Cindy Laverde",id:"doc_vanessa"},"PATEL, NEHA":{email:"neha@tshla.ai",name:"Dr. Neha Patel",id:"doc_neha"},"PATEL, RAKESH":{email:"rakesh.patel@tshla.ai",name:"Dr. Rakesh Patel",id:"doc_rakesh_patel"},"PATEL-KONASAGAR, KRUTI":{email:"kruti@tshla.ai",name:"Dr. Kruti Patel-Konasagar",id:"doc_kruti"},"RAGHU, PREEYA":{email:"preeya@tshla.ai",name:"Dr. Preeya Raghu",id:"doc_preeya"},"SHAKYA, ELINA":{email:"elina@tshla.ai",name:"Dr. Elina Shakya",id:"doc_elina"},"SUBAWALLA, DILNAVAZ":{email:"dilnavaz@tshla.ai",name:"Dr. Dilnavaz Subawalla",id:"doc_dilnavaz"},"TONYE, GHISLAINE":{email:"ghislaine@tshla.ai",name:"Dr. Ghislaine Tonye",id:"doc_ghislaine"},"WADE-REESCANO, KAMILI":{email:"kamili@tshla.ai",name:"Dr. Kamili Wade-Reescano",id:"doc_kamili"},"WATWE, VEENA":{email:"veena@tshla.ai",name:"Dr. Veena Watwe",id:"doc_veena"},"YOUNUS, NADIA":{email:"nadia@tshla.ai",name:"Dr. Nadia Younus",id:"doc_nadia"},"LEAL, ELIZABETH":{email:"elizabeth@tshla.ai",name:"Dr. Elizabeth Leal",id:"doc_elizabeth"},"NEBEOLISA, OGECHI":{email:"ogechi@tshla.ai",name:"Dr. Ogechi Nebeolisa",id:"doc_ogechi"},ADELEKE:{email:"adeleke@tshla.ai",name:"Dr. Adenike Adeleke",id:"doc_adeleke"},ADENIKE:{email:"adeleke@tshla.ai",name:"Dr. Adenike Adeleke",id:"doc_adeleke"},BERNANDER:{email:"radha@tshla.ai",name:"Dr. Radha Bernander",id:"doc_radha"},CHAMAKKALA:{email:"tess@tshla.ai",name:"Dr. Tess Chamakkala",id:"doc_tess"},GREGOREK:{email:"shannon@tshla.ai",name:"Dr. Shannon Gregorek",id:"doc_shannon"},SHANNON:{email:"shannon@tshla.ai",name:"Dr. Shannon Gregorek",id:"doc_shannon"},LAVERDE:{email:"vanessa@tshla.ai",name:"Dr. Cindy Laverde",id:"doc_vanessa"},PATEL:{email:"neha@tshla.ai",name:"Dr. Neha Patel",id:"doc_neha"},RAKESH:{email:"rakesh.patel@tshla.ai",name:"Dr. Rakesh Patel",id:"doc_rakesh_patel"},"RAKESH PATEL":{email:"rakesh.patel@tshla.ai",name:"Dr. Rakesh Patel",id:"doc_rakesh_patel"},"DR RAKESH PATEL":{email:"rakesh.patel@tshla.ai",name:"Dr. Rakesh Patel",id:"doc_rakesh_patel"},SHAKYA:{email:"elina@tshla.ai",name:"Dr. Elina Shakya",id:"doc_elina"},TONYE:{email:"ghislaine@tshla.ai",name:"Dr. Ghislaine Tonye",id:"doc_ghislaine"},WATWE:{email:"veena@tshla.ai",name:"Dr. Veena Watwe",id:"doc_veena"},YOUNUS:{email:"nadia@tshla.ai",name:"Dr. Nadia Younus",id:"doc_nadia"},LEAL:{email:"elizabeth@tshla.ai",name:"Dr. Elizabeth Leal",id:"doc_elizabeth"},NEBEOLISA:{email:"ogechi@tshla.ai",name:"Dr. Ogechi Nebeolisa",id:"doc_ogechi"},SUBAWALLA:{email:"dilnavaz@tshla.ai",name:"Dr. Dilnavaz Subawalla",id:"doc_dilnavaz"},RAGHU:{email:"preeya@tshla.ai",name:"Dr. Preeya Raghu",id:"doc_preeya"},"WADE-REESCANO":{email:"kamili@tshla.ai",name:"Dr. Kamili Wade-Reescano",id:"doc_kamili"},KAMILI:{email:"kamili@tshla.ai",name:"Dr. Kamili Wade-Reescano",id:"doc_kamili"},"IDEAL PROTEIN COACH,":{email:"coach@tshla.ai",name:"Ideal Protein Coach",id:"doc_coach"},"IDEAL PROTEIN COACH":{email:"coach@tshla.ai",name:"Ideal Protein Coach",id:"doc_coach"},"EPCTHRIVE,":{email:"epcthrive@tshla.ai",name:"EPCThrive",id:"doc_epcthrive"},EPCTHRIVE:{email:"epcthrive@tshla.ai",name:"EPCThrive",id:"doc_epcthrive"},"CGMS KATY,":{email:"cgms@tshla.ai",name:"CGMS Katy",id:"doc_cgms"},"CGMS KATY":{email:"cgms@tshla.ai",name:"CGMS Katy",id:"doc_cgms"}};class te{parseScheduleFile(t){const a=t.trim().split(`
`),e=[];if(a.length<2)return e;const i=a[0],n=i.includes("	")?"	":",",d=i.split(n).map(o=>o.trim().toLowerCase().replace(/\s+/g,"")),s={};d.forEach((o,r)=>{(o.includes("apptdate")||o.includes("appointmentdate")||o==="date"&&!o.includes("birth"))&&(s.apptdate=r),(o.includes("firstname")||o==="patientfirstname"||o==="first")&&(s.firstname=r),(o.includes("lastname")||o==="patientlastname"||o==="last")&&(s.lastname=r),(o.includes("patientid")||o==="id"||o==="mrn"||o==="patientnumber")&&(s.patientid=r),(o.includes("dob")||o.includes("dateofbirth")||o.includes("patientdob")||o.includes("birthdate"))&&(s.dob=r),(o.includes("email")||o.includes("patientemail"))&&(s.email=r),(o.includes("phone")||o.includes("homephone")||o.includes("patienthomephone"))&&(s.phone=r),(o.includes("mobile")||o.includes("cell")||o.includes("patientmobile"))&&(s.mobile=r),(o.includes("prvdr")||o.includes("provider")||o.includes("rndrng")||o.includes("schdlng")||o.includes("doctor")||o.includes("physician"))&&(s.provider=r),(o.includes("time")||o.includes("apptscheduletime")||o.includes("appointmenttime")||o.includes("scheduletime"))&&(s.time=r)}),h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{});for(let o=1;o<a.length;o++){const r=a[o].trim();if(!r)continue;const c=r.split(n).map(_=>_.trim());if(c.length<5)continue;const g={apptdate:s.apptdate!==void 0?c[s.apptdate]:"",patient_firstname:s.firstname!==void 0?c[s.firstname]:"",patient_lastname:s.lastname!==void 0?c[s.lastname]:"",patientid:s.patientid!==void 0?c[s.patientid]:"",patientdob:s.dob!==void 0?c[s.dob]:"",patient_email:s.email!==void 0?c[s.email]==="No Email"?"":c[s.email]:"",patient_homephone:s.phone!==void 0?c[s.phone]:"",patient_mobile:s.mobile!==void 0?c[s.mobile]:"",rndrng_prvdr:s.provider!==void 0?c[s.provider]:"",appt_schdlng_prvdrfullnme:s.provider!==void 0?c[s.provider]:"",apptscheduletime:s.time!==void 0?c[s.time]:""};o<=3&&(h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{}));const p=g.apptdate&&g.apptdate!=="-",D=g.rndrng_prvdr&&g.rndrng_prvdr!=="-"||g.appt_schdlng_prvdrfullnme&&g.appt_schdlng_prvdrfullnme!=="-";p&&D&&((g.patient_firstname==="-"||!g.patient_firstname)&&(g.patient_firstname="Available"),(g.patient_lastname==="-"||!g.patient_lastname)&&(g.patient_lastname="Slot"),(g.patientid==="-"||!g.patientid)&&(g.patientid=`slot-${o}-${Date.now()}`),e.push(g))}return e}formatDate(t){const a=t.split("/");if(a.length!==3)return t;const[e,i,n]=a;return`${n}-${e.padStart(2,"0")}-${i.padStart(2,"0")}`}formatTimeSlot(t,a,e){if(t&&t.includes(":")){const _=t.trim();if(_.match(/^\d{1,2}:\d{2}\s*(AM|PM)$/i))return _.toUpperCase()}const i=9,s=(17-i)*60/e,o=a*s,r=Math.floor(o/60)+i,c=Math.floor(o%60),g=r>=12?"PM":"AM",p=r>12?r-12:r,D=c===0?"00":c<10?`0${c}`:c;return`${p}:${D} ${g}`}async importAppointmentsWithAI(t,a,e=!1){const i=[],n=[];let d=0;try{h("scheduleImport","Debug message",{});const s=t.trim().split(`
`);h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{}),e?(F.clearAllAppointments(),M("scheduleImport","Info message",{})):h("scheduleImport","Debug message",{});const o=await ee.parseScheduleWithAI(t);if(o.appointments.length===0)return{success:!1,imported:0,failed:0,errors:["No valid appointments found in file. "+o.suggestions.join("; ")]};h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{});const r=new Set,c={count:0};let g=0;h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{});for(const p of o.appointments){g++;const D=p.date||"no-date",_=p.time||"no-time",f=this.normalizeTime(_)||_,A=p.patientFirstName||"",E=p.patientLastName||"",P=p.patientId||"",R=p.providerName||p.providerCode||"unknown",T=`${P||A+E}|${R}|${D}|${f}`.toLowerCase().trim();if(g<=5&&(h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{})),r.has(T)){c.count++,c.count<=5&&h("scheduleImport","Debug message",{});continue}r.add(T),g%100===0&&h("scheduleImport","Debug message",{});try{let y=null;if(p.providerName||p.providerCode){const u=p.providerCode||p.providerName||"";g<=3&&(h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{}));const w=Object.entries($).find(([v])=>v.toUpperCase()===u.toUpperCase());if(w&&(y=w[1],g<=3&&M("scheduleImport","Info message",{})),!y&&u){const v=u.replace(/[,\s]+$/,"").trim(),N=Object.entries($).find(([b])=>b.toUpperCase()===v.toUpperCase());N&&(y=N[1],M("scheduleImport","Info message",{}))}if(!y&&u){const v=u.split(",")[0].trim().toUpperCase(),N=Object.entries($).find(([b])=>b.split(",")[0].trim().toUpperCase()===v||b.toUpperCase()===v);N&&(y=N[1],M("scheduleImport","Info message",{}))}if(!y&&u){const v=Object.entries($).find(([N])=>{const b=N.toUpperCase(),x=u.toUpperCase();return b.includes(x)||x.includes(b)});v&&(y=v[1],M("scheduleImport","Info message",{}))}}if(!y){const u=[{email:"tess@tshla.ai",name:"Dr. Tess Chamakkala",id:"doc_tess"},{email:"elina@tshla.ai",name:"Dr. Elina Shakya",id:"doc_elina"},{email:"veena@tshla.ai",name:"Dr. Veena Watwe",id:"doc_veena"},{email:"radha@tshla.ai",name:"Dr. Radha Bernander",id:"doc_radha"},{email:"shannon@tshla.ai",name:"Dr. Shannon Gregorek",id:"doc_shannon"},{email:"adeleke@tshla.ai",name:"Dr. Adenike Adeleke",id:"doc_adeleke"},{email:"rakesh.patel@tshla.ai",name:"Dr. Rakesh Patel",id:"doc_rakesh_patel"}],w=n.length%u.length;y=u[w],h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{}),i.find(v=>v.includes(`Unmatched provider: ${p.providerName||p.providerCode}`))||i.push(`Info: Unmatched provider: "${p.providerName||p.providerCode}" - please add to mapping`)}const k=p.date?this.formatDate(p.date):"",m=p.patientDob?this.formatDate(p.patientDob):"";await F.createAppointment({patientId:p.patientId||`auto-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,patientName:`${p.patientFirstName||""} ${p.patientLastName||""}`.trim()||"Unknown Patient",patientPhone:p.patientPhone||p.patientMobile||"",patientEmail:p.patientEmail||"",doctorId:y.id,doctorName:y.name,date:k,time:this.normalizeTime(p.time)||this.generateTimeSlot(n.length),duration:30,visitType:p.visitType||"follow-up",visitReason:"Scheduled Visit",notes:`Imported with ${Math.round(p.confidence*100)}% confidence. Provider: ${p.providerName||p.providerCode||"Unknown"}`}),n.push({id:`import-${Date.now()}-${n.length}`,patient_name:`${p.patientFirstName||""} ${p.patientLastName||""}`.trim(),doctor_name:y.name,appointment_date:k,appointment_time:p.time||"TBD",confidence:p.confidence})}catch(y){const k=y instanceof Error?y.message:"Unknown error";i.push(`Failed to import appointment: ${k}`),d++}}return o.suggestions.length>0&&i.push(...o.suggestions.map(p=>`Suggestion: ${p}`)),h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{}),c.count>0&&i.push(`Info: Skipped ${c.count} duplicate appointments`),{success:n.length>0,imported:n.length,failed:d,duplicates:c.count,errors:i,appointments:n}}catch{return I("scheduleImport","Error message",{}),this.importAppointments(t,a)}}normalizeTime(t){if(!t)return null;const a=t.trim();if(a.match(/^\d{1,2}:\d{2}\s*(AM|PM)$/i))return a.toUpperCase();if(a.match(/^\d+:\d{2}$/)){const[e,i]=a.split(":");let n=parseInt(e);const d=parseInt(i);n>=24&&(n=9+n%8);const s=n>=12?"PM":"AM";return`${n>12?n-12:n===0?12:n}:${d.toString().padStart(2,"0")} ${s}`}if(a.match(/^\d{1,2}:\d{2}$/)){const[e,i]=a.split(":"),n=parseInt(e),d=parseInt(i);if(n>=0&&n<24&&d>=0&&d<60){const s=n>=12?"PM":"AM";return`${n>12?n-12:n===0?12:n}:${d.toString().padStart(2,"0")} ${s}`}}return null}generateTimeSlot(t){const d=t%16*30,s=Math.floor(d/60)+9,o=d%60,r=s>=12?"PM":"AM";return`${s>12?s-12:s===0?12:s}:${o.toString().padStart(2,"0")} ${r}`}async importAppointments(t,a){const e=[],i=[];let n=0;try{const d=this.parseScheduleFile(t);if(d.length===0)return{success:!1,imported:0,failed:0,errors:["No valid appointments found in file"]};h("scheduleImport","Debug message",{}),h("scheduleImport","Debug message",{});const s=new Map;for(const o of d){const r=o.rndrng_prvdr||o.appt_schdlng_prvdrfullnme||"unknown",c=`${o.apptdate}_${r}`;s.has(c)||s.set(c,[]),s.get(c).push(o)}for(const[o,r]of s){const c=o.split("_"),g=c[0],p=c.slice(1).join("_");let D=$[p];if(!D&&r[0]?.appt_schdlng_prvdrfullnme){const _=r[0].appt_schdlng_prvdrfullnme.trim();D=$[_]}if(!D&&p&&p!=="unknown"){for(const[_,f]of Object.entries($))if(_.toLowerCase().includes(p.toLowerCase())||p.toLowerCase().includes(_.toLowerCase())){D=f;break}}if(!(!D&&(p&&p.trim()&&p!=="unknown"?(e.push(`Unknown provider: ${p} (first patient: ${r[0]?.patient_firstname} ${r[0]?.patient_lastname})`),n+=r.length):(D={email:"tess@tshla.ai",name:"Dr. Tess Chamakkala",id:"doc_tess"},h("scheduleImport","Debug message",{})),!D)))for(let _=0;_<r.length;_++){const f=r[_];try{const A={patient_name:`${f.patient_firstname} ${f.patient_lastname}`.trim(),patient_mrn:f.patientid,patient_id:f.patientid,patient_phone:f.patient_homephone,patient_email:f.patient_email,patient_dob:this.formatDate(f.patientdob),appointment_date:this.formatDate(f.apptdate),appointment_time:this.formatTimeSlot(f.apptscheduletime,_,r.length),duration_minutes:30,visit_type:"follow-up",location:"Main Clinic"};let E;try{E=await Z.createAppointment(D.id,A,a)}catch{h("scheduleImport","Debug message",{})}await F.createAppointment({patientId:f.patientid,patientName:`${f.patient_firstname} ${f.patient_lastname}`.trim(),patientPhone:f.patient_homephone,patientEmail:f.patient_email,doctorId:D.id,doctorName:D.name,date:this.formatDate(f.apptdate),time:this.formatTimeSlot(f.apptscheduletime,_,r.length),duration:30,visitType:"follow-up",visitReason:"Scheduled Visit",notes:`Imported from schedule - Provider: ${p}`}),i.push({id:`import-${Date.now()}-${_}`,patient_name:`${f.patient_firstname} ${f.patient_lastname}`.trim(),doctor_name:D.name,appointment_date:this.formatDate(f.apptdate),appointment_time:this.formatTimeSlot(f.apptscheduletime,_,r.length)})}catch(A){const E=A instanceof Error?A.message:"Unknown error";e.push(`Failed to import ${f.patient_firstname} ${f.patient_lastname}: ${E}`),n++}}}return{success:i.length>0,imported:i.length,failed:n,duplicates:duplicateCount.count,errors:e,appointments:i}}catch(d){return{success:!1,imported:0,failed:appointments.length,errors:[d instanceof Error?d.message:"Failed to import appointments"]}}}validateFile(t){if(!t||t.trim().length===0)return{valid:!1,error:"File is empty"};const a=t.trim().split(`
`);if(a.length<2)return{valid:!1,error:"File must contain header and at least one appointment"};const e=a[0].toLowerCase().replace(/\s+/g,"").replace(/_/g,"");h("scheduleImport","Debug message",{});const i=e.includes("apptdate")||e.includes("appointmentdate")||e.includes("date"),n=e.includes("firstname")||e.includes("first")||e.includes("fname")||e.includes("patientfirstname"),d=e.includes("lastname")||e.includes("last")||e.includes("lname")||e.includes("patientlastname"),s=n&&d,o=e.includes("patientid")||e.includes("id")||e.includes("mrn")||e.includes("patientnumber")||e.includes("patientno");return h("scheduleImport","Debug message",{}),!i||!s||!o?{valid:!1,error:`Missing required fields. File must contain: appointment date (found: ${i}), patient name first/last (found: ${s}), and patient ID (found: ${o}). Header detected: "${a[0].substring(0,100)}..."`}:{valid:!0}}getProviderMapping(){return $}getSampleFormat(){return`SUPPORTED FORMATS:

FORMAT 1 (Tab or Comma Separated):
apptdate,patient firstname,patientid,patient lastname,patientdob,patient email,patient homephone,rndrng prvdr,apptscheduletime
09/09/2025,JOHN,12345678,DOE,01/15/1980,john.doe@email.com,(713) 555-0100,GC_EPC_Chamakkala_T,10:30 AM
09/09/2025,JANE,87654321,SMITH,05/20/1975,jane.smith@email.com,(713) 555-0200,GC_EPC_Watwe_V,11:00 AM

FORMAT 2 (Tab or Comma Separated):
apptdate,appt schdlng prvdrfullnme,patientdob,patient firstname,patient lastname,patientid,patient email,patient homephone,patient mobile no
09/09/2025,CHAMAKKALA TESS,01/15/1980,JOHN,DOE,12345678,john.doe@email.com,(713) 555-0100,(713) 555-0101
09/09/2025,WATWE VEENA,05/20/1975,JANE,SMITH,87654321,jane.smith@email.com,(713) 555-0200,(713) 555-0201

NOTES:
- Headers can have spaces (e.g., "patient firstname" or "patientfirstname")
- Tab or comma delimited both work
- Provider can be code (GC_EPC_xxx) or name (LASTNAME, FIRSTNAME)
- Required fields: date, patient name (first & last), patient ID`}}const H=new te;function ne({isOpen:S,onClose:t,onImportComplete:a}){const[e,i]=L.useState(""),[n,d]=L.useState(!1),[s,o]=L.useState(!1),[r,c]=L.useState(null),[g,p]=L.useState(!1),[D,_]=L.useState(!1);if(!S)return null;const f=m=>{const u=m.target.files?.[0];if(u){const w=new FileReader;w.onload=v=>{const N=v.target?.result;i(N)},w.readAsText(u)}},A=m=>{m.preventDefault(),d(!0)},E=m=>{m.preventDefault(),d(!1)},P=m=>{m.preventDefault(),d(!1);const u=m.dataTransfer.files[0];if(u){const w=new FileReader;w.onload=v=>{const N=v.target?.result;i(N)},w.readAsText(u)}},R=m=>{m.preventDefault();const u=m.clipboardData.getData("text");M("ScheduleImportModal",`Pasted ${u.split(`
`).length} lines of data`),i(u)},T=async()=>{if(!e){alert("Please upload or paste schedule data");return}o(!0),c(null);try{const m=G.getCurrentUser();h("ScheduleImportModal","Debug message",{});const u=await H.importAppointmentsWithAI(e,m?.email||"system",D);c(u),u.success&&setTimeout(()=>{a(),y()},3e3)}catch(m){I("ScheduleImportModal","Error message",{});try{h("ScheduleImportModal","Debug message",{});const u=await H.importAppointments(e,G.getCurrentUser()?.email||"system");c(u),u.success&&setTimeout(()=>{a(),y()},3e3)}catch{c({success:!1,imported:0,failed:0,errors:[m instanceof Error?m.message:"Import failed"]})}}finally{o(!1)}},y=()=>{i(""),c(null),p(!1),t()},k=H.getProviderMapping();return l.jsx("div",{className:"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50",children:l.jsxs("div",{className:"bg-white rounded-lg p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto",children:[l.jsxs("div",{className:"flex justify-between items-center mb-4",children:[l.jsx("h2",{className:"text-2xl font-bold",children:"Import Schedule"}),l.jsx("button",{onClick:y,className:"text-gray-500 hover:text-gray-700",children:"✕"})]}),r&&l.jsxs("div",{className:`mb-4 p-4 rounded-lg ${r.success?"bg-green-50 border border-green-200":"bg-red-50 border border-red-200"}`,children:[l.jsx("h3",{className:`font-semibold mb-2 ${r.success?"text-green-800":"text-red-800"}`,children:r.success?"✓ Import Successful":"✗ Import Failed"}),l.jsxs("div",{className:"text-sm",children:[l.jsxs("p",{className:"font-medium text-green-700 mb-2",children:["Imported: ",r.imported," appointments"]}),r.appointments&&r.appointments.length>0&&l.jsxs("div",{className:"bg-white rounded border border-green-200 p-3 mb-2",children:[l.jsx("h4",{className:"font-semibold text-gray-700 mb-2",children:"✅ Successfully Imported:"}),l.jsx("div",{className:"max-h-64 overflow-y-auto",children:l.jsxs("table",{className:"w-full text-xs",children:[l.jsx("thead",{className:"bg-gray-50 sticky top-0",children:l.jsxs("tr",{children:[l.jsx("th",{className:"px-2 py-1 text-left border-b",children:"Date"}),l.jsx("th",{className:"px-2 py-1 text-left border-b",children:"Time"}),l.jsx("th",{className:"px-2 py-1 text-left border-b",children:"Patient"}),l.jsx("th",{className:"px-2 py-1 text-left border-b",children:"ID"}),l.jsx("th",{className:"px-2 py-1 text-left border-b",children:"Provider"})]})}),l.jsxs("tbody",{children:[r.appointments.slice(0,20).map((m,u)=>l.jsxs("tr",{className:"border-t hover:bg-gray-50",children:[l.jsx("td",{className:"px-2 py-1",children:m.date}),l.jsx("td",{className:"px-2 py-1 font-medium",children:m.time}),l.jsx("td",{className:"px-2 py-1",children:m.patientName}),l.jsx("td",{className:"px-2 py-1 text-gray-500",children:m.patientId}),l.jsx("td",{className:"px-2 py-1",children:m.doctorName||m.provider})]},u)),r.appointments.length>20&&l.jsx("tr",{children:l.jsxs("td",{colSpan:5,className:"px-2 py-2 text-center text-gray-500 font-medium",children:["✅ Plus ",r.appointments.length-20," more appointments imported successfully"]})})]})]})}),l.jsxs("div",{className:"mt-3 pt-3 border-t",children:[l.jsx("h5",{className:"font-medium text-gray-600 mb-1",children:"Summary by Provider:"}),l.jsx("div",{className:"text-xs space-y-1",children:Object.entries(r.appointments.reduce((m,u)=>{const w=u.doctorName||u.provider||"Unknown";return m[w]=(m[w]||0)+1,m},{})).map(([m,u])=>l.jsxs("div",{className:"flex justify-between",children:[l.jsxs("span",{children:[m,":"]}),l.jsxs("span",{className:"font-medium",children:[u," appointments"]})]},m))})]})]}),r.failed>0&&l.jsxs("p",{className:"text-red-600",children:["Failed: ",r.failed," appointments"]}),r.duplicates>0&&l.jsxs("p",{className:"text-yellow-600",children:["⚠️ Skipped ",r.duplicates," duplicate appointments"]}),r.errors?.length>0&&l.jsxs("div",{className:"mt-2",children:[l.jsx("p",{className:"font-medium",children:"Errors:"}),l.jsxs("ul",{className:"list-disc list-inside text-red-600",children:[r.errors.slice(0,5).map((m,u)=>l.jsx("li",{children:m},u)),r.errors.length>5&&l.jsxs("li",{children:["... and ",r.errors.length-5," more"]})]})]})]})]}),l.jsxs("div",{className:"mb-4",children:[l.jsx("label",{className:"block text-sm font-medium text-gray-700 mb-2",children:"Import schedule data:"}),l.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-4",children:[l.jsx("div",{className:`border-2 border-dashed rounded-lg p-4 ${n?"border-blue-500 bg-blue-50":"border-gray-300"}`,onDragOver:A,onDragLeave:E,onDrop:P,children:l.jsxs("div",{className:"text-center",children:[l.jsx("svg",{className:"mx-auto h-10 w-10 text-gray-400 mb-2",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:l.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"})}),l.jsx("p",{className:"mb-1 text-sm text-gray-600",children:l.jsx("span",{className:"font-semibold",children:"Upload file"})}),l.jsx("p",{className:"text-xs text-gray-500 mb-3",children:"or drag and drop"}),l.jsx("input",{type:"file",accept:".csv,.tsv,.txt",onChange:f,className:"hidden",id:"file-upload"}),l.jsx("label",{htmlFor:"file-upload",className:"inline-block px-4 py-2 bg-blue-600 text-white rounded-lg cursor-pointer hover:bg-blue-700 text-sm",children:"Choose File"}),l.jsx("p",{className:"text-xs text-gray-500 mt-2",children:"CSV, TSV, or TXT"})]})}),l.jsx("div",{children:l.jsx("textarea",{value:e,onChange:m=>i(m.target.value),onPaste:R,className:"w-full h-full min-h-[160px] p-3 border border-gray-300 rounded-lg font-mono text-xs",placeholder:"Or paste your schedule data here..."})})]})]}),l.jsxs("div",{className:"mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded",children:[l.jsxs("label",{className:"flex items-center text-sm",children:[l.jsx("input",{type:"checkbox",checked:D,onChange:m=>_(m.target.checked),className:"mr-2"}),l.jsx("span",{className:"font-medium",children:"Clear existing appointments before import"})]}),l.jsx("p",{className:"text-xs text-gray-600 mt-1 ml-6",children:D?"⚠️ All existing appointments will be replaced with the imported data":"✓ New appointments will be added to existing ones"})]}),l.jsxs("div",{className:"mb-4",children:[l.jsxs("button",{onClick:()=>p(!g),className:"text-blue-600 hover:text-blue-800 text-sm font-medium",children:[g?"Hide":"Show"," Sample Format"]}),g&&l.jsx("pre",{className:"mt-2 p-3 bg-gray-100 rounded text-xs overflow-x-auto",children:H.getSampleFormat()})]}),l.jsxs("div",{className:"mb-4",children:[l.jsx("h3",{className:"text-sm font-medium text-gray-700 mb-2",children:"Provider Code Mapping:"}),l.jsx("div",{className:"grid grid-cols-2 gap-2 text-xs bg-gray-50 p-3 rounded",children:Object.entries(k).map(([m,u])=>l.jsxs("div",{className:"flex justify-between",children:[l.jsx("span",{className:"font-mono text-gray-600",children:m}),l.jsxs("span",{className:"text-gray-800",children:["→ ",u.name]})]},m))})]}),e&&!r&&l.jsxs("div",{className:"mb-4",children:[l.jsx("h3",{className:"text-sm font-medium text-gray-700 mb-2",children:"Preview:"}),l.jsx("div",{className:"bg-gray-50 p-3 rounded overflow-x-auto",children:l.jsxs("pre",{className:"text-xs",children:[e.split(`
`).slice(0,5).join(`
`),e.split(`
`).length>5&&`
...`]})}),l.jsx("p",{className:"text-xs text-gray-500 mt-1",children:(()=>{const m=e.split(`
`).filter(b=>b.trim()),u=e.includes("	")?"	":",";let w=0,v=!1;if(m.length>0){const b=m[0].toLowerCase();v=b.includes("date")||b.includes("patient")||b.includes("appt")||b.includes("provider")}const N=v?1:0;for(let b=N;b<m.length;b++){const x=m[b].split(u).map(V=>V.trim());x.length>=3&&x[0]&&x[0]!=="-"&&x[0].includes("/")&&w++}return`${w} appointments detected (${m.length} total lines)`})()})]}),l.jsxs("div",{className:"flex justify-end space-x-3",children:[l.jsx("button",{onClick:y,className:"px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50",disabled:s,children:"Cancel"}),l.jsx("button",{onClick:T,disabled:!e||s,className:`px-4 py-2 rounded-lg text-white ${!e||s?"bg-gray-400 cursor-not-allowed":"bg-blue-600 hover:bg-blue-700"}`,children:s?"Importing...":"Import Schedule"})]})]})})}export{ne as S,J as a,U as c,F as s};
//# sourceMappingURL=ScheduleImportModal-CQFUD8RN.js.map
