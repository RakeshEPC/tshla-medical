{"version":3,"file":"weightLossProfile.service-DOqGLedQ.js","sources":["../../src/weightloss/weightLossProfile.service.ts"],"sourcesContent":["import type {\n  WeightLossProfile,\n  DailyCheckin,\n  WeeklyCheckin,\n  PatientMetadata,\n  MealPlan,\n  ExercisePlan,\n  StallIntervention\n} from './types';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\nclass WeightLossProfileService {\n  private readonly STORAGE_PREFIX = 'weightloss_';\n  private currentProfile: WeightLossProfile | null = null;\n  \n  /**\n   * Initialize a new weight loss profile\n   */\n  createProfile(patientId: string): WeightLossProfile {\n    const profile: WeightLossProfile = {\n      patientId,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      demographics: {\n        age: 0,\n        sex: 'female',\n        height: 0,\n        startingWeight: 0,\n        preferredUnits: {\n          weight: 'kg',\n          height: 'cm'\n        }\n      },\n      medical: {\n        diagnoses: [],\n        currentMedications: [],\n        labResults: {},\n        medicalHistory: {}\n      },\n      dietary: {\n        dietPattern: 'omnivore',\n        foodsToAvoid: {\n          allergies: [],\n          intolerances: [],\n          preferences: [],\n          religious: [],\n          medical: []\n        },\n        staples: {\n          breakfast: [],\n          lunch: [],\n          dinner: [],\n          snacks: []\n        },\n        cuisinePreferences: []\n      },\n      lifestyle: {\n        schedule: {\n          wakeTime: '07:00',\n          sleepTime: '23:00',\n          workShift: 'day',\n          mealTimes: {}\n        },\n        activity: {\n          baseline: 'sedentary',\n          exerciseHabits: {\n            frequency: 'none',\n            types: [],\n            gymAccess: false,\n            homeEquipment: []\n          }\n        },\n        cooking: {\n          homeVsRestaurant: 50,\n          skillLevel: 'beginner',\n          timeAvailable: 'moderate',\n          budget: 'moderate'\n        },\n        travel: {\n          frequency: 'occasional',\n          types: 'domestic'\n        }\n      },\n      targets: {\n        protein: {\n          target: 80,\n          calculation: 'per_kg',\n          perKg: 1.2\n        },\n        steps: {\n          minimum: 5000,\n          target: 8000\n        },\n        sleep: {\n          minimumHours: 6,\n          targetHours: 8\n        },\n        hydration: {\n          target: 2000\n        },\n        redFlags: {\n          dizziness: true,\n          vomitingDuration: 24,\n          severNausea: true,\n          chestPain: true,\n          severeWeakness: true,\n          customRules: []\n        }\n      },\n      preferences: {\n        communication: {\n          bestTimes: ['08:00', '12:00', '18:00'],\n          quietHours: {\n            start: '22:00',\n            end: '07:00'\n          },\n          frequency: 'daily',\n          channels: ['app', 'push']\n        },\n        tone: 'coach',\n        language: 'en',\n        consent: {\n          dataSharing: false,\n          anonymizedAnalytics: true,\n          coachingBoundaries: []\n        }\n      },\n      onboardingComplete: false\n    };\n    \n    this.saveProfile(profile);\n    this.currentProfile = profile;\n    return profile;\n  }\n  \n  /**\n   * Load existing profile\n   */\n  loadProfile(patientId: string): WeightLossProfile | null {\n    const stored = localStorage.getItem(`${this.STORAGE_PREFIX}profile_${patientId}`);\n    if (stored) {\n      try {\n        this.currentProfile = JSON.parse(stored);\n        return this.currentProfile;\n      } catch (e) {\n        logError('App', 'Error message', {});\n      }\n    }\n    return null;\n  }\n  \n  /**\n   * Save profile to storage\n   */\n  saveProfile(profile: WeightLossProfile): void {\n    profile.updatedAt = new Date().toISOString();\n    localStorage.setItem(\n      `${this.STORAGE_PREFIX}profile_${profile.patientId}`,\n      JSON.stringify(profile)\n    );\n    this.currentProfile = profile;\n  }\n  \n  /**\n   * Update profile section\n   */\n  updateProfileSection<K extends keyof WeightLossProfile>(\n    patientId: string,\n    section: K,\n    data: Partial<WeightLossProfile[K]>\n  ): WeightLossProfile | null {\n    const profile = this.loadProfile(patientId);\n    if (!profile) return null;\n    \n    profile[section] = {\n      ...profile[section],\n      ...data\n    } as WeightLossProfile[K];\n    \n    this.saveProfile(profile);\n    return profile;\n  }\n  \n  /**\n   * Mark onboarding as complete\n   */\n  completeOnboarding(patientId: string): void {\n    const profile = this.loadProfile(patientId);\n    if (profile) {\n      profile.onboardingComplete = true;\n      this.saveProfile(profile);\n    }\n  }\n  \n  /**\n   * Save daily check-in\n   */\n  saveDailyCheckin(checkin: DailyCheckin): void {\n    const key = `${this.STORAGE_PREFIX}daily_${checkin.patientId}_${checkin.date}`;\n    localStorage.setItem(key, JSON.stringify(checkin));\n    \n    // Update today's checkin status\n    const todayKey = `${this.STORAGE_PREFIX}today_${checkin.patientId}`;\n    localStorage.setItem(todayKey, checkin.date);\n  }\n  \n  /**\n   * Get daily check-ins for a date range\n   */\n  getDailyCheckins(\n    patientId: string, \n    startDate: string, \n    endDate: string\n  ): DailyCheckin[] {\n    const checkins: DailyCheckin[] = [];\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    \n    for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\n      const dateStr = d.toISOString().split('T')[0];\n      const key = `${this.STORAGE_PREFIX}daily_${patientId}_${dateStr}`;\n      const stored = localStorage.getItem(key);\n      \n      if (stored) {\n        try {\n          checkins.push(JSON.parse(stored));\n        } catch (e) {\n          logError('App', 'Error message', {});\n        }\n      }\n    }\n    \n    return checkins;\n  }\n  \n  /**\n   * Check if today's check-in is complete\n   */\n  isTodayCheckinComplete(patientId: string): boolean {\n    const today = new Date().toISOString().split('T')[0];\n    const key = `${this.STORAGE_PREFIX}daily_${patientId}_${today}`;\n    return localStorage.getItem(key) !== null;\n  }\n  \n  /**\n   * Save weekly check-in\n   */\n  saveWeeklyCheckin(checkin: WeeklyCheckin): void {\n    const key = `${this.STORAGE_PREFIX}weekly_${checkin.patientId}_${checkin.weekStarting}`;\n    localStorage.setItem(key, JSON.stringify(checkin));\n  }\n  \n  /**\n   * Get patient metadata\n   */\n  getPatientMetadata(patientId: string): PatientMetadata {\n    const key = `${this.STORAGE_PREFIX}metadata_${patientId}`;\n    const stored = localStorage.getItem(key);\n    \n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (e) {\n        logError('App', 'Error message', {});\n      }\n    }\n    \n    // Return default metadata\n    return {\n      cohorts: [],\n      engagementStats: {\n        replyRate: 0,\n        checkinStreak: 0,\n        lastActive: new Date().toISOString(),\n        nudgesCompleted: 0,\n        dropoffs: 0\n      },\n      progressMarkers: {\n        week4: 0,\n        week8: 0,\n        week12: 0,\n        bestWeek: 0\n      },\n      interventions: [],\n      escalations: []\n    };\n  }\n  \n  /**\n   * Update engagement stats\n   */\n  updateEngagementStats(patientId: string, updates: Partial<PatientMetadata['engagementStats']>): void {\n    const metadata = this.getPatientMetadata(patientId);\n    metadata.engagementStats = {\n      ...metadata.engagementStats,\n      ...updates,\n      lastActive: new Date().toISOString()\n    };\n    \n    const key = `${this.STORAGE_PREFIX}metadata_${patientId}`;\n    localStorage.setItem(key, JSON.stringify(metadata));\n  }\n  \n  /**\n   * Calculate progress statistics\n   */\n  calculateProgress(patientId: string): {\n    totalWeightLoss: number;\n    percentageLoss: number;\n    averageWeeklyLoss: number;\n    currentStreak: number;\n    daysOnProgram: number;\n  } {\n    const profile = this.loadProfile(patientId);\n    if (!profile) {\n      return {\n        totalWeightLoss: 0,\n        percentageLoss: 0,\n        averageWeeklyLoss: 0,\n        currentStreak: 0,\n        daysOnProgram: 0\n      };\n    }\n    \n    // Get all check-ins\n    const startDate = new Date(profile.createdAt).toISOString().split('T')[0];\n    const endDate = new Date().toISOString().split('T')[0];\n    const checkins = this.getDailyCheckins(patientId, startDate, endDate);\n    \n    // Calculate stats\n    const latestWeight = checkins.length > 0 \n      ? checkins[checkins.length - 1].weight || profile.demographics.startingWeight\n      : profile.demographics.startingWeight;\n    \n    const totalWeightLoss = profile.demographics.startingWeight - latestWeight;\n    const percentageLoss = (totalWeightLoss / profile.demographics.startingWeight) * 100;\n    \n    const daysOnProgram = Math.floor(\n      (new Date().getTime() - new Date(profile.createdAt).getTime()) / (1000 * 60 * 60 * 24)\n    );\n    const weeksOnProgram = Math.max(1, Math.floor(daysOnProgram / 7));\n    const averageWeeklyLoss = totalWeightLoss / weeksOnProgram;\n    \n    // Calculate streak\n    let currentStreak = 0;\n    const today = new Date();\n    for (let i = 0; i < 30; i++) {\n      const checkDate = new Date(today);\n      checkDate.setDate(checkDate.getDate() - i);\n      const dateStr = checkDate.toISOString().split('T')[0];\n      \n      if (checkins.find(c => c.date === dateStr)) {\n        currentStreak++;\n      } else if (i > 0) {\n        break;\n      }\n    }\n    \n    return {\n      totalWeightLoss,\n      percentageLoss,\n      averageWeeklyLoss,\n      currentStreak,\n      daysOnProgram\n    };\n  }\n  \n  /**\n   * Detect weight loss stall\n   */\n  detectStall(patientId: string): {\n    isStalled: boolean;\n    daysStalled: number;\n    suggestedIntervention?: StallIntervention;\n  } {\n    const checkins = this.getDailyCheckins(\n      patientId,\n      new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      new Date().toISOString().split('T')[0]\n    );\n    \n    if (checkins.length < 7) {\n      return { isStalled: false, daysStalled: 0 };\n    }\n    \n    // Check if weight has been stable (within 0.5kg) for 7+ days\n    const weights = checkins.filter(c => c.weight).map(c => c.weight!);\n    if (weights.length < 7) {\n      return { isStalled: false, daysStalled: 0 };\n    }\n    \n    const recentWeights = weights.slice(-7);\n    const avgWeight = recentWeights.reduce((a, b) => a + b, 0) / recentWeights.length;\n    const maxDiff = Math.max(...recentWeights.map(w => Math.abs(w - avgWeight)));\n    \n    if (maxDiff < 0.5) {\n      // Weight has been stable - stall detected\n      return {\n        isStalled: true,\n        daysStalled: 7,\n        suggestedIntervention: {\n          type: 'protein_reset',\n          duration: 5,\n          plan: {\n            daily: [],\n            goals: ['Increase protein to 1.5g/kg', 'Reduce carbs by 30%', 'Maintain activity'],\n            tracking: ['protein', 'weight', 'hunger']\n          },\n          expectedOutcome: 'Break through plateau by resetting metabolism'\n        }\n      };\n    }\n    \n    return { isStalled: false, daysStalled: 0 };\n  }\n  \n  /**\n   * Get current profile\n   */\n  getCurrentProfile(): WeightLossProfile | null {\n    return this.currentProfile;\n  }\n}\n\nexport const weightLossProfileService = new WeightLossProfileService();"],"names":["WeightLossProfileService","patientId","profile","stored","logError","section","data","checkin","key","todayKey","startDate","endDate","checkins","start","end","d","dateStr","today","updates","metadata","latestWeight","totalWeightLoss","percentageLoss","daysOnProgram","weeksOnProgram","averageWeeklyLoss","currentStreak","i","checkDate","c","weights","recentWeights","avgWeight","a","b","w","weightLossProfileService"],"mappings":"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"}