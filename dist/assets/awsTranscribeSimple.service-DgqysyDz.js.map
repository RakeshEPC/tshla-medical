{"version":3,"file":"awsTranscribeSimple.service-DgqysyDz.js","sources":["../../node_modules/@aws-sdk/middleware-eventstream/dist-es/eventStreamHandlingMiddleware.js","../../node_modules/@aws-sdk/middleware-eventstream/dist-es/eventStreamHeaderMiddleware.js","../../node_modules/@aws-sdk/middleware-eventstream/dist-es/getEventStreamPlugin.js","../../node_modules/@smithy/smithy-client/dist-es/serde-json.js","../../node_modules/@aws-sdk/middleware-websocket/dist-es/middleware-session-id.js","../../node_modules/@aws-sdk/middleware-websocket/dist-es/middleware-websocket-endpoint.js","../../node_modules/@aws-sdk/middleware-websocket/dist-es/getWebSocketPlugin.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/configuration.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/recursionDetectionMiddleware.browser.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/getRecursionDetectionPlugin.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/util-endpoints/dist-es/aws.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-user-agent/dist-es/check-features.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-user-agent/dist-es/encode-features.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js","../../node_modules/@aws-sdk/client-transcribe-streaming/dist-es/auth/httpAuthSchemeProvider.js","../../node_modules/@aws-sdk/client-transcribe-streaming/dist-es/endpoint/EndpointParameters.js","../../node_modules/@aws-sdk/middleware-sdk-transcribe-streaming/dist-es/eventstream-handler.js","../../node_modules/@aws-sdk/middleware-sdk-transcribe-streaming/dist-es/middleware-inject-response-values.js","../../node_modules/@aws-sdk/middleware-sdk-transcribe-streaming/dist-es/middleware-port.js","../../node_modules/@aws-sdk/middleware-sdk-transcribe-streaming/dist-es/getTranscribeStreamingPlugin.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js","../../node_modules/@aws-sdk/client-transcribe-streaming/dist-es/endpoint/ruleset.js","../../node_modules/@aws-sdk/client-transcribe-streaming/dist-es/endpoint/endpointResolver.js","../../node_modules/@aws-sdk/client-transcribe-streaming/dist-es/runtimeConfig.shared.js","../../node_modules/@aws-sdk/client-transcribe-streaming/dist-es/runtimeConfig.browser.js","../../node_modules/@aws-sdk/client-transcribe-streaming/node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js","../../node_modules/@aws-sdk/client-transcribe-streaming/dist-es/auth/httpAuthExtensionConfiguration.js","../../node_modules/@aws-sdk/client-transcribe-streaming/dist-es/runtimeExtensions.js","../../node_modules/@aws-sdk/client-transcribe-streaming/dist-es/TranscribeStreamingClient.js","../../node_modules/@aws-sdk/client-transcribe-streaming/dist-es/models/TranscribeStreamingServiceException.js","../../node_modules/@aws-sdk/client-transcribe-streaming/dist-es/models/models_0.js","../../node_modules/@aws-sdk/client-transcribe-streaming/dist-es/protocols/Aws_restJson1.js","../../node_modules/@aws-sdk/client-transcribe-streaming/dist-es/commands/StartMedicalStreamTranscriptionCommand.js","../../src/services/medicalVocabularyEnhancer.service.ts","../../src/services/awsTranscribeSimple.service.ts"],"sourcesContent":["import { HttpRequest } from \"@smithy/protocol-http\";\nexport const eventStreamHandlingMiddleware = (options) => (next, context) => async (args) => {\n    const { request } = args;\n    if (!HttpRequest.isInstance(request))\n        return next(args);\n    return options.eventStreamPayloadHandler.handle(next, args, context);\n};\nexport const eventStreamHandlingMiddlewareOptions = {\n    tags: [\"EVENT_STREAM\", \"SIGNATURE\", \"HANDLE\"],\n    name: \"eventStreamHandlingMiddleware\",\n    relation: \"after\",\n    toMiddleware: \"awsAuthMiddleware\",\n    override: true,\n};\n","import { HttpRequest } from \"@smithy/protocol-http\";\nexport const eventStreamHeaderMiddleware = (next) => async (args) => {\n    const { request } = args;\n    if (!HttpRequest.isInstance(request))\n        return next(args);\n    request.headers = {\n        ...request.headers,\n        \"content-type\": \"application/vnd.amazon.eventstream\",\n        \"x-amz-content-sha256\": \"STREAMING-AWS4-HMAC-SHA256-EVENTS\",\n    };\n    return next({\n        ...args,\n        request,\n    });\n};\nexport const eventStreamHeaderMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"EVENT_STREAM\", \"HEADER\", \"CONTENT_TYPE\", \"CONTENT_SHA256\"],\n    name: \"eventStreamHeaderMiddleware\",\n    override: true,\n};\n","import { eventStreamHandlingMiddleware, eventStreamHandlingMiddlewareOptions } from \"./eventStreamHandlingMiddleware\";\nimport { eventStreamHeaderMiddleware, eventStreamHeaderMiddlewareOptions } from \"./eventStreamHeaderMiddleware\";\nexport const getEventStreamPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(eventStreamHandlingMiddleware(options), eventStreamHandlingMiddlewareOptions);\n        clientStack.add(eventStreamHeaderMiddleware, eventStreamHeaderMiddlewareOptions);\n    },\n});\n","export const _json = (obj) => {\n    if (obj == null) {\n        return {};\n    }\n    if (Array.isArray(obj)) {\n        return obj.filter((_) => _ != null).map(_json);\n    }\n    if (typeof obj === \"object\") {\n        const target = {};\n        for (const key of Object.keys(obj)) {\n            if (obj[key] == null) {\n                continue;\n            }\n            target[key] = _json(obj[key]);\n        }\n        return target;\n    }\n    return obj;\n};\n","export const injectSessionIdMiddleware = () => (next) => async (args) => {\n    const requestParams = {\n        ...args.input,\n    };\n    const response = await next(args);\n    const output = response.output;\n    if (requestParams.SessionId && output.SessionId == null) {\n        output.SessionId = requestParams.SessionId;\n    }\n    return response;\n};\nexport const injectSessionIdMiddlewareOptions = {\n    step: \"initialize\",\n    name: \"injectSessionIdMiddleware\",\n    tags: [\"WEBSOCKET\", \"EVENT_STREAM\"],\n    override: true,\n};\n","import { HttpRequest } from \"@smithy/protocol-http\";\nexport const websocketEndpointMiddleware = (config, options) => (next) => (args) => {\n    const { request } = args;\n    if (HttpRequest.isInstance(request) &&\n        config.requestHandler.metadata?.handlerProtocol?.toLowerCase().includes(\"websocket\")) {\n        request.protocol = \"wss:\";\n        request.method = \"GET\";\n        request.path = `${request.path}-websocket`;\n        const { headers } = request;\n        delete headers[\"content-type\"];\n        delete headers[\"x-amz-content-sha256\"];\n        for (const name of Object.keys(headers)) {\n            if (name.indexOf(options.headerPrefix) === 0) {\n                const chunkedName = name.replace(options.headerPrefix, \"\");\n                request.query[chunkedName] = headers[name];\n            }\n        }\n        if (headers[\"x-amz-user-agent\"]) {\n            request.query[\"user-agent\"] = headers[\"x-amz-user-agent\"];\n        }\n        request.headers = { host: headers.host ?? request.hostname };\n    }\n    return next(args);\n};\nexport const websocketEndpointMiddlewareOptions = {\n    name: \"websocketEndpointMiddleware\",\n    tags: [\"WEBSOCKET\", \"EVENT_STREAM\"],\n    relation: \"after\",\n    toMiddleware: \"eventStreamHeaderMiddleware\",\n    override: true,\n};\n","import { injectSessionIdMiddleware, injectSessionIdMiddlewareOptions } from \"./middleware-session-id\";\nimport { websocketEndpointMiddleware, websocketEndpointMiddlewareOptions } from \"./middleware-websocket-endpoint\";\nexport const getWebSocketPlugin = (config, options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(websocketEndpointMiddleware(config, options), websocketEndpointMiddlewareOptions);\n        clientStack.add(injectSessionIdMiddleware(), injectSessionIdMiddlewareOptions);\n    },\n});\n","import { HttpRequest } from \"@smithy/protocol-http\";\nexport function resolveHostHeaderConfig(input) {\n    return input;\n}\nexport const hostHeaderMiddleware = (options) => (next) => async (args) => {\n    if (!HttpRequest.isInstance(args.request))\n        return next(args);\n    const { request } = args;\n    const { handlerProtocol = \"\" } = options.requestHandler.metadata || {};\n    if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n        delete request.headers[\"host\"];\n        request.headers[\":authority\"] = request.hostname + (request.port ? \":\" + request.port : \"\");\n    }\n    else if (!request.headers[\"host\"]) {\n        let host = request.hostname;\n        if (request.port != null)\n            host += `:${request.port}`;\n        request.headers[\"host\"] = host;\n    }\n    return next(args);\n};\nexport const hostHeaderMiddlewareOptions = {\n    name: \"hostHeaderMiddleware\",\n    step: \"build\",\n    priority: \"low\",\n    tags: [\"HOST\"],\n    override: true,\n};\nexport const getHostHeaderPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n    },\n});\n","export const loggerMiddleware = () => (next, context) => async (args) => {\n    try {\n        const response = await next(args);\n        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;\n        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;\n        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;\n        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;\n        const { $metadata, ...outputWithoutMetadata } = response.output;\n        logger?.info?.({\n            clientName,\n            commandName,\n            input: inputFilterSensitiveLog(args.input),\n            output: outputFilterSensitiveLog(outputWithoutMetadata),\n            metadata: $metadata,\n        });\n        return response;\n    }\n    catch (error) {\n        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;\n        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;\n        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;\n        logger?.error?.({\n            clientName,\n            commandName,\n            input: inputFilterSensitiveLog(args.input),\n            error,\n            metadata: error.$metadata,\n        });\n        throw error;\n    }\n};\nexport const loggerMiddlewareOptions = {\n    name: \"loggerMiddleware\",\n    tags: [\"LOGGER\"],\n    step: \"initialize\",\n    override: true,\n};\nexport const getLoggerPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    },\n});\n","export const recursionDetectionMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"RECURSION_DETECTION\"],\n    name: \"recursionDetectionMiddleware\",\n    override: true,\n    priority: \"low\",\n};\n","export const recursionDetectionMiddleware = () => (next) => async (args) => next(args);\n","import { recursionDetectionMiddlewareOptions } from \"./configuration\";\nimport { recursionDetectionMiddleware } from \"./recursionDetectionMiddleware\";\nexport const getRecursionDetectionPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(recursionDetectionMiddleware(), recursionDetectionMiddlewareOptions);\n    },\n});\n","import { normalizeProvider } from \"@smithy/core\";\nexport const DEFAULT_UA_APP_ID = undefined;\nfunction isValidUserAgentAppId(appId) {\n    if (appId === undefined) {\n        return true;\n    }\n    return typeof appId === \"string\" && appId.length <= 50;\n}\nexport function resolveUserAgentConfig(input) {\n    const normalizedAppIdProvider = normalizeProvider(input.userAgentAppId ?? DEFAULT_UA_APP_ID);\n    const { customUserAgent } = input;\n    return Object.assign(input, {\n        customUserAgent: typeof customUserAgent === \"string\" ? [[customUserAgent]] : customUserAgent,\n        userAgentAppId: async () => {\n            const appId = await normalizedAppIdProvider();\n            if (!isValidUserAgentAppId(appId)) {\n                const logger = input.logger?.constructor?.name === \"NoOpLogger\" || !input.logger ? console : input.logger;\n                if (typeof appId !== \"string\") {\n                    logger?.warn(\"userAgentAppId must be a string or undefined.\");\n                }\n                else if (appId.length > 50) {\n                    logger?.warn(\"The provided userAgentAppId exceeds the maximum length of 50 characters.\");\n                }\n            }\n            return appId;\n        },\n    });\n}\n","import { isValidHostLabel } from \"@smithy/util-endpoints\";\nimport { isIpAddress } from \"../isIpAddress\";\nexport const isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {\n    if (allowSubDomains) {\n        for (const label of value.split(\".\")) {\n            if (!isVirtualHostableS3Bucket(label)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (!isValidHostLabel(value)) {\n        return false;\n    }\n    if (value.length < 3 || value.length > 63) {\n        return false;\n    }\n    if (value !== value.toLowerCase()) {\n        return false;\n    }\n    if (isIpAddress(value)) {\n        return false;\n    }\n    return true;\n};\n","const ARN_DELIMITER = \":\";\nconst RESOURCE_DELIMITER = \"/\";\nexport const parseArn = (value) => {\n    const segments = value.split(ARN_DELIMITER);\n    if (segments.length < 6)\n        return null;\n    const [arn, partition, service, region, accountId, ...resourcePath] = segments;\n    if (arn !== \"arn\" || partition === \"\" || service === \"\" || resourcePath.join(ARN_DELIMITER) === \"\")\n        return null;\n    const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER)).flat();\n    return {\n        partition,\n        service,\n        region,\n        accountId,\n        resourceId,\n    };\n};\n","import partitionsInfo from \"./partitions.json\";\nlet selectedPartitionsInfo = partitionsInfo;\nlet selectedUserAgentPrefix = \"\";\nexport const partition = (value) => {\n    const { partitions } = selectedPartitionsInfo;\n    for (const partition of partitions) {\n        const { regions, outputs } = partition;\n        for (const [region, regionData] of Object.entries(regions)) {\n            if (region === value) {\n                return {\n                    ...outputs,\n                    ...regionData,\n                };\n            }\n        }\n    }\n    for (const partition of partitions) {\n        const { regionRegex, outputs } = partition;\n        if (new RegExp(regionRegex).test(value)) {\n            return {\n                ...outputs,\n            };\n        }\n    }\n    const DEFAULT_PARTITION = partitions.find((partition) => partition.id === \"aws\");\n    if (!DEFAULT_PARTITION) {\n        throw new Error(\"Provided region was not found in the partition array or regex,\" +\n            \" and default partition with id 'aws' doesn't exist.\");\n    }\n    return {\n        ...DEFAULT_PARTITION.outputs,\n    };\n};\nexport const setPartitionInfo = (partitionsInfo, userAgentPrefix = \"\") => {\n    selectedPartitionsInfo = partitionsInfo;\n    selectedUserAgentPrefix = userAgentPrefix;\n};\nexport const useDefaultPartitionInfo = () => {\n    setPartitionInfo(partitionsInfo, \"\");\n};\nexport const getUserAgentPrefix = () => selectedUserAgentPrefix;\n","import { customEndpointFunctions } from \"@smithy/util-endpoints\";\nimport { isVirtualHostableS3Bucket } from \"./lib/aws/isVirtualHostableS3Bucket\";\nimport { parseArn } from \"./lib/aws/parseArn\";\nimport { partition } from \"./lib/aws/partition\";\nexport const awsEndpointFunctions = {\n    isVirtualHostableS3Bucket: isVirtualHostableS3Bucket,\n    parseArn: parseArn,\n    partition: partition,\n};\ncustomEndpointFunctions.aws = awsEndpointFunctions;\n","export function setCredentialFeature(credentials, feature, value) {\n    if (!credentials.$source) {\n        credentials.$source = {};\n    }\n    credentials.$source[feature] = value;\n    return credentials;\n}\n","export function setFeature(context, feature, value) {\n    if (!context.__aws_sdk_context) {\n        context.__aws_sdk_context = {\n            features: {},\n        };\n    }\n    else if (!context.__aws_sdk_context.features) {\n        context.__aws_sdk_context.features = {};\n    }\n    context.__aws_sdk_context.features[feature] = value;\n}\n","import { HttpResponse } from \"@smithy/protocol-http\";\nexport const getDateHeader = (response) => HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;\n","export const getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);\n","import { getSkewCorrectedDate } from \"./getSkewCorrectedDate\";\nexport const isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 300000;\n","import { isClockSkewed } from \"./isClockSkewed\";\nexport const getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {\n    const clockTimeInMs = Date.parse(clockTime);\n    if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {\n        return clockTimeInMs - Date.now();\n    }\n    return currentSystemClockOffset;\n};\n","import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getDateHeader, getSkewCorrectedDate, getUpdatedSystemClockOffset } from \"../utils\";\nconst throwSigningPropertyError = (name, property) => {\n    if (!property) {\n        throw new Error(`Property \\`${name}\\` is not resolved for AWS SDK SigV4Auth`);\n    }\n    return property;\n};\nexport const validateSigningProperties = async (signingProperties) => {\n    const context = throwSigningPropertyError(\"context\", signingProperties.context);\n    const config = throwSigningPropertyError(\"config\", signingProperties.config);\n    const authScheme = context.endpointV2?.properties?.authSchemes?.[0];\n    const signerFunction = throwSigningPropertyError(\"signer\", config.signer);\n    const signer = await signerFunction(authScheme);\n    const signingRegion = signingProperties?.signingRegion;\n    const signingRegionSet = signingProperties?.signingRegionSet;\n    const signingName = signingProperties?.signingName;\n    return {\n        config,\n        signer,\n        signingRegion,\n        signingRegionSet,\n        signingName,\n    };\n};\nexport class AwsSdkSigV4Signer {\n    async sign(httpRequest, identity, signingProperties) {\n        if (!HttpRequest.isInstance(httpRequest)) {\n            throw new Error(\"The request is not an instance of `HttpRequest` and cannot be signed\");\n        }\n        const validatedProps = await validateSigningProperties(signingProperties);\n        const { config, signer } = validatedProps;\n        let { signingRegion, signingName } = validatedProps;\n        const handlerExecutionContext = signingProperties.context;\n        if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {\n            const [first, second] = handlerExecutionContext.authSchemes;\n            if (first?.name === \"sigv4a\" && second?.name === \"sigv4\") {\n                signingRegion = second?.signingRegion ?? signingRegion;\n                signingName = second?.signingName ?? signingName;\n            }\n        }\n        const signedRequest = await signer.sign(httpRequest, {\n            signingDate: getSkewCorrectedDate(config.systemClockOffset),\n            signingRegion: signingRegion,\n            signingService: signingName,\n        });\n        return signedRequest;\n    }\n    errorHandler(signingProperties) {\n        return (error) => {\n            const serverTime = error.ServerTime ?? getDateHeader(error.$response);\n            if (serverTime) {\n                const config = throwSigningPropertyError(\"config\", signingProperties.config);\n                const initialSystemClockOffset = config.systemClockOffset;\n                config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);\n                const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;\n                if (clockSkewCorrected && error.$metadata) {\n                    error.$metadata.clockSkewCorrected = true;\n                }\n            }\n            throw error;\n        };\n    }\n    successHandler(httpResponse, signingProperties) {\n        const dateHeader = getDateHeader(httpResponse);\n        if (dateHeader) {\n            const config = throwSigningPropertyError(\"config\", signingProperties.config);\n            config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);\n        }\n    }\n}\nexport const AWSSDKSigV4Signer = AwsSdkSigV4Signer;\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { doesIdentityRequireRefresh, isIdentityExpired, memoizeIdentityProvider, normalizeProvider, } from \"@smithy/core\";\nimport { SignatureV4 } from \"@smithy/signature-v4\";\nexport const resolveAwsSdkSigV4Config = (config) => {\n    let inputCredentials = config.credentials;\n    let isUserSupplied = !!config.credentials;\n    let resolvedCredentials = undefined;\n    Object.defineProperty(config, \"credentials\", {\n        set(credentials) {\n            if (credentials && credentials !== inputCredentials && credentials !== resolvedCredentials) {\n                isUserSupplied = true;\n            }\n            inputCredentials = credentials;\n            const memoizedProvider = normalizeCredentialProvider(config, {\n                credentials: inputCredentials,\n                credentialDefaultProvider: config.credentialDefaultProvider,\n            });\n            const boundProvider = bindCallerConfig(config, memoizedProvider);\n            if (isUserSupplied && !boundProvider.attributed) {\n                resolvedCredentials = async (options) => boundProvider(options).then((creds) => setCredentialFeature(creds, \"CREDENTIALS_CODE\", \"e\"));\n                resolvedCredentials.memoized = boundProvider.memoized;\n                resolvedCredentials.configBound = boundProvider.configBound;\n                resolvedCredentials.attributed = true;\n            }\n            else {\n                resolvedCredentials = boundProvider;\n            }\n        },\n        get() {\n            return resolvedCredentials;\n        },\n        enumerable: true,\n        configurable: true,\n    });\n    config.credentials = inputCredentials;\n    const { signingEscapePath = true, systemClockOffset = config.systemClockOffset || 0, sha256, } = config;\n    let signer;\n    if (config.signer) {\n        signer = normalizeProvider(config.signer);\n    }\n    else if (config.regionInfoProvider) {\n        signer = () => normalizeProvider(config.region)()\n            .then(async (region) => [\n            (await config.regionInfoProvider(region, {\n                useFipsEndpoint: await config.useFipsEndpoint(),\n                useDualstackEndpoint: await config.useDualstackEndpoint(),\n            })) || {},\n            region,\n        ])\n            .then(([regionInfo, region]) => {\n            const { signingRegion, signingService } = regionInfo;\n            config.signingRegion = config.signingRegion || signingRegion || region;\n            config.signingName = config.signingName || signingService || config.serviceId;\n            const params = {\n                ...config,\n                credentials: config.credentials,\n                region: config.signingRegion,\n                service: config.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = config.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        });\n    }\n    else {\n        signer = async (authScheme) => {\n            authScheme = Object.assign({}, {\n                name: \"sigv4\",\n                signingName: config.signingName || config.defaultSigningName,\n                signingRegion: await normalizeProvider(config.region)(),\n                properties: {},\n            }, authScheme);\n            const signingRegion = authScheme.signingRegion;\n            const signingService = authScheme.signingName;\n            config.signingRegion = config.signingRegion || signingRegion;\n            config.signingName = config.signingName || signingService || config.serviceId;\n            const params = {\n                ...config,\n                credentials: config.credentials,\n                region: config.signingRegion,\n                service: config.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = config.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        };\n    }\n    const resolvedConfig = Object.assign(config, {\n        systemClockOffset,\n        signingEscapePath,\n        signer,\n    });\n    return resolvedConfig;\n};\nexport const resolveAWSSDKSigV4Config = resolveAwsSdkSigV4Config;\nfunction normalizeCredentialProvider(config, { credentials, credentialDefaultProvider, }) {\n    let credentialsProvider;\n    if (credentials) {\n        if (!credentials?.memoized) {\n            credentialsProvider = memoizeIdentityProvider(credentials, isIdentityExpired, doesIdentityRequireRefresh);\n        }\n        else {\n            credentialsProvider = credentials;\n        }\n    }\n    else {\n        if (credentialDefaultProvider) {\n            credentialsProvider = normalizeProvider(credentialDefaultProvider(Object.assign({}, config, {\n                parentClientConfig: config,\n            })));\n        }\n        else {\n            credentialsProvider = async () => {\n                throw new Error(\"@aws-sdk/core::resolveAwsSdkSigV4Config - `credentials` not provided and no credentialDefaultProvider was configured.\");\n            };\n        }\n    }\n    credentialsProvider.memoized = true;\n    return credentialsProvider;\n}\nfunction bindCallerConfig(config, credentialsProvider) {\n    if (credentialsProvider.configBound) {\n        return credentialsProvider;\n    }\n    const fn = async (options) => credentialsProvider({ ...options, callerClientConfig: config });\n    fn.memoized = credentialsProvider.memoized;\n    fn.configBound = true;\n    return fn;\n}\n","import { collectBody } from \"@smithy/smithy-client\";\nimport { toUtf8 } from \"@smithy/util-utf8\";\nexport const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => (context?.utf8Encoder ?? toUtf8)(body));\n","import { collectBodyString } from \"../common\";\nexport const parseJsonBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        try {\n            return JSON.parse(encoded);\n        }\n        catch (e) {\n            if (e?.name === \"SyntaxError\") {\n                Object.defineProperty(e, \"$responseBodyText\", {\n                    value: encoded,\n                });\n            }\n            throw e;\n        }\n    }\n    return {};\n});\nexport const parseJsonErrorBody = async (errorBody, context) => {\n    const value = await parseJsonBody(errorBody, context);\n    value.message = value.message ?? value.Message;\n    return value;\n};\nexport const loadRestJsonErrorCode = (output, data) => {\n    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n    const sanitizeErrorCode = (rawValue) => {\n        let cleanValue = rawValue;\n        if (typeof cleanValue === \"number\") {\n            cleanValue = cleanValue.toString();\n        }\n        if (cleanValue.indexOf(\",\") >= 0) {\n            cleanValue = cleanValue.split(\",\")[0];\n        }\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data && typeof data === \"object\") {\n        const codeKey = findKey(data, \"code\");\n        if (codeKey && data[codeKey] !== undefined) {\n            return sanitizeErrorCode(data[codeKey]);\n        }\n        if (data[\"__type\"] !== undefined) {\n            return sanitizeErrorCode(data[\"__type\"]);\n        }\n    }\n};\n","import { setFeature } from \"@aws-sdk/core\";\nconst ACCOUNT_ID_ENDPOINT_REGEX = /\\d{12}\\.ddb/;\nexport async function checkFeatures(context, config, args) {\n    const request = args.request;\n    if (request?.headers?.[\"smithy-protocol\"] === \"rpc-v2-cbor\") {\n        setFeature(context, \"PROTOCOL_RPC_V2_CBOR\", \"M\");\n    }\n    if (typeof config.retryStrategy === \"function\") {\n        const retryStrategy = await config.retryStrategy();\n        if (typeof retryStrategy.acquireInitialRetryToken === \"function\") {\n            if (retryStrategy.constructor?.name?.includes(\"Adaptive\")) {\n                setFeature(context, \"RETRY_MODE_ADAPTIVE\", \"F\");\n            }\n            else {\n                setFeature(context, \"RETRY_MODE_STANDARD\", \"E\");\n            }\n        }\n        else {\n            setFeature(context, \"RETRY_MODE_LEGACY\", \"D\");\n        }\n    }\n    if (typeof config.accountIdEndpointMode === \"function\") {\n        const endpointV2 = context.endpointV2;\n        if (String(endpointV2?.url?.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX)) {\n            setFeature(context, \"ACCOUNT_ID_ENDPOINT\", \"O\");\n        }\n        switch (await config.accountIdEndpointMode?.()) {\n            case \"disabled\":\n                setFeature(context, \"ACCOUNT_ID_MODE_DISABLED\", \"Q\");\n                break;\n            case \"preferred\":\n                setFeature(context, \"ACCOUNT_ID_MODE_PREFERRED\", \"P\");\n                break;\n            case \"required\":\n                setFeature(context, \"ACCOUNT_ID_MODE_REQUIRED\", \"R\");\n                break;\n        }\n    }\n    const identity = context.__smithy_context?.selectedHttpAuthScheme?.identity;\n    if (identity?.$source) {\n        const credentials = identity;\n        if (credentials.accountId) {\n            setFeature(context, \"RESOLVED_ACCOUNT_ID\", \"T\");\n        }\n        for (const [key, value] of Object.entries(credentials.$source ?? {})) {\n            setFeature(context, key, value);\n        }\n    }\n}\n","export const USER_AGENT = \"user-agent\";\nexport const X_AMZ_USER_AGENT = \"x-amz-user-agent\";\nexport const SPACE = \" \";\nexport const UA_NAME_SEPARATOR = \"/\";\nexport const UA_NAME_ESCAPE_REGEX = /[^\\!\\$\\%\\&\\'\\*\\+\\-\\.\\^\\_\\`\\|\\~\\d\\w]/g;\nexport const UA_VALUE_ESCAPE_REGEX = /[^\\!\\$\\%\\&\\'\\*\\+\\-\\.\\^\\_\\`\\|\\~\\d\\w\\#]/g;\nexport const UA_ESCAPE_CHAR = \"-\";\n","const BYTE_LIMIT = 1024;\nexport function encodeFeatures(features) {\n    let buffer = \"\";\n    for (const key in features) {\n        const val = features[key];\n        if (buffer.length + val.length + 1 <= BYTE_LIMIT) {\n            if (buffer.length) {\n                buffer += \",\" + val;\n            }\n            else {\n                buffer += val;\n            }\n            continue;\n        }\n        break;\n    }\n    return buffer;\n}\n","import { getUserAgentPrefix } from \"@aws-sdk/util-endpoints\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { checkFeatures } from \"./check-features\";\nimport { SPACE, UA_ESCAPE_CHAR, UA_NAME_ESCAPE_REGEX, UA_NAME_SEPARATOR, UA_VALUE_ESCAPE_REGEX, USER_AGENT, X_AMZ_USER_AGENT, } from \"./constants\";\nimport { encodeFeatures } from \"./encode-features\";\nexport const userAgentMiddleware = (options) => (next, context) => async (args) => {\n    const { request } = args;\n    if (!HttpRequest.isInstance(request)) {\n        return next(args);\n    }\n    const { headers } = request;\n    const userAgent = context?.userAgent?.map(escapeUserAgent) || [];\n    const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);\n    await checkFeatures(context, options, args);\n    const awsContext = context;\n    defaultUserAgent.push(`m/${encodeFeatures(Object.assign({}, context.__smithy_context?.features, awsContext.__aws_sdk_context?.features))}`);\n    const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];\n    const appId = await options.userAgentAppId();\n    if (appId) {\n        defaultUserAgent.push(escapeUserAgent([`app/${appId}`]));\n    }\n    const prefix = getUserAgentPrefix();\n    const sdkUserAgentValue = (prefix ? [prefix] : [])\n        .concat([...defaultUserAgent, ...userAgent, ...customUserAgent])\n        .join(SPACE);\n    const normalUAValue = [\n        ...defaultUserAgent.filter((section) => section.startsWith(\"aws-sdk-\")),\n        ...customUserAgent,\n    ].join(SPACE);\n    if (options.runtime !== \"browser\") {\n        if (normalUAValue) {\n            headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT]\n                ? `${headers[USER_AGENT]} ${normalUAValue}`\n                : normalUAValue;\n        }\n        headers[USER_AGENT] = sdkUserAgentValue;\n    }\n    else {\n        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;\n    }\n    return next({\n        ...args,\n        request,\n    });\n};\nconst escapeUserAgent = (userAgentPair) => {\n    const name = userAgentPair[0]\n        .split(UA_NAME_SEPARATOR)\n        .map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR))\n        .join(UA_NAME_SEPARATOR);\n    const version = userAgentPair[1]?.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);\n    const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);\n    const prefix = name.substring(0, prefixSeparatorIndex);\n    let uaName = name.substring(prefixSeparatorIndex + 1);\n    if (prefix === \"api\") {\n        uaName = uaName.toLowerCase();\n    }\n    return [prefix, uaName, version]\n        .filter((item) => item && item.length > 0)\n        .reduce((acc, item, index) => {\n        switch (index) {\n            case 0:\n                return item;\n            case 1:\n                return `${acc}/${item}`;\n            default:\n                return `${acc}#${item}`;\n        }\n    }, \"\");\n};\nexport const getUserAgentMiddlewareOptions = {\n    name: \"getUserAgentMiddleware\",\n    step: \"build\",\n    priority: \"low\",\n    tags: [\"SET_USER_AGENT\", \"USER_AGENT\"],\n    override: true,\n};\nexport const getUserAgentPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);\n    },\n});\n","import { resolveAwsSdkSigV4Config, } from \"@aws-sdk/core\";\nimport { getSmithyContext, normalizeProvider } from \"@smithy/util-middleware\";\nexport const defaultTranscribeStreamingHttpAuthSchemeParametersProvider = async (config, context, input) => {\n    return {\n        operation: getSmithyContext(context).operation,\n        region: (await normalizeProvider(config.region)()) ||\n            (() => {\n                throw new Error(\"expected `region` to be configured for `aws.auth#sigv4`\");\n            })(),\n    };\n};\nfunction createAwsAuthSigv4HttpAuthOption(authParameters) {\n    return {\n        schemeId: \"aws.auth#sigv4\",\n        signingProperties: {\n            name: \"transcribe\",\n            region: authParameters.region,\n        },\n        propertiesExtractor: (config, context) => ({\n            signingProperties: {\n                config,\n                context,\n            },\n        }),\n    };\n}\nexport const defaultTranscribeStreamingHttpAuthSchemeProvider = (authParameters) => {\n    const options = [];\n    switch (authParameters.operation) {\n        default: {\n            options.push(createAwsAuthSigv4HttpAuthOption(authParameters));\n        }\n    }\n    return options;\n};\nexport const resolveHttpAuthSchemeConfig = (config) => {\n    const config_0 = resolveAwsSdkSigV4Config(config);\n    return Object.assign(config_0, {\n        authSchemePreference: normalizeProvider(config.authSchemePreference ?? []),\n    });\n};\n","export const resolveClientEndpointParameters = (options) => {\n    return Object.assign(options, {\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        defaultSigningName: \"transcribe\",\n    });\n};\nexport const commonParams = {\n    UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n    Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n    Region: { type: \"builtInParams\", name: \"region\" },\n    UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n};\n","export const eventStreamPayloadHandler = {\n    handle: (next, args) => next(args),\n};\n","import { v4 } from \"@smithy/uuid\";\nexport const injectResponseValuesMiddleware = (config) => (next) => async (args) => {\n    if (args.input.SessionId === undefined && isWebSocket(config)) {\n        args.input.SessionId = v4();\n    }\n    const requestParams = {\n        ...args.input,\n    };\n    const response = await next(args);\n    const output = response.output;\n    for (const key of Object.keys(output)) {\n        if (output[key] === undefined && requestParams[key]) {\n            output[key] = requestParams[key];\n        }\n    }\n    return response;\n};\nconst isWebSocket = (config) => config.requestHandler.metadata?.handlerProtocol?.includes(\"websocket\");\nexport const injectResponseValuesMiddlewareOptions = {\n    step: \"initialize\",\n    name: \"injectResponseValuesMiddleware\",\n    tags: [\"WEBSOCKET\", \"EVENT_STREAM\"],\n    override: true,\n};\n","import { HttpRequest } from \"@smithy/protocol-http\";\nexport const websocketPortMiddleware = (options) => (next) => (args) => {\n    const { request } = args;\n    if (HttpRequest.isInstance(request) && options.requestHandler.metadata?.handlerProtocol?.includes(\"websocket\")) {\n        request.hostname = `${request.hostname}:8443`;\n        request.headers.host = request.hostname;\n    }\n    return next(args);\n};\nexport const websocketPortMiddlewareOptions = {\n    name: \"websocketPortMiddleware\",\n    tags: [\"WEBSOCKET\", \"EVENT_STREAM\", \"PORT\"],\n    relation: \"after\",\n    toMiddleware: \"eventStreamHeaderMiddleware\",\n    override: true,\n};\n","import { injectResponseValuesMiddleware, injectResponseValuesMiddlewareOptions, } from \"./middleware-inject-response-values\";\nimport { websocketPortMiddleware, websocketPortMiddlewareOptions } from \"./middleware-port\";\nexport const getTranscribeStreamingPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(websocketPortMiddleware(config), websocketPortMiddlewareOptions);\n        clientStack.add(injectResponseValuesMiddleware(config), injectResponseValuesMiddlewareOptions);\n    },\n});\n","import bowser from \"bowser\";\nexport const createDefaultUserAgentProvider = ({ serviceId, clientVersion }) => async (config) => {\n    const parsedUA = typeof window !== \"undefined\" && window?.navigator?.userAgent\n        ? bowser.parse(window.navigator.userAgent)\n        : undefined;\n    const sections = [\n        [\"aws-sdk-js\", clientVersion],\n        [\"ua\", \"2.1\"],\n        [`os/${parsedUA?.os?.name || \"other\"}`, parsedUA?.os?.version],\n        [\"lang/js\"],\n        [\"md/browser\", `${parsedUA?.browser?.name ?? \"unknown\"}_${parsedUA?.browser?.version ?? \"unknown\"}`],\n    ];\n    if (serviceId) {\n        sections.push([`api/${serviceId}`, clientVersion]);\n    }\n    const appId = await config?.userAgentAppId?.();\n    if (appId) {\n        sections.push([`app/${appId}`]);\n    }\n    return sections;\n};\nexport const defaultUserAgent = createDefaultUserAgentProvider;\n","const s = \"required\", t = \"fn\", u = \"argv\", v = \"ref\";\nconst a = true, b = \"isSet\", c = \"booleanEquals\", d = \"error\", e = \"endpoint\", f = \"tree\", g = \"PartitionResult\", h = { [s]: false, \"type\": \"String\" }, i = { [s]: true, \"default\": false, \"type\": \"Boolean\" }, j = { [v]: \"Endpoint\" }, k = { [t]: c, [u]: [{ [v]: \"UseFIPS\" }, true] }, l = { [t]: c, [u]: [{ [v]: \"UseDualStack\" }, true] }, m = {}, n = { [t]: \"getAttr\", [u]: [{ [v]: g }, \"supportsFIPS\"] }, o = { [t]: c, [u]: [true, { [t]: \"getAttr\", [u]: [{ [v]: g }, \"supportsDualStack\"] }] }, p = [k], q = [l], r = [{ [v]: \"Region\" }];\nconst _data = { version: \"1.0\", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [t]: b, [u]: [j] }], rules: [{ conditions: p, error: \"Invalid Configuration: FIPS and custom endpoint are not supported\", type: d }, { conditions: q, error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\", type: d }, { endpoint: { url: j, properties: m, headers: m }, type: e }], type: f }, { conditions: [{ [t]: b, [u]: r }], rules: [{ conditions: [{ [t]: \"aws.partition\", [u]: r, assign: g }], rules: [{ conditions: [k, l], rules: [{ conditions: [{ [t]: c, [u]: [a, n] }, o], rules: [{ endpoint: { url: \"https://transcribestreaming-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: m, headers: m }, type: e }], type: f }, { error: \"FIPS and DualStack are enabled, but this partition does not support one or both\", type: d }], type: f }, { conditions: p, rules: [{ conditions: [{ [t]: c, [u]: [n, a] }], rules: [{ endpoint: { url: \"https://transcribestreaming-fips.{Region}.{PartitionResult#dnsSuffix}\", properties: m, headers: m }, type: e }], type: f }, { error: \"FIPS is enabled but this partition does not support FIPS\", type: d }], type: f }, { conditions: q, rules: [{ conditions: [o], rules: [{ endpoint: { url: \"https://transcribestreaming.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: m, headers: m }, type: e }], type: f }, { error: \"DualStack is enabled but this partition does not support DualStack\", type: d }], type: f }, { endpoint: { url: \"https://transcribestreaming.{Region}.{PartitionResult#dnsSuffix}\", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: \"Invalid Configuration: Missing Region\", type: d }] };\nexport const ruleSet = _data;\n","import { awsEndpointFunctions } from \"@aws-sdk/util-endpoints\";\nimport { customEndpointFunctions, EndpointCache, resolveEndpoint } from \"@smithy/util-endpoints\";\nimport { ruleSet } from \"./ruleset\";\nconst cache = new EndpointCache({\n    size: 50,\n    params: [\"Endpoint\", \"Region\", \"UseDualStack\", \"UseFIPS\"],\n});\nexport const defaultEndpointResolver = (endpointParams, context = {}) => {\n    return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {\n        endpointParams: endpointParams,\n        logger: context.logger,\n    }));\n};\ncustomEndpointFunctions.aws = awsEndpointFunctions;\n","import { AwsSdkSigV4Signer } from \"@aws-sdk/core\";\nimport { NoOpLogger } from \"@smithy/smithy-client\";\nimport { parseUrl } from \"@smithy/url-parser\";\nimport { fromBase64, toBase64 } from \"@smithy/util-base64\";\nimport { fromUtf8, toUtf8 } from \"@smithy/util-utf8\";\nimport { defaultTranscribeStreamingHttpAuthSchemeProvider } from \"./auth/httpAuthSchemeProvider\";\nimport { defaultEndpointResolver } from \"./endpoint/endpointResolver\";\nexport const getRuntimeConfig = (config) => {\n    return {\n        apiVersion: \"2017-10-26\",\n        base64Decoder: config?.base64Decoder ?? fromBase64,\n        base64Encoder: config?.base64Encoder ?? toBase64,\n        disableHostPrefix: config?.disableHostPrefix ?? false,\n        endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,\n        extensions: config?.extensions ?? [],\n        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultTranscribeStreamingHttpAuthSchemeProvider,\n        httpAuthSchemes: config?.httpAuthSchemes ?? [\n            {\n                schemeId: \"aws.auth#sigv4\",\n                identityProvider: (ipc) => ipc.getIdentityProvider(\"aws.auth#sigv4\"),\n                signer: new AwsSdkSigV4Signer(),\n            },\n        ],\n        logger: config?.logger ?? new NoOpLogger(),\n        serviceId: config?.serviceId ?? \"Transcribe Streaming\",\n        urlParser: config?.urlParser ?? parseUrl,\n        utf8Decoder: config?.utf8Decoder ?? fromUtf8,\n        utf8Encoder: config?.utf8Encoder ?? toUtf8,\n    };\n};\n","import packageInfo from \"../package.json\";\nimport { Sha256 } from \"@aws-crypto/sha256-browser\";\nimport { eventStreamPayloadHandler } from \"@aws-sdk/middleware-sdk-transcribe-streaming\";\nimport { WebSocketFetchHandler as WebSocketRequestHandler, } from \"@aws-sdk/middleware-websocket\";\nimport { createDefaultUserAgentProvider } from \"@aws-sdk/util-user-agent-browser\";\nimport { DEFAULT_USE_DUALSTACK_ENDPOINT, DEFAULT_USE_FIPS_ENDPOINT } from \"@smithy/config-resolver\";\nimport { eventStreamSerdeProvider } from \"@smithy/eventstream-serde-browser\";\nimport { FetchHttpHandler as HttpRequestHandler, streamCollector } from \"@smithy/fetch-http-handler\";\nimport { invalidProvider } from \"@smithy/invalid-dependency\";\nimport { calculateBodyLength } from \"@smithy/util-body-length-browser\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE } from \"@smithy/util-retry\";\nimport { getRuntimeConfig as getSharedRuntimeConfig } from \"./runtimeConfig.shared\";\nimport { loadConfigsForDefaultMode } from \"@smithy/smithy-client\";\nimport { resolveDefaultsModeConfig } from \"@smithy/util-defaults-mode-browser\";\nexport const getRuntimeConfig = (config) => {\n    const defaultsMode = resolveDefaultsModeConfig(config);\n    const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);\n    const clientSharedValues = getSharedRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"browser\",\n        defaultsMode,\n        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,\n        credentialDefaultProvider: config?.credentialDefaultProvider ?? ((_) => () => Promise.reject(new Error(\"Credential is missing\"))),\n        defaultUserAgentProvider: config?.defaultUserAgentProvider ??\n            createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: packageInfo.version }),\n        eventStreamPayloadHandlerProvider: config?.eventStreamPayloadHandlerProvider ?? (() => eventStreamPayloadHandler),\n        eventStreamSerdeProvider: config?.eventStreamSerdeProvider ?? eventStreamSerdeProvider,\n        maxAttempts: config?.maxAttempts ?? DEFAULT_MAX_ATTEMPTS,\n        region: config?.region ?? invalidProvider(\"Region is missing\"),\n        requestHandler: WebSocketRequestHandler.create(config?.requestHandler ?? defaultConfigProvider, HttpRequestHandler.create(defaultConfigProvider)),\n        retryMode: config?.retryMode ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),\n        sha256: config?.sha256 ?? Sha256,\n        streamCollector: config?.streamCollector ?? streamCollector,\n        useDualstackEndpoint: config?.useDualstackEndpoint ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),\n        useFipsEndpoint: config?.useFipsEndpoint ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT)),\n    };\n};\n","export const getAwsRegionExtensionConfiguration = (runtimeConfig) => {\n    return {\n        setRegion(region) {\n            runtimeConfig.region = region;\n        },\n        region() {\n            return runtimeConfig.region;\n        },\n    };\n};\nexport const resolveAwsRegionExtensionConfiguration = (awsRegionExtensionConfiguration) => {\n    return {\n        region: awsRegionExtensionConfiguration.region(),\n    };\n};\n","export const getHttpAuthExtensionConfiguration = (runtimeConfig) => {\n    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;\n    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;\n    let _credentials = runtimeConfig.credentials;\n    return {\n        setHttpAuthScheme(httpAuthScheme) {\n            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);\n            if (index === -1) {\n                _httpAuthSchemes.push(httpAuthScheme);\n            }\n            else {\n                _httpAuthSchemes.splice(index, 1, httpAuthScheme);\n            }\n        },\n        httpAuthSchemes() {\n            return _httpAuthSchemes;\n        },\n        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {\n            _httpAuthSchemeProvider = httpAuthSchemeProvider;\n        },\n        httpAuthSchemeProvider() {\n            return _httpAuthSchemeProvider;\n        },\n        setCredentials(credentials) {\n            _credentials = credentials;\n        },\n        credentials() {\n            return _credentials;\n        },\n    };\n};\nexport const resolveHttpAuthRuntimeConfig = (config) => {\n    return {\n        httpAuthSchemes: config.httpAuthSchemes(),\n        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),\n        credentials: config.credentials(),\n    };\n};\n","import { getAwsRegionExtensionConfiguration, resolveAwsRegionExtensionConfiguration, } from \"@aws-sdk/region-config-resolver\";\nimport { getHttpHandlerExtensionConfiguration, resolveHttpHandlerRuntimeConfig } from \"@smithy/protocol-http\";\nimport { getDefaultExtensionConfiguration, resolveDefaultRuntimeConfig } from \"@smithy/smithy-client\";\nimport { getHttpAuthExtensionConfiguration, resolveHttpAuthRuntimeConfig } from \"./auth/httpAuthExtensionConfiguration\";\nexport const resolveRuntimeExtensions = (runtimeConfig, extensions) => {\n    const extensionConfiguration = Object.assign(getAwsRegionExtensionConfiguration(runtimeConfig), getDefaultExtensionConfiguration(runtimeConfig), getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));\n    extensions.forEach((extension) => extension.configure(extensionConfiguration));\n    return Object.assign(runtimeConfig, resolveAwsRegionExtensionConfiguration(extensionConfiguration), resolveDefaultRuntimeConfig(extensionConfiguration), resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));\n};\n","import { resolveEventStreamConfig, } from \"@aws-sdk/middleware-eventstream\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig, } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRecursionDetectionPlugin } from \"@aws-sdk/middleware-recursion-detection\";\nimport { getUserAgentPlugin, resolveUserAgentConfig, } from \"@aws-sdk/middleware-user-agent\";\nimport { resolveWebSocketConfig } from \"@aws-sdk/middleware-websocket\";\nimport { resolveRegionConfig } from \"@smithy/config-resolver\";\nimport { DefaultIdentityProviderConfig, getHttpAuthSchemeEndpointRuleSetPlugin, getHttpSigningPlugin, } from \"@smithy/core\";\nimport { resolveEventStreamSerdeConfig, } from \"@smithy/eventstream-serde-config-resolver\";\nimport { getContentLengthPlugin } from \"@smithy/middleware-content-length\";\nimport { resolveEndpointConfig } from \"@smithy/middleware-endpoint\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@smithy/middleware-retry\";\nimport { Client as __Client, } from \"@smithy/smithy-client\";\nimport { defaultTranscribeStreamingHttpAuthSchemeParametersProvider, resolveHttpAuthSchemeConfig, } from \"./auth/httpAuthSchemeProvider\";\nimport { resolveClientEndpointParameters, } from \"./endpoint/EndpointParameters\";\nimport { getRuntimeConfig as __getRuntimeConfig } from \"./runtimeConfig\";\nimport { resolveRuntimeExtensions } from \"./runtimeExtensions\";\nexport { __Client };\nexport class TranscribeStreamingClient extends __Client {\n    config;\n    constructor(...[configuration]) {\n        const _config_0 = __getRuntimeConfig(configuration || {});\n        super(_config_0);\n        this.initConfig = _config_0;\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = resolveUserAgentConfig(_config_1);\n        const _config_3 = resolveRetryConfig(_config_2);\n        const _config_4 = resolveRegionConfig(_config_3);\n        const _config_5 = resolveHostHeaderConfig(_config_4);\n        const _config_6 = resolveEndpointConfig(_config_5);\n        const _config_7 = resolveEventStreamSerdeConfig(_config_6);\n        const _config_8 = resolveHttpAuthSchemeConfig(_config_7);\n        const _config_9 = resolveEventStreamConfig(_config_8);\n        const _config_10 = resolveWebSocketConfig(_config_9);\n        const _config_11 = resolveRuntimeExtensions(_config_10, configuration?.extensions || []);\n        this.config = _config_11;\n        this.middlewareStack.use(getUserAgentPlugin(this.config));\n        this.middlewareStack.use(getRetryPlugin(this.config));\n        this.middlewareStack.use(getContentLengthPlugin(this.config));\n        this.middlewareStack.use(getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(getLoggerPlugin(this.config));\n        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));\n        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {\n            httpAuthSchemeParametersProvider: defaultTranscribeStreamingHttpAuthSchemeParametersProvider,\n            identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({\n                \"aws.auth#sigv4\": config.credentials,\n            }),\n        }));\n        this.middlewareStack.use(getHttpSigningPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n","import { ServiceException as __ServiceException, } from \"@smithy/smithy-client\";\nexport { __ServiceException };\nexport class TranscribeStreamingServiceException extends __ServiceException {\n    constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, TranscribeStreamingServiceException.prototype);\n    }\n}\n","import { SENSITIVE_STRING } from \"@smithy/smithy-client\";\nimport { TranscribeStreamingServiceException as __BaseException } from \"./TranscribeStreamingServiceException\";\nexport const ItemType = {\n    PRONUNCIATION: \"pronunciation\",\n    PUNCTUATION: \"punctuation\",\n};\nexport const ParticipantRole = {\n    AGENT: \"AGENT\",\n    CUSTOMER: \"CUSTOMER\",\n};\nexport const ContentRedactionOutput = {\n    REDACTED: \"redacted\",\n    REDACTED_AND_UNREDACTED: \"redacted_and_unredacted\",\n};\nexport var AudioStream;\n(function (AudioStream) {\n    AudioStream.visit = (value, visitor) => {\n        if (value.AudioEvent !== undefined)\n            return visitor.AudioEvent(value.AudioEvent);\n        if (value.ConfigurationEvent !== undefined)\n            return visitor.ConfigurationEvent(value.ConfigurationEvent);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(AudioStream || (AudioStream = {}));\nexport class BadRequestException extends __BaseException {\n    name = \"BadRequestException\";\n    $fault = \"client\";\n    Message;\n    constructor(opts) {\n        super({\n            name: \"BadRequestException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, BadRequestException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const CallAnalyticsLanguageCode = {\n    DE_DE: \"de-DE\",\n    EN_AU: \"en-AU\",\n    EN_GB: \"en-GB\",\n    EN_US: \"en-US\",\n    ES_US: \"es-US\",\n    FR_CA: \"fr-CA\",\n    FR_FR: \"fr-FR\",\n    IT_IT: \"it-IT\",\n    PT_BR: \"pt-BR\",\n};\nexport class ConflictException extends __BaseException {\n    name = \"ConflictException\";\n    $fault = \"client\";\n    Message;\n    constructor(opts) {\n        super({\n            name: \"ConflictException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, ConflictException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InternalFailureException extends __BaseException {\n    name = \"InternalFailureException\";\n    $fault = \"server\";\n    Message;\n    constructor(opts) {\n        super({\n            name: \"InternalFailureException\",\n            $fault: \"server\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, InternalFailureException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class LimitExceededException extends __BaseException {\n    name = \"LimitExceededException\";\n    $fault = \"client\";\n    Message;\n    constructor(opts) {\n        super({\n            name: \"LimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, LimitExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ServiceUnavailableException extends __BaseException {\n    name = \"ServiceUnavailableException\";\n    $fault = \"server\";\n    Message;\n    constructor(opts) {\n        super({\n            name: \"ServiceUnavailableException\",\n            $fault: \"server\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const Sentiment = {\n    MIXED: \"MIXED\",\n    NEGATIVE: \"NEGATIVE\",\n    NEUTRAL: \"NEUTRAL\",\n    POSITIVE: \"POSITIVE\",\n};\nexport var CallAnalyticsTranscriptResultStream;\n(function (CallAnalyticsTranscriptResultStream) {\n    CallAnalyticsTranscriptResultStream.visit = (value, visitor) => {\n        if (value.UtteranceEvent !== undefined)\n            return visitor.UtteranceEvent(value.UtteranceEvent);\n        if (value.CategoryEvent !== undefined)\n            return visitor.CategoryEvent(value.CategoryEvent);\n        if (value.BadRequestException !== undefined)\n            return visitor.BadRequestException(value.BadRequestException);\n        if (value.LimitExceededException !== undefined)\n            return visitor.LimitExceededException(value.LimitExceededException);\n        if (value.InternalFailureException !== undefined)\n            return visitor.InternalFailureException(value.InternalFailureException);\n        if (value.ConflictException !== undefined)\n            return visitor.ConflictException(value.ConflictException);\n        if (value.ServiceUnavailableException !== undefined)\n            return visitor.ServiceUnavailableException(value.ServiceUnavailableException);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(CallAnalyticsTranscriptResultStream || (CallAnalyticsTranscriptResultStream = {}));\nexport const ClinicalNoteGenerationStatus = {\n    COMPLETED: \"COMPLETED\",\n    FAILED: \"FAILED\",\n    IN_PROGRESS: \"IN_PROGRESS\",\n};\nexport const MedicalScribeNoteTemplate = {\n    BEHAVIORAL_SOAP: \"BEHAVIORAL_SOAP\",\n    BIRP: \"BIRP\",\n    DAP: \"DAP\",\n    GIRPP: \"GIRPP\",\n    HISTORY_AND_PHYSICAL: \"HISTORY_AND_PHYSICAL\",\n    PHYSICAL_SOAP: \"PHYSICAL_SOAP\",\n    SIRP: \"SIRP\",\n};\nexport const ContentIdentificationType = {\n    PII: \"PII\",\n};\nexport const ContentRedactionType = {\n    PII: \"PII\",\n};\nexport const MedicalScribeParticipantRole = {\n    CLINICIAN: \"CLINICIAN\",\n    PATIENT: \"PATIENT\",\n};\nexport const MedicalScribeLanguageCode = {\n    EN_US: \"en-US\",\n};\nexport const MedicalScribeMediaEncoding = {\n    FLAC: \"flac\",\n    OGG_OPUS: \"ogg-opus\",\n    PCM: \"pcm\",\n};\nexport const MedicalScribeStreamStatus = {\n    COMPLETED: \"COMPLETED\",\n    FAILED: \"FAILED\",\n    IN_PROGRESS: \"IN_PROGRESS\",\n    PAUSED: \"PAUSED\",\n};\nexport const MedicalScribeVocabularyFilterMethod = {\n    MASK: \"mask\",\n    REMOVE: \"remove\",\n    TAG: \"tag\",\n};\nexport class ResourceNotFoundException extends __BaseException {\n    name = \"ResourceNotFoundException\";\n    $fault = \"client\";\n    Message;\n    constructor(opts) {\n        super({\n            name: \"ResourceNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const LanguageCode = {\n    AF_ZA: \"af-ZA\",\n    AR_AE: \"ar-AE\",\n    AR_SA: \"ar-SA\",\n    CA_ES: \"ca-ES\",\n    CS_CZ: \"cs-CZ\",\n    DA_DK: \"da-DK\",\n    DE_CH: \"de-CH\",\n    DE_DE: \"de-DE\",\n    EL_GR: \"el-GR\",\n    EN_AB: \"en-AB\",\n    EN_AU: \"en-AU\",\n    EN_GB: \"en-GB\",\n    EN_IE: \"en-IE\",\n    EN_IN: \"en-IN\",\n    EN_NZ: \"en-NZ\",\n    EN_US: \"en-US\",\n    EN_WL: \"en-WL\",\n    EN_ZA: \"en-ZA\",\n    ES_ES: \"es-ES\",\n    ES_US: \"es-US\",\n    EU_ES: \"eu-ES\",\n    FA_IR: \"fa-IR\",\n    FI_FI: \"fi-FI\",\n    FR_CA: \"fr-CA\",\n    FR_FR: \"fr-FR\",\n    GL_ES: \"gl-ES\",\n    HE_IL: \"he-IL\",\n    HI_IN: \"hi-IN\",\n    HR_HR: \"hr-HR\",\n    ID_ID: \"id-ID\",\n    IT_IT: \"it-IT\",\n    JA_JP: \"ja-JP\",\n    KO_KR: \"ko-KR\",\n    LV_LV: \"lv-LV\",\n    MS_MY: \"ms-MY\",\n    NL_NL: \"nl-NL\",\n    NO_NO: \"no-NO\",\n    PL_PL: \"pl-PL\",\n    PT_BR: \"pt-BR\",\n    PT_PT: \"pt-PT\",\n    RO_RO: \"ro-RO\",\n    RU_RU: \"ru-RU\",\n    SK_SK: \"sk-SK\",\n    SO_SO: \"so-SO\",\n    SR_RS: \"sr-RS\",\n    SV_SE: \"sv-SE\",\n    TH_TH: \"th-TH\",\n    TL_PH: \"tl-PH\",\n    UK_UA: \"uk-UA\",\n    VI_VN: \"vi-VN\",\n    ZH_CN: \"zh-CN\",\n    ZH_HK: \"zh-HK\",\n    ZH_TW: \"zh-TW\",\n    ZU_ZA: \"zu-ZA\",\n};\nexport const MediaEncoding = {\n    FLAC: \"flac\",\n    OGG_OPUS: \"ogg-opus\",\n    PCM: \"pcm\",\n};\nexport const MedicalContentIdentificationType = {\n    PHI: \"PHI\",\n};\nexport const Pronouns = {\n    HE_HIM: \"HE_HIM\",\n    SHE_HER: \"SHE_HER\",\n    THEY_THEM: \"THEY_THEM\",\n};\nexport const MedicalScribeSessionControlEventType = {\n    END_OF_SESSION: \"END_OF_SESSION\",\n};\nexport var MedicalScribeInputStream;\n(function (MedicalScribeInputStream) {\n    MedicalScribeInputStream.visit = (value, visitor) => {\n        if (value.AudioEvent !== undefined)\n            return visitor.AudioEvent(value.AudioEvent);\n        if (value.SessionControlEvent !== undefined)\n            return visitor.SessionControlEvent(value.SessionControlEvent);\n        if (value.ConfigurationEvent !== undefined)\n            return visitor.ConfigurationEvent(value.ConfigurationEvent);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(MedicalScribeInputStream || (MedicalScribeInputStream = {}));\nexport const MedicalScribeTranscriptItemType = {\n    PRONUNCIATION: \"pronunciation\",\n    PUNCTUATION: \"punctuation\",\n};\nexport var MedicalScribeResultStream;\n(function (MedicalScribeResultStream) {\n    MedicalScribeResultStream.visit = (value, visitor) => {\n        if (value.TranscriptEvent !== undefined)\n            return visitor.TranscriptEvent(value.TranscriptEvent);\n        if (value.BadRequestException !== undefined)\n            return visitor.BadRequestException(value.BadRequestException);\n        if (value.LimitExceededException !== undefined)\n            return visitor.LimitExceededException(value.LimitExceededException);\n        if (value.InternalFailureException !== undefined)\n            return visitor.InternalFailureException(value.InternalFailureException);\n        if (value.ConflictException !== undefined)\n            return visitor.ConflictException(value.ConflictException);\n        if (value.ServiceUnavailableException !== undefined)\n            return visitor.ServiceUnavailableException(value.ServiceUnavailableException);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(MedicalScribeResultStream || (MedicalScribeResultStream = {}));\nexport var MedicalTranscriptResultStream;\n(function (MedicalTranscriptResultStream) {\n    MedicalTranscriptResultStream.visit = (value, visitor) => {\n        if (value.TranscriptEvent !== undefined)\n            return visitor.TranscriptEvent(value.TranscriptEvent);\n        if (value.BadRequestException !== undefined)\n            return visitor.BadRequestException(value.BadRequestException);\n        if (value.LimitExceededException !== undefined)\n            return visitor.LimitExceededException(value.LimitExceededException);\n        if (value.InternalFailureException !== undefined)\n            return visitor.InternalFailureException(value.InternalFailureException);\n        if (value.ConflictException !== undefined)\n            return visitor.ConflictException(value.ConflictException);\n        if (value.ServiceUnavailableException !== undefined)\n            return visitor.ServiceUnavailableException(value.ServiceUnavailableException);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(MedicalTranscriptResultStream || (MedicalTranscriptResultStream = {}));\nexport const PartialResultsStability = {\n    HIGH: \"high\",\n    LOW: \"low\",\n    MEDIUM: \"medium\",\n};\nexport const Specialty = {\n    CARDIOLOGY: \"CARDIOLOGY\",\n    NEUROLOGY: \"NEUROLOGY\",\n    ONCOLOGY: \"ONCOLOGY\",\n    PRIMARYCARE: \"PRIMARYCARE\",\n    RADIOLOGY: \"RADIOLOGY\",\n    UROLOGY: \"UROLOGY\",\n};\nexport const VocabularyFilterMethod = {\n    MASK: \"mask\",\n    REMOVE: \"remove\",\n    TAG: \"tag\",\n};\nexport const Type = {\n    CONVERSATION: \"CONVERSATION\",\n    DICTATION: \"DICTATION\",\n};\nexport var TranscriptResultStream;\n(function (TranscriptResultStream) {\n    TranscriptResultStream.visit = (value, visitor) => {\n        if (value.TranscriptEvent !== undefined)\n            return visitor.TranscriptEvent(value.TranscriptEvent);\n        if (value.BadRequestException !== undefined)\n            return visitor.BadRequestException(value.BadRequestException);\n        if (value.LimitExceededException !== undefined)\n            return visitor.LimitExceededException(value.LimitExceededException);\n        if (value.InternalFailureException !== undefined)\n            return visitor.InternalFailureException(value.InternalFailureException);\n        if (value.ConflictException !== undefined)\n            return visitor.ConflictException(value.ConflictException);\n        if (value.ServiceUnavailableException !== undefined)\n            return visitor.ServiceUnavailableException(value.ServiceUnavailableException);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(TranscriptResultStream || (TranscriptResultStream = {}));\nexport const AudioStreamFilterSensitiveLog = (obj) => {\n    if (obj.AudioEvent !== undefined)\n        return { AudioEvent: obj.AudioEvent };\n    if (obj.ConfigurationEvent !== undefined)\n        return { ConfigurationEvent: obj.ConfigurationEvent };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const CallAnalyticsTranscriptResultStreamFilterSensitiveLog = (obj) => {\n    if (obj.UtteranceEvent !== undefined)\n        return { UtteranceEvent: obj.UtteranceEvent };\n    if (obj.CategoryEvent !== undefined)\n        return { CategoryEvent: obj.CategoryEvent };\n    if (obj.BadRequestException !== undefined)\n        return { BadRequestException: obj.BadRequestException };\n    if (obj.LimitExceededException !== undefined)\n        return { LimitExceededException: obj.LimitExceededException };\n    if (obj.InternalFailureException !== undefined)\n        return { InternalFailureException: obj.InternalFailureException };\n    if (obj.ConflictException !== undefined)\n        return { ConflictException: obj.ConflictException };\n    if (obj.ServiceUnavailableException !== undefined)\n        return { ServiceUnavailableException: obj.ServiceUnavailableException };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const MedicalScribePatientContextFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Pronouns && { Pronouns: SENSITIVE_STRING }),\n});\nexport const MedicalScribeContextFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.PatientContext && { PatientContext: MedicalScribePatientContextFilterSensitiveLog(obj.PatientContext) }),\n});\nexport const MedicalScribeConfigurationEventFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.MedicalScribeContext && {\n        MedicalScribeContext: MedicalScribeContextFilterSensitiveLog(obj.MedicalScribeContext),\n    }),\n});\nexport const MedicalScribeInputStreamFilterSensitiveLog = (obj) => {\n    if (obj.AudioEvent !== undefined)\n        return { AudioEvent: obj.AudioEvent };\n    if (obj.SessionControlEvent !== undefined)\n        return { SessionControlEvent: obj.SessionControlEvent };\n    if (obj.ConfigurationEvent !== undefined)\n        return { ConfigurationEvent: MedicalScribeConfigurationEventFilterSensitiveLog(obj.ConfigurationEvent) };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const MedicalScribeResultStreamFilterSensitiveLog = (obj) => {\n    if (obj.TranscriptEvent !== undefined)\n        return { TranscriptEvent: obj.TranscriptEvent };\n    if (obj.BadRequestException !== undefined)\n        return { BadRequestException: obj.BadRequestException };\n    if (obj.LimitExceededException !== undefined)\n        return { LimitExceededException: obj.LimitExceededException };\n    if (obj.InternalFailureException !== undefined)\n        return { InternalFailureException: obj.InternalFailureException };\n    if (obj.ConflictException !== undefined)\n        return { ConflictException: obj.ConflictException };\n    if (obj.ServiceUnavailableException !== undefined)\n        return { ServiceUnavailableException: obj.ServiceUnavailableException };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const MedicalTranscriptResultStreamFilterSensitiveLog = (obj) => {\n    if (obj.TranscriptEvent !== undefined)\n        return { TranscriptEvent: obj.TranscriptEvent };\n    if (obj.BadRequestException !== undefined)\n        return { BadRequestException: obj.BadRequestException };\n    if (obj.LimitExceededException !== undefined)\n        return { LimitExceededException: obj.LimitExceededException };\n    if (obj.InternalFailureException !== undefined)\n        return { InternalFailureException: obj.InternalFailureException };\n    if (obj.ConflictException !== undefined)\n        return { ConflictException: obj.ConflictException };\n    if (obj.ServiceUnavailableException !== undefined)\n        return { ServiceUnavailableException: obj.ServiceUnavailableException };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const StartCallAnalyticsStreamTranscriptionRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.AudioStream && { AudioStream: \"STREAMING_CONTENT\" }),\n});\nexport const StartCallAnalyticsStreamTranscriptionResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.CallAnalyticsTranscriptResultStream && { CallAnalyticsTranscriptResultStream: \"STREAMING_CONTENT\" }),\n});\nexport const StartMedicalScribeStreamRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.InputStream && { InputStream: \"STREAMING_CONTENT\" }),\n});\nexport const StartMedicalScribeStreamResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.ResultStream && { ResultStream: \"STREAMING_CONTENT\" }),\n});\nexport const StartMedicalStreamTranscriptionRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.AudioStream && { AudioStream: \"STREAMING_CONTENT\" }),\n});\nexport const StartMedicalStreamTranscriptionResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.TranscriptResultStream && { TranscriptResultStream: \"STREAMING_CONTENT\" }),\n});\nexport const StartStreamTranscriptionRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.AudioStream && { AudioStream: \"STREAMING_CONTENT\" }),\n});\nexport const TranscriptResultStreamFilterSensitiveLog = (obj) => {\n    if (obj.TranscriptEvent !== undefined)\n        return { TranscriptEvent: obj.TranscriptEvent };\n    if (obj.BadRequestException !== undefined)\n        return { BadRequestException: obj.BadRequestException };\n    if (obj.LimitExceededException !== undefined)\n        return { LimitExceededException: obj.LimitExceededException };\n    if (obj.InternalFailureException !== undefined)\n        return { InternalFailureException: obj.InternalFailureException };\n    if (obj.ConflictException !== undefined)\n        return { ConflictException: obj.ConflictException };\n    if (obj.ServiceUnavailableException !== undefined)\n        return { ServiceUnavailableException: obj.ServiceUnavailableException };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const StartStreamTranscriptionResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.TranscriptResultStream && { TranscriptResultStream: \"STREAMING_CONTENT\" }),\n});\n","import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from \"@aws-sdk/core\";\nimport { requestBuilder as rb } from \"@smithy/core\";\nimport { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, isSerializableHeaderValue, limitedParseDouble as __limitedParseDouble, map, parseBoolean as __parseBoolean, parseEpochTimestamp as __parseEpochTimestamp, strictParseInt32 as __strictParseInt32, take, withBaseException, } from \"@smithy/smithy-client\";\nimport { AudioStream, BadRequestException, ConflictException, InternalFailureException, LimitExceededException, MedicalScribeInputStream, ResourceNotFoundException, ServiceUnavailableException, } from \"../models/models_0\";\nimport { TranscribeStreamingServiceException as __BaseException } from \"../models/TranscribeStreamingServiceException\";\nexport const se_GetMedicalScribeStreamCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = {};\n    b.bp(\"/medical-scribe-stream/{SessionId}\");\n    b.p(\"SessionId\", () => input.SessionId, \"{SessionId}\", false);\n    let body;\n    b.m(\"GET\").h(headers).b(body);\n    return b.build();\n};\nexport const se_StartCallAnalyticsStreamTranscriptionCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/json\",\n        [_xatlc]: input[_LC],\n        [_xatsr]: [() => isSerializableHeaderValue(input[_MSRH]), () => input[_MSRH].toString()],\n        [_xatme]: input[_ME],\n        [_xatvn]: input[_VN],\n        [_xatsi]: input[_SI],\n        [_xatvfn]: input[_VFN],\n        [_xatvfm]: input[_VFM],\n        [_xatlmn]: input[_LMN],\n        [_xatil]: [() => isSerializableHeaderValue(input[_IL]), () => input[_IL].toString()],\n        [_xatlo]: input[_LO],\n        [_xatpl]: input[_PL],\n        [_xatvn_]: input[_VNo],\n        [_xatvfn_]: input[_VFNo],\n        [_xateprs]: [() => isSerializableHeaderValue(input[_EPRS]), () => input[_EPRS].toString()],\n        [_xatprs]: input[_PRS],\n        [_xatcit]: input[_CIT],\n        [_xatcrt]: input[_CRT],\n        [_xatpet]: input[_PET],\n    });\n    b.bp(\"/call-analytics-stream-transcription\");\n    let body;\n    if (input.AudioStream !== undefined) {\n        body = se_AudioStream(input.AudioStream, context);\n    }\n    b.m(\"POST\").h(headers).b(body);\n    return b.build();\n};\nexport const se_StartMedicalScribeStreamCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/json\",\n        [_xatsi]: input[_SI],\n        [_xatlc]: input[_LC],\n        [_xatsr]: [() => isSerializableHeaderValue(input[_MSRH]), () => input[_MSRH].toString()],\n        [_xatme]: input[_ME],\n    });\n    b.bp(\"/medical-scribe-stream\");\n    let body;\n    if (input.InputStream !== undefined) {\n        body = se_MedicalScribeInputStream(input.InputStream, context);\n    }\n    b.m(\"POST\").h(headers).b(body);\n    return b.build();\n};\nexport const se_StartMedicalStreamTranscriptionCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/json\",\n        [_xatlc]: input[_LC],\n        [_xatsr]: [() => isSerializableHeaderValue(input[_MSRH]), () => input[_MSRH].toString()],\n        [_xatme]: input[_ME],\n        [_xatvn]: input[_VN],\n        [_xats]: input[_S],\n        [_xatt]: input[_T],\n        [_xatssl]: [() => isSerializableHeaderValue(input[_SSL]), () => input[_SSL].toString()],\n        [_xatsi]: input[_SI],\n        [_xateci]: [() => isSerializableHeaderValue(input[_ECI]), () => input[_ECI].toString()],\n        [_xatnoc]: [() => isSerializableHeaderValue(input[_NOC]), () => input[_NOC].toString()],\n        [_xatcit]: input[_CIT],\n    });\n    b.bp(\"/medical-stream-transcription\");\n    let body;\n    if (input.AudioStream !== undefined) {\n        body = se_AudioStream(input.AudioStream, context);\n    }\n    b.m(\"POST\").h(headers).b(body);\n    return b.build();\n};\nexport const se_StartStreamTranscriptionCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/json\",\n        [_xatlc]: input[_LC],\n        [_xatsr]: [() => isSerializableHeaderValue(input[_MSRH]), () => input[_MSRH].toString()],\n        [_xatme]: input[_ME],\n        [_xatvn]: input[_VN],\n        [_xatsi]: input[_SI],\n        [_xatvfn]: input[_VFN],\n        [_xatvfm]: input[_VFM],\n        [_xatssl]: [() => isSerializableHeaderValue(input[_SSL]), () => input[_SSL].toString()],\n        [_xateci]: [() => isSerializableHeaderValue(input[_ECI]), () => input[_ECI].toString()],\n        [_xatnoc]: [() => isSerializableHeaderValue(input[_NOC]), () => input[_NOC].toString()],\n        [_xateprs]: [() => isSerializableHeaderValue(input[_EPRS]), () => input[_EPRS].toString()],\n        [_xatprs]: input[_PRS],\n        [_xatcit]: input[_CIT],\n        [_xatcrt]: input[_CRT],\n        [_xatpet]: input[_PET],\n        [_xatlmn]: input[_LMN],\n        [_xatil]: [() => isSerializableHeaderValue(input[_IL]), () => input[_IL].toString()],\n        [_xatlo]: input[_LO],\n        [_xatpl]: input[_PL],\n        [_xatiml]: [() => isSerializableHeaderValue(input[_IML]), () => input[_IML].toString()],\n        [_xatvn_]: input[_VNo],\n        [_xatvfn_]: input[_VFNo],\n    });\n    b.bp(\"/stream-transcription\");\n    let body;\n    if (input.AudioStream !== undefined) {\n        body = se_AudioStream(input.AudioStream, context);\n    }\n    b.m(\"POST\").h(headers).b(body);\n    return b.build();\n};\nexport const de_GetMedicalScribeStreamCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        MedicalScribeStreamDetails: (_) => de_MedicalScribeStreamDetails(_, context),\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nexport const de_StartCallAnalyticsStreamTranscriptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        [_RI]: [, output.headers[_xari]],\n        [_LC]: [, output.headers[_xatlc]],\n        [_MSRH]: [() => void 0 !== output.headers[_xatsr], () => __strictParseInt32(output.headers[_xatsr])],\n        [_ME]: [, output.headers[_xatme]],\n        [_VN]: [, output.headers[_xatvn]],\n        [_SI]: [, output.headers[_xatsi]],\n        [_VFN]: [, output.headers[_xatvfn]],\n        [_VFM]: [, output.headers[_xatvfm]],\n        [_LMN]: [, output.headers[_xatlmn]],\n        [_IL]: [() => void 0 !== output.headers[_xatil], () => __parseBoolean(output.headers[_xatil])],\n        [_LO]: [, output.headers[_xatlo]],\n        [_PL]: [, output.headers[_xatpl]],\n        [_VNo]: [, output.headers[_xatvn_]],\n        [_VFNo]: [, output.headers[_xatvfn_]],\n        [_EPRS]: [() => void 0 !== output.headers[_xateprs], () => __parseBoolean(output.headers[_xateprs])],\n        [_PRS]: [, output.headers[_xatprs]],\n        [_CIT]: [, output.headers[_xatcit]],\n        [_CRT]: [, output.headers[_xatcrt]],\n        [_PET]: [, output.headers[_xatpet]],\n    });\n    const data = output.body;\n    contents.CallAnalyticsTranscriptResultStream = de_CallAnalyticsTranscriptResultStream(data, context);\n    return contents;\n};\nexport const de_StartMedicalScribeStreamCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        [_SI]: [, output.headers[_xatsi]],\n        [_RI]: [, output.headers[_xari]],\n        [_LC]: [, output.headers[_xatlc]],\n        [_MSRH]: [() => void 0 !== output.headers[_xatsr], () => __strictParseInt32(output.headers[_xatsr])],\n        [_ME]: [, output.headers[_xatme]],\n    });\n    const data = output.body;\n    contents.ResultStream = de_MedicalScribeResultStream(data, context);\n    return contents;\n};\nexport const de_StartMedicalStreamTranscriptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        [_RI]: [, output.headers[_xari]],\n        [_LC]: [, output.headers[_xatlc]],\n        [_MSRH]: [() => void 0 !== output.headers[_xatsr], () => __strictParseInt32(output.headers[_xatsr])],\n        [_ME]: [, output.headers[_xatme]],\n        [_VN]: [, output.headers[_xatvn]],\n        [_S]: [, output.headers[_xats]],\n        [_T]: [, output.headers[_xatt]],\n        [_SSL]: [() => void 0 !== output.headers[_xatssl], () => __parseBoolean(output.headers[_xatssl])],\n        [_SI]: [, output.headers[_xatsi]],\n        [_ECI]: [() => void 0 !== output.headers[_xateci], () => __parseBoolean(output.headers[_xateci])],\n        [_NOC]: [() => void 0 !== output.headers[_xatnoc], () => __strictParseInt32(output.headers[_xatnoc])],\n        [_CIT]: [, output.headers[_xatcit]],\n    });\n    const data = output.body;\n    contents.TranscriptResultStream = de_MedicalTranscriptResultStream(data, context);\n    return contents;\n};\nexport const de_StartStreamTranscriptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        [_RI]: [, output.headers[_xari]],\n        [_LC]: [, output.headers[_xatlc]],\n        [_MSRH]: [() => void 0 !== output.headers[_xatsr], () => __strictParseInt32(output.headers[_xatsr])],\n        [_ME]: [, output.headers[_xatme]],\n        [_VN]: [, output.headers[_xatvn]],\n        [_SI]: [, output.headers[_xatsi]],\n        [_VFN]: [, output.headers[_xatvfn]],\n        [_VFM]: [, output.headers[_xatvfm]],\n        [_SSL]: [() => void 0 !== output.headers[_xatssl], () => __parseBoolean(output.headers[_xatssl])],\n        [_ECI]: [() => void 0 !== output.headers[_xateci], () => __parseBoolean(output.headers[_xateci])],\n        [_NOC]: [() => void 0 !== output.headers[_xatnoc], () => __strictParseInt32(output.headers[_xatnoc])],\n        [_EPRS]: [() => void 0 !== output.headers[_xateprs], () => __parseBoolean(output.headers[_xateprs])],\n        [_PRS]: [, output.headers[_xatprs]],\n        [_CIT]: [, output.headers[_xatcit]],\n        [_CRT]: [, output.headers[_xatcrt]],\n        [_PET]: [, output.headers[_xatpet]],\n        [_LMN]: [, output.headers[_xatlmn]],\n        [_IL]: [() => void 0 !== output.headers[_xatil], () => __parseBoolean(output.headers[_xatil])],\n        [_LO]: [, output.headers[_xatlo]],\n        [_PL]: [, output.headers[_xatpl]],\n        [_IML]: [() => void 0 !== output.headers[_xatiml], () => __parseBoolean(output.headers[_xatiml])],\n        [_VNo]: [, output.headers[_xatvn_]],\n        [_VFNo]: [, output.headers[_xatvfn_]],\n    });\n    const data = output.body;\n    contents.TranscriptResultStream = de_TranscriptResultStream(data, context);\n    return contents;\n};\nconst de_CommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"BadRequestException\":\n        case \"com.amazonaws.transcribestreaming#BadRequestException\":\n            throw await de_BadRequestExceptionRes(parsedOutput, context);\n        case \"InternalFailureException\":\n        case \"com.amazonaws.transcribestreaming#InternalFailureException\":\n            throw await de_InternalFailureExceptionRes(parsedOutput, context);\n        case \"LimitExceededException\":\n        case \"com.amazonaws.transcribestreaming#LimitExceededException\":\n            throw await de_LimitExceededExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.transcribestreaming#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ConflictException\":\n        case \"com.amazonaws.transcribestreaming#ConflictException\":\n            throw await de_ConflictExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.transcribestreaming#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nconst throwDefaultError = withBaseException(__BaseException);\nconst de_BadRequestExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        Message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new BadRequestException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ConflictExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        Message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ConflictException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InternalFailureExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        Message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InternalFailureException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_LimitExceededExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        Message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new LimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        Message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ResourceNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        Message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ServiceUnavailableException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst se_AudioStream = (input, context) => {\n    const eventMarshallingVisitor = (event) => AudioStream.visit(event, {\n        AudioEvent: (value) => se_AudioEvent_event(value, context),\n        ConfigurationEvent: (value) => se_ConfigurationEvent_event(value, context),\n        _: (value) => value,\n    });\n    return context.eventStreamMarshaller.serialize(input, eventMarshallingVisitor);\n};\nconst se_MedicalScribeInputStream = (input, context) => {\n    const eventMarshallingVisitor = (event) => MedicalScribeInputStream.visit(event, {\n        AudioEvent: (value) => se_MedicalScribeAudioEvent_event(value, context),\n        SessionControlEvent: (value) => se_MedicalScribeSessionControlEvent_event(value, context),\n        ConfigurationEvent: (value) => se_MedicalScribeConfigurationEvent_event(value, context),\n        _: (value) => value,\n    });\n    return context.eventStreamMarshaller.serialize(input, eventMarshallingVisitor);\n};\nconst se_AudioEvent_event = (input, context) => {\n    const headers = {\n        \":event-type\": { type: \"string\", value: \"AudioEvent\" },\n        \":message-type\": { type: \"string\", value: \"event\" },\n        \":content-type\": { type: \"string\", value: \"application/octet-stream\" },\n    };\n    let body = new Uint8Array();\n    if (input.AudioChunk != null) {\n        body = input.AudioChunk;\n    }\n    return { headers, body };\n};\nconst se_ConfigurationEvent_event = (input, context) => {\n    const headers = {\n        \":event-type\": { type: \"string\", value: \"ConfigurationEvent\" },\n        \":message-type\": { type: \"string\", value: \"event\" },\n        \":content-type\": { type: \"string\", value: \"application/json\" },\n    };\n    let body = new Uint8Array();\n    body = _json(input);\n    body = context.utf8Decoder(JSON.stringify(body));\n    return { headers, body };\n};\nconst se_MedicalScribeAudioEvent_event = (input, context) => {\n    const headers = {\n        \":event-type\": { type: \"string\", value: \"AudioEvent\" },\n        \":message-type\": { type: \"string\", value: \"event\" },\n        \":content-type\": { type: \"string\", value: \"application/octet-stream\" },\n    };\n    let body = new Uint8Array();\n    if (input.AudioChunk != null) {\n        body = input.AudioChunk;\n    }\n    return { headers, body };\n};\nconst se_MedicalScribeConfigurationEvent_event = (input, context) => {\n    const headers = {\n        \":event-type\": { type: \"string\", value: \"ConfigurationEvent\" },\n        \":message-type\": { type: \"string\", value: \"event\" },\n        \":content-type\": { type: \"string\", value: \"application/json\" },\n    };\n    let body = new Uint8Array();\n    body = _json(input);\n    body = context.utf8Decoder(JSON.stringify(body));\n    return { headers, body };\n};\nconst se_MedicalScribeSessionControlEvent_event = (input, context) => {\n    const headers = {\n        \":event-type\": { type: \"string\", value: \"SessionControlEvent\" },\n        \":message-type\": { type: \"string\", value: \"event\" },\n        \":content-type\": { type: \"string\", value: \"application/json\" },\n    };\n    let body = new Uint8Array();\n    body = _json(input);\n    body = context.utf8Decoder(JSON.stringify(body));\n    return { headers, body };\n};\nconst de_CallAnalyticsTranscriptResultStream = (output, context) => {\n    return context.eventStreamMarshaller.deserialize(output, async (event) => {\n        if (event[\"UtteranceEvent\"] != null) {\n            return {\n                UtteranceEvent: await de_UtteranceEvent_event(event[\"UtteranceEvent\"], context),\n            };\n        }\n        if (event[\"CategoryEvent\"] != null) {\n            return {\n                CategoryEvent: await de_CategoryEvent_event(event[\"CategoryEvent\"], context),\n            };\n        }\n        if (event[\"BadRequestException\"] != null) {\n            return {\n                BadRequestException: await de_BadRequestException_event(event[\"BadRequestException\"], context),\n            };\n        }\n        if (event[\"LimitExceededException\"] != null) {\n            return {\n                LimitExceededException: await de_LimitExceededException_event(event[\"LimitExceededException\"], context),\n            };\n        }\n        if (event[\"InternalFailureException\"] != null) {\n            return {\n                InternalFailureException: await de_InternalFailureException_event(event[\"InternalFailureException\"], context),\n            };\n        }\n        if (event[\"ConflictException\"] != null) {\n            return {\n                ConflictException: await de_ConflictException_event(event[\"ConflictException\"], context),\n            };\n        }\n        if (event[\"ServiceUnavailableException\"] != null) {\n            return {\n                ServiceUnavailableException: await de_ServiceUnavailableException_event(event[\"ServiceUnavailableException\"], context),\n            };\n        }\n        return { $unknown: event };\n    });\n};\nconst de_MedicalScribeResultStream = (output, context) => {\n    return context.eventStreamMarshaller.deserialize(output, async (event) => {\n        if (event[\"TranscriptEvent\"] != null) {\n            return {\n                TranscriptEvent: await de_MedicalScribeTranscriptEvent_event(event[\"TranscriptEvent\"], context),\n            };\n        }\n        if (event[\"BadRequestException\"] != null) {\n            return {\n                BadRequestException: await de_BadRequestException_event(event[\"BadRequestException\"], context),\n            };\n        }\n        if (event[\"LimitExceededException\"] != null) {\n            return {\n                LimitExceededException: await de_LimitExceededException_event(event[\"LimitExceededException\"], context),\n            };\n        }\n        if (event[\"InternalFailureException\"] != null) {\n            return {\n                InternalFailureException: await de_InternalFailureException_event(event[\"InternalFailureException\"], context),\n            };\n        }\n        if (event[\"ConflictException\"] != null) {\n            return {\n                ConflictException: await de_ConflictException_event(event[\"ConflictException\"], context),\n            };\n        }\n        if (event[\"ServiceUnavailableException\"] != null) {\n            return {\n                ServiceUnavailableException: await de_ServiceUnavailableException_event(event[\"ServiceUnavailableException\"], context),\n            };\n        }\n        return { $unknown: event };\n    });\n};\nconst de_MedicalTranscriptResultStream = (output, context) => {\n    return context.eventStreamMarshaller.deserialize(output, async (event) => {\n        if (event[\"TranscriptEvent\"] != null) {\n            return {\n                TranscriptEvent: await de_MedicalTranscriptEvent_event(event[\"TranscriptEvent\"], context),\n            };\n        }\n        if (event[\"BadRequestException\"] != null) {\n            return {\n                BadRequestException: await de_BadRequestException_event(event[\"BadRequestException\"], context),\n            };\n        }\n        if (event[\"LimitExceededException\"] != null) {\n            return {\n                LimitExceededException: await de_LimitExceededException_event(event[\"LimitExceededException\"], context),\n            };\n        }\n        if (event[\"InternalFailureException\"] != null) {\n            return {\n                InternalFailureException: await de_InternalFailureException_event(event[\"InternalFailureException\"], context),\n            };\n        }\n        if (event[\"ConflictException\"] != null) {\n            return {\n                ConflictException: await de_ConflictException_event(event[\"ConflictException\"], context),\n            };\n        }\n        if (event[\"ServiceUnavailableException\"] != null) {\n            return {\n                ServiceUnavailableException: await de_ServiceUnavailableException_event(event[\"ServiceUnavailableException\"], context),\n            };\n        }\n        return { $unknown: event };\n    });\n};\nconst de_TranscriptResultStream = (output, context) => {\n    return context.eventStreamMarshaller.deserialize(output, async (event) => {\n        if (event[\"TranscriptEvent\"] != null) {\n            return {\n                TranscriptEvent: await de_TranscriptEvent_event(event[\"TranscriptEvent\"], context),\n            };\n        }\n        if (event[\"BadRequestException\"] != null) {\n            return {\n                BadRequestException: await de_BadRequestException_event(event[\"BadRequestException\"], context),\n            };\n        }\n        if (event[\"LimitExceededException\"] != null) {\n            return {\n                LimitExceededException: await de_LimitExceededException_event(event[\"LimitExceededException\"], context),\n            };\n        }\n        if (event[\"InternalFailureException\"] != null) {\n            return {\n                InternalFailureException: await de_InternalFailureException_event(event[\"InternalFailureException\"], context),\n            };\n        }\n        if (event[\"ConflictException\"] != null) {\n            return {\n                ConflictException: await de_ConflictException_event(event[\"ConflictException\"], context),\n            };\n        }\n        if (event[\"ServiceUnavailableException\"] != null) {\n            return {\n                ServiceUnavailableException: await de_ServiceUnavailableException_event(event[\"ServiceUnavailableException\"], context),\n            };\n        }\n        return { $unknown: event };\n    });\n};\nconst de_BadRequestException_event = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    return de_BadRequestExceptionRes(parsedOutput, context);\n};\nconst de_CategoryEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, _json(data));\n    return contents;\n};\nconst de_ConflictException_event = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    return de_ConflictExceptionRes(parsedOutput, context);\n};\nconst de_InternalFailureException_event = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    return de_InternalFailureExceptionRes(parsedOutput, context);\n};\nconst de_LimitExceededException_event = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    return de_LimitExceededExceptionRes(parsedOutput, context);\n};\nconst de_MedicalScribeTranscriptEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, de_MedicalScribeTranscriptEvent(data, context));\n    return contents;\n};\nconst de_MedicalTranscriptEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, de_MedicalTranscriptEvent(data, context));\n    return contents;\n};\nconst de_ServiceUnavailableException_event = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    return de_ServiceUnavailableExceptionRes(parsedOutput, context);\n};\nconst de_TranscriptEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, de_TranscriptEvent(data, context));\n    return contents;\n};\nconst de_UtteranceEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, de_UtteranceEvent(data, context));\n    return contents;\n};\nconst de_Alternative = (output, context) => {\n    return take(output, {\n        Entities: (_) => de_EntityList(_, context),\n        Items: (_) => de_ItemList(_, context),\n        Transcript: __expectString,\n    });\n};\nconst de_AlternativeList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Alternative(entry, context);\n    });\n    return retVal;\n};\nconst de_CallAnalyticsEntity = (output, context) => {\n    return take(output, {\n        BeginOffsetMillis: __expectLong,\n        Category: __expectString,\n        Confidence: __limitedParseDouble,\n        Content: __expectString,\n        EndOffsetMillis: __expectLong,\n        Type: __expectString,\n    });\n};\nconst de_CallAnalyticsEntityList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_CallAnalyticsEntity(entry, context);\n    });\n    return retVal;\n};\nconst de_CallAnalyticsItem = (output, context) => {\n    return take(output, {\n        BeginOffsetMillis: __expectLong,\n        Confidence: __limitedParseDouble,\n        Content: __expectString,\n        EndOffsetMillis: __expectLong,\n        Stable: __expectBoolean,\n        Type: __expectString,\n        VocabularyFilterMatch: __expectBoolean,\n    });\n};\nconst de_CallAnalyticsItemList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_CallAnalyticsItem(entry, context);\n    });\n    return retVal;\n};\nconst de_CallAnalyticsLanguageIdentification = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_CallAnalyticsLanguageWithScore(entry, context);\n    });\n    return retVal;\n};\nconst de_CallAnalyticsLanguageWithScore = (output, context) => {\n    return take(output, {\n        LanguageCode: __expectString,\n        Score: __limitedParseDouble,\n    });\n};\nconst de_Entity = (output, context) => {\n    return take(output, {\n        Category: __expectString,\n        Confidence: __limitedParseDouble,\n        Content: __expectString,\n        EndTime: __limitedParseDouble,\n        StartTime: __limitedParseDouble,\n        Type: __expectString,\n    });\n};\nconst de_EntityList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Entity(entry, context);\n    });\n    return retVal;\n};\nconst de_Item = (output, context) => {\n    return take(output, {\n        Confidence: __limitedParseDouble,\n        Content: __expectString,\n        EndTime: __limitedParseDouble,\n        Speaker: __expectString,\n        Stable: __expectBoolean,\n        StartTime: __limitedParseDouble,\n        Type: __expectString,\n        VocabularyFilterMatch: __expectBoolean,\n    });\n};\nconst de_ItemList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Item(entry, context);\n    });\n    return retVal;\n};\nconst de_LanguageIdentification = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_LanguageWithScore(entry, context);\n    });\n    return retVal;\n};\nconst de_LanguageWithScore = (output, context) => {\n    return take(output, {\n        LanguageCode: __expectString,\n        Score: __limitedParseDouble,\n    });\n};\nconst de_MedicalAlternative = (output, context) => {\n    return take(output, {\n        Entities: (_) => de_MedicalEntityList(_, context),\n        Items: (_) => de_MedicalItemList(_, context),\n        Transcript: __expectString,\n    });\n};\nconst de_MedicalAlternativeList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MedicalAlternative(entry, context);\n    });\n    return retVal;\n};\nconst de_MedicalEntity = (output, context) => {\n    return take(output, {\n        Category: __expectString,\n        Confidence: __limitedParseDouble,\n        Content: __expectString,\n        EndTime: __limitedParseDouble,\n        StartTime: __limitedParseDouble,\n    });\n};\nconst de_MedicalEntityList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MedicalEntity(entry, context);\n    });\n    return retVal;\n};\nconst de_MedicalItem = (output, context) => {\n    return take(output, {\n        Confidence: __limitedParseDouble,\n        Content: __expectString,\n        EndTime: __limitedParseDouble,\n        Speaker: __expectString,\n        StartTime: __limitedParseDouble,\n        Type: __expectString,\n    });\n};\nconst de_MedicalItemList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MedicalItem(entry, context);\n    });\n    return retVal;\n};\nconst de_MedicalResult = (output, context) => {\n    return take(output, {\n        Alternatives: (_) => de_MedicalAlternativeList(_, context),\n        ChannelId: __expectString,\n        EndTime: __limitedParseDouble,\n        IsPartial: __expectBoolean,\n        ResultId: __expectString,\n        StartTime: __limitedParseDouble,\n    });\n};\nconst de_MedicalResultList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MedicalResult(entry, context);\n    });\n    return retVal;\n};\nconst de_MedicalScribeStreamDetails = (output, context) => {\n    return take(output, {\n        ChannelDefinitions: _json,\n        EncryptionSettings: _json,\n        LanguageCode: __expectString,\n        MediaEncoding: __expectString,\n        MediaSampleRateHertz: __expectInt32,\n        MedicalScribeContextProvided: __expectBoolean,\n        PostStreamAnalyticsResult: _json,\n        PostStreamAnalyticsSettings: _json,\n        ResourceAccessRoleArn: __expectString,\n        SessionId: __expectString,\n        StreamCreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        StreamEndedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        StreamStatus: __expectString,\n        VocabularyFilterMethod: __expectString,\n        VocabularyFilterName: __expectString,\n        VocabularyName: __expectString,\n    });\n};\nconst de_MedicalScribeTranscriptEvent = (output, context) => {\n    return take(output, {\n        TranscriptSegment: (_) => de_MedicalScribeTranscriptSegment(_, context),\n    });\n};\nconst de_MedicalScribeTranscriptItem = (output, context) => {\n    return take(output, {\n        BeginAudioTime: __limitedParseDouble,\n        Confidence: __limitedParseDouble,\n        Content: __expectString,\n        EndAudioTime: __limitedParseDouble,\n        Type: __expectString,\n        VocabularyFilterMatch: __expectBoolean,\n    });\n};\nconst de_MedicalScribeTranscriptItemList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MedicalScribeTranscriptItem(entry, context);\n    });\n    return retVal;\n};\nconst de_MedicalScribeTranscriptSegment = (output, context) => {\n    return take(output, {\n        BeginAudioTime: __limitedParseDouble,\n        ChannelId: __expectString,\n        Content: __expectString,\n        EndAudioTime: __limitedParseDouble,\n        IsPartial: __expectBoolean,\n        Items: (_) => de_MedicalScribeTranscriptItemList(_, context),\n        SegmentId: __expectString,\n    });\n};\nconst de_MedicalTranscript = (output, context) => {\n    return take(output, {\n        Results: (_) => de_MedicalResultList(_, context),\n    });\n};\nconst de_MedicalTranscriptEvent = (output, context) => {\n    return take(output, {\n        Transcript: (_) => de_MedicalTranscript(_, context),\n    });\n};\nconst de_Result = (output, context) => {\n    return take(output, {\n        Alternatives: (_) => de_AlternativeList(_, context),\n        ChannelId: __expectString,\n        EndTime: __limitedParseDouble,\n        IsPartial: __expectBoolean,\n        LanguageCode: __expectString,\n        LanguageIdentification: (_) => de_LanguageIdentification(_, context),\n        ResultId: __expectString,\n        StartTime: __limitedParseDouble,\n    });\n};\nconst de_ResultList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Result(entry, context);\n    });\n    return retVal;\n};\nconst de_Transcript = (output, context) => {\n    return take(output, {\n        Results: (_) => de_ResultList(_, context),\n    });\n};\nconst de_TranscriptEvent = (output, context) => {\n    return take(output, {\n        Transcript: (_) => de_Transcript(_, context),\n    });\n};\nconst de_UtteranceEvent = (output, context) => {\n    return take(output, {\n        BeginOffsetMillis: __expectLong,\n        EndOffsetMillis: __expectLong,\n        Entities: (_) => de_CallAnalyticsEntityList(_, context),\n        IsPartial: __expectBoolean,\n        IssuesDetected: _json,\n        Items: (_) => de_CallAnalyticsItemList(_, context),\n        LanguageCode: __expectString,\n        LanguageIdentification: (_) => de_CallAnalyticsLanguageIdentification(_, context),\n        ParticipantRole: __expectString,\n        Sentiment: __expectString,\n        Transcript: __expectString,\n        UtteranceId: __expectString,\n    });\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst _CIT = \"ContentIdentificationType\";\nconst _CRT = \"ContentRedactionType\";\nconst _ECI = \"EnableChannelIdentification\";\nconst _EPRS = \"EnablePartialResultsStabilization\";\nconst _IL = \"IdentifyLanguage\";\nconst _IML = \"IdentifyMultipleLanguages\";\nconst _LC = \"LanguageCode\";\nconst _LMN = \"LanguageModelName\";\nconst _LO = \"LanguageOptions\";\nconst _ME = \"MediaEncoding\";\nconst _MSRH = \"MediaSampleRateHertz\";\nconst _NOC = \"NumberOfChannels\";\nconst _PET = \"PiiEntityTypes\";\nconst _PL = \"PreferredLanguage\";\nconst _PRS = \"PartialResultsStability\";\nconst _RI = \"RequestId\";\nconst _S = \"Specialty\";\nconst _SI = \"SessionId\";\nconst _SSL = \"ShowSpeakerLabel\";\nconst _T = \"Type\";\nconst _VFM = \"VocabularyFilterMethod\";\nconst _VFN = \"VocabularyFilterName\";\nconst _VFNo = \"VocabularyFilterNames\";\nconst _VN = \"VocabularyName\";\nconst _VNo = \"VocabularyNames\";\nconst _xari = \"x-amzn-request-id\";\nconst _xatcit = \"x-amzn-transcribe-content-identification-type\";\nconst _xatcrt = \"x-amzn-transcribe-content-redaction-type\";\nconst _xateci = \"x-amzn-transcribe-enable-channel-identification\";\nconst _xateprs = \"x-amzn-transcribe-enable-partial-results-stabilization\";\nconst _xatil = \"x-amzn-transcribe-identify-language\";\nconst _xatiml = \"x-amzn-transcribe-identify-multiple-languages\";\nconst _xatlc = \"x-amzn-transcribe-language-code\";\nconst _xatlmn = \"x-amzn-transcribe-language-model-name\";\nconst _xatlo = \"x-amzn-transcribe-language-options\";\nconst _xatme = \"x-amzn-transcribe-media-encoding\";\nconst _xatnoc = \"x-amzn-transcribe-number-of-channels\";\nconst _xatpet = \"x-amzn-transcribe-pii-entity-types\";\nconst _xatpl = \"x-amzn-transcribe-preferred-language\";\nconst _xatprs = \"x-amzn-transcribe-partial-results-stability\";\nconst _xats = \"x-amzn-transcribe-specialty\";\nconst _xatsi = \"x-amzn-transcribe-session-id\";\nconst _xatsr = \"x-amzn-transcribe-sample-rate\";\nconst _xatssl = \"x-amzn-transcribe-show-speaker-label\";\nconst _xatt = \"x-amzn-transcribe-type\";\nconst _xatvfm = \"x-amzn-transcribe-vocabulary-filter-method\";\nconst _xatvfn = \"x-amzn-transcribe-vocabulary-filter-name\";\nconst _xatvfn_ = \"x-amzn-transcribe-vocabulary-filter-names\";\nconst _xatvn = \"x-amzn-transcribe-vocabulary-name\";\nconst _xatvn_ = \"x-amzn-transcribe-vocabulary-names\";\n","import { getEventStreamPlugin } from \"@aws-sdk/middleware-eventstream\";\nimport { getTranscribeStreamingPlugin } from \"@aws-sdk/middleware-sdk-transcribe-streaming\";\nimport { getWebSocketPlugin } from \"@aws-sdk/middleware-websocket\";\nimport { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { StartMedicalStreamTranscriptionRequestFilterSensitiveLog, StartMedicalStreamTranscriptionResponseFilterSensitiveLog, } from \"../models/models_0\";\nimport { de_StartMedicalStreamTranscriptionCommand, se_StartMedicalStreamTranscriptionCommand, } from \"../protocols/Aws_restJson1\";\nexport { $Command };\nexport class StartMedicalStreamTranscriptionCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n        getEventStreamPlugin(config),\n        getWebSocketPlugin(config, {\n            headerPrefix: \"x-amzn-transcribe-\",\n        }),\n        getTranscribeStreamingPlugin(config),\n    ];\n})\n    .s(\"Transcribe\", \"StartMedicalStreamTranscription\", {\n    eventStream: {\n        input: true,\n        output: true,\n    },\n})\n    .n(\"TranscribeStreamingClient\", \"StartMedicalStreamTranscriptionCommand\")\n    .f(StartMedicalStreamTranscriptionRequestFilterSensitiveLog, StartMedicalStreamTranscriptionResponseFilterSensitiveLog)\n    .ser(se_StartMedicalStreamTranscriptionCommand)\n    .de(de_StartMedicalStreamTranscriptionCommand)\n    .build() {\n}\n","/**\n * Medical Vocabulary Enhancer\n * Post-processes transcripts to fix common medical term errors\n * This is what likely made your quality perfect before\n */\n\nexport class MedicalVocabularyEnhancerService {\n  private medicalReplacements = new Map<RegExp, string>([\n    // Medication corrections (most common errors)\n    [/met formin/gi, 'metformin'],\n    [/lice in a pril/gi, 'lisinopril'],\n    [/a tor va statin/gi, 'atorvastatin'],\n    [/met o pro lol/gi, 'metoprolol'],\n    [/am lo di pine/gi, 'amlodipine'],\n    [/oh meh pra zole/gi, 'omeprazole'],\n    [/gaba pentin/gi, 'gabapentin'],\n    [/hydro chloro thia zide/gi, 'hydrochlorothiazide'],\n    [/los ar tan/gi, 'losartan'],\n    [/sim va statin/gi, 'simvastatin'],\n\n    // Dosage formatting\n    [/(\\d+)\\s*(milligrams?|mg\\.?)/gi, '$1mg'],\n    [/(\\d+)\\s*(micrograms?|mcg\\.?)/gi, '$1mcg'],\n    [/(\\d+)\\s*units?\\b/gi, '$1 units'],\n    [/(\\d+)\\s*milli\\s*equivalents?/gi, '$1mEq'],\n\n    // Frequency corrections\n    [/\\bonce\\s+(?:a|per)\\s+day\\b/gi, 'daily'],\n    [/\\btwice\\s+(?:a|per)\\s+day\\b/gi, 'BID'],\n    [/\\bthree\\s+times\\s+(?:a|per)\\s+day\\b/gi, 'TID'],\n    [/\\bfour\\s+times\\s+(?:a|per)\\s+day\\b/gi, 'QID'],\n    [/\\bas\\s+needed\\b/gi, 'PRN'],\n    [/\\bat\\s+bedtime\\b/gi, 'HS'],\n    [/\\bevery\\s+(\\d+)\\s+hours?\\b/gi, 'Q$1H'],\n\n    // Vital signs formatting\n    [/(\\d+)\\s+over\\s+(\\d+)/gi, '$1/$2'],\n    [/(\\d+)\\s+slash\\s+(\\d+)/gi, '$1/$2'],\n    [/(\\d+\\.?\\d*)\\s*degrees?\\s*(?:fahrenheit)?/gi, '$1°F'],\n    [/(\\d+\\.?\\d*)\\s*degrees?\\s*celsius/gi, '$1°C'],\n    [/(\\d+)\\s*(?:beats?\\s*)?per\\s*minute/gi, '$1 bpm'],\n    [/(\\d+)\\s*percent/gi, '$1%'],\n\n    // Medical conditions\n    [/high\\s+blood\\s+pressure/gi, 'hypertension'],\n    [/sugar\\s+diabetes/gi, 'diabetes mellitus'],\n    [/type\\s+two\\s+diabetes/gi, 'type 2 diabetes'],\n    [/a\\s*fib\\b/gi, 'atrial fibrillation'],\n    [/c\\s*o\\s*p\\s*d/gi, 'COPD'],\n    [/c\\s*h\\s*f/gi, 'CHF'],\n    [/m\\s*i\\b/gi, 'MI'],\n    [/c\\s*v\\s*a/gi, 'CVA'],\n    [/t\\s*i\\s*a/gi, 'TIA'],\n    [/u\\s*t\\s*i/gi, 'UTI'],\n    [/g\\s*e\\s*r\\s*d/gi, 'GERD'],\n\n    // Anatomy corrections\n    [/cardio\\s*vascular/gi, 'cardiovascular'],\n    [/gastro\\s*intestinal/gi, 'gastrointestinal'],\n    [/genito\\s*urinary/gi, 'genitourinary'],\n    [/musculo\\s*skeletal/gi, 'musculoskeletal'],\n\n    // Physical exam phrases\n    [/no\\s+acute\\s+distress/gi, 'no acute distress'],\n    [/alert\\s+and\\s+oriented\\s+times?\\s+three/gi, 'alert and oriented x3'],\n    [/clear\\s+to\\s+auscultation\\s+bilaterally/gi, 'clear to auscultation bilaterally'],\n    [/regular\\s+rate\\s+and\\s+rhythm/gi, 'regular rate and rhythm'],\n    [/no\\s+murmurs\\s+rubs\\s+or\\s+gallops/gi, 'no murmurs, rubs, or gallops'],\n    [/soft\\s+non-?tender\\s+non-?distended/gi, 'soft, non-tender, non-distended'],\n    [/no\\s+clubbing\\s+cyanosis\\s+or\\s+edema/gi, 'no clubbing, cyanosis, or edema'],\n\n    // Lab values\n    [/a\\s+one\\s+c/gi, 'A1C'],\n    [/hemoglobin\\s+a\\s+one\\s+c/gi, 'HbA1c'],\n    [/b\\s+u\\s+n/gi, 'BUN'],\n    [/c\\s+b\\s+c/gi, 'CBC'],\n    [/c\\s+m\\s+p/gi, 'CMP'],\n    [/t\\s+s\\s+h/gi, 'TSH'],\n    [/p\\s+t\\s+slash\\s+i\\s+n\\s+r/gi, 'PT/INR'],\n    [/l\\s+d\\s+l/gi, 'LDL'],\n    [/h\\s+d\\s+l/gi, 'HDL'],\n\n    // Common medical abbreviations\n    [/\\bpo\\b/gi, 'PO'],\n    [/\\bim\\b/gi, 'IM'],\n    [/\\biv\\b/gi, 'IV'],\n    [/\\bsubq\\b/gi, 'SubQ'],\n    [/\\bbid\\b/gi, 'BID'],\n    [/\\btid\\b/gi, 'TID'],\n    [/\\bqid\\b/gi, 'QID'],\n    [/\\bprn\\b/gi, 'PRN'],\n    [/\\bhs\\b/gi, 'HS'],\n    [/\\bac\\b/gi, 'AC'],\n    [/\\bpc\\b/gi, 'PC'],\n\n    // Numbers spelled out\n    [/\\bone\\s+thousand/gi, '1000'],\n    [/\\bfive\\s+hundred/gi, '500'],\n    [/\\btwo\\s+fifty/gi, '250'],\n    [/\\bone\\s+twenty\\s+five/gi, '125'],\n    [/\\bseventy\\s+five/gi, '75'],\n    [/\\bfifty/gi, '50'],\n    [/\\btwenty\\s+five/gi, '25'],\n    [/\\btwenty/gi, '20'],\n    [/\\bfifteen/gi, '15'],\n    [/\\bten/gi, '10'],\n    [/\\bfive/gi, '5'],\n  ]);\n\n  /**\n   * Apply all medical corrections to transcript\n   * This is the SECRET SAUCE for quality\n   */\n  public enhanceTranscript(text: string): string {\n    let enhanced = text;\n\n    // Apply all replacements\n    this.medicalReplacements.forEach((replacement, pattern) => {\n      enhanced = enhanced.replace(pattern, replacement);\n    });\n\n    // Fix sentence structure\n    enhanced = this.fixSentenceStructure(enhanced);\n\n    // Fix medical context\n    enhanced = this.fixMedicalContext(enhanced);\n\n    return enhanced;\n  }\n\n  private fixSentenceStructure(text: string): string {\n    return (\n      text\n        // Add periods after common endings if missing\n        .replace(/(\\d+mg)(\\s+[A-Z])/g, '$1.$2')\n        .replace(/(daily|BID|TID|QID|PRN)(\\s+[A-Z])/g, '$1.$2')\n        .replace(/(follow up in \\d+ (?:days?|weeks?|months?))(\\s+[A-Z])/g, '$1.$2')\n        // Fix double spaces\n        .replace(/\\s+/g, ' ')\n        // Fix period spacing\n        .replace(/\\.\\s*\\./g, '.')\n        .replace(/([.!?])\\s*([a-z])/g, (match, p1, p2) => `${p1} ${p2.toUpperCase()}`)\n        // Ensure space after punctuation\n        .replace(/([.!?,;:])([A-Za-z])/g, '$1 $2')\n        .trim()\n    );\n  }\n\n  private fixMedicalContext(text: string): string {\n    // Fix common context issues\n    return (\n      text\n        // Blood pressure context\n        .replace(/blood pressure[:\\s]+(\\d+\\/\\d+)/gi, 'Blood pressure: $1')\n        .replace(/BP[:\\s]+(\\d+\\/\\d+)/gi, 'BP: $1')\n        // Heart rate context\n        .replace(/heart rate[:\\s]+(\\d+)/gi, 'Heart rate: $1 bpm')\n        .replace(/pulse[:\\s]+(\\d+)/gi, 'Pulse: $1 bpm')\n        // Temperature context\n        .replace(/temperature[:\\s]+(\\d+\\.?\\d*)/gi, 'Temperature: $1°F')\n        .replace(/temp[:\\s]+(\\d+\\.?\\d*)/gi, 'Temp: $1°F')\n        // O2 saturation context\n        .replace(/(?:oxygen|O2|sat)[:\\s]+(\\d+)/gi, 'O2 sat: $1%')\n        // Weight context\n        .replace(/weight[:\\s]+(\\d+)/gi, 'Weight: $1 lbs')\n        // Labs context\n        .replace(/A1C[:\\s]+(\\d+\\.?\\d*)/gi, 'A1C: $1%')\n        .replace(/glucose[:\\s]+(\\d+)/gi, 'Glucose: $1 mg/dL')\n        .replace(/creatinine[:\\s]+(\\d+\\.?\\d*)/gi, 'Creatinine: $1 mg/dL')\n    );\n  }\n\n  /**\n   * Check if transcript contains medical terms\n   * Useful for quality monitoring\n   */\n  public getMedicalTermDensity(text: string): number {\n    const medicalTerms = [\n      'patient',\n      'diagnosis',\n      'medication',\n      'mg',\n      'daily',\n      'BID',\n      'TID',\n      'blood pressure',\n      'heart rate',\n      'temperature',\n      'exam',\n      'assessment',\n      'plan',\n      'follow up',\n      'symptoms',\n      'history',\n      'physical',\n      'vital',\n    ];\n\n    const words = text.toLowerCase().split(/\\s+/);\n    const medicalWordCount = words.filter(word =>\n      medicalTerms.some(term => term.includes(word) || word.includes(term))\n    ).length;\n\n    return words.length > 0 ? medicalWordCount / words.length : 0;\n  }\n}\n\n// Singleton instance\nexport const medicalVocabularyEnhancer = new MedicalVocabularyEnhancerService();\n","/**\n * AWS Transcribe Medical - Simplified Working Implementation\n * Uses Web Audio API for proper PCM conversion\n */\n\nimport { \n  TranscribeStreamingClient, \n  StartMedicalStreamTranscriptionCommand \n} from '@aws-sdk/client-transcribe-streaming';\nimport { medicalVocabularyEnhancer } from './medicalVocabularyEnhancer.service';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport class AWSTranscribeSimpleService {\n  private client: TranscribeStreamingClient | null = null;\n  private audioContext: AudioContext | null = null;\n  private source: MediaStreamAudioSourceNode | null = null;\n  private processor: ScriptProcessorNode | null = null;\n  private mediaStream: MediaStream | null = null;\n  private audioQueue: Float32Array[] = [];\n  private isRecording = false;\n  private currentTranscript = '';\n  \n  constructor() {\n    this.initializeClient();\n  }\n  \n  private initializeClient() {\n    try {\n      // HIPAA Compliance: Use environment variables for AWS credentials\n      const accessKeyId = import.meta.env.VITE_AWS_ACCESS_KEY_ID;\n      const secretAccessKey = import.meta.env.VITE_AWS_SECRET_ACCESS_KEY;\n      \n      if (!accessKeyId || !secretAccessKey) {\n        throw new Error('AWS credentials not configured. Please set VITE_AWS_ACCESS_KEY_ID and VITE_AWS_SECRET_ACCESS_KEY in environment variables.');\n      }\n      \n      this.client = new TranscribeStreamingClient({\n        region: import.meta.env.VITE_AWS_REGION || 'us-east-1',\n        credentials: {\n          accessKeyId,\n          secretAccessKey\n        }\n      });\n      logInfo('awsTranscribeSimple', 'Info message', {});\n    } catch (error) {\n      logError('awsTranscribeSimple', 'Error message', {});\n    }\n  }\n  \n  async startRecording(\n    onTranscript: (text: string, isFinal: boolean) => void,\n    onError: (error: string) => void\n  ): Promise<boolean> {\n    if (!this.client) {\n      onError('AWS client not initialized');\n      return false;\n    }\n    \n    try {\n      logDebug('awsTranscribeSimple', 'Debug message', {});\n      \n      // Get microphone access with OPTIMAL settings for medical dictation\n      this.mediaStream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          sampleRate: 16000,\n          channelCount: 1,\n          echoCancellation: false,  // Turn OFF for clearer medical terms\n          noiseSuppression: false,  // Turn OFF to preserve 's' sounds in medical words\n          autoGainControl: false,   // Turn OFF for consistent volume\n          sampleSize: 16,\n          latency: 0  // Lowest latency for real-time\n        } \n      });\n      \n      logInfo('awsTranscribeSimple', 'Info message', {});\n      \n      // Set up Web Audio API for PCM conversion\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)({\n        sampleRate: 16000\n      });\n      \n      this.source = this.audioContext.createMediaStreamSource(this.mediaStream);\n      this.processor = this.audioContext.createScriptProcessor(4096, 1, 1);\n      \n      // Clear transcript\n      this.currentTranscript = '';\n      this.audioQueue = [];\n      this.isRecording = true;\n      \n      // Process audio data\n      this.processor.onaudioprocess = (e) => {\n        if (!this.isRecording) return;\n        \n        const inputData = e.inputBuffer.getChannelData(0);\n        // Store Float32Array data for later conversion\n        this.audioQueue.push(new Float32Array(inputData));\n      };\n      \n      // Connect audio nodes\n      this.source.connect(this.processor);\n      this.processor.connect(this.audioContext.destination);\n      \n      // Create audio stream generator for AWS\n      const self = this;\n      async function* audioStreamGenerator() {\n        logDebug('awsTranscribeSimple', 'Debug message', {});\n        \n        while (self.isRecording || self.audioQueue.length > 0) {\n          if (self.audioQueue.length > 0) {\n            const floatData = self.audioQueue.shift()!;\n            \n            // Convert Float32Array to PCM16 (Int16Array)\n            const pcm16 = new Int16Array(floatData.length);\n            for (let i = 0; i < floatData.length; i++) {\n              const s = Math.max(-1, Math.min(1, floatData[i]));\n              pcm16[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\n            }\n            \n            // Convert to Uint8Array for AWS\n            const uint8Array = new Uint8Array(pcm16.buffer);\n            \n            yield {\n              AudioEvent: {\n                AudioChunk: uint8Array\n              }\n            };\n          } else {\n            // Wait for more audio data\n            await new Promise(resolve => setTimeout(resolve, 50));\n          }\n        }\n        \n        logDebug('awsTranscribeSimple', 'Debug message', {});\n      }\n      \n      logDebug('awsTranscribeSimple', 'Debug message', {});\n      \n      // Start AWS Transcribe stream\n      const command = new StartMedicalStreamTranscriptionCommand({\n        LanguageCode: 'en-US',\n        MediaSampleRateHertz: 16000,\n        MediaEncoding: 'pcm',\n        Specialty: 'PRIMARYCARE',\n        Type: 'DICTATION',  // CRITICAL: Keep as DICTATION for best quality\n        ShowSpeakerLabels: false,\n        ContentIdentificationType: 'PHI',\n        EnablePartialResultsStabilization: true,  // Better interim results\n        PartialResultsStability: 'high',  // More stable partial transcripts\n        VocabularyName: undefined,  // Can add custom medical vocabulary later\n        AudioStream: audioStreamGenerator()\n      });\n      \n      // Send command and process results\n      const response = await this.client.send(command);\n      \n      logInfo('awsTranscribeSimple', 'Info message', {});\n      \n      if (response.TranscriptResultStream) {\n        // Process results in background\n        this.processTranscriptStream(response.TranscriptResultStream, onTranscript, onError);\n      } else {\n        throw new Error('No TranscriptResultStream received');\n      }\n      \n      logInfo('awsTranscribeSimple', 'Info message', {});\n      return true;\n      \n    } catch (error: any) {\n      logError('awsTranscribeSimple', 'Error message', {});\n      logError('awsTranscribeSimple', 'Error message', {});\n      logError('awsTranscribeSimple', 'Error message', {});\n      logError('awsTranscribeSimple', 'Error message', {});\n      \n      // Provide more specific error messages\n      let errorMessage = 'AWS Transcribe Medical error: ';\n      \n      if (error.name === 'UnrecognizedClientException' || error.name === 'InvalidSignatureException') {\n        errorMessage += 'Invalid AWS credentials. Please check your AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.';\n      } else if (error.name === 'AccessDeniedException') {\n        errorMessage += 'Access denied. Your AWS credentials don\\'t have permission for Transcribe Medical.';\n      } else if (error.name === 'NetworkingError' || error.message?.includes('Network')) {\n        errorMessage += 'Network error. Please check your internet connection and CORS settings.';\n      } else if (error.$metadata?.httpStatusCode === 403) {\n        errorMessage += 'Permission denied. Ensure your AWS IAM user has TranscribeStreaming permissions.';\n      } else {\n        errorMessage += error.message || 'Failed to start recording';\n      }\n      \n      onError(errorMessage);\n      this.cleanup();\n      return false;\n    }\n  }\n  \n  private async processTranscriptStream(\n    stream: any,\n    onTranscript: (text: string, isFinal: boolean) => void,\n    onError: (error: string) => void\n  ) {\n    try {\n      logDebug('awsTranscribeSimple', 'Debug message', {});\n      let eventCount = 0;\n      \n      for await (const event of stream) {\n        eventCount++;\n        \n        if (event.TranscriptEvent) {\n          const results = event.TranscriptEvent.Transcript?.Results || [];\n          \n          for (const result of results) {\n            if (result.Alternatives && result.Alternatives.length > 0) {\n              const transcript = result.Alternatives[0].Transcript || '';\n              \n              if (transcript) {\n                if (!result.IsPartial) {\n                  // Final result - enhance with medical vocabulary\n                  const enhanced = medicalVocabularyEnhancer.enhanceTranscript(transcript);\n                  this.currentTranscript += enhanced + ' ';\n                  \n                  // Quality monitoring\n                  const density = medicalVocabularyEnhancer.getMedicalTermDensity(enhanced);\n                  logInfo('awsTranscribeSimple', 'Info message', {});\n                  logDebug('awsTranscribeSimple', 'Debug message', {});\n                  \n                  onTranscript(enhanced, true);\n                } else {\n                  // Partial result - also enhance for better display\n                  const enhanced = medicalVocabularyEnhancer.enhanceTranscript(transcript);\n                  logDebug('awsTranscribeSimple', 'Debug message', {});\n                  onTranscript(enhanced, false);\n                }\n              }\n            }\n          }\n        }\n        \n        // Check for errors\n        if (event.BadRequestException) {\n          logError('awsTranscribeSimple', 'Error message', {});\n          onError(`Bad request: ${event.BadRequestException.Message}`);\n        }\n        if (event.LimitExceededException) {\n          logError('awsTranscribeSimple', 'Error message', {});\n          onError(`Limit exceeded: ${event.LimitExceededException.Message}`);\n        }\n        if (event.InternalFailureException) {\n          logError('awsTranscribeSimple', 'Error message', {});\n          onError(`Internal failure: ${event.InternalFailureException.Message}`);\n        }\n      }\n      \n      logDebug('awsTranscribeSimple', 'Debug message', {});\n      \n    } catch (error: any) {\n      logError('awsTranscribeSimple', 'Error message', {});\n      onError(error.message || 'Stream processing error');\n    }\n  }\n  \n  stopRecording(): string {\n    logDebug('awsTranscribeSimple', 'Debug message', {});\n    this.isRecording = false;\n    \n    // Clean up audio resources\n    this.cleanup();\n    \n    logInfo('awsTranscribeSimple', 'Info message', {});\n    return this.currentTranscript;\n  }\n  \n  private cleanup() {\n    // Disconnect audio nodes\n    if (this.source) {\n      this.source.disconnect();\n      this.source = null;\n    }\n    \n    if (this.processor) {\n      this.processor.disconnect();\n      this.processor = null;\n    }\n    \n    // Close audio context\n    if (this.audioContext && this.audioContext.state !== 'closed') {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n    \n    // Stop media stream\n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => track.stop());\n      this.mediaStream = null;\n    }\n    \n    // Clear audio queue\n    this.audioQueue = [];\n  }\n  \n  isInitialized(): boolean {\n    return this.client !== null;\n  }\n\n  /**\n   * Check if AWS client is configured (interface compatibility)\n   */\n  isConfigured(): boolean {\n    return this.client !== null;\n  }\n\n  /**\n   * Stop all AWS operations (interface compatibility)\n   */\n  stop(): void {\n    this.stopRecording();\n  }\n  \n  getCurrentTranscript(): string {\n    return this.currentTranscript;\n  }\n}\n\n// Singleton instance\nexport const awsTranscribeSimple = new AWSTranscribeSimpleService();"],"names":["eventStreamHandlingMiddleware","options","next","context","args","request","HttpRequest","eventStreamHandlingMiddlewareOptions","eventStreamHeaderMiddleware","eventStreamHeaderMiddlewareOptions","getEventStreamPlugin","clientStack","_json","obj","_","target","key","injectSessionIdMiddleware","requestParams","response","output","injectSessionIdMiddlewareOptions","websocketEndpointMiddleware","config","headers","name","chunkedName","websocketEndpointMiddlewareOptions","getWebSocketPlugin","hostHeaderMiddleware","handlerProtocol","host","hostHeaderMiddlewareOptions","getHostHeaderPlugin","loggerMiddleware","clientName","commandName","logger","dynamoDbDocumentClientOptions","overrideInputFilterSensitiveLog","overrideOutputFilterSensitiveLog","inputFilterSensitiveLog","outputFilterSensitiveLog","$metadata","outputWithoutMetadata","error","loggerMiddlewareOptions","getLoggerPlugin","recursionDetectionMiddlewareOptions","recursionDetectionMiddleware","getRecursionDetectionPlugin","DEFAULT_UA_APP_ID","isValidUserAgentAppId","appId","resolveUserAgentConfig","input","normalizedAppIdProvider","normalizeProvider","customUserAgent","isVirtualHostableS3Bucket","value","allowSubDomains","label","isValidHostLabel","isIpAddress","ARN_DELIMITER","RESOURCE_DELIMITER","parseArn","segments","arn","partition","service","region","accountId","resourcePath","resourceId","resource","selectedPartitionsInfo","partitionsInfo","partitions","regions","outputs","regionData","regionRegex","DEFAULT_PARTITION","awsEndpointFunctions","customEndpointFunctions","setCredentialFeature","credentials","feature","setFeature","getDateHeader","HttpResponse","getSkewCorrectedDate","systemClockOffset","isClockSkewed","clockTime","getUpdatedSystemClockOffset","currentSystemClockOffset","clockTimeInMs","throwSigningPropertyError","property","validateSigningProperties","signingProperties","authScheme","signer","signingRegion","signingRegionSet","signingName","AwsSdkSigV4Signer","httpRequest","identity","validatedProps","handlerExecutionContext","first","second","serverTime","initialSystemClockOffset","httpResponse","dateHeader","resolveAwsSdkSigV4Config","inputCredentials","isUserSupplied","resolvedCredentials","memoizedProvider","normalizeCredentialProvider","boundProvider","bindCallerConfig","creds","signingEscapePath","sha256","regionInfo","signingService","params","SignerCtor","SignatureV4","credentialDefaultProvider","credentialsProvider","memoizeIdentityProvider","isIdentityExpired","doesIdentityRequireRefresh","fn","collectBodyString","streamBody","collectBody","body","toUtf8","parseJsonBody","encoded","e","parseJsonErrorBody","errorBody","loadRestJsonErrorCode","data","findKey","object","k","sanitizeErrorCode","rawValue","cleanValue","headerKey","codeKey","ACCOUNT_ID_ENDPOINT_REGEX","checkFeatures","retryStrategy","endpointV2","USER_AGENT","X_AMZ_USER_AGENT","SPACE","UA_NAME_SEPARATOR","UA_NAME_ESCAPE_REGEX","UA_VALUE_ESCAPE_REGEX","UA_ESCAPE_CHAR","BYTE_LIMIT","encodeFeatures","features","buffer","val","userAgentMiddleware","userAgent","escapeUserAgent","defaultUserAgent","awsContext","sdkUserAgentValue","normalUAValue","section","userAgentPair","part","version","prefixSeparatorIndex","prefix","uaName","item","acc","index","getUserAgentMiddlewareOptions","getUserAgentPlugin","defaultTranscribeStreamingHttpAuthSchemeParametersProvider","getSmithyContext","createAwsAuthSigv4HttpAuthOption","authParameters","defaultTranscribeStreamingHttpAuthSchemeProvider","resolveHttpAuthSchemeConfig","config_0","resolveClientEndpointParameters","commonParams","eventStreamPayloadHandler","injectResponseValuesMiddleware","isWebSocket","v4","injectResponseValuesMiddlewareOptions","websocketPortMiddleware","websocketPortMiddlewareOptions","getTranscribeStreamingPlugin","createDefaultUserAgentProvider","serviceId","clientVersion","parsedUA","bowser","sections","s","t","u","v","a","b","c","d","f","g","h","i","j","l","m","n","o","p","q","r","_data","ruleSet","cache","EndpointCache","defaultEndpointResolver","endpointParams","resolveEndpoint","getRuntimeConfig","fromBase64","toBase64","ipc","NoOpLogger","parseUrl","fromUtf8","defaultsMode","resolveDefaultsModeConfig","defaultConfigProvider","loadConfigsForDefaultMode","clientSharedValues","getSharedRuntimeConfig","calculateBodyLength","packageInfo","eventStreamSerdeProvider","DEFAULT_MAX_ATTEMPTS","invalidProvider","WebSocketRequestHandler","HttpRequestHandler","DEFAULT_RETRY_MODE","Sha256","streamCollector","DEFAULT_USE_DUALSTACK_ENDPOINT","DEFAULT_USE_FIPS_ENDPOINT","getAwsRegionExtensionConfiguration","runtimeConfig","resolveAwsRegionExtensionConfiguration","awsRegionExtensionConfiguration","getHttpAuthExtensionConfiguration","_httpAuthSchemes","_httpAuthSchemeProvider","_credentials","httpAuthScheme","scheme","httpAuthSchemeProvider","resolveHttpAuthRuntimeConfig","resolveRuntimeExtensions","extensions","extensionConfiguration","getDefaultExtensionConfiguration","getHttpHandlerExtensionConfiguration","extension","resolveDefaultRuntimeConfig","resolveHttpHandlerRuntimeConfig","TranscribeStreamingClient","__Client","configuration","_config_0","__getRuntimeConfig","_config_1","_config_2","_config_3","resolveRetryConfig","_config_4","resolveRegionConfig","_config_5","_config_6","resolveEndpointConfig","_config_7","resolveEventStreamSerdeConfig","_config_8","_config_9","resolveEventStreamConfig","_config_10","resolveWebSocketConfig","_config_11","getRetryPlugin","getContentLengthPlugin","getHttpAuthSchemeEndpointRuleSetPlugin","DefaultIdentityProviderConfig","getHttpSigningPlugin","TranscribeStreamingServiceException","__ServiceException","AudioStream","visitor","BadRequestException","__BaseException","opts","ConflictException","InternalFailureException","LimitExceededException","ServiceUnavailableException","CallAnalyticsTranscriptResultStream","ResourceNotFoundException","MedicalContentIdentificationType","MedicalScribeInputStream","MedicalScribeResultStream","MedicalTranscriptResultStream","TranscriptResultStream","StartMedicalStreamTranscriptionRequestFilterSensitiveLog","StartMedicalStreamTranscriptionResponseFilterSensitiveLog","se_StartMedicalStreamTranscriptionCommand","rb","map","isSerializableHeaderValue","_xatlc","_LC","_xatsr","_MSRH","_xatme","_ME","_xatvn","_VN","_xats","_S","_xatt","_T","_xatssl","_SSL","_xatsi","_SI","_xateci","_ECI","_xatnoc","_NOC","_xatcit","_CIT","se_AudioStream","de_StartMedicalStreamTranscriptionCommand","de_CommandError","contents","deserializeMetadata","_RI","_xari","__strictParseInt32","__parseBoolean","de_MedicalTranscriptResultStream","parsedOutput","parseErrorBody","errorCode","de_BadRequestExceptionRes","de_InternalFailureExceptionRes","de_LimitExceededExceptionRes","de_ResourceNotFoundExceptionRes","de_ConflictExceptionRes","de_ServiceUnavailableExceptionRes","parsedBody","throwDefaultError","withBaseException","doc","take","__expectString","exception","__decorateServiceException","eventMarshallingVisitor","event","se_AudioEvent_event","se_ConfigurationEvent_event","de_MedicalTranscriptEvent_event","de_BadRequestException_event","de_LimitExceededException_event","de_InternalFailureException_event","de_ConflictException_event","de_ServiceUnavailableException_event","parseBody","de_MedicalTranscriptEvent","de_MedicalAlternative","de_MedicalEntityList","de_MedicalItemList","de_MedicalAlternativeList","entry","de_MedicalEntity","__limitedParseDouble","de_MedicalItem","de_MedicalResult","__expectBoolean","de_MedicalResultList","de_MedicalTranscript","StartMedicalStreamTranscriptionCommand","$Command","Command","cs","getSerdePlugin","getEndpointPlugin","MedicalVocabularyEnhancerService","text","enhanced","replacement","pattern","match","p1","p2","medicalTerms","words","medicalWordCount","word","term","medicalVocabularyEnhancer","AWSTranscribeSimpleService","logError","onTranscript","onError","logDebug","logInfo","inputData","self","audioStreamGenerator","floatData","pcm16","resolve","command","errorMessage","stream","eventCount","results","result","transcript","density","track","awsTranscribeSimple"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49]}