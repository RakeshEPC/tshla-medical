{"version":3,"file":"MADashboard-UpiJrpvh.js","sources":["../../src/services/maOrders.service.ts","../../src/pages/MADashboard.tsx"],"sourcesContent":["/**\n * MA Orders Service\n * Manages the lifecycle of medical orders from extraction to completion\n */\n\nimport { getDb, generateId } from '../lib/db/browserClient';\nimport type { ExtractedOrder, OrderExtractionResult } from './orderExtraction.service';\nimport { patientMasterService } from './patientMaster.service';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface Order {\n  order_id: string;\n  patient_id: string;\n  doctor_id: string;\n  ma_id?: string; // MA who will process the order\n  order_type: 'medication' | 'lab' | 'imaging' | 'prior_auth' | 'referral' | 'other';\n  order_text: string; // Original order text\n  action?: 'start' | 'stop' | 'continue' | 'increase' | 'decrease' | 'order' | 'check';\n  details?: string;\n  urgency: 'routine' | 'urgent' | 'stat';\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\n  created_at: Date;\n  assigned_at?: Date;\n  started_at?: Date;\n  completed_at?: Date;\n  completed_by?: string; // MA who completed it\n  notes?: string; // MA notes about completion\n  priority_score: number; // 1-10 priority scoring\n  estimated_time_minutes?: number; // Estimated time to complete\n  source_dictation_id?: string; // Reference to original dictation\n  patient_name?: string; // Denormalized for easy display\n  doctor_name?: string; // Denormalized for easy display\n}\n\nexport interface OrderStats {\n  pending: number;\n  inProgress: number;\n  completed: number;\n  urgent: number;\n  total: number;\n}\n\nexport interface MAWorkload {\n  ma_id: string;\n  ma_name: string;\n  pending_orders: number;\n  in_progress_orders: number;\n  completed_today: number;\n  total_workload: number;\n  avg_completion_time: number;\n}\n\nclass MAOrdersService {\n  private db = getDb();\n\n  /**\n   * Create orders from extracted dictation\n   */\n  async createOrdersFromExtraction(\n    extractedOrders: OrderExtractionResult,\n    patientId: string,\n    doctorId: string,\n    doctorName: string,\n    dictationId?: string\n  ): Promise<Order[]> {\n    const orders: Order[] = [];\n    const patient = await patientMasterService.getPatientById(patientId, 'uuid');\n    const patientName = patient?.name || 'Unknown Patient';\n\n    // Process medications\n    for (const med of extractedOrders.medications) {\n      orders.push(\n        await this.createOrder({\n          patient_id: patientId,\n          doctor_id: doctorId,\n          order_type: 'medication',\n          order_text: med.text,\n          action: med.action,\n          urgency: med.urgency || 'routine',\n          source_dictation_id: dictationId,\n          patient_name: patientName,\n          doctor_name: doctorName,\n        })\n      );\n    }\n\n    // Process labs\n    for (const lab of extractedOrders.labs) {\n      orders.push(\n        await this.createOrder({\n          patient_id: patientId,\n          doctor_id: doctorId,\n          order_type: 'lab',\n          order_text: lab.text,\n          action: lab.action,\n          urgency: lab.urgency || 'routine',\n          source_dictation_id: dictationId,\n          patient_name: patientName,\n          doctor_name: doctorName,\n        })\n      );\n    }\n\n    // Process imaging\n    for (const img of extractedOrders.imaging) {\n      orders.push(\n        await this.createOrder({\n          patient_id: patientId,\n          doctor_id: doctorId,\n          order_type: 'imaging',\n          order_text: img.text,\n          action: img.action,\n          urgency: img.urgency || 'routine',\n          source_dictation_id: dictationId,\n          patient_name: patientName,\n          doctor_name: doctorName,\n        })\n      );\n    }\n\n    // Process prior auths\n    for (const auth of extractedOrders.priorAuths) {\n      orders.push(\n        await this.createOrder({\n          patient_id: patientId,\n          doctor_id: doctorId,\n          order_type: 'prior_auth',\n          order_text: auth.text,\n          action: auth.action,\n          urgency: auth.urgency || 'routine',\n          source_dictation_id: dictationId,\n          patient_name: patientName,\n          doctor_name: doctorName,\n        })\n      );\n    }\n\n    // Process referrals\n    for (const ref of extractedOrders.referrals) {\n      orders.push(\n        await this.createOrder({\n          patient_id: patientId,\n          doctor_id: doctorId,\n          order_type: 'referral',\n          order_text: ref.text,\n          action: ref.action,\n          urgency: ref.urgency || 'routine',\n          source_dictation_id: dictationId,\n          patient_name: patientName,\n          doctor_name: doctorName,\n        })\n      );\n    }\n\n    logInfo('maOrders', 'Info message', {});\n    return orders;\n  }\n\n  /**\n   * Create a single order\n   */\n  private async createOrder(\n    orderData: Omit<Order, 'order_id' | 'created_at' | 'status' | 'priority_score'>\n  ): Promise<Order> {\n    const order: Order = {\n      ...orderData,\n      order_id: generateId(),\n      status: 'pending',\n      created_at: new Date(),\n      priority_score: this.calculatePriority(orderData.order_type, orderData.urgency),\n      estimated_time_minutes: this.estimateCompletionTime(orderData.order_type),\n    };\n\n    await this.db.execute('add:orders', order);\n\n    // Log the order creation\n    await this.logOrderAction(order.order_id, 'order_created', {\n      doctor_id: orderData.doctor_id,\n      patient_id: orderData.patient_id,\n      order_type: orderData.order_type,\n    });\n\n    return order;\n  }\n\n  /**\n   * Get all pending orders for MA dashboard\n   */\n  async getAllPendingOrders(): Promise<Order[]> {\n    const orders = await this.db.query('orders');\n    return orders\n      .filter((order: any) => order.status === 'pending')\n      .sort((a: any, b: any) => {\n        // Sort by priority (high to low), then urgency, then creation time\n        if (a.urgency !== b.urgency) {\n          const urgencyOrder = { stat: 3, urgent: 2, routine: 1 };\n          return (\n            (urgencyOrder[b.urgency as keyof typeof urgencyOrder] || 1) -\n            (urgencyOrder[a.urgency as keyof typeof urgencyOrder] || 1)\n          );\n        }\n        if (a.priority_score !== b.priority_score) {\n          return b.priority_score - a.priority_score;\n        }\n        return new Date(a.created_at).getTime() - new Date(b.created_at).getTime();\n      });\n  }\n\n  /**\n   * Get orders assigned to a specific MA\n   */\n  async getOrdersByMA(maId: string, status?: Order['status']): Promise<Order[]> {\n    const orders = await this.db.query('orders');\n    return orders.filter((order: any) => {\n      const matchMA = order.ma_id === maId;\n      const matchStatus = !status || order.status === status;\n      return matchMA && matchStatus;\n    });\n  }\n\n  /**\n   * Get orders for a specific doctor\n   */\n  async getOrdersByDoctor(doctorId: string, status?: Order['status']): Promise<Order[]> {\n    const orders = await this.db.query('orders');\n    return orders.filter((order: any) => {\n      const matchDoctor = order.doctor_id === doctorId;\n      const matchStatus = !status || order.status === status;\n      return matchDoctor && matchStatus;\n    });\n  }\n\n  /**\n   * Assign order to MA\n   */\n  async assignOrderToMA(orderId: string, maId: string, maName: string): Promise<void> {\n    const order = await this.getOrderById(orderId);\n    if (!order) {\n      throw new Error('Order not found');\n    }\n\n    const updatedOrder = {\n      ...order,\n      ma_id: maId,\n      status: 'in_progress' as const,\n      assigned_at: new Date(),\n      started_at: new Date(),\n    };\n\n    await this.db.execute('put:orders', updatedOrder);\n\n    await this.logOrderAction(orderId, 'order_assigned', {\n      ma_id: maId,\n      ma_name: maName,\n    });\n  }\n\n  /**\n   * Mark order as completed\n   */\n  async completeOrder(\n    orderId: string,\n    maId: string,\n    maName: string,\n    notes?: string\n  ): Promise<void> {\n    const order = await this.getOrderById(orderId);\n    if (!order) {\n      throw new Error('Order not found');\n    }\n\n    const updatedOrder = {\n      ...order,\n      status: 'completed' as const,\n      completed_at: new Date(),\n      completed_by: maId,\n      notes: notes || order.notes,\n    };\n\n    await this.db.execute('put:orders', updatedOrder);\n\n    await this.logOrderAction(orderId, 'order_completed', {\n      ma_id: maId,\n      ma_name: maName,\n      completion_notes: notes,\n    });\n\n    logInfo('maOrders', 'Info message', {});\n  }\n\n  /**\n   * Get order by ID\n   */\n  async getOrderById(orderId: string): Promise<Order | null> {\n    try {\n      const order = await this.db.queryOne('orders', orderId);\n      return order || null;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Get order statistics\n   */\n  async getOrderStats(): Promise<OrderStats> {\n    const orders = await this.db.query('orders');\n\n    return {\n      pending: orders.filter((o: any) => o.status === 'pending').length,\n      inProgress: orders.filter((o: any) => o.status === 'in_progress').length,\n      completed: orders.filter((o: any) => o.status === 'completed').length,\n      urgent: orders.filter((o: any) => o.urgency === 'urgent' || o.urgency === 'stat').length,\n      total: orders.length,\n    };\n  }\n\n  /**\n   * Get MA workload analysis\n   */\n  async getMAWorkloads(): Promise<MAWorkload[]> {\n    const orders = await this.db.query('orders');\n    const maWorkloads: { [maId: string]: MAWorkload } = {};\n    const today = new Date().toDateString();\n\n    // Initialize MA workloads\n    const allMAIds = [...new Set(orders.map((o: any) => o.ma_id).filter(Boolean))];\n    allMAIds.forEach(maId => {\n      maWorkloads[maId] = {\n        ma_id: maId,\n        ma_name: maId, // Will be updated if we have the name\n        pending_orders: 0,\n        in_progress_orders: 0,\n        completed_today: 0,\n        total_workload: 0,\n        avg_completion_time: 0,\n      };\n    });\n\n    // Calculate workloads\n    for (const order of orders) {\n      if (!order.ma_id) continue;\n\n      if (!maWorkloads[order.ma_id]) {\n        maWorkloads[order.ma_id] = {\n          ma_id: order.ma_id,\n          ma_name: order.ma_id,\n          pending_orders: 0,\n          in_progress_orders: 0,\n          completed_today: 0,\n          total_workload: 0,\n          avg_completion_time: 0,\n        };\n      }\n\n      const workload = maWorkloads[order.ma_id];\n\n      if (order.status === 'pending') workload.pending_orders++;\n      if (order.status === 'in_progress') workload.in_progress_orders++;\n      if (order.status === 'completed' && new Date(order.completed_at).toDateString() === today) {\n        workload.completed_today++;\n      }\n\n      workload.total_workload = workload.pending_orders + workload.in_progress_orders;\n    }\n\n    return Object.values(maWorkloads);\n  }\n\n  /**\n   * Auto-assign orders to least busy MA\n   */\n  async autoAssignOrders(): Promise<{ assigned: number; errors: string[] }> {\n    const pendingOrders = await this.getAllPendingOrders();\n    const maWorkloads = await this.getMAWorkloads();\n    const errors: string[] = [];\n    let assigned = 0;\n\n    if (maWorkloads.length === 0) {\n      return { assigned: 0, errors: ['No MAs available for assignment'] };\n    }\n\n    for (const order of pendingOrders.slice(0, 10)) {\n      // Limit to 10 orders per run\n      try {\n        // Find MA with least workload\n        const leastBusyMA = maWorkloads.reduce((min, ma) =>\n          ma.total_workload < min.total_workload ? ma : min\n        );\n\n        await this.assignOrderToMA(order.order_id, leastBusyMA.ma_id, leastBusyMA.ma_name);\n        leastBusyMA.total_workload++; // Update for next assignment\n        assigned++;\n      } catch (error) {\n        errors.push(`Failed to assign order ${order.order_id}: ${error}`);\n      }\n    }\n\n    return { assigned, errors };\n  }\n\n  /**\n   * Calculate priority score for an order\n   */\n  private calculatePriority(orderType: Order['order_type'], urgency: Order['urgency']): number {\n    let score = 5; // Base priority\n\n    // Urgency multiplier\n    switch (urgency) {\n      case 'stat':\n        score += 5;\n        break;\n      case 'urgent':\n        score += 3;\n        break;\n      case 'routine':\n        break;\n    }\n\n    // Order type priority\n    switch (orderType) {\n      case 'medication':\n        score += 2;\n        break;\n      case 'lab':\n        score += 2;\n        break;\n      case 'prior_auth':\n        score += 3;\n        break; // High priority due to complexity\n      case 'imaging':\n        score += 1;\n        break;\n      case 'referral':\n        score += 1;\n        break;\n      default:\n        break;\n    }\n\n    return Math.min(score, 10); // Cap at 10\n  }\n\n  /**\n   * Estimate completion time for different order types\n   */\n  private estimateCompletionTime(orderType: Order['order_type']): number {\n    switch (orderType) {\n      case 'medication':\n        return 5; // 5 minutes\n      case 'lab':\n        return 10; // 10 minutes\n      case 'imaging':\n        return 15; // 15 minutes\n      case 'prior_auth':\n        return 30; // 30 minutes - complex\n      case 'referral':\n        return 20; // 20 minutes\n      default:\n        return 10;\n    }\n  }\n\n  /**\n   * Log order actions for audit trail\n   */\n  private async logOrderAction(orderId: string, action: string, details?: any): Promise<void> {\n    const logEntry = {\n      log_id: generateId(),\n      order_id: orderId,\n      action_type: action,\n      details: JSON.stringify(details || {}),\n      timestamp: new Date(),\n      user_agent: navigator.userAgent,\n    };\n\n    // We'll store this in ma_actions_log for now\n    // In a real system, this might be a separate orders_log table\n    await this.db.execute('add:ma_actions_log', {\n      ...logEntry,\n      ma_id: details?.ma_id || 'system',\n      patient_id: details?.patient_id || '',\n    });\n  }\n\n  /**\n   * Get recent activity for dashboard\n   */\n  async getRecentActivity(limit: number = 20): Promise<any[]> {\n    const logs = await this.db.query('ma_actions_log');\n    return logs\n      .filter((log: any) => log.action_type.includes('order'))\n      .sort((a: any, b: any) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, limit);\n  }\n\n  /**\n   * Cleanup old completed orders (30+ days old)\n   */\n  async cleanupOldOrders(): Promise<number> {\n    const orders = await this.db.query('orders');\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    let deletedCount = 0;\n\n    for (const order of orders) {\n      if (order.status === 'completed' && order.completed_at) {\n        const completedDate = new Date(order.completed_at);\n        if (completedDate < thirtyDaysAgo) {\n          await this.db.execute('delete:orders', order.order_id);\n          deletedCount++;\n        }\n      }\n    }\n\n    return deletedCount;\n  }\n}\n\n// Export singleton instance\nexport const maOrdersService = new MAOrdersService();\n","/**\n * Medical Assistant Dashboard\n * Two main views: Orders Management and Chart Prep Station\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { maOrdersService, type Order, type OrderStats } from '../services/maOrders.service';\nimport { patientMasterService, type PatientMaster } from '../services/patientMaster.service';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\ntype DashboardView = 'orders' | 'chart-prep';\n\nexport default function MADashboard() {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n\n  const [currentView, setCurrentView] = useState<DashboardView>('orders');\n  const [orders, setOrders] = useState<Order[]>([]);\n  const [orderStats, setOrderStats] = useState<OrderStats | null>(null);\n  const [patients, setPatients] = useState<PatientMaster[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\n\n  // New patient form state\n  const [newPatient, setNewPatient] = useState({\n    name: '',\n    dob: '',\n    email: '',\n    phone: '',\n    emr_number: '',\n    address: '',\n    insurance_info: '',\n    emergency_contact: '',\n  });\n\n  useEffect(() => {\n    if (!user || user.role !== 'medical_assistant') {\n      navigate('/login');\n      return;\n    }\n\n    loadData();\n\n    // Set up polling for live updates\n    const interval = setInterval(loadData, 10000); // 10 seconds\n    return () => clearInterval(interval);\n  }, [user, navigate]);\n\n  const loadData = async () => {\n    try {\n      const [pendingOrders, stats, allPatients] = await Promise.all([\n        maOrdersService.getAllPendingOrders(),\n        maOrdersService.getOrderStats(),\n        patientMasterService.getAllActivePatients(),\n      ]);\n\n      setOrders(pendingOrders);\n      setOrderStats(stats);\n      setPatients(allPatients);\n    } catch (error) {\n      logError('MADashboard', 'Error message', {});\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCompleteOrder = async (order: Order) => {\n    try {\n      await maOrdersService.completeOrder(\n        order.order_id,\n        user!.id,\n        user!.name,\n        `Completed by ${user!.name}`\n      );\n\n      // Refresh data\n      await loadData();\n      setSelectedOrder(null);\n    } catch (error) {\n      logError('MADashboard', 'Error message', {});\n      alert('Failed to complete order');\n    }\n  };\n\n  const handleAssignOrder = async (order: Order) => {\n    try {\n      await maOrdersService.assignOrderToMA(order.order_id, user!.id, user!.name);\n      await loadData();\n    } catch (error) {\n      logError('MADashboard', 'Error message', {});\n      alert('Failed to assign order');\n    }\n  };\n\n  const handleCreatePatient = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!newPatient.name || !newPatient.dob) {\n      alert('Name and Date of Birth are required');\n      return;\n    }\n\n    try {\n      await patientMasterService.createPatient(\n        {\n          ...newPatient,\n          created_by_ma_id: user!.id,\n        },\n        user!.id\n      );\n\n      // Reset form\n      setNewPatient({\n        name: '',\n        dob: '',\n        email: '',\n        phone: '',\n        emr_number: '',\n        address: '',\n        insurance_info: '',\n        emergency_contact: '',\n      });\n\n      // Refresh patient list\n      await loadData();\n      alert('Patient created successfully with AVA and TSH numbers!');\n    } catch (error: any) {\n      logError('MADashboard', 'Error message', {});\n      alert(error.message || 'Failed to create patient');\n    }\n  };\n\n  const filteredOrders = orders.filter(\n    order =>\n      order.patient_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      order.doctor_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      order.order_text.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const filteredPatients = patients.filter(\n    patient =>\n      patient.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      patient.ava_number.includes(searchQuery.toLowerCase()) ||\n      patient.tsh_number.includes(searchQuery.toLowerCase()) ||\n      (patient.emr_number && patient.emr_number.includes(searchQuery.toLowerCase()))\n  );\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading MA Dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Medical Assistant Dashboard</h1>\n              <p className=\"text-sm text-gray-600 mt-1\">Welcome back, {user?.name}</p>\n            </div>\n\n            {/* View Toggle */}\n            <div className=\"flex bg-gray-100 rounded-lg p-1\">\n              <button\n                onClick={() => setCurrentView('orders')}\n                className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${\n                  currentView === 'orders'\n                    ? 'bg-white text-blue-600 shadow-sm'\n                    : 'text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                📋 Orders Management\n              </button>\n              <button\n                onClick={() => setCurrentView('chart-prep')}\n                className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${\n                  currentView === 'chart-prep'\n                    ? 'bg-white text-blue-600 shadow-sm'\n                    : 'text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                📊 Chart Prep Station\n              </button>\n            </div>\n          </div>\n\n          {/* Stats Cards */}\n          {orderStats && (\n            <div className=\"grid grid-cols-5 gap-4 mt-6\">\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\">{orderStats.pending}</div>\n                <div className=\"text-sm text-blue-800\">Pending Orders</div>\n              </div>\n              <div className=\"bg-yellow-50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-yellow-600\">{orderStats.inProgress}</div>\n                <div className=\"text-sm text-yellow-800\">In Progress</div>\n              </div>\n              <div className=\"bg-green-50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">{orderStats.completed}</div>\n                <div className=\"text-sm text-green-800\">Completed</div>\n              </div>\n              <div className=\"bg-red-50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-red-600\">{orderStats.urgent}</div>\n                <div className=\"text-sm text-red-800\">Urgent</div>\n              </div>\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-gray-600\">{orderStats.total}</div>\n                <div className=\"text-sm text-gray-800\">Total Orders</div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 py-6\">\n        {/* Search Bar */}\n        <div className=\"mb-6\">\n          <input\n            type=\"text\"\n            placeholder={\n              currentView === 'orders'\n                ? 'Search orders by patient, doctor, or order text...'\n                : 'Search patients by name, AVA#, TSH#, or EMR#...'\n            }\n            value={searchQuery}\n            onChange={e => setSearchQuery(e.target.value)}\n            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n\n        {currentView === 'orders' ? (\n          /* Orders Management View */\n          <div className=\"space-y-6\">\n            <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n              <div className=\"px-6 py-4 border-b border-gray-200\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">Pending Orders</h2>\n                <p className=\"text-sm text-gray-600\">Orders from all doctors needing attention</p>\n              </div>\n\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Patient\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Doctor\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Type\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Order\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Urgency\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Priority\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {filteredOrders.map(order => (\n                      <tr key={order.order_id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {order.patient_name || 'Unknown'}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-gray-900\">\n                            {order.doctor_name || 'Unknown'}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span\n                            className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                              order.order_type === 'medication'\n                                ? 'bg-blue-100 text-blue-800'\n                                : order.order_type === 'lab'\n                                  ? 'bg-green-100 text-green-800'\n                                  : order.order_type === 'imaging'\n                                    ? 'bg-purple-100 text-purple-800'\n                                    : order.order_type === 'prior_auth'\n                                      ? 'bg-red-100 text-red-800'\n                                      : order.order_type === 'referral'\n                                        ? 'bg-yellow-100 text-yellow-800'\n                                        : 'bg-gray-100 text-gray-800'\n                            }`}\n                          >\n                            {order.order_type.replace('_', ' ').toUpperCase()}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 max-w-xs\">\n                          <div className=\"text-sm text-gray-900 truncate\" title={order.order_text}>\n                            {order.order_text}\n                          </div>\n                          {order.action && (\n                            <div className=\"text-xs text-gray-500\">\n                              Action: {order.action.toUpperCase()}\n                            </div>\n                          )}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span\n                            className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                              order.urgency === 'stat'\n                                ? 'bg-red-100 text-red-800'\n                                : order.urgency === 'urgent'\n                                  ? 'bg-orange-100 text-orange-800'\n                                  : 'bg-gray-100 text-gray-800'\n                            }`}\n                          >\n                            {order.urgency.toUpperCase()}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center\">\n                            <div\n                              className={`w-3 h-3 rounded-full mr-2 ${\n                                order.priority_score >= 8\n                                  ? 'bg-red-500'\n                                  : order.priority_score >= 6\n                                    ? 'bg-yellow-500'\n                                    : 'bg-green-500'\n                              }`}\n                            ></div>\n                            <span className=\"text-sm text-gray-900\">{order.priority_score}/10</span>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                          {order.status === 'pending' && (\n                            <button\n                              onClick={() => handleAssignOrder(order)}\n                              className=\"text-blue-600 hover:text-blue-900\"\n                            >\n                              Assign to Me\n                            </button>\n                          )}\n                          {order.ma_id === user?.id && (\n                            <button\n                              onClick={() => handleCompleteOrder(order)}\n                              className=\"text-green-600 hover:text-green-900\"\n                            >\n                              ✓ Complete\n                            </button>\n                          )}\n                          <button\n                            onClick={() => setSelectedOrder(order)}\n                            className=\"text-gray-600 hover:text-gray-900\"\n                          >\n                            View\n                          </button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n\n              {filteredOrders.length === 0 && (\n                <div className=\"px-6 py-12 text-center\">\n                  <p className=\"text-gray-500\">No pending orders found.</p>\n                </div>\n              )}\n            </div>\n          </div>\n        ) : (\n          /* Chart Prep Station View */\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Create New Patient */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Create New Patient</h2>\n              <form onSubmit={handleCreatePatient} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Full Name *\n                    </label>\n                    <input\n                      type=\"text\"\n                      required\n                      value={newPatient.name}\n                      onChange={e => setNewPatient({ ...newPatient, name: e.target.value })}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Date of Birth *\n                    </label>\n                    <input\n                      type=\"date\"\n                      required\n                      value={newPatient.dob}\n                      onChange={e => setNewPatient({ ...newPatient, dob: e.target.value })}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Email</label>\n                    <input\n                      type=\"email\"\n                      value={newPatient.email}\n                      onChange={e => setNewPatient({ ...newPatient, email: e.target.value })}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Phone</label>\n                    <input\n                      type=\"tel\"\n                      value={newPatient.phone}\n                      onChange={e => setNewPatient({ ...newPatient, phone: e.target.value })}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    EMR Number (Optional)\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={newPatient.emr_number}\n                    onChange={e => setNewPatient({ ...newPatient, emr_number: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"From external EMR system\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Insurance Information\n                  </label>\n                  <textarea\n                    value={newPatient.insurance_info}\n                    onChange={e => setNewPatient({ ...newPatient, insurance_info: e.target.value })}\n                    rows={2}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                </div>\n\n                <button\n                  type=\"submit\"\n                  className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n                >\n                  Create Patient (Auto-generate AVA & TSH Numbers)\n                </button>\n              </form>\n            </div>\n\n            {/* Recent Patients */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Recent Patients</h2>\n              <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                {filteredPatients.slice(0, 10).map(patient => (\n                  <div\n                    key={patient.patient_id}\n                    className=\"p-3 border border-gray-200 rounded-lg hover:bg-gray-50\"\n                  >\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <div className=\"font-medium text-gray-900\">{patient.name}</div>\n                        <div className=\"text-sm text-gray-600\">DOB: {patient.dob}</div>\n                        <div className=\"text-sm text-gray-500\">\n                          AVA: {patient.ava_number} | TSH: {patient.tsh_number}\n                        </div>\n                        {patient.emr_number && (\n                          <div className=\"text-sm text-gray-500\">EMR: {patient.emr_number}</div>\n                        )}\n                      </div>\n                      <div className=\"text-xs text-gray-400\">\n                        Created {new Date(patient.created_at).toLocaleDateString()}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {filteredPatients.length === 0 && (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500\">No patients found.</p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Order Detail Modal */}\n      {selectedOrder && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-start mb-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">Order Details</h3>\n                <button\n                  onClick={() => setSelectedOrder(null)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  ×\n                </button>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Patient:</label>\n                  <p className=\"text-gray-900\">{selectedOrder.patient_name}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Doctor:</label>\n                  <p className=\"text-gray-900\">{selectedOrder.doctor_name}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Order Type:</label>\n                  <p className=\"text-gray-900\">\n                    {selectedOrder.order_type.replace('_', ' ').toUpperCase()}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Order Text:</label>\n                  <p className=\"text-gray-900\">{selectedOrder.order_text}</p>\n                </div>\n                {selectedOrder.action && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700\">Action:</label>\n                    <p className=\"text-gray-900\">{selectedOrder.action.toUpperCase()}</p>\n                  </div>\n                )}\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Urgency:</label>\n                  <p className=\"text-gray-900\">{selectedOrder.urgency.toUpperCase()}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Priority Score:</label>\n                  <p className=\"text-gray-900\">{selectedOrder.priority_score}/10</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Estimated Time:</label>\n                  <p className=\"text-gray-900\">{selectedOrder.estimated_time_minutes} minutes</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Created:</label>\n                  <p className=\"text-gray-900\">\n                    {new Date(selectedOrder.created_at).toLocaleString()}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex gap-3 mt-6\">\n                {selectedOrder.status === 'pending' && (\n                  <button\n                    onClick={() => handleAssignOrder(selectedOrder)}\n                    className=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700\"\n                  >\n                    Assign to Me\n                  </button>\n                )}\n                {selectedOrder.ma_id === user?.id && selectedOrder.status === 'in_progress' && (\n                  <button\n                    onClick={() => handleCompleteOrder(selectedOrder)}\n                    className=\"bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700\"\n                  >\n                    Complete Order\n                  </button>\n                )}\n                <button\n                  onClick={() => setSelectedOrder(null)}\n                  className=\"bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400\"\n                >\n                  Close\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":["MAOrdersService","getDb","extractedOrders","patientId","doctorId","doctorName","dictationId","orders","patientName","patientMasterService","med","lab","img","auth","ref","logInfo","orderData","order","generateId","a","b","urgencyOrder","maId","status","matchMA","matchStatus","matchDoctor","orderId","maName","updatedOrder","notes","o","maWorkloads","today","workload","pendingOrders","errors","assigned","leastBusyMA","min","ma","error","orderType","urgency","score","action","details","logEntry","limit","log","thirtyDaysAgo","deletedCount","maOrdersService","MADashboard","user","useAuth","navigate","useNavigate","currentView","setCurrentView","useState","setOrders","orderStats","setOrderStats","patients","setPatients","loading","setLoading","searchQuery","setSearchQuery","selectedOrder","setSelectedOrder","newPatient","setNewPatient","useEffect","loadData","interval","stats","allPatients","logError","handleCompleteOrder","handleAssignOrder","handleCreatePatient","e","filteredOrders","filteredPatients","patient","jsxs","jsx"],"mappings":"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"}