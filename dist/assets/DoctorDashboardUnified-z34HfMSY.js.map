{"version":3,"file":"DoctorDashboardUnified-z34HfMSY.js","sources":["../../node_modules/lucide-react/dist/esm/icons/bell.js","../../node_modules/lucide-react/dist/esm/icons/calendar-days.js","../../node_modules/lucide-react/dist/esm/icons/chevron-left.js","../../node_modules/lucide-react/dist/esm/icons/circle.js","../../node_modules/lucide-react/dist/esm/icons/file.js","../../node_modules/lucide-react/dist/esm/icons/grid-3x3.js","../../node_modules/lucide-react/dist/esm/icons/list.js","../../src/services/unifiedAppointment.service.ts","../../src/hooks/useSchedule.ts","../../src/components/layout/DoctorNavBar.tsx","../../src/components/doctor/ScheduleNavigation.tsx","../../src/components/doctor/DailyPatientList.tsx","../../src/pages/DoctorDashboardUnified.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.539.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M10.268 21a2 2 0 0 0 3.464 0\", key: \"vwvbt9\" }],\n  [\n    \"path\",\n    {\n      d: \"M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326\",\n      key: \"11g9vi\"\n    }\n  ]\n];\nconst Bell = createLucideIcon(\"bell\", __iconNode);\n\nexport { __iconNode, Bell as default };\n//# sourceMappingURL=bell.js.map\n","/**\n * @license lucide-react v0.539.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M8 2v4\", key: \"1cmpym\" }],\n  [\"path\", { d: \"M16 2v4\", key: \"4m81vk\" }],\n  [\"rect\", { width: \"18\", height: \"18\", x: \"3\", y: \"4\", rx: \"2\", key: \"1hopcy\" }],\n  [\"path\", { d: \"M3 10h18\", key: \"8toen8\" }],\n  [\"path\", { d: \"M8 14h.01\", key: \"6423bh\" }],\n  [\"path\", { d: \"M12 14h.01\", key: \"1etili\" }],\n  [\"path\", { d: \"M16 14h.01\", key: \"1gbofw\" }],\n  [\"path\", { d: \"M8 18h.01\", key: \"lrp35t\" }],\n  [\"path\", { d: \"M12 18h.01\", key: \"mhygvu\" }],\n  [\"path\", { d: \"M16 18h.01\", key: \"kzsmim\" }]\n];\nconst CalendarDays = createLucideIcon(\"calendar-days\", __iconNode);\n\nexport { __iconNode, CalendarDays as default };\n//# sourceMappingURL=calendar-days.js.map\n","/**\n * @license lucide-react v0.539.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [[\"path\", { d: \"m15 18-6-6 6-6\", key: \"1wnfg3\" }]];\nconst ChevronLeft = createLucideIcon(\"chevron-left\", __iconNode);\n\nexport { __iconNode, ChevronLeft as default };\n//# sourceMappingURL=chevron-left.js.map\n","/**\n * @license lucide-react v0.539.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [[\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }]];\nconst Circle = createLucideIcon(\"circle\", __iconNode);\n\nexport { __iconNode, Circle as default };\n//# sourceMappingURL=circle.js.map\n","/**\n * @license lucide-react v0.539.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z\", key: \"1rqfz7\" }],\n  [\"path\", { d: \"M14 2v4a2 2 0 0 0 2 2h4\", key: \"tnqrlb\" }]\n];\nconst File = createLucideIcon(\"file\", __iconNode);\n\nexport { __iconNode, File as default };\n//# sourceMappingURL=file.js.map\n","/**\n * @license lucide-react v0.539.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"rect\", { width: \"18\", height: \"18\", x: \"3\", y: \"3\", rx: \"2\", key: \"afitv7\" }],\n  [\"path\", { d: \"M3 9h18\", key: \"1pudct\" }],\n  [\"path\", { d: \"M3 15h18\", key: \"5xshup\" }],\n  [\"path\", { d: \"M9 3v18\", key: \"fh3hqa\" }],\n  [\"path\", { d: \"M15 3v18\", key: \"14nvp0\" }]\n];\nconst Grid3x3 = createLucideIcon(\"grid-3x3\", __iconNode);\n\nexport { __iconNode, Grid3x3 as default };\n//# sourceMappingURL=grid-3x3.js.map\n","/**\n * @license lucide-react v0.539.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M3 12h.01\", key: \"nlz23k\" }],\n  [\"path\", { d: \"M3 18h.01\", key: \"1tta3j\" }],\n  [\"path\", { d: \"M3 6h.01\", key: \"1rqtza\" }],\n  [\"path\", { d: \"M8 12h13\", key: \"1za7za\" }],\n  [\"path\", { d: \"M8 18h13\", key: \"1lx6n3\" }],\n  [\"path\", { d: \"M8 6h13\", key: \"ik3vkj\" }]\n];\nconst List = createLucideIcon(\"list\", __iconNode);\n\nexport { __iconNode, List as default };\n//# sourceMappingURL=list.js.map\n","import { logError, logWarn, logInfo, logDebug } from './logger.service';\n/**\n * UNIFIED APPOINTMENT SERVICE\n * =========================\n *\n * This is the ONLY service that should be used for appointment management.\n * All other appointment services are deprecated and should not be used.\n *\n * Storage Strategy:\n * 1. Primary: localStorage with backup\n * 2. Fallback: sessionStorage\n * 3. Future: Database sync when available\n *\n * CRITICAL: Do NOT create any other appointment storage services!\n */\n\nexport interface UnifiedAppointment {\n  id: string;\n  patientId: string;\n  patientName: string;\n  patientPhone?: string;\n  patientEmail?: string;\n  doctorId: string;\n  doctorName: string;\n  date: string; // YYYY-MM-DD format\n  time: string; // \"9:00 AM\" format\n  duration: number; // minutes\n  status: 'scheduled' | 'completed' | 'cancelled' | 'no-show' | 'in-progress';\n  visitType: 'new-patient' | 'follow-up' | 'urgent' | 'procedure' | 'lab-review' | 'telemedicine';\n  visitReason: string;\n  notes?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nclass UnifiedAppointmentService {\n  // SINGLE SOURCE OF TRUTH - Do not change this key!\n  private readonly STORAGE_KEY = 'tshla_unified_appointments';\n  private readonly BACKUP_KEY = 'tshla_unified_appointments_backup';\n  private readonly SYNC_STATUS_KEY = 'tshla_appointment_sync_status';\n\n  private appointments: Map<string, UnifiedAppointment> = new Map();\n  private isInitialized = false;\n\n  constructor() {\n    this.initialize();\n  }\n\n  /**\n   * Initialize the service and load appointments\n   * This runs automatic migration from old systems\n   */\n  private initialize(): void {\n    if (this.isInitialized) return;\n\n    logDebug('unifiedAppointment', 'Debug message', {});\n\n    try {\n      // Load existing unified appointments\n      this.loadFromStorage();\n\n      // Run one-time migration from legacy systems\n      this.runLegacyMigration();\n\n      // Set up auto-save\n      this.setupAutoSave();\n\n      this.isInitialized = true;\n      logInfo('unifiedAppointment', 'Info message', {});\n      logDebug('unifiedAppointment', 'Debug message', {});\n    } catch (error) {\n      logError('unifiedAppointment', 'Error message', {});\n      // Continue with empty state\n      this.isInitialized = true;\n    }\n  }\n\n  /**\n   * Load appointments from primary storage\n   */\n  private loadFromStorage(): void {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      if (stored) {\n        const appointments: UnifiedAppointment[] = JSON.parse(stored);\n        this.appointments.clear();\n\n        appointments.forEach(apt => {\n          // Ensure dates are properly parsed\n          apt.createdAt = new Date(apt.createdAt);\n          apt.updatedAt = new Date(apt.updatedAt);\n          this.appointments.set(apt.id, apt);\n        });\n      }\n    } catch (error) {\n      logWarn('unifiedAppointment', 'Warning message', {});\n      this.loadFromBackup();\n    }\n  }\n\n  /**\n   * Load from backup storage\n   */\n  private loadFromBackup(): void {\n    try {\n      const backup = localStorage.getItem(this.BACKUP_KEY);\n      if (backup) {\n        const backupData = JSON.parse(backup);\n        if (backupData.appointments && Array.isArray(backupData.appointments)) {\n          this.appointments.clear();\n          backupData.appointments.forEach((apt: UnifiedAppointment) => {\n            apt.createdAt = new Date(apt.createdAt);\n            apt.updatedAt = new Date(apt.updatedAt);\n            this.appointments.set(apt.id, apt);\n          });\n          logDebug('unifiedAppointment', 'Debug message', {});\n        }\n      }\n    } catch (error) {\n      logWarn('unifiedAppointment', 'Warning message', {});\n    }\n  }\n\n  /**\n   * ONE-TIME MIGRATION: Consolidate all legacy appointment systems\n   */\n  private runLegacyMigration(): void {\n    let migrationCount = 0;\n\n    try {\n      // Migration from SimpleAppointmentService\n      const simpleAppointments = localStorage.getItem('tshla_simple_appointments');\n      if (simpleAppointments) {\n        const appointments = JSON.parse(simpleAppointments);\n        if (Array.isArray(appointments)) {\n          appointments.forEach(apt => {\n            const unified = this.convertSimpleAppointment(apt);\n            if (!this.appointments.has(unified.id)) {\n              this.appointments.set(unified.id, unified);\n              migrationCount++;\n            }\n          });\n        }\n      }\n\n      // Migration from ScheduleStorage\n      const scheduleData = localStorage.getItem('doctor_schedule_data');\n      if (scheduleData) {\n        const schedules = JSON.parse(scheduleData);\n        Object.keys(schedules).forEach(date => {\n          if (Array.isArray(schedules[date])) {\n            schedules[date].forEach((slot: any) => {\n              const unified = this.convertScheduleSlot(slot, date);\n              if (!this.appointments.has(unified.id)) {\n                this.appointments.set(unified.id, unified);\n                migrationCount++;\n              }\n            });\n          }\n        });\n      }\n\n      // Migration from session storage\n      Object.keys(sessionStorage).forEach(key => {\n        if (key.startsWith('schedule_')) {\n          try {\n            const date = key.replace('schedule_', '');\n            const slots = JSON.parse(sessionStorage.getItem(key) || '[]');\n            if (Array.isArray(slots)) {\n              slots.forEach((slot: any) => {\n                const unified = this.convertScheduleSlot(slot, date);\n                if (!this.appointments.has(unified.id)) {\n                  this.appointments.set(unified.id, unified);\n                  migrationCount++;\n                }\n              });\n            }\n          } catch (e) {\n            logWarn('unifiedAppointment', 'Warning message', {});\n          }\n        }\n      });\n\n      if (migrationCount > 0) {\n        logDebug('unifiedAppointment', 'Debug message', {});\n        this.saveToStorage();\n\n        // Mark legacy systems as migrated\n        localStorage.setItem('tshla_legacy_migration_completed', new Date().toISOString());\n      }\n    } catch (error) {\n      logError('unifiedAppointment', 'Error message', {});\n    }\n  }\n\n  /**\n   * Convert SimpleAppointment to UnifiedAppointment\n   */\n  private convertSimpleAppointment(simple: any): UnifiedAppointment {\n    return {\n      id: simple.id || this.generateId(),\n      patientId: simple.patientId || this.generatePatientId(simple.patientName),\n      patientName: simple.patientName,\n      patientPhone: simple.patientPhone,\n      patientEmail: simple.patientEmail,\n      doctorId: simple.doctorId || 'doctor-default',\n      doctorName: simple.doctorName || 'Dr. Unknown',\n      date: simple.date,\n      time: simple.time,\n      duration: simple.duration || 30,\n      status: simple.status || 'scheduled',\n      visitType: simple.visitType || 'follow-up',\n      visitReason: simple.visitReason || 'General consultation',\n      notes: simple.notes,\n      createdAt: simple.createdAt ? new Date(simple.createdAt) : new Date(),\n      updatedAt: new Date(),\n    };\n  }\n\n  /**\n   * Convert ScheduleSlot to UnifiedAppointment\n   */\n  private convertScheduleSlot(slot: any, date: string): UnifiedAppointment {\n    return {\n      id: slot.id || this.generateId(),\n      patientId: this.generatePatientId(slot.name || slot.initials),\n      patientName: slot.name || slot.initials || 'Unknown Patient',\n      patientPhone: undefined,\n      patientEmail: undefined,\n      doctorId: 'doctor-default',\n      doctorName: 'Dr. Unknown',\n      date: date,\n      time: slot.time,\n      duration: 30,\n      status: slot.status || 'scheduled',\n      visitType: 'follow-up',\n      visitReason: slot.notes || 'General consultation',\n      notes: slot.notes,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n  }\n\n  /**\n   * Generate unique appointment ID\n   */\n  private generateId(): string {\n    return `apt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Generate patient ID from name\n   */\n  private generatePatientId(name: string): string {\n    const cleanName = name.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n    return `pat-${cleanName}-${Date.now().toString().slice(-6)}`;\n  }\n\n  /**\n   * Save appointments to storage with backup\n   */\n  private saveToStorage(): void {\n    try {\n      const appointments = Array.from(this.appointments.values());\n\n      // Save to primary storage\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(appointments));\n\n      // Create backup\n      const backup = {\n        timestamp: new Date().toISOString(),\n        version: '1.0',\n        appointments: appointments,\n      };\n      localStorage.setItem(this.BACKUP_KEY, JSON.stringify(backup));\n\n      // Update sync status\n      localStorage.setItem(\n        this.SYNC_STATUS_KEY,\n        JSON.stringify({\n          lastSaved: new Date().toISOString(),\n          appointmentCount: appointments.length,\n        })\n      );\n    } catch (error) {\n      logError('unifiedAppointment', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Set up automatic saving every 5 seconds\n   */\n  private setupAutoSave(): void {\n    setInterval(() => {\n      if (this.appointments.size > 0) {\n        this.saveToStorage();\n      }\n    }, 5000);\n  }\n\n  // ================================\n  // PUBLIC API METHODS\n  // ================================\n\n  /**\n   * Create a new appointment\n   */\n  async createAppointment(\n    appointmentData: Omit<UnifiedAppointment, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<UnifiedAppointment> {\n    const appointment: UnifiedAppointment = {\n      ...appointmentData,\n      id: this.generateId(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.appointments.set(appointment.id, appointment);\n    this.saveToStorage();\n\n    logInfo('unifiedAppointment', 'Info message', {});\n    return appointment;\n  }\n\n  /**\n   * Get appointments by filters\n   */\n  getAppointments(filters?: {\n    doctorId?: string;\n    date?: string;\n    dateRange?: { start: string; end: string };\n    status?: UnifiedAppointment['status'];\n  }): UnifiedAppointment[] {\n    let appointments = Array.from(this.appointments.values());\n\n    if (filters) {\n      if (filters.doctorId && filters.doctorId !== 'all') {\n        appointments = appointments.filter(apt => apt.doctorId === filters.doctorId);\n      }\n\n      if (filters.date) {\n        appointments = appointments.filter(apt => apt.date === filters.date);\n      }\n\n      if (filters.dateRange) {\n        appointments = appointments.filter(\n          apt => apt.date >= filters.dateRange!.start && apt.date <= filters.dateRange!.end\n        );\n      }\n\n      if (filters.status) {\n        appointments = appointments.filter(apt => apt.status === filters.status);\n      }\n    }\n\n    // Sort by date and time\n    return appointments.sort((a, b) => {\n      if (a.date !== b.date) {\n        return a.date.localeCompare(b.date);\n      }\n      return this.timeToMinutes(a.time) - this.timeToMinutes(b.time);\n    });\n  }\n\n  /**\n   * Get appointment by ID\n   */\n  getAppointment(id: string): UnifiedAppointment | null {\n    return this.appointments.get(id) || null;\n  }\n\n  /**\n   * Update an appointment\n   */\n  async updateAppointment(\n    id: string,\n    updates: Partial<UnifiedAppointment>\n  ): Promise<UnifiedAppointment | null> {\n    const appointment = this.appointments.get(id);\n    if (!appointment) {\n      throw new Error(`Appointment ${id} not found`);\n    }\n\n    const updated = {\n      ...appointment,\n      ...updates,\n      id: appointment.id, // Prevent ID changes\n      updatedAt: new Date(),\n    };\n\n    this.appointments.set(id, updated);\n    this.saveToStorage();\n\n    logInfo('unifiedAppointment', 'Info message', {});\n    return updated;\n  }\n\n  /**\n   * Delete an appointment\n   */\n  async deleteAppointment(id: string): Promise<boolean> {\n    const appointment = this.appointments.get(id);\n    if (!appointment) {\n      return false;\n    }\n\n    this.appointments.delete(id);\n    this.saveToStorage();\n\n    logDebug('unifiedAppointment', 'Debug message', {});\n    return true;\n  }\n\n  /**\n   * Get appointments for a specific date\n   */\n  getAppointmentsForDate(date: string, doctorId?: string): UnifiedAppointment[] {\n    return this.getAppointments({ date, doctorId });\n  }\n\n  /**\n   * Get statistics\n   */\n  getStats(): {\n    total: number;\n    scheduled: number;\n    completed: number;\n    cancelled: number;\n    inProgress: number;\n  } {\n    const appointments = Array.from(this.appointments.values());\n\n    return {\n      total: appointments.length,\n      scheduled: appointments.filter(apt => apt.status === 'scheduled').length,\n      completed: appointments.filter(apt => apt.status === 'completed').length,\n      cancelled: appointments.filter(apt => apt.status === 'cancelled').length,\n      inProgress: appointments.filter(apt => apt.status === 'in-progress').length,\n    };\n  }\n\n  /**\n   * Export all appointments\n   */\n  exportAppointments(): string {\n    const data = {\n      exportDate: new Date().toISOString(),\n      version: '1.0',\n      appointments: Array.from(this.appointments.values()),\n    };\n    return JSON.stringify(data, null, 2);\n  }\n\n  /**\n   * Clear all appointments (emergency use only)\n   */\n  clearAllAppointments(): void {\n    logWarn('unifiedAppointment', 'Warning message', {});\n    this.appointments.clear();\n    this.saveToStorage();\n  }\n\n  /**\n   * Helper: Convert time to minutes for sorting\n   */\n  private timeToMinutes(time: string): number {\n    const [timePart, period] = time.split(' ');\n    let [hours, minutes] = timePart.split(':').map(Number);\n\n    if (period === 'PM' && hours !== 12) hours += 12;\n    if (period === 'AM' && hours === 12) hours = 0;\n\n    return hours * 60 + minutes;\n  }\n}\n\n// Export singleton instance - ONLY use this!\nexport const unifiedAppointmentService = new UnifiedAppointmentService();\n\n// Export type for components\nexport type { UnifiedAppointment };\n","/**\n * useSchedule Hook\n * React hook for managing schedule data with database integration\n * Created: September 16, 2025\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { scheduleDatabaseService } from '../services/scheduleDatabase.service';\nimport {\n  unifiedAppointmentService,\n  type UnifiedAppointment,\n} from '../services/unifiedAppointment.service';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\ninterface UseScheduleProps {\n  providerId: string;\n  date: Date;\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n}\n\ninterface UseScheduleReturn {\n  appointments: UnifiedAppointment[];\n  isLoading: boolean;\n  error: string | null;\n  refreshSchedule: () => Promise<void>;\n  createAppointment: (appointment: Partial<UnifiedAppointment>) => Promise<boolean>;\n  updateAppointment: (id: string, updates: Partial<UnifiedAppointment>) => Promise<boolean>;\n  deleteAppointment: (id: string) => Promise<boolean>;\n  updateAppointmentStatus: (id: string, status: UnifiedAppointment['status']) => Promise<boolean>;\n}\n\nexport function useSchedule({\n  providerId,\n  date,\n  autoRefresh = true,\n  refreshInterval = 30000, // 30 seconds\n}: UseScheduleProps): UseScheduleReturn {\n  const [appointments, setAppointments] = useState<UnifiedAppointment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const dateString = date.toISOString().split('T')[0];\n\n  // Fetch schedule data\n  const refreshSchedule = useCallback(async () => {\n    if (!providerId) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Try to load from database first\n      const dbAppointments = await scheduleDatabaseService.getScheduleForDate(\n        providerId,\n        dateString\n      );\n\n      if (dbAppointments.length > 0) {\n        // Convert database format to UnifiedAppointment format\n        const unifiedAppointments: UnifiedAppointment[] = dbAppointments.map(dbAppt => ({\n          id: dbAppt.id,\n          patientId: dbAppt.id,\n          patientName: dbAppt.name,\n          patientPhone: dbAppt.phone,\n          patientEmail: '', // Not available in current format\n          time: dbAppt.appointmentTime,\n          date: dateString,\n          visitType: 'follow-up' as const,\n          visitReason: '',\n          status: dbAppt.status,\n          notes: '',\n          providerId,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        }));\n\n        setAppointments(unifiedAppointments);\n      } else {\n        // Fallback to unified appointment service (localStorage)\n        const localAppointments = unifiedAppointmentService.getAppointmentsForDate(\n          dateString,\n          providerId\n        );\n        setAppointments(localAppointments);\n      }\n    } catch (err) {\n      logError('App', 'Error message', {});\n      setError(err instanceof Error ? err.message : 'Failed to load schedule');\n\n      // Fallback to local data\n      try {\n        const localAppointments = unifiedAppointmentService.getAppointmentsForDate(\n          dateString,\n          providerId\n        );\n        setAppointments(localAppointments);\n      } catch (localErr) {\n        logError('App', 'Error message', {});\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, [providerId, dateString]);\n\n  // Create new appointment\n  const createAppointment = useCallback(\n    async (appointmentData: Partial<UnifiedAppointment>): Promise<boolean> => {\n      if (!providerId) return false;\n\n      setIsLoading(true);\n      try {\n        // Create appointment in unified service first (immediate UI update)\n        const newAppointment = await unifiedAppointmentService.createAppointment({\n          providerId,\n          patientName: appointmentData.patientName || 'New Patient',\n          patientPhone: appointmentData.patientPhone,\n          patientEmail: appointmentData.patientEmail,\n          time: appointmentData.time || '9:00 AM',\n          date: dateString,\n          visitType: appointmentData.visitType || 'follow-up',\n          visitReason: appointmentData.visitReason || '',\n          status: appointmentData.status || 'scheduled',\n          notes: appointmentData.notes || '',\n        });\n\n        // Try to save to database\n        try {\n          const dbPatient = {\n            id: newAppointment.id,\n            name: newAppointment.patientName,\n            mrn: newAppointment.patientId,\n            appointmentTime: newAppointment.time,\n            status: newAppointment.status,\n            phone: newAppointment.patientPhone,\n            isPlaceholder: false,\n          };\n\n          await scheduleDatabaseService.saveAppointment(\n            providerId,\n            'Doctor', // TODO: Get actual provider name\n            dbPatient,\n            dateString\n          );\n        } catch (dbError) {\n          logWarn('App', 'Warning message', {});\n        }\n\n        // No need to manually refresh - data will update automatically\n        return true;\n      } catch (err) {\n        logError('App', 'Error message', {});\n        setError(err instanceof Error ? err.message : 'Failed to create appointment');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [providerId, dateString]\n  );\n\n  // Update existing appointment\n  const updateAppointment = useCallback(\n    async (id: string, updates: Partial<UnifiedAppointment>): Promise<boolean> => {\n      setIsLoading(true);\n      try {\n        // Update in unified service\n        await unifiedAppointmentService.updateAppointment(id, updates);\n\n        // Try to update in database\n        try {\n          // Find the appointment to get current data\n          const currentAppointment = appointments.find(apt => apt.id === id);\n          if (currentAppointment) {\n            const updatedPatient = {\n              id: currentAppointment.patientId,\n              name: updates.patientName || currentAppointment.patientName,\n              mrn: currentAppointment.patientId,\n              appointmentTime: updates.time || currentAppointment.time,\n              status: updates.status || currentAppointment.status,\n              phone: updates.patientPhone || currentAppointment.patientPhone,\n              isPlaceholder: false,\n            };\n\n            await scheduleDatabaseService.updateAppointment(id, updatedPatient);\n          }\n        } catch (dbError) {\n          logWarn('App', 'Warning message', {});\n        }\n\n        // Refresh the schedule\n        // No manual refresh needed\n        return true;\n      } catch (err) {\n        logError('App', 'Error message', {});\n        setError(err instanceof Error ? err.message : 'Failed to update appointment');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [appointments]\n  );\n\n  // Delete appointment\n  const deleteAppointment = useCallback(async (id: string): Promise<boolean> => {\n    setIsLoading(true);\n    try {\n      // Delete from unified service\n      await unifiedAppointmentService.deleteAppointment(id);\n\n      // Try to delete from database\n      try {\n        await scheduleDatabaseService.deleteAppointment(id);\n      } catch (dbError) {\n        logWarn('App', 'Warning message', {});\n      }\n\n      // Refresh the schedule\n      // No manual refresh needed\n      return true;\n    } catch (err) {\n      logError('App', 'Error message', {});\n      setError(err instanceof Error ? err.message : 'Failed to delete appointment');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Quick status update\n  const updateAppointmentStatus = useCallback(\n    async (id: string, status: UnifiedAppointment['status']): Promise<boolean> => {\n      return updateAppointment(id, { status });\n    },\n    [updateAppointment]\n  );\n\n  // Initial load\n  useEffect(() => {\n    refreshSchedule();\n  }, [providerId, dateString]); // Use the actual dependencies instead of refreshSchedule\n\n  // Auto-refresh interval\n  useEffect(() => {\n    if (!autoRefresh) return;\n\n    const interval = setInterval(() => {\n      refreshSchedule();\n    }, refreshInterval);\n\n    return () => clearInterval(interval);\n  }, [autoRefresh, refreshInterval, providerId, dateString]); // Remove refreshSchedule dependency\n\n  return {\n    appointments,\n    isLoading,\n    error,\n    refreshSchedule,\n    createAppointment,\n    updateAppointment,\n    deleteAppointment,\n    updateAppointmentStatus,\n  };\n}\n","/**\n * DoctorNavBar Component\n * Top navigation bar for doctor dashboard with quick actions\n * Created: September 16, 2025\n */\n\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  FileText,\n  File,\n  Calendar,\n  User,\n  LogOut,\n  Settings,\n  ChevronDown,\n  Plus,\n  Search,\n  Bell,\n  Home,\n} from 'lucide-react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { unifiedAuthService } from '../../services/unifiedAuth.service';\nimport { logError, logWarn, logInfo, logDebug } from '../../services/logger.service';\n\ninterface DoctorNavBarProps {\n  currentView?: 'calendar' | 'templates' | 'notes';\n  onViewChange?: (view: 'calendar' | 'templates' | 'notes') => void;\n  practiceInfo?: {\n    name: string;\n    logo?: string;\n  };\n  showNotifications?: boolean;\n}\n\nexport default function DoctorNavBar({\n  currentView = 'calendar',\n  onViewChange,\n  practiceInfo = { name: 'TSHLA Medical' },\n  showNotifications = true,\n}: DoctorNavBarProps) {\n  const navigate = useNavigate();\n  const { user, logout } = useAuth();\n  const [showUserMenu, setShowUserMenu] = useState(false);\n  const [showTemplateMenu, setShowTemplateMenu] = useState(false);\n  const currentUser = unifiedAuthService.getCurrentUser();\n\n  const handleQuickNote = () => {\n    navigate('/quick-note');\n  };\n\n  const handleTemplates = () => {\n    navigate('/doctor/templates');\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      navigate('/login');\n    } catch (error) {\n      logError('DoctorNavBar', 'Error message', {});\n    }\n  };\n\n  const recentTemplates = [\n    { id: '1', name: 'General SOAP Note', lastUsed: '2 hours ago' },\n    { id: '2', name: 'Follow-up Visit', lastUsed: 'Yesterday' },\n    { id: '3', name: 'Annual Physical', lastUsed: '3 days ago' },\n  ];\n\n  const getViewButtonClass = (view: string) => {\n    const baseClass =\n      'px-4 py-2 rounded-lg font-medium transition-all duration-200 flex items-center space-x-2';\n    return currentView === view\n      ? `${baseClass} bg-blue-500 text-white shadow-sm`\n      : `${baseClass} text-gray-600 hover:bg-gray-100`;\n  };\n\n  return (\n    <nav className=\"bg-white border-b border-gray-200 shadow-sm\">\n      <div className=\"px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          {/* Left side - Logo and main navigation */}\n          <div className=\"flex items-center space-x-6\">\n            {/* Practice Logo/Name */}\n            <div className=\"flex items-center space-x-3\">\n              {practiceInfo.logo ? (\n                <img src={practiceInfo.logo} alt={practiceInfo.name} className=\"h-8 w-8 rounded\" />\n              ) : (\n                <div className=\"h-8 w-8 bg-blue-500 rounded flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-sm\">T</span>\n                </div>\n              )}\n              <span className=\"text-xl font-semibold text-gray-900\">{practiceInfo.name}</span>\n            </div>\n\n            {/* Main Navigation */}\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={() => onViewChange?.('calendar')}\n                className={getViewButtonClass('calendar')}\n              >\n                <Calendar className=\"w-4 h-4\" />\n                <span>Calendar</span>\n              </button>\n\n              {/* Templates Dropdown */}\n              <div className=\"relative\">\n                <button\n                  onClick={() => setShowTemplateMenu(!showTemplateMenu)}\n                  className={`${getViewButtonClass('templates')} ${showTemplateMenu ? 'bg-gray-100' : ''}`}\n                >\n                  <File className=\"w-4 h-4\" />\n                  <span>Templates</span>\n                  <ChevronDown\n                    className={`w-4 h-4 transition-transform ${showTemplateMenu ? 'rotate-180' : ''}`}\n                  />\n                </button>\n\n                {showTemplateMenu && (\n                  <div className=\"absolute top-full left-0 mt-2 w-64 bg-white border border-gray-200 rounded-lg shadow-lg z-50\">\n                    <div className=\"p-3\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <h3 className=\"font-medium text-gray-900\">Templates</h3>\n                        <button\n                          onClick={() => {\n                            handleTemplates();\n                            setShowTemplateMenu(false);\n                          }}\n                          className=\"text-blue-500 hover:text-blue-600 text-sm\"\n                        >\n                          View All\n                        </button>\n                      </div>\n\n                      {/* Quick Actions */}\n                      <div className=\"space-y-1 mb-3\">\n                        <button\n                          onClick={() => {\n                            // TODO: Create new template modal\n                            setShowTemplateMenu(false);\n                          }}\n                          className=\"w-full flex items-center space-x-2 p-2 rounded hover:bg-gray-50 text-left\"\n                        >\n                          <Plus className=\"w-4 h-4 text-gray-500\" />\n                          <span className=\"text-sm\">Create New Template</span>\n                        </button>\n                      </div>\n\n                      {/* Recent Templates */}\n                      <div className=\"border-t border-gray-100 pt-3\">\n                        <h4 className=\"text-xs font-medium text-gray-500 uppercase tracking-wide mb-2\">\n                          Recent Templates\n                        </h4>\n                        <div className=\"space-y-1\">\n                          {recentTemplates.map(template => (\n                            <button\n                              key={template.id}\n                              onClick={() => {\n                                // TODO: Load template\n                                setShowTemplateMenu(false);\n                              }}\n                              className=\"w-full text-left p-2 rounded hover:bg-gray-50\"\n                            >\n                              <div className=\"text-sm font-medium text-gray-900\">\n                                {template.name}\n                              </div>\n                              <div className=\"text-xs text-gray-500\">Used {template.lastUsed}</div>\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <button\n                onClick={() => onViewChange?.('notes')}\n                className={getViewButtonClass('notes')}\n              >\n                <FileText className=\"w-4 h-4\" />\n                <span>Notes</span>\n              </button>\n            </div>\n          </div>\n\n          {/* Center - Quick Actions */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Quick Note Button - Primary CTA */}\n            <button\n              onClick={handleQuickNote}\n              className=\"bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg font-medium transition-colors flex items-center space-x-2 shadow-sm\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              <span>Quick Note</span>\n            </button>\n\n            {/* Search */}\n            <button className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\">\n              <Search className=\"w-5 h-5 text-gray-500\" />\n            </button>\n          </div>\n\n          {/* Right side - Notifications and user menu */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Notifications */}\n            {showNotifications && (\n              <button className=\"relative p-2 rounded-lg hover:bg-gray-100 transition-colors\">\n                <Bell className=\"w-5 h-5 text-gray-500\" />\n                {/* Notification badge */}\n                <span className=\"absolute -top-1 -right-1 h-3 w-3 bg-red-500 rounded-full\"></span>\n              </button>\n            )}\n\n            {/* User Menu */}\n            <div className=\"relative\">\n              <button\n                onClick={() => setShowUserMenu(!showUserMenu)}\n                className=\"flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"h-8 w-8 bg-gray-300 rounded-full flex items-center justify-center\">\n                    <User className=\"w-4 h-4 text-gray-600\" />\n                  </div>\n                  <div className=\"text-left hidden sm:block\">\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      {currentUser?.name || user?.email || 'Doctor'}\n                    </div>\n                    <div className=\"text-xs text-gray-500\">\n                      {currentUser?.specialty || 'Physician'}\n                    </div>\n                  </div>\n                </div>\n                <ChevronDown\n                  className={`w-4 h-4 text-gray-500 transition-transform ${showUserMenu ? 'rotate-180' : ''}`}\n                />\n              </button>\n\n              {showUserMenu && (\n                <div className=\"absolute top-full right-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-50\">\n                  <div className=\"p-2\">\n                    <button\n                      onClick={() => {\n                        navigate('/doctor/profile');\n                        setShowUserMenu(false);\n                      }}\n                      className=\"w-full flex items-center space-x-2 p-2 rounded hover:bg-gray-50 text-left\"\n                    >\n                      <User className=\"w-4 h-4 text-gray-500\" />\n                      <span className=\"text-sm\">Profile</span>\n                    </button>\n\n                    <button\n                      onClick={() => {\n                        // TODO: Settings page\n                        setShowUserMenu(false);\n                      }}\n                      className=\"w-full flex items-center space-x-2 p-2 rounded hover:bg-gray-50 text-left\"\n                    >\n                      <Settings className=\"w-4 h-4 text-gray-500\" />\n                      <span className=\"text-sm\">Settings</span>\n                    </button>\n\n                    <hr className=\"my-2\" />\n\n                    <button\n                      onClick={() => {\n                        handleLogout();\n                        setShowUserMenu(false);\n                      }}\n                      className=\"w-full flex items-center space-x-2 p-2 rounded hover:bg-red-50 text-left text-red-600\"\n                    >\n                      <LogOut className=\"w-4 h-4\" />\n                      <span className=\"text-sm\">Logout</span>\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Close dropdowns when clicking outside */}\n      {(showUserMenu || showTemplateMenu) && (\n        <div\n          className=\"fixed inset-0 z-30\"\n          onClick={() => {\n            setShowUserMenu(false);\n            setShowTemplateMenu(false);\n          }}\n        />\n      )}\n    </nav>\n  );\n}\n","/**\n * ScheduleNavigation Component\n * Date navigation controls for the doctor dashboard\n * Created: September 16, 2025\n */\n\nimport { useState } from 'react';\nimport {\n  ChevronLeft,\n  ChevronRight,\n  Calendar,\n  CalendarDays,\n  Home,\n  Clock,\n  Grid,\n  List,\n} from 'lucide-react';\n\ninterface ScheduleNavigationProps {\n  selectedDate: Date;\n  onDateChange: (date: Date) => void;\n  onViewChange?: (view: 'day' | 'week' | 'month') => void;\n  currentView?: 'day' | 'week' | 'month';\n  showViewToggle?: boolean;\n}\n\nexport default function ScheduleNavigation({\n  selectedDate,\n  onDateChange,\n  onViewChange,\n  currentView = 'day',\n  showViewToggle = true,\n}: ScheduleNavigationProps) {\n  const [showDatePicker, setShowDatePicker] = useState(false);\n\n  // Navigate to previous day\n  const goToPrevious = () => {\n    const previousDate = new Date(selectedDate);\n    if (currentView === 'day') {\n      previousDate.setDate(selectedDate.getDate() - 1);\n    } else if (currentView === 'week') {\n      previousDate.setDate(selectedDate.getDate() - 7);\n    } else {\n      previousDate.setMonth(selectedDate.getMonth() - 1);\n    }\n    onDateChange(previousDate);\n  };\n\n  // Navigate to next day\n  const goToNext = () => {\n    const nextDate = new Date(selectedDate);\n    if (currentView === 'day') {\n      nextDate.setDate(selectedDate.getDate() + 1);\n    } else if (currentView === 'week') {\n      nextDate.setDate(selectedDate.getDate() + 7);\n    } else {\n      nextDate.setMonth(selectedDate.getMonth() + 1);\n    }\n    onDateChange(nextDate);\n  };\n\n  // Go to today\n  const goToToday = () => {\n    onDateChange(new Date());\n  };\n\n  // Quick date navigation buttons\n  const getQuickNavigationDates = () => {\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(today.getDate() - 1);\n\n    const tomorrow = new Date(today);\n    tomorrow.setDate(today.getDate() + 1);\n\n    const nextWeek = new Date(today);\n    nextWeek.setDate(today.getDate() + 7);\n\n    const lastWeek = new Date(today);\n    lastWeek.setDate(today.getDate() - 7);\n\n    return { today, yesterday, tomorrow, nextWeek, lastWeek };\n  };\n\n  const { today, yesterday, tomorrow, nextWeek, lastWeek } = getQuickNavigationDates();\n\n  const formatDisplayDate = () => {\n    const isToday = selectedDate.toDateString() === today.toDateString();\n    const isTomorrow = selectedDate.toDateString() === tomorrow.toDateString();\n    const isYesterday = selectedDate.toDateString() === yesterday.toDateString();\n\n    if (isToday) return 'Today';\n    if (isTomorrow) return 'Tomorrow';\n    if (isYesterday) return 'Yesterday';\n\n    if (currentView === 'week') {\n      const weekStart = new Date(selectedDate);\n      weekStart.setDate(selectedDate.getDate() - selectedDate.getDay());\n      const weekEnd = new Date(weekStart);\n      weekEnd.setDate(weekStart.getDate() + 6);\n\n      return `${weekStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${weekEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`;\n    }\n\n    if (currentView === 'month') {\n      return selectedDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\n    }\n\n    return selectedDate.toLocaleDateString('en-US', {\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric',\n      year: 'numeric',\n    });\n  };\n\n  const isToday = selectedDate.toDateString() === today.toDateString();\n\n  return (\n    <div className=\"bg-white border-b border-gray-200 p-4\">\n      <div className=\"flex items-center justify-between\">\n        {/* Left side - Navigation controls */}\n        <div className=\"flex items-center space-x-4\">\n          {/* Previous/Next buttons */}\n          <div className=\"flex items-center space-x-1\">\n            <button\n              onClick={goToPrevious}\n              className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n              title={`Previous ${currentView}`}\n            >\n              <ChevronLeft className=\"w-5 h-5\" />\n            </button>\n\n            <button\n              onClick={goToNext}\n              className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n              title={`Next ${currentView}`}\n            >\n              <ChevronRight className=\"w-5 h-5\" />\n            </button>\n          </div>\n\n          {/* Today button */}\n          <button\n            onClick={goToToday}\n            className={`px-3 py-2 rounded-lg font-medium transition-colors ${\n              isToday\n                ? 'bg-blue-100 text-blue-800 border-blue-200'\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200 border-gray-200'\n            } border`}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <Home className=\"w-4 h-4\" />\n              <span>Today</span>\n            </div>\n          </button>\n\n          {/* Current date display */}\n          <div className=\"flex items-center space-x-2\">\n            <Calendar className=\"w-5 h-5 text-gray-500\" />\n            <h2 className=\"text-xl font-semibold text-gray-900\">{formatDisplayDate()}</h2>\n          </div>\n        </div>\n\n        {/* Right side - View controls and quick navigation */}\n        <div className=\"flex items-center space-x-4\">\n          {/* Quick date navigation */}\n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => onDateChange(yesterday)}\n              className=\"px-3 py-1 text-sm rounded-md hover:bg-gray-100 transition-colors text-gray-600\"\n            >\n              Yesterday\n            </button>\n\n            <button\n              onClick={() => onDateChange(tomorrow)}\n              className=\"px-3 py-1 text-sm rounded-md hover:bg-gray-100 transition-colors text-gray-600\"\n            >\n              Tomorrow\n            </button>\n\n            <button\n              onClick={() => onDateChange(nextWeek)}\n              className=\"px-3 py-1 text-sm rounded-md hover:bg-gray-100 transition-colors text-gray-600\"\n            >\n              Next Week\n            </button>\n          </div>\n\n          {/* Date picker */}\n          <div className=\"relative\">\n            <button\n              onClick={() => setShowDatePicker(!showDatePicker)}\n              className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n              title=\"Select specific date\"\n            >\n              <CalendarDays className=\"w-5 h-5\" />\n            </button>\n\n            {showDatePicker && (\n              <div className=\"absolute top-full right-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg z-10\">\n                <input\n                  type=\"date\"\n                  value={selectedDate.toISOString().split('T')[0]}\n                  onChange={e => {\n                    onDateChange(new Date(e.target.value + 'T12:00:00'));\n                    setShowDatePicker(false);\n                  }}\n                  className=\"p-3 border-none outline-none rounded-lg\"\n                />\n              </div>\n            )}\n          </div>\n\n          {/* View toggle buttons */}\n          {showViewToggle && onViewChange && (\n            <div className=\"flex items-center border border-gray-200 rounded-lg overflow-hidden\">\n              <button\n                onClick={() => onViewChange('day')}\n                className={`p-2 transition-colors ${\n                  currentView === 'day'\n                    ? 'bg-blue-500 text-white'\n                    : 'bg-white text-gray-600 hover:bg-gray-50'\n                }`}\n                title=\"Day view\"\n              >\n                <Clock className=\"w-4 h-4\" />\n              </button>\n\n              <button\n                onClick={() => onViewChange('week')}\n                className={`p-2 transition-colors ${\n                  currentView === 'week'\n                    ? 'bg-blue-500 text-white'\n                    : 'bg-white text-gray-600 hover:bg-gray-50'\n                }`}\n                title=\"Week view\"\n              >\n                <List className=\"w-4 h-4\" />\n              </button>\n\n              <button\n                onClick={() => onViewChange('month')}\n                className={`p-2 transition-colors ${\n                  currentView === 'month'\n                    ? 'bg-blue-500 text-white'\n                    : 'bg-white text-gray-600 hover:bg-gray-50'\n                }`}\n                title=\"Month view\"\n              >\n                <Grid className=\"w-4 h-4\" />\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Additional info bar */}\n      <div className=\"mt-3 flex items-center justify-between text-sm text-gray-500\">\n        <div className=\"flex items-center space-x-4\">\n          <span>\n            {selectedDate.toLocaleDateString('en-US', {\n              weekday: 'long',\n              year: 'numeric',\n              month: 'long',\n              day: 'numeric',\n            })}\n          </span>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <span>15-minute slots • 9:00 AM - 5:30 PM</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * DailyPatientList Component\n * Displays daily schedule in 15-minute time slots with patient appointments\n * Created: September 16, 2025\n */\n\nimport { useState, useEffect } from 'react';\nimport {\n  Clock,\n  User,\n  Phone,\n  FileText,\n  Play,\n  Plus,\n  AlertCircle,\n  CheckCircle,\n  Circle,\n} from 'lucide-react';\nimport type { UnifiedAppointment } from '../../services/unifiedAppointment.service';\n\ninterface DailyPatientListProps {\n  providerId: string;\n  selectedDate: Date;\n  appointments: UnifiedAppointment[];\n  onPatientClick: (appointment: UnifiedAppointment) => void;\n  onAddAppointment: (timeSlot: string) => void;\n  isLoading?: boolean;\n}\n\n// Generate 15-minute time slots from 9 AM to 5:30 PM\nconst generateTimeSlots = (): string[] => {\n  const slots: string[] = [];\n\n  // Morning slots (9:00 AM to 11:45 AM)\n  for (let hour = 9; hour < 12; hour++) {\n    slots.push(`${hour}:00 AM`);\n    slots.push(`${hour}:15 AM`);\n    slots.push(`${hour}:30 AM`);\n    slots.push(`${hour}:45 AM`);\n  }\n\n  // Noon slots\n  slots.push('12:00 PM');\n  slots.push('12:15 PM');\n  slots.push('12:30 PM');\n  slots.push('12:45 PM');\n\n  // Afternoon slots (1:00 PM to 5:30 PM)\n  for (let hour = 1; hour <= 5; hour++) {\n    slots.push(`${hour}:00 PM`);\n    slots.push(`${hour}:15 PM`);\n    slots.push(`${hour}:30 PM`);\n    if (hour < 5) {\n      // Don't add 5:45 PM slot\n      slots.push(`${hour}:45 PM`);\n    }\n  }\n\n  return slots;\n};\n\nconst getStatusIcon = (status: UnifiedAppointment['status']) => {\n  switch (status) {\n    case 'completed':\n      return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n    case 'in-progress':\n      return <Play className=\"w-4 h-4 text-blue-500\" />;\n    case 'cancelled':\n      return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n    default:\n      return <Circle className=\"w-4 h-4 text-gray-400\" />;\n  }\n};\n\nconst getStatusColor = (status: UnifiedAppointment['status']) => {\n  switch (status) {\n    case 'completed':\n      return 'bg-green-50 border-green-200 text-green-800';\n    case 'in-progress':\n      return 'bg-blue-50 border-blue-200 text-blue-800';\n    case 'cancelled':\n      return 'bg-red-50 border-red-200 text-red-800';\n    default:\n      return 'bg-white border-gray-200 text-gray-900 hover:bg-gray-50';\n  }\n};\n\nexport default function DailyPatientList({\n  providerId,\n  selectedDate,\n  appointments,\n  onPatientClick,\n  onAddAppointment,\n  isLoading = false,\n}: DailyPatientListProps) {\n  const timeSlots = generateTimeSlots();\n\n  // Create a map of appointments by time for quick lookup\n  const appointmentsByTime = appointments.reduce(\n    (acc, appointment) => {\n      acc[appointment.time] = appointment;\n      return acc;\n    },\n    {} as Record<string, UnifiedAppointment>\n  );\n\n  const formatDateDisplay = () => {\n    const today = new Date();\n    const isToday = selectedDate.toDateString() === today.toDateString();\n\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    const isTomorrow = selectedDate.toDateString() === tomorrow.toDateString();\n\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n    const isYesterday = selectedDate.toDateString() === yesterday.toDateString();\n\n    if (isToday) return 'Today';\n    if (isTomorrow) return 'Tomorrow';\n    if (isYesterday) return 'Yesterday';\n\n    return selectedDate.toLocaleDateString('en-US', {\n      weekday: 'long',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-gray-200 rounded mb-4 w-1/3\"></div>\n          {[...Array(10)].map((_, index) => (\n            <div key={index} className=\"flex items-center p-3 mb-2 border rounded\">\n              <div className=\"w-16 h-4 bg-gray-200 rounded mr-4\"></div>\n              <div className=\"flex-1\">\n                <div className=\"h-4 bg-gray-200 rounded mb-2 w-1/2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/3\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-200 bg-white\">\n        <h2 className=\"text-xl font-semibold text-gray-900\">\n          Daily Schedule - {formatDateDisplay()}\n        </h2>\n        <p className=\"text-sm text-gray-600 mt-1\">\n          {selectedDate.toLocaleDateString('en-US', {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n          })}\n        </p>\n        <div className=\"flex items-center space-x-4 mt-2 text-sm\">\n          <span className=\"flex items-center\">\n            <Circle className=\"w-3 h-3 text-gray-400 mr-1\" />\n            Scheduled ({appointments.filter(a => a.status === 'scheduled').length})\n          </span>\n          <span className=\"flex items-center\">\n            <Play className=\"w-3 h-3 text-blue-500 mr-1\" />\n            In Progress ({appointments.filter(a => a.status === 'in-progress').length})\n          </span>\n          <span className=\"flex items-center\">\n            <CheckCircle className=\"w-3 h-3 text-green-500 mr-1\" />\n            Completed ({appointments.filter(a => a.status === 'completed').length})\n          </span>\n        </div>\n      </div>\n\n      {/* Time Slots */}\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-4 space-y-1\">\n          {timeSlots.map(timeSlot => {\n            const appointment = appointmentsByTime[timeSlot];\n\n            if (appointment) {\n              // Appointment card\n              return (\n                <div\n                  key={timeSlot}\n                  className={`p-3 rounded-lg border-2 cursor-pointer transition-all duration-200 ${getStatusColor(appointment.status)}`}\n                  onClick={() => onPatientClick(appointment)}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"w-4 h-4 text-gray-500\" />\n                        <span className=\"font-medium text-sm\">{timeSlot}</span>\n                      </div>\n                      {getStatusIcon(appointment.status)}\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <button\n                        onClick={e => {\n                          e.stopPropagation();\n                          onPatientClick(appointment);\n                        }}\n                        className=\"p-1 rounded hover:bg-white/50 transition-colors\"\n                        title=\"Start Dictation\"\n                      >\n                        <FileText className=\"w-4 h-4\" />\n                      </button>\n                      {appointment.patientPhone && <Phone className=\"w-4 h-4 text-gray-400\" />}\n                    </div>\n                  </div>\n\n                  <div className=\"mt-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <User className=\"w-4 h-4 text-gray-500\" />\n                      <span className=\"font-semibold\">{appointment.patientName}</span>\n                      {appointment.visitType && (\n                        <span className=\"px-2 py-1 text-xs rounded-full bg-gray-100 text-gray-600\">\n                          {appointment.visitType.replace('-', ' ')}\n                        </span>\n                      )}\n                    </div>\n\n                    {appointment.visitReason && (\n                      <p className=\"text-sm text-gray-600 mt-1 ml-6\">{appointment.visitReason}</p>\n                    )}\n\n                    {appointment.patientPhone && (\n                      <p className=\"text-sm text-gray-500 mt-1 ml-6\">\n                        📞 {appointment.patientPhone}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              );\n            } else {\n              // Empty time slot\n              return (\n                <div\n                  key={timeSlot}\n                  className=\"p-3 border border-dashed border-gray-300 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors group\"\n                  onClick={() => onAddAppointment(timeSlot)}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2 text-gray-500\">\n                      <Clock className=\"w-4 h-4\" />\n                      <span className=\"text-sm\">{timeSlot}</span>\n                    </div>\n                    <Plus className=\"w-4 h-4 text-gray-400 group-hover:text-gray-600\" />\n                  </div>\n                  <span className=\"text-xs text-gray-400 ml-6 group-hover:text-gray-500\">\n                    Click to add appointment\n                  </span>\n                </div>\n              );\n            }\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { unifiedAuthService } from '../services/unifiedAuth.service';\nimport { type UnifiedAppointment } from '../services/unifiedAppointment.service';\nimport { useSchedule } from '../hooks/useSchedule';\nimport DoctorNavBar from '../components/layout/DoctorNavBar';\nimport ScheduleNavigation from '../components/doctor/ScheduleNavigation';\nimport DailyPatientList from '../components/doctor/DailyPatientList';\nimport { Plus, Calendar, FileText } from 'lucide-react';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\nexport default function DoctorDashboardUnified() {\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n  const currentUser = unifiedAuthService.getCurrentUser();\n  const providerId = currentUser?.id || currentUser?.email || 'doctor-default-001';\n\n  // State for dashboard view\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [currentView, setCurrentView] = useState<'day' | 'week' | 'month'>('day');\n  const [dashboardView, setDashboardView] = useState<'calendar' | 'templates' | 'notes'>(\n    'calendar'\n  );\n  const [showAddPatient, setShowAddPatient] = useState(false);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState('');\n  const [editingAppointment, setEditingAppointment] = useState<UnifiedAppointment | null>(null);\n\n  // New appointment form state\n  const [newAppointment, setNewAppointment] = useState({\n    patientName: '',\n    patientPhone: '',\n    patientEmail: '',\n    appointmentTime: '',\n    visitType: 'follow-up' as const,\n    visitReason: '',\n    notes: '',\n  });\n\n  // Use our new schedule hook for database integration\n  const {\n    appointments,\n    isLoading,\n    error,\n    refreshSchedule,\n    createAppointment,\n    updateAppointment,\n    deleteAppointment,\n    updateAppointmentStatus,\n  } = useSchedule({\n    providerId,\n    date: selectedDate,\n    autoRefresh: true,\n    refreshInterval: 30000,\n  });\n\n  logInfo('DoctorDashboardUnified', 'Info message', {});\n\n  const saveAppointment = async () => {\n    if (!newAppointment.appointmentTime || !newAppointment.patientName.trim()) {\n      alert('Please enter patient name and select a time');\n      return;\n    }\n\n    try {\n      if (editingAppointment) {\n        // Update existing appointment\n        await updateAppointment(editingAppointment.id, {\n          patientName: newAppointment.patientName,\n          patientPhone: newAppointment.patientPhone,\n          patientEmail: newAppointment.patientEmail,\n          time: newAppointment.appointmentTime,\n          visitType: newAppointment.visitType,\n          visitReason: newAppointment.visitReason,\n          notes: newAppointment.notes,\n        });\n      } else {\n        // Create new appointment\n        await createAppointment({\n          patientName: newAppointment.patientName,\n          patientPhone: newAppointment.patientPhone,\n          patientEmail: newAppointment.patientEmail,\n          time: newAppointment.appointmentTime,\n          visitType: newAppointment.visitType,\n          visitReason: newAppointment.visitReason,\n          notes: newAppointment.notes,\n        });\n      }\n\n      // Reset form\n      setNewAppointment({\n        patientName: '',\n        patientPhone: '',\n        patientEmail: '',\n        appointmentTime: '',\n        visitType: 'follow-up',\n        visitReason: '',\n        notes: '',\n      });\n      setShowAddPatient(false);\n      setEditingAppointment(null);\n    } catch (error) {\n      logError('DoctorDashboardUnified', 'Error message', {});\n      alert('Failed to save appointment. Please try again.');\n    }\n  };\n\n  const editAppointment = (appointment: UnifiedAppointment) => {\n    setEditingAppointment(appointment);\n    setNewAppointment({\n      patientName: appointment.patientName,\n      patientPhone: appointment.patientPhone || '',\n      patientEmail: appointment.patientEmail || '',\n      appointmentTime: appointment.time,\n      visitType: appointment.visitType,\n      visitReason: appointment.visitReason,\n      notes: appointment.notes || '',\n    });\n    setShowAddPatient(true);\n  };\n\n  const handlePatientClick = (appointment: UnifiedAppointment) => {\n    updateAppointmentStatus(appointment.id, 'in-progress');\n\n    // Store patient info for dictation\n    sessionStorage.setItem(\n      'current_patient',\n      JSON.stringify({\n        id: appointment.patientId,\n        name: appointment.patientName,\n        appointmentId: appointment.id,\n        date: selectedDate.toISOString().split('T')[0],\n        time: appointment.time,\n      })\n    );\n\n    navigate('/quick-note');\n  };\n\n  const handleAddAppointment = (timeSlot: string) => {\n    setSelectedTimeSlot(timeSlot);\n    setNewAppointment({\n      patientName: '',\n      patientPhone: '',\n      patientEmail: '',\n      appointmentTime: timeSlot,\n      visitType: 'follow-up',\n      visitReason: '',\n      notes: '',\n    });\n    setShowAddPatient(true);\n  };\n\n  const handleViewChange = (view: 'calendar' | 'templates' | 'notes') => {\n    setDashboardView(view);\n  };\n\n  // Handle different dashboard views\n  const renderDashboardContent = () => {\n    if (dashboardView === 'templates') {\n      return (\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Templates</h2>\n          <p className=\"text-gray-600\">Template management coming soon...</p>\n        </div>\n      );\n    }\n\n    if (dashboardView === 'notes') {\n      return (\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Notes</h2>\n          <p className=\"text-gray-600\">Note management coming soon...</p>\n        </div>\n      );\n    }\n\n    // Calendar view (default)\n    return (\n      <>\n        <ScheduleNavigation\n          selectedDate={selectedDate}\n          onDateChange={setSelectedDate}\n          onViewChange={setCurrentView}\n          currentView={currentView}\n        />\n\n        <DailyPatientList\n          providerId={providerId}\n          selectedDate={selectedDate}\n          appointments={appointments}\n          onPatientClick={handlePatientClick}\n          onAddAppointment={handleAddAppointment}\n        />\n      </>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-xl font-semibold text-gray-700 mb-2\">Loading schedule...</div>\n          <div className=\"text-gray-500\">Connecting to database</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Top Navigation */}\n      <DoctorNavBar\n        currentView={dashboardView}\n        onViewChange={handleViewChange}\n        practiceInfo={{ name: 'TSHLA Medical' }}\n        showNotifications={true}\n      />\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto p-6\">\n        {/* Error Display */}\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\">\n            <div className=\"text-red-800 font-medium\">Database Error</div>\n            <div className=\"text-red-600 text-sm mt-1\">{error}</div>\n            <button\n              onClick={refreshSchedule}\n              className=\"mt-2 px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700\"\n            >\n              Retry Connection\n            </button>\n          </div>\n        )}\n\n        {/* Dashboard Content */}\n        {renderDashboardContent()}\n      </div>\n\n      {/* Add Patient Modal */}\n      {showAddPatient && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n            <h3 className=\"text-lg font-semibold mb-4\">\n              {editingAppointment ? 'Edit Appointment' : 'Add New Patient'}\n            </h3>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Patient Name *</label>\n                <input\n                  type=\"text\"\n                  value={newAppointment.patientName}\n                  onChange={e =>\n                    setNewAppointment({ ...newAppointment, patientName: e.target.value })\n                  }\n                  className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"Enter patient name\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Phone</label>\n                <input\n                  type=\"tel\"\n                  value={newAppointment.patientPhone}\n                  onChange={e =>\n                    setNewAppointment({ ...newAppointment, patientPhone: e.target.value })\n                  }\n                  className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"Phone number\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Email</label>\n                <input\n                  type=\"email\"\n                  value={newAppointment.patientEmail}\n                  onChange={e =>\n                    setNewAppointment({ ...newAppointment, patientEmail: e.target.value })\n                  }\n                  className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"Email address\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Time *</label>\n                <input\n                  type=\"time\"\n                  value={newAppointment.appointmentTime}\n                  onChange={e =>\n                    setNewAppointment({ ...newAppointment, appointmentTime: e.target.value })\n                  }\n                  className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Visit Type</label>\n                <select\n                  value={newAppointment.visitType}\n                  onChange={e =>\n                    setNewAppointment({ ...newAppointment, visitType: e.target.value as any })\n                  }\n                  className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value=\"new-patient\">New Patient</option>\n                  <option value=\"follow-up\">Follow-up</option>\n                  <option value=\"urgent\">Urgent</option>\n                  <option value=\"procedure\">Procedure</option>\n                  <option value=\"lab-review\">Lab Review</option>\n                  <option value=\"telemedicine\">Telemedicine</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Visit Reason</label>\n                <input\n                  type=\"text\"\n                  value={newAppointment.visitReason}\n                  onChange={e =>\n                    setNewAppointment({ ...newAppointment, visitReason: e.target.value })\n                  }\n                  className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"Reason for visit\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Notes</label>\n                <textarea\n                  value={newAppointment.notes}\n                  onChange={e => setNewAppointment({ ...newAppointment, notes: e.target.value })}\n                  className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  rows={3}\n                  placeholder=\"Additional notes\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex gap-3 mt-6\">\n              <button\n                onClick={saveAppointment}\n                disabled={isLoading}\n                className=\"flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isLoading ? 'Saving...' : editingAppointment ? 'Update' : 'Save'}\n              </button>\n              <button\n                onClick={() => {\n                  setShowAddPatient(false);\n                  setEditingAppointment(null);\n                }}\n                className=\"px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50\"\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":["__iconNode","Bell","createLucideIcon","CalendarDays","ChevronLeft","Circle","File","Grid3x3","List","UnifiedAppointmentService","logDebug","logInfo","logError","stored","appointments","apt","logWarn","backup","backupData","migrationCount","simpleAppointments","unified","scheduleData","schedules","date","slot","key","slots","simple","name","error","appointmentData","appointment","filters","a","b","id","updates","updated","doctorId","data","time","timePart","period","hours","minutes","unifiedAppointmentService","useSchedule","providerId","autoRefresh","refreshInterval","setAppointments","useState","isLoading","setIsLoading","setError","dateString","refreshSchedule","useCallback","dbAppointments","scheduleDatabaseService","unifiedAppointments","dbAppt","localAppointments","err","createAppointment","newAppointment","dbPatient","updateAppointment","currentAppointment","updatedPatient","deleteAppointment","updateAppointmentStatus","status","useEffect","interval","DoctorNavBar","currentView","onViewChange","practiceInfo","showNotifications","navigate","useNavigate","user","logout","useAuth","showUserMenu","setShowUserMenu","showTemplateMenu","setShowTemplateMenu","currentUser","unifiedAuthService","handleQuickNote","handleTemplates","handleLogout","recentTemplates","getViewButtonClass","view","baseClass","jsxs","jsx","Calendar","ChevronDown","Plus","template","FileText","Search","User","Settings","LogOut","ScheduleNavigation","selectedDate","onDateChange","showViewToggle","showDatePicker","setShowDatePicker","goToPrevious","previousDate","goToNext","nextDate","goToToday","getQuickNavigationDates","today","yesterday","tomorrow","nextWeek","lastWeek","formatDisplayDate","isToday","isTomorrow","isYesterday","weekStart","weekEnd","ChevronRight","Home","e","Clock","Grid","generateTimeSlots","hour","getStatusIcon","CheckCircle","Play","AlertCircle","getStatusColor","DailyPatientList","onPatientClick","onAddAppointment","timeSlots","appointmentsByTime","acc","formatDateDisplay","_","index","timeSlot","Phone","DoctorDashboardUnified","setSelectedDate","setCurrentView","dashboardView","setDashboardView","showAddPatient","setShowAddPatient","selectedTimeSlot","setSelectedTimeSlot","editingAppointment","setEditingAppointment","setNewAppointment","saveAppointment","handlePatientClick","handleAddAppointment","handleViewChange","renderDashboardContent","Fragment"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}