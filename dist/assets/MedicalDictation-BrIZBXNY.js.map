{"version":3,"mappings":"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","names":["DeepgramError","message","isDeepgramError","error","DeepgramApiError","status","DeepgramUnknownError","originalError","DeepgramVersionError","DeepgramWebSocketError","options","R","ReflectApply","target","receiver","args","ReflectOwnKeys","ProcessEmitWarning","warning","NumberIsNaN","value","EventEmitter","eventsModule","once","defaultMaxListeners","checkListener","listener","arg","n","_getMaxListeners","that","type","i","doError","events","er","err","handler","len","listeners","arrayClone","_addListener","prepend","m","existing","w","onceWrapper","_onceWrap","state","wrapped","list","position","originalListener","spliceOne","keys","key","_listeners","unwrap","evlistener","unwrapListeners","emitter","listenerCount","arr","copy","index","ret","name","resolve","reject","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","flags","wrapListener","__global__","__globalThis__","F","globalThis","exports","g","support","isDataView","obj","viewClasses","isArrayBufferView","normalizeName","normalizeValue","iteratorFor","items","iterator","Headers","headers","header","oldValue","callback","thisArg","consumed","body","fileReaderReady","reader","readBlobAsArrayBuffer","blob","promise","readBlobAsText","match","encoding","readArrayBufferAsText","buf","view","chars","bufferClone","Body","rejected","isConsumed","decode","methods","normalizeMethod","method","upcased","Request","input","ctrl","reParamSearch","reQueryString","form","bytes","split","parseHeaders","rawHeaders","preProcessedHeaders","line","parts","Response","bodyInit","response","redirectStatuses","url","fetch","init","request","xhr","abortXhr","fixUrl","names","ctx","module","isMergeableObject","isNonNullObject","isSpecial","stringValue","isReactElement","canUseSymbol","REACT_ELEMENT_TYPE","emptyTarget","val","cloneUnlessOtherwiseSpecified","deepmerge","defaultArrayMerge","source","element","getMergeFunction","customMerge","getEnumerableOwnPropertySymbols","symbol","getKeys","propertyIsOnObject","object","property","propertyIsUnsafe","mergeObject","destination","sourceIsArray","targetIsArray","sourceAndTargetTypesMatch","array","prev","next","deepmerge_1","cjs","NODE_VERSION","BUN_VERSION","BROWSER_AGENT","isBrowser","isNode","isBun","applyDefaults","subordinate","merge","appendSearchParams","searchParams","param","resolveHeadersConstructor","CrossFetchHeaders","isUrlSource","providedSource","isTextSource","isFileSource","isReadStreamSource","isBufferSource","convertProtocolToWs","string","convertLegacyOptions","optionsArg","_a","_b","_c","_d","_e","_f","newOptions","version","getAgent","DEFAULT_HEADERS","DEFAULT_URL","DEFAULT_AGENT_URL","DEFAULT_GLOBAL_OPTIONS","DEFAULT_AGENT_OPTIONS","DEFAULT_OPTIONS","SOCKET_STATES","CONNECTION_STATE","noop","AbstractClient","define_process_env_default","defaults","endpoint","fields","transcriptionOptions","_","kind","msg","data","__awaiter","_arguments","P","generator","adopt","fulfilled","step","e","result","NATIVE_WEBSOCKET_AVAILABLE","AbstractLiveClient","websocketOptions","client","requestUrl","accessToken","apiKey","__vitePreload","WS","WSWebSocketDummy","code","reason","event","conn","errorInfo","wsConn","requestId","enhancedInfo","enhancedError","details","stateName","address","_protocols","resolveFetch","customFetch","_fetch","crossFetch","fetchWithAuth","HeadersConstructor","resolveResponse","browserPonyfill","AbstractRestClient","Res","bodyOrOptions","reqOptions","fetcher","AgentEvents","AgentLiveClient","buffer","prompt","speakConfig","content","AuthRestClient","LiveTranscriptionEvents","LiveTTSEvents","ListenLiveClient","config","ListenRestClient","ListenClient","ManageRestClient","projectId","keyId","memberId","email","balanceId","modelId","ModelsRestClient","ReadRestClient","SelfHostedRestClient","credentialsId","SpeakLiveClient","speakOptions","text","SpeakRestClient","SpeakClient","ttsOptions","DeepgramClient","ManageClient","ReadClient","createClient","keyOrOptions","resolvedOptions","DeepgramSDKService","logInfo","logError","mode","onTranscript","onError","specialty","liveConfig","track","transcript","isFinal","confidence","speaker","logDebug","isValid","audioFile","word","deepgramSDKService","DeepgramService","onTranscription","wsUrl","alternative","parseError","logWarn","audioData","formData","baseUrl","params","delay","deepgramService","DeepgramAdapter","transcriptionResult","deepgramAdapter","AzureSpeechConfigService","region","SpeechSDK.SpeechConfig","SpeechSDK.OutputFormat","SpeechSDK.ProfanityOption","audioConfig","recognizer","SpeechSDK.SpeechRecognizer","transcriber","SpeechSDK.ConversationTranscriber","phraseListGrammar","SpeechSDK.PhraseListGrammar","phrase","SpeechSDK.AudioConfig","newConfig","azureSpeechConfig","AzureSpeechStreamingFixed","s","SpeechSDK.ResultReason","SpeechSDK.CancellationReason","speakerId","stream","SpeechRecognition","recognition","currentSpeaker","lastSpeechTime","wordCount","finalTranscript","interimTranscript","now","AzureSpeechDictationService","speechConfig","SpeechSDK.PropertyId","nBest","enhanced","pattern","replacement","regex","term","AzureSpeechConversationService","participantId","role","AzureSpeechAmbientService","speakerLabel","lastSpeaker","silenceTimer","AzureSpeechSimpleService","errorMessage","SpeechServiceRouter","awsTranscribeStreamingFixed","awsTranscribeSimple","provider","callbacks","service","transcriptionMode","speechServiceRouter","AWSTranscribeService","TranscribeStreamingClient","micError","fallbackError","command","StartMedicalStreamTranscriptionCommand","MedicalContentIdentificationType","pcmData","item","float32Array","offset","API_BASE","DictatedNotesService","note","providerId","queryString","noteId","updates","sessionData","noteRequest","days","endDate","startDate","providerName","patientName","visitType","dateString","seconds","minutes","remainingSeconds","ScheduleService","date","appointment","appointmentId","today","startOfWeek","start","end","patientPhone","chiefComplaint","todayStr","timeStr","endTime","d","day","diff","timeString","hours","hour","ampm","startTime","NoteFormatter","formatNote","lines","formattedSections","currentSection","sectionKey","jsx","formatSection","headerText","jsxs","getSectionIcon","trimmedLine","condition","rest","description","highlightValues","highlightMedication","Fragment","part","lowerHeader","MedicalDictation","patientId","preloadPatientData","navigate","useNavigate","isRecording","setIsRecording","useState","setTranscript","interimText","setInterimText","processedNote","setProcessedNote","isProcessing","setIsProcessing","showProcessed","setShowProcessed","recordingError","setRecordingError","recordingMode","setRecordingMode","doctorSpecialty","setDoctorSpecialty","selectedTemplate","setSelectedTemplate","showTemplateSelector","setShowTemplateSelector","templates","setTemplates","recentTemplates","setRecentTemplates","favoriteTemplates","setFavoriteTemplates","previousVisitNote","setPreviousVisitNote","showPatientDetails","setShowPatientDetails","autoSaveStatus","setAutoSaveStatus","lastSaveTime","setLastSaveTime","showDataRestored","setShowDataRestored","isSavingToDatabase","setIsSavingToDatabase","lastSavedNoteId","setLastSavedNoteId","showSaveSuccess","setShowSaveSuccess","databaseAutoSaveStatus","setDatabaseAutoSaveStatus","lastDatabaseSaveTime","setLastDatabaseSaveTime","patientDetails","setPatientDetails","currentUser","unifiedAuthService","useEffect","patient","scheduleDatabaseService","p","getPatientData","loadExistingNotes","patientNotes","mostRecentNote","doctorId","doctorProfileService","allTemplates","recent","favorites","defaultTemplate","autoSaveInterval","autoSaveData","databaseAutoSaveInterval","savedData","savedTime","hoursSince","template","t","extendSession","expiresAt","recordingExtender","handleActivity","sessionCheck","expires","minutesLeft","userData","user","doctor","specialtyService","displaySpecialty","startRecording","corrected","medicalCorrections","updated","stopRecording","correctedText","processWithAI","transcriptToProcess","contentToProcess","patientContext","combinedContent","minimalPatientData","templateInstructions","settings","processedContent","azureAIService","clearAll","copyToClipboard","saveToDatabase","FileText","ChevronDown","Clock","Star","specialtyGroups","specialtyTemplates","printContent","printWindow"],"ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"sources":["../../node_modules/@deepgram/sdk/dist/module/lib/errors.js","../../node_modules/events/events.js","../../node_modules/cross-fetch/dist/browser-ponyfill.js","../../node_modules/deepmerge/dist/cjs.js","../../node_modules/@deepgram/sdk/dist/module/lib/runtime.js","../../node_modules/@deepgram/sdk/dist/module/lib/helpers.js","../../node_modules/@deepgram/sdk/dist/module/lib/version.js","../../node_modules/@deepgram/sdk/dist/module/lib/constants.js","../../node_modules/@deepgram/sdk/dist/module/packages/AbstractClient.js","../../node_modules/@deepgram/sdk/dist/module/packages/AbstractLiveClient.js","../../node_modules/@deepgram/sdk/dist/module/lib/fetch.js","../../node_modules/@deepgram/sdk/dist/module/packages/AbstractRestClient.js","../../node_modules/@deepgram/sdk/dist/module/lib/enums/AgentEvents.js","../../node_modules/@deepgram/sdk/dist/module/packages/AgentLiveClient.js","../../node_modules/@deepgram/sdk/dist/module/packages/AuthRestClient.js","../../node_modules/@deepgram/sdk/dist/module/lib/enums/LiveTranscriptionEvents.js","../../node_modules/@deepgram/sdk/dist/module/lib/enums/LiveTTSEvents.js","../../node_modules/@deepgram/sdk/dist/module/packages/ListenLiveClient.js","../../node_modules/@deepgram/sdk/dist/module/packages/ListenRestClient.js","../../node_modules/@deepgram/sdk/dist/module/packages/ListenClient.js","../../node_modules/@deepgram/sdk/dist/module/packages/ManageRestClient.js","../../node_modules/@deepgram/sdk/dist/module/packages/ModelsRestClient.js","../../node_modules/@deepgram/sdk/dist/module/packages/ReadRestClient.js","../../node_modules/@deepgram/sdk/dist/module/packages/SelfHostedRestClient.js","../../node_modules/@deepgram/sdk/dist/module/packages/SpeakLiveClient.js","../../node_modules/@deepgram/sdk/dist/module/packages/SpeakRestClient.js","../../node_modules/@deepgram/sdk/dist/module/packages/SpeakClient.js","../../node_modules/@deepgram/sdk/dist/module/DeepgramClient.js","../../node_modules/@deepgram/sdk/dist/module/index.js","../../src/services/deepgramSDK.service.ts","../../src/services/deepgram.service.ts","../../src/services/deepgramAdapter.service.ts","../../src/services/azureSpeechConfig.service.ts","../../src/services/azureSpeechStreamingFixed.service.ts","../../src/services/azureSpeechDictation.service.ts","../../src/services/azureSpeechConversation.service.ts","../../src/services/azureSpeechAmbient.service.ts","../../src/services/azureSpeechSimple.service.ts","../../src/services/speechServiceRouter.service.ts","../../src/services/awsTranscribe.service.ts","../../src/services/dictatedNotesService.ts","../../src/services/scheduleService.ts","../../src/components/NoteFormatter.tsx","../../src/components/MedicalDictation.tsx"],"sourcesContent":["export class DeepgramError extends Error {\n    constructor(message) {\n        super(message);\n        this.__dgError = true;\n        this.name = \"DeepgramError\";\n    }\n}\nexport function isDeepgramError(error) {\n    return typeof error === \"object\" && error !== null && \"__dgError\" in error;\n}\nexport class DeepgramApiError extends DeepgramError {\n    constructor(message, status) {\n        super(message);\n        this.name = \"DeepgramApiError\";\n        this.status = status;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            status: this.status,\n        };\n    }\n}\nexport class DeepgramUnknownError extends DeepgramError {\n    constructor(message, originalError) {\n        super(message);\n        this.name = \"DeepgramUnknownError\";\n        this.originalError = originalError;\n    }\n}\nexport class DeepgramVersionError extends DeepgramError {\n    constructor() {\n        super(`You are attempting to use an old format for a newer SDK version. Read more here: https://dpgr.am/js-v3`);\n        this.name = \"DeepgramVersionError\";\n    }\n}\n/**\n * Enhanced WebSocket error that captures additional debugging information\n * including status codes, request IDs, and response headers when available.\n */\nexport class DeepgramWebSocketError extends DeepgramError {\n    constructor(message, options = {}) {\n        super(message);\n        this.name = \"DeepgramWebSocketError\";\n        this.originalEvent = options.originalEvent;\n        this.statusCode = options.statusCode;\n        this.requestId = options.requestId;\n        this.responseHeaders = options.responseHeaders;\n        this.url = options.url;\n        this.readyState = options.readyState;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            statusCode: this.statusCode,\n            requestId: this.requestId,\n            responseHeaders: this.responseHeaders,\n            url: this.url,\n            readyState: this.readyState,\n            originalEvent: this.originalEvent\n                ? {\n                    type: this.originalEvent.type,\n                    timeStamp: this.originalEvent.timeStamp,\n                }\n                : undefined,\n        };\n    }\n}\n//# sourceMappingURL=errors.js.map","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","// Save global object in a variable\nvar __global__ =\n(typeof globalThis !== 'undefined' && globalThis) ||\n(typeof self !== 'undefined' && self) ||\n(typeof global !== 'undefined' && global);\n// Create an object that extends from __global__ without the fetch function\nvar __globalThis__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = __global__.DOMException\n}\nF.prototype = __global__; // Needed for feature detection on whatwg-fetch's code\nreturn new F();\n})();\n// Wraps whatwg-fetch with a function scope to hijack the global object\n// \"globalThis\" that's going to be patched\n(function(globalThis) {\n\nvar irrelevant = (function (exports) {\n\n  /* eslint-disable no-prototype-builtins */\n  var g =\n    (typeof globalThis !== 'undefined' && globalThis) ||\n    (typeof self !== 'undefined' && self) ||\n    // eslint-disable-next-line no-undef\n    (typeof global !== 'undefined' && global) ||\n    {};\n\n  var support = {\n    searchParams: 'URLSearchParams' in g,\n    iterable: 'Symbol' in g && 'iterator' in Symbol,\n    blob:\n      'FileReader' in g &&\n      'Blob' in g &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in g,\n    arrayBuffer: 'ArrayBuffer' in g\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n      throw new TypeError('Invalid character in header field name: \"' + name + '\"')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        if (header.length != 2) {\n          throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length)\n        }\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body._noBody) return\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);\n    var encoding = match ? match[1] : 'utf-8';\n    reader.readAsText(blob, encoding);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      /*\n        fetch-mock wraps the Response object in an ES6 Proxy to\n        provide useful test harness features such as flush. However, on\n        ES5 browsers without fetch or Proxy support pollyfills must be used;\n        the proxy-pollyfill is unable to proxy an attribute unless it exists\n        on the object before the Proxy is created. This change ensures\n        Response.bodyUsed exists on the instance, while maintaining the\n        semantic of setting Request.bodyUsed in the constructor before\n        _initBody is called.\n      */\n      // eslint-disable-next-line no-self-assign\n      this.bodyUsed = this.bodyUsed;\n      this._bodyInit = body;\n      if (!body) {\n        this._noBody = true;\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        var isConsumed = consumed(this);\n        if (isConsumed) {\n          return isConsumed\n        } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n          return Promise.resolve(\n            this._bodyArrayBuffer.buffer.slice(\n              this._bodyArrayBuffer.byteOffset,\n              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n            )\n          )\n        } else {\n          return Promise.resolve(this._bodyArrayBuffer)\n        }\n      } else if (support.blob) {\n        return this.blob().then(readBlobAsArrayBuffer)\n      } else {\n        throw new Error('could not read as ArrayBuffer')\n      }\n    };\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n    }\n\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal || (function () {\n      if ('AbortController' in g) {\n        var ctrl = new AbortController();\n        return ctrl.signal;\n      }\n    }());\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n\n    if (this.method === 'GET' || this.method === 'HEAD') {\n      if (options.cache === 'no-store' || options.cache === 'no-cache') {\n        // Search for a '_' parameter in the query string\n        var reParamSearch = /([?&])_=[^&]*/;\n        if (reParamSearch.test(this.url)) {\n          // If it already exists then set the value with the current time\n          this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());\n        } else {\n          // Otherwise add a new '_' parameter to the end with the current time\n          var reQueryString = /\\?/;\n          this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();\n        }\n      }\n    }\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n    // https://github.com/github/fetch/issues/748\n    // https://github.com/zloirock/core-js/issues/751\n    preProcessedHeaders\n      .split('\\r')\n      .map(function(header) {\n        return header.indexOf('\\n') === 0 ? header.substr(1, header.length) : header\n      })\n      .forEach(function(line) {\n        var parts = line.split(':');\n        var key = parts.shift().trim();\n        if (key) {\n          var value = parts.join(':').trim();\n          try {\n            headers.append(key, value);\n          } catch (error) {\n            console.warn('Response ' + error.message);\n          }\n        }\n      });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!(this instanceof Response)) {\n      throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n    }\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    if (this.status < 200 || this.status > 599) {\n      throw new RangeError(\"Failed to construct 'Response': The status provided (0) is outside the range [200, 599].\")\n    }\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = options.statusText === undefined ? '' : '' + options.statusText;\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 200, statusText: ''});\n    response.ok = false;\n    response.status = 0;\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = g.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        // This check if specifically for when a user fetches a file locally from the file system\n        // Only if the status is out of a normal range\n        if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {\n          options.status = 200;\n        } else {\n          options.status = xhr.status;\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        setTimeout(function() {\n          resolve(new Response(body, options));\n        }, 0);\n      };\n\n      xhr.onerror = function() {\n        setTimeout(function() {\n          reject(new TypeError('Network request failed'));\n        }, 0);\n      };\n\n      xhr.ontimeout = function() {\n        setTimeout(function() {\n          reject(new TypeError('Network request timed out'));\n        }, 0);\n      };\n\n      xhr.onabort = function() {\n        setTimeout(function() {\n          reject(new exports.DOMException('Aborted', 'AbortError'));\n        }, 0);\n      };\n\n      function fixUrl(url) {\n        try {\n          return url === '' && g.location.href ? g.location.href : url\n        } catch (e) {\n          return url\n        }\n      }\n\n      xhr.open(request.method, fixUrl(request.url), true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr) {\n        if (support.blob) {\n          xhr.responseType = 'blob';\n        } else if (\n          support.arrayBuffer\n        ) {\n          xhr.responseType = 'arraybuffer';\n        }\n      }\n\n      if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || (g.Headers && init.headers instanceof g.Headers))) {\n        var names = [];\n        Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n          names.push(normalizeName(name));\n          xhr.setRequestHeader(name, normalizeValue(init.headers[name]));\n        });\n        request.headers.forEach(function(value, name) {\n          if (names.indexOf(name) === -1) {\n            xhr.setRequestHeader(name, value);\n          }\n        });\n      } else {\n        request.headers.forEach(function(value, name) {\n          xhr.setRequestHeader(name, value);\n        });\n      }\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!g.fetch) {\n    g.fetch = fetch;\n    g.Headers = Headers;\n    g.Request = Request;\n    g.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__globalThis__);\n// This is a ponyfill, so...\n__globalThis__.fetch.ponyfill = true;\ndelete __globalThis__.fetch.polyfill;\n// Choose between native implementation (__global__) or custom implementation (__globalThis__)\nvar ctx = __global__.fetch ? __global__ : __globalThis__;\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn Object.propertyIsEnumerable.call(target, symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n","export const NODE_VERSION = typeof process !== \"undefined\" && process.versions && process.versions.node\n    ? process.versions.node\n    : \"unknown\";\nexport const BUN_VERSION = typeof process !== \"undefined\" && process.versions && process.versions.bun\n    ? process.versions.bun\n    : \"unknown\";\nexport const BROWSER_AGENT = typeof window !== \"undefined\" && window.navigator && window.navigator.userAgent\n    ? window.navigator.userAgent\n    : \"unknown\";\nexport const isBrowser = () => BROWSER_AGENT !== \"unknown\";\nexport const isNode = () => NODE_VERSION !== \"unknown\";\nexport const isBun = () => BUN_VERSION !== \"unknown\";\n//# sourceMappingURL=runtime.js.map","import { Headers as CrossFetchHeaders } from \"cross-fetch\";\nimport merge from \"deepmerge\";\nimport { isBrowser } from \"./runtime\";\nexport function stripTrailingSlash(url) {\n    return url.replace(/\\/$/, \"\");\n}\nexport function applyDefaults(options = {}, subordinate = {}) {\n    return merge(subordinate, options);\n}\nexport function appendSearchParams(searchParams, options) {\n    Object.keys(options).forEach((i) => {\n        if (Array.isArray(options[i])) {\n            const arrayParams = options[i];\n            arrayParams.forEach((param) => {\n                searchParams.append(i, String(param));\n            });\n        }\n        else {\n            searchParams.append(i, String(options[i]));\n        }\n    });\n}\nexport const resolveHeadersConstructor = () => {\n    if (typeof Headers === \"undefined\") {\n        return CrossFetchHeaders;\n    }\n    return Headers;\n};\nexport const isUrlSource = (providedSource) => {\n    if (providedSource && providedSource.url)\n        return true;\n    return false;\n};\nexport const isTextSource = (providedSource) => {\n    if (providedSource && providedSource.text)\n        return true;\n    return false;\n};\nexport const isFileSource = (providedSource) => {\n    if (isReadStreamSource(providedSource) || isBufferSource(providedSource))\n        return true;\n    return false;\n};\nconst isBufferSource = (providedSource) => {\n    return providedSource != null && Buffer.isBuffer(providedSource);\n};\nconst isReadStreamSource = (providedSource) => {\n    if (providedSource == null)\n        return false;\n    // In browser environments, there's no Readable stream from Node.js\n    if (isBrowser())\n        return false;\n    // Check for stream-like properties without importing Readable\n    return (typeof providedSource === \"object\" &&\n        typeof providedSource.pipe === \"function\" &&\n        typeof providedSource.read === \"function\" &&\n        typeof providedSource._readableState === \"object\");\n};\nexport class CallbackUrl extends URL {\n    constructor() {\n        super(...arguments);\n        this.callbackUrl = true;\n    }\n}\nexport const convertProtocolToWs = (url) => {\n    const convert = (string) => string.toLowerCase().replace(/^http/, \"ws\");\n    return convert(url);\n};\nexport const buildRequestUrl = (endpoint, baseUrl, transcriptionOptions) => {\n    const url = new URL(endpoint, baseUrl);\n    appendSearchParams(url.searchParams, transcriptionOptions);\n    return url;\n};\nexport function isLiveSchema(arg) {\n    return arg != null && typeof arg.interim_results !== \"undefined\";\n}\nexport function isDeepgramClientOptions(arg) {\n    return arg != null && typeof arg.global !== \"undefined\";\n}\nexport const convertLegacyOptions = (optionsArg) => {\n    var _a, _b, _c, _d, _e, _f;\n    const newOptions = {};\n    if (optionsArg._experimentalCustomFetch) {\n        newOptions.global = {\n            fetch: {\n                client: optionsArg._experimentalCustomFetch,\n            },\n        };\n    }\n    optionsArg = merge(optionsArg, newOptions);\n    if ((_a = optionsArg.restProxy) === null || _a === void 0 ? void 0 : _a.url) {\n        newOptions.global = {\n            fetch: {\n                options: {\n                    proxy: {\n                        url: (_b = optionsArg.restProxy) === null || _b === void 0 ? void 0 : _b.url,\n                    },\n                },\n            },\n        };\n    }\n    optionsArg = merge(optionsArg, newOptions);\n    if ((_c = optionsArg.global) === null || _c === void 0 ? void 0 : _c.url) {\n        newOptions.global = {\n            fetch: {\n                options: {\n                    url: optionsArg.global.url,\n                },\n            },\n            websocket: {\n                options: {\n                    url: optionsArg.global.url,\n                },\n            },\n        };\n    }\n    optionsArg = merge(optionsArg, newOptions);\n    if ((_d = optionsArg.global) === null || _d === void 0 ? void 0 : _d.headers) {\n        newOptions.global = {\n            fetch: {\n                options: {\n                    headers: (_e = optionsArg.global) === null || _e === void 0 ? void 0 : _e.headers,\n                },\n            },\n            websocket: {\n                options: {\n                    _nodeOnlyHeaders: (_f = optionsArg.global) === null || _f === void 0 ? void 0 : _f.headers,\n                },\n            },\n        };\n    }\n    optionsArg = merge(optionsArg, newOptions);\n    return optionsArg;\n};\n//# sourceMappingURL=helpers.js.map","export const version = \"4.11.2\";\n//# sourceMappingURL=version.js.map","import { convertProtocolToWs } from \"./helpers\";\nimport { isBrowser, isBun, isNode, NODE_VERSION, BUN_VERSION, BROWSER_AGENT } from \"./runtime\";\nimport { version } from \"./version\";\nconst getAgent = () => {\n    if (isNode()) {\n        return `node/${NODE_VERSION}`;\n    }\n    else if (isBun()) {\n        return `bun/${BUN_VERSION}`;\n    }\n    else if (isBrowser()) {\n        return `javascript ${BROWSER_AGENT}`;\n    }\n    else {\n        return `unknown`;\n    }\n};\nexport const DEFAULT_HEADERS = {\n    \"Content-Type\": `application/json`,\n    \"X-Client-Info\": `@deepgram/sdk; ${isBrowser() ? \"browser\" : \"server\"}; v${version}`,\n    \"User-Agent\": `@deepgram/sdk/${version} ${getAgent()}`,\n};\nexport const DEFAULT_URL = \"https://api.deepgram.com\";\nexport const DEFAULT_AGENT_URL = \"wss://agent.deepgram.com\";\nexport const DEFAULT_GLOBAL_OPTIONS = {\n    fetch: { options: { url: DEFAULT_URL, headers: DEFAULT_HEADERS } },\n    websocket: {\n        options: { url: convertProtocolToWs(DEFAULT_URL), _nodeOnlyHeaders: DEFAULT_HEADERS },\n    },\n};\nexport const DEFAULT_AGENT_OPTIONS = {\n    fetch: { options: { url: DEFAULT_URL, headers: DEFAULT_HEADERS } },\n    websocket: {\n        options: { url: DEFAULT_AGENT_URL, _nodeOnlyHeaders: DEFAULT_HEADERS },\n    },\n};\nexport const DEFAULT_OPTIONS = {\n    global: DEFAULT_GLOBAL_OPTIONS,\n    agent: DEFAULT_AGENT_OPTIONS,\n};\nexport var SOCKET_STATES;\n(function (SOCKET_STATES) {\n    SOCKET_STATES[SOCKET_STATES[\"connecting\"] = 0] = \"connecting\";\n    SOCKET_STATES[SOCKET_STATES[\"open\"] = 1] = \"open\";\n    SOCKET_STATES[SOCKET_STATES[\"closing\"] = 2] = \"closing\";\n    SOCKET_STATES[SOCKET_STATES[\"closed\"] = 3] = \"closed\";\n})(SOCKET_STATES || (SOCKET_STATES = {}));\nexport var CONNECTION_STATE;\n(function (CONNECTION_STATE) {\n    CONNECTION_STATE[\"Connecting\"] = \"connecting\";\n    CONNECTION_STATE[\"Open\"] = \"open\";\n    CONNECTION_STATE[\"Closing\"] = \"closing\";\n    CONNECTION_STATE[\"Closed\"] = \"closed\";\n})(CONNECTION_STATE || (CONNECTION_STATE = {}));\n//# sourceMappingURL=constants.js.map","import { EventEmitter } from \"events\";\nimport { DEFAULT_OPTIONS, DEFAULT_URL } from \"../lib/constants\";\nimport { DeepgramError } from \"../lib/errors\";\nimport { appendSearchParams, applyDefaults, convertLegacyOptions } from \"../lib/helpers\";\nexport const noop = () => { };\n/**\n * Represents an abstract Deepgram client that provides a base implementation for interacting with the Deepgram API.\n *\n * The `AbstractClient` class is responsible for:\n * - Initializing the Deepgram API key\n * - Applying default options for the client and namespace\n * - Providing a namespace for organizing API requests\n *\n * Subclasses of `AbstractClient` should implement the specific functionality for interacting with the Deepgram API.\n */\nexport class AbstractClient extends EventEmitter {\n    /**\n     * Constructs a new instance of the DeepgramClient class with the provided options.\n     *\n     * @param options - The options to configure the DeepgramClient instance.\n     * @param options.key - The Deepgram API key to use for authentication. If not provided, the `DEEPGRAM_API_KEY` environment variable will be used.\n     * @param options.accessToken - The Deepgram access token to use for authentication. If not provided, the `DEEPGRAM_ACCESS_TOKEN` environment variable will be used.\n     * @param options.global - Global options that apply to all requests made by the DeepgramClient instance.\n     * @param options.global.fetch - Options to configure the fetch requests made by the DeepgramClient instance.\n     * @param options.global.fetch.options - Additional options to pass to the fetch function, such as `url` and `headers`.\n     * @param options.namespace - Options specific to a particular namespace within the DeepgramClient instance.\n     */\n    constructor(options) {\n        super();\n        this.factory = undefined;\n        this.key = undefined;\n        this.accessToken = undefined;\n        this.namespace = \"global\";\n        this.version = \"v1\";\n        this.baseUrl = DEFAULT_URL;\n        this.logger = noop;\n        // run the factory for the access token if it's a function\n        if (typeof options.accessToken === \"function\") {\n            this.factory = options.accessToken;\n            this.accessToken = this.factory();\n        }\n        else {\n            this.accessToken = options.accessToken;\n        }\n        // run the factory for the key if it's a function\n        if (typeof options.key === \"function\") {\n            this.factory = options.key;\n            this.key = this.factory();\n        }\n        else {\n            this.key = options.key;\n        }\n        // implement priority-based credential resolution for environment variables\n        if (!this.key && !this.accessToken) {\n            // check for DEEPGRAM_ACCESS_TOKEN first (higher priority)\n            this.accessToken = process.env.DEEPGRAM_ACCESS_TOKEN;\n            // if still no access token, fall back to DEEPGRAM_API_KEY (lower priority)\n            if (!this.accessToken) {\n                this.key = process.env.DEEPGRAM_API_KEY;\n            }\n        }\n        // if we STILL have neither, throw an error\n        if (!this.key && !this.accessToken) {\n            throw new DeepgramError(\"A deepgram API key or access token is required.\");\n        }\n        options = convertLegacyOptions(options);\n        /**\n         * Apply default options.\n         */\n        this.options = applyDefaults(options, DEFAULT_OPTIONS);\n    }\n    /**\n     * Sets the version for the current instance of the Deepgram API and returns the instance.\n     *\n     * @param version - The version to set for the Deepgram API instance. Defaults to \"v1\" if not provided.\n     * @returns The current instance of the AbstractClient with the updated version.\n     */\n    v(version = \"v1\") {\n        this.version = version;\n        return this;\n    }\n    /**\n     * Gets the namespace options for the current instance of the AbstractClient.\n     * The namespace options include the default options merged with the global options,\n     * and the API key for the current instance.\n     *\n     * @returns The namespace options for the current instance.\n     */\n    get namespaceOptions() {\n        const defaults = applyDefaults(this.options[this.namespace], this.options.global);\n        return Object.assign(Object.assign({}, defaults), { key: this.key });\n    }\n    /**\n     * Generates a URL for an API endpoint with optional query parameters and transcription options.\n     *\n     * @param endpoint - The API endpoint URL, which may contain placeholders for fields.\n     * @param fields - An optional object containing key-value pairs to replace placeholders in the endpoint URL.\n     * @param transcriptionOptions - Optional transcription options to include as query parameters in the URL.\n     * @returns A URL object representing the constructed API request URL.\n     */\n    getRequestUrl(endpoint, fields = { version: this.version }, transcriptionOptions) {\n        /**\n         * If we pass in fields without a version, set a version.\n         */\n        fields.version = this.version;\n        /**\n         * Version and template the endpoint for input argument..\n         */\n        endpoint = endpoint.replace(/:(\\w+)/g, function (_, key) {\n            return fields[key];\n        });\n        /**\n         * Create a URL object.\n         */\n        const url = new URL(endpoint, this.baseUrl);\n        /**\n         * If there are transcription options, append them to the request as URL querystring parameters\n         */\n        if (transcriptionOptions) {\n            appendSearchParams(url.searchParams, transcriptionOptions);\n        }\n        return url;\n    }\n    /**\n     * Logs the message.\n     *\n     * For customized logging, `this.logger` can be overridden.\n     */\n    log(kind, msg, data) {\n        this.logger(kind, msg, data);\n    }\n}\n//# sourceMappingURL=AbstractClient.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { AbstractClient, noop } from \"./AbstractClient\";\nimport { CONNECTION_STATE, SOCKET_STATES } from \"../lib/constants\";\nimport { isBun } from \"../lib/runtime\";\nimport { DeepgramWebSocketError } from \"../lib/errors\";\n/**\n * Represents an error that occurred in a WebSocket-like connection.\n * @property {any} error - The underlying error object.\n * @property {string} message - A human-readable error message.\n * @property {string} type - The type of the error.\n */\n// interface WebSocketLikeError {\n//   error: any;\n//   message: string;\n//   type: string;\n// }\n/**\n * Indicates whether a native WebSocket implementation is available in the current environment.\n */\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== \"undefined\";\n/**\n * Represents an abstract live client that extends the AbstractClient class.\n * The AbstractLiveClient class provides functionality for connecting, reconnecting, and disconnecting a WebSocket connection, as well as sending data over the connection.\n * Subclasses of this class are responsible for setting up the connection event handlers.\n *\n * @abstract\n */\nexport class AbstractLiveClient extends AbstractClient {\n    constructor(options) {\n        super(options);\n        this.conn = null;\n        this.sendBuffer = [];\n        /**\n         * Reconnects the socket using new or existing transcription options.\n         *\n         * @param options - The transcription options to use when reconnecting the socket.\n         */\n        this.reconnect = noop;\n        const { key, websocket: { options: websocketOptions, client }, } = this.namespaceOptions;\n        if (this.proxy) {\n            this.baseUrl = websocketOptions.proxy.url;\n        }\n        else {\n            this.baseUrl = websocketOptions.url;\n        }\n        if (client) {\n            this.transport = client;\n        }\n        else {\n            this.transport = null;\n        }\n        if (websocketOptions._nodeOnlyHeaders) {\n            this.headers = websocketOptions._nodeOnlyHeaders;\n        }\n        else {\n            this.headers = {};\n        }\n        if (!(\"Authorization\" in this.headers)) {\n            if (this.accessToken) {\n                this.headers[\"Authorization\"] = `Bearer ${this.accessToken}`; // Use token if available\n            }\n            else {\n                this.headers[\"Authorization\"] = `Token ${key}`; // Add default token\n            }\n        }\n    }\n    /**\n     * Connects the socket, unless already connected.\n     *\n     * @protected Can only be called from within the class.\n     */\n    connect(transcriptionOptions, endpoint) {\n        if (this.conn) {\n            return;\n        }\n        this.reconnect = (options = transcriptionOptions) => {\n            this.connect(options, endpoint);\n        };\n        const requestUrl = this.getRequestUrl(endpoint, {}, transcriptionOptions);\n        const accessToken = this.accessToken;\n        const apiKey = this.key;\n        if (!accessToken && !apiKey) {\n            throw new Error(\"No key or access token provided for WebSocket connection.\");\n        }\n        /**\n         * Custom websocket transport\n         */\n        if (this.transport) {\n            this.conn = new this.transport(requestUrl, undefined, {\n                headers: this.headers,\n            });\n            this.setupConnection();\n            return;\n        }\n        /**\n         * @summary Bun websocket transport has a bug where it's native WebSocket implementation messes up the headers\n         * @summary This is a workaround to use the WS package for the websocket connection instead of the native Bun WebSocket\n         * @summary you can track the issue here\n         * @link https://github.com/oven-sh/bun/issues/4529\n         */\n        if (isBun()) {\n            import(\"ws\").then(({ default: WS }) => {\n                this.conn = new WS(requestUrl, {\n                    headers: this.headers,\n                });\n                console.log(`Using WS package`);\n                this.setupConnection();\n            });\n            return;\n        }\n        /**\n         * Native websocket transport (browser)\n         */\n        if (NATIVE_WEBSOCKET_AVAILABLE) {\n            this.conn = new WebSocket(requestUrl, accessToken ? [\"bearer\", accessToken] : [\"token\", apiKey]);\n            this.setupConnection();\n            return;\n        }\n        /**\n         * Dummy websocket\n         */\n        this.conn = new WSWebSocketDummy(requestUrl, undefined, {\n            close: () => {\n                this.conn = null;\n            },\n        });\n        /**\n         * WS package for node environment\n         */\n        import(\"ws\").then(({ default: WS }) => {\n            this.conn = new WS(requestUrl, undefined, {\n                headers: this.headers,\n            });\n            this.setupConnection();\n        });\n    }\n    /**\n     * Disconnects the socket from the client.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n    disconnect(code, reason) {\n        if (this.conn) {\n            this.conn.onclose = function () { }; // noop\n            if (code) {\n                this.conn.close(code, reason !== null && reason !== void 0 ? reason : \"\");\n            }\n            else {\n                this.conn.close();\n            }\n            this.conn = null;\n        }\n    }\n    /**\n     * Returns the current connection state of the WebSocket connection.\n     *\n     * @returns The current connection state of the WebSocket connection.\n     */\n    connectionState() {\n        switch (this.conn && this.conn.readyState) {\n            case SOCKET_STATES.connecting:\n                return CONNECTION_STATE.Connecting;\n            case SOCKET_STATES.open:\n                return CONNECTION_STATE.Open;\n            case SOCKET_STATES.closing:\n                return CONNECTION_STATE.Closing;\n            default:\n                return CONNECTION_STATE.Closed;\n        }\n    }\n    /**\n     * Returns the current ready state of the WebSocket connection.\n     *\n     * @returns The current ready state of the WebSocket connection.\n     */\n    getReadyState() {\n        var _a, _b;\n        return (_b = (_a = this.conn) === null || _a === void 0 ? void 0 : _a.readyState) !== null && _b !== void 0 ? _b : SOCKET_STATES.closed;\n    }\n    /**\n     * Returns `true` is the connection is open.\n     */\n    isConnected() {\n        return this.connectionState() === CONNECTION_STATE.Open;\n    }\n    /**\n     * Sends data to the Deepgram API via websocket connection\n     * @param data Audio data to send to Deepgram\n     *\n     * Conforms to RFC #146 for Node.js - does not send an empty byte.\n     * @see https://github.com/deepgram/deepgram-python-sdk/issues/146\n     */\n    send(data) {\n        const callback = () => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            if (data instanceof Blob) {\n                if (data.size === 0) {\n                    this.log(\"warn\", \"skipping `send` for zero-byte blob\", data);\n                    return;\n                }\n                data = yield data.arrayBuffer();\n            }\n            if (typeof data !== \"string\") {\n                if (!(data === null || data === void 0 ? void 0 : data.byteLength)) {\n                    this.log(\"warn\", \"skipping `send` for zero-byte payload\", data);\n                    return;\n                }\n            }\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(data);\n        });\n        if (this.isConnected()) {\n            callback();\n        }\n        else {\n            this.sendBuffer.push(callback);\n        }\n    }\n    /**\n     * Determines whether the current instance should proxy requests.\n     * @returns {boolean} true if the current instance should proxy requests; otherwise, false\n     */\n    get proxy() {\n        var _a;\n        return this.key === \"proxy\" && !!((_a = this.namespaceOptions.websocket.options.proxy) === null || _a === void 0 ? void 0 : _a.url);\n    }\n    /**\n     * Extracts enhanced error information from a WebSocket error event.\n     * This method attempts to capture additional debugging information such as\n     * status codes, request IDs, and response headers when available.\n     *\n     * @example\n     * ```typescript\n     * // Enhanced error information is now available in error events:\n     * connection.on(LiveTranscriptionEvents.Error, (err) => {\n     *   console.error(\"WebSocket Error:\", err.message);\n     *\n     *   // Access HTTP status code (e.g., 502, 403, etc.)\n     *   if (err.statusCode) {\n     *     console.error(`HTTP Status Code: ${err.statusCode}`);\n     *   }\n     *\n     *   // Access Deepgram request ID for support tickets\n     *   if (err.requestId) {\n     *     console.error(`Deepgram Request ID: ${err.requestId}`);\n     *   }\n     *\n     *   // Access WebSocket URL and connection state\n     *   if (err.url) {\n     *     console.error(`WebSocket URL: ${err.url}`);\n     *   }\n     *\n     *   if (err.readyState !== undefined) {\n     *     const stateNames = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\n     *     console.error(`Connection State: ${stateNames[err.readyState]}`);\n     *   }\n     *\n     *   // Access response headers for additional debugging\n     *   if (err.responseHeaders) {\n     *     console.error(\"Response Headers:\", err.responseHeaders);\n     *   }\n     *\n     *   // Access the enhanced error object for detailed debugging\n     *   if (err.error?.name === 'DeepgramWebSocketError') {\n     *     console.error(\"Enhanced Error Details:\", err.error.toJSON());\n     *   }\n     * });\n     * ```\n     *\n     * @param event - The error event from the WebSocket\n     * @param conn - The WebSocket connection object\n     * @returns Enhanced error information object\n     */\n    extractErrorInformation(event, conn) {\n        var _a;\n        const errorInfo = {};\n        // Extract basic connection information\n        if (conn) {\n            errorInfo.readyState = conn.readyState;\n            errorInfo.url = typeof conn.url === \"string\" ? conn.url : (_a = conn.url) === null || _a === void 0 ? void 0 : _a.toString();\n        }\n        // Try to extract additional information from the WebSocket connection\n        // This works with the 'ws' package which exposes more detailed error information\n        if (conn && typeof conn === \"object\") {\n            const wsConn = conn;\n            // Extract status code if available (from 'ws' package)\n            if (wsConn._req && wsConn._req.res) {\n                errorInfo.statusCode = wsConn._req.res.statusCode;\n                // Extract response headers if available\n                if (wsConn._req.res.headers) {\n                    errorInfo.responseHeaders = Object.assign({}, wsConn._req.res.headers);\n                    // Extract request ID from Deepgram response headers\n                    const requestId = wsConn._req.res.headers[\"dg-request-id\"] || wsConn._req.res.headers[\"x-dg-request-id\"];\n                    if (requestId) {\n                        errorInfo.requestId = requestId;\n                    }\n                }\n            }\n            // For native WebSocket, try to extract information from the event\n            if (event && \"target\" in event && event.target) {\n                const target = event.target;\n                if (target.url) {\n                    errorInfo.url = target.url;\n                }\n                if (target.readyState !== undefined) {\n                    errorInfo.readyState = target.readyState;\n                }\n            }\n        }\n        return errorInfo;\n    }\n    /**\n     * Creates an enhanced error object with additional debugging information.\n     * This method provides backward compatibility by including both the original\n     * error event and enhanced error information.\n     *\n     * @param event - The original error event\n     * @param enhancedInfo - Additional error information extracted from the connection\n     * @returns An object containing both original and enhanced error information\n     */\n    createEnhancedError(event, enhancedInfo) {\n        // Create the enhanced error for detailed debugging\n        const enhancedError = new DeepgramWebSocketError(event.message || \"WebSocket connection error\", Object.assign({ originalEvent: event }, enhancedInfo));\n        // Return an object that maintains backward compatibility\n        // while providing enhanced information\n        return Object.assign(Object.assign({}, event), { \n            // Enhanced error information\n            error: enhancedError, \n            // Additional fields for easier access\n            statusCode: enhancedInfo.statusCode, requestId: enhancedInfo.requestId, responseHeaders: enhancedInfo.responseHeaders, url: enhancedInfo.url, readyState: enhancedInfo.readyState, \n            // Enhanced message with more context\n            message: this.buildEnhancedErrorMessage(event, enhancedInfo) });\n    }\n    /**\n     * Builds an enhanced error message with additional context information.\n     *\n     * @param event - The original error event\n     * @param enhancedInfo - Additional error information\n     * @returns A more descriptive error message\n     */\n    buildEnhancedErrorMessage(event, enhancedInfo) {\n        let message = event.message || \"WebSocket connection error\";\n        const details = [];\n        if (enhancedInfo.statusCode) {\n            details.push(`Status: ${enhancedInfo.statusCode}`);\n        }\n        if (enhancedInfo.requestId) {\n            details.push(`Request ID: ${enhancedInfo.requestId}`);\n        }\n        if (enhancedInfo.readyState !== undefined) {\n            const stateNames = [\"CONNECTING\", \"OPEN\", \"CLOSING\", \"CLOSED\"];\n            const stateName = stateNames[enhancedInfo.readyState] || `Unknown(${enhancedInfo.readyState})`;\n            details.push(`Ready State: ${stateName}`);\n        }\n        if (enhancedInfo.url) {\n            details.push(`URL: ${enhancedInfo.url}`);\n        }\n        if (details.length > 0) {\n            message += ` (${details.join(\", \")})`;\n        }\n        return message;\n    }\n    /**\n     * Sets up the standard connection event handlers (open, close, error) for WebSocket connections.\n     * This method abstracts the common connection event registration pattern used across all live clients.\n     *\n     * @param events - Object containing the event constants for the specific client type\n     * @param events.Open - Event constant for connection open\n     * @param events.Close - Event constant for connection close\n     * @param events.Error - Event constant for connection error\n     * @protected\n     */\n    setupConnectionEvents(events) {\n        if (this.conn) {\n            this.conn.onopen = () => {\n                this.emit(events.Open, this);\n            };\n            this.conn.onclose = (event) => {\n                this.emit(events.Close, event);\n            };\n            this.conn.onerror = (event) => {\n                const enhancedInfo = this.extractErrorInformation(event, this.conn || undefined);\n                const enhancedError = this.createEnhancedError(event, enhancedInfo);\n                this.emit(events.Error, enhancedError);\n            };\n        }\n    }\n}\nclass WSWebSocketDummy {\n    constructor(address, _protocols, options) {\n        this.binaryType = \"arraybuffer\";\n        this.onclose = () => { };\n        this.onerror = () => { };\n        this.onmessage = () => { };\n        this.onopen = () => { };\n        this.readyState = SOCKET_STATES.connecting;\n        this.send = () => { };\n        this.url = null;\n        this.url = address.toString();\n        this.close = options.close;\n    }\n}\nexport { AbstractLiveClient as AbstractWsClient };\n//# sourceMappingURL=AbstractLiveClient.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { resolveHeadersConstructor } from \"./helpers\";\nimport crossFetch from \"cross-fetch\";\n/**\n * Resolves the appropriate fetch function to use, either a custom fetch function provided as an argument, or the global fetch function if available, or the cross-fetch library if the global fetch function is not available.\n *\n * @param customFetch - An optional custom fetch function to use instead of the global fetch function.\n * @returns A fetch function that can be used to make HTTP requests.\n */\nexport const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === \"undefined\") {\n        _fetch = crossFetch;\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\n/**\n * Resolves a fetch function that includes an \"Authorization\" header with the provided API key.\n *\n * @param apiKey - The API key to include in the \"Authorization\" header.\n * @param customFetch - An optional custom fetch function to use instead of the global fetch function.\n * @returns A fetch function that can be used to make HTTP requests with the provided API key in the \"Authorization\" header.\n */\nexport const fetchWithAuth = ({ apiKey, customFetch, accessToken, }) => {\n    const fetch = resolveFetch(customFetch);\n    const HeadersConstructor = resolveHeadersConstructor();\n    return (input, init) => __awaiter(void 0, void 0, void 0, function* () {\n        const headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);\n        if (!headers.has(\"Authorization\")) {\n            headers.set(\"Authorization\", accessToken ? `Bearer ${accessToken}` : `Token ${apiKey}`);\n        }\n        return fetch(input, Object.assign(Object.assign({}, init), { headers }));\n    });\n};\n/**\n * Resolves the appropriate Response object to use, either the global Response object if available, or the Response object from the cross-fetch library if the global Response object is not available.\n *\n * @returns The appropriate Response object to use for making HTTP requests.\n */\nexport const resolveResponse = () => __awaiter(void 0, void 0, void 0, function* () {\n    if (typeof Response === \"undefined\") {\n        return (yield import(\"cross-fetch\")).Response;\n    }\n    return Response;\n});\n//# sourceMappingURL=fetch.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DeepgramApiError, DeepgramError, DeepgramUnknownError } from \"../lib/errors\";\nimport { fetchWithAuth, resolveResponse } from \"../lib/fetch\";\nimport { AbstractClient } from \"./AbstractClient\";\nimport { isBrowser } from \"../lib/runtime\";\nimport merge from \"deepmerge\";\n/**\n * An abstract class that extends `AbstractClient` and provides a base implementation for a REST-based API client.\n * This class handles authentication, error handling, and other common functionality for REST API clients.\n */\nexport class AbstractRestClient extends AbstractClient {\n    /**\n     * Constructs a new instance of the `AbstractRestClient` class with the provided options.\n     *\n     * @param options - The client options to use for this instance.\n     * @throws {DeepgramError} If the client is being used in a browser and no proxy is provided.\n     */\n    constructor(options) {\n        super(options);\n        if (isBrowser() && !this.proxy) {\n            throw new DeepgramError(\"Due to CORS we are unable to support REST-based API calls to our API from the browser. Please consider using a proxy: https://dpgr.am/js-proxy for more information.\");\n        }\n        const { accessToken, key: apiKey, fetch: customFetch } = this;\n        this.fetch = fetchWithAuth({ accessToken, apiKey, customFetch });\n        if (this.proxy) {\n            this.baseUrl = this.namespaceOptions.fetch.options.proxy.url;\n        }\n        else {\n            this.baseUrl = this.namespaceOptions.fetch.options.url;\n        }\n    }\n    /**\n     * Constructs an error message from the provided error object.\n     *\n     * @param err - The error object to extract the error message from.\n     * @returns The constructed error message.\n     */\n    _getErrorMessage(err) {\n        return err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\n    }\n    /**\n     * Handles an error that occurred during a request.\n     *\n     * @param error - The error that occurred during the request.\n     * @param reject - The rejection function to call with the error.\n     * @returns A Promise that resolves when the error has been handled.\n     */\n    _handleError(error, reject) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const Res = yield resolveResponse();\n            if (error instanceof Res) {\n                error\n                    .json()\n                    .then((err) => {\n                    reject(new DeepgramApiError(this._getErrorMessage(err), error.status || 500));\n                })\n                    .catch((err) => {\n                    reject(new DeepgramUnknownError(this._getErrorMessage(err), err));\n                });\n            }\n            else {\n                reject(new DeepgramUnknownError(this._getErrorMessage(error), error));\n            }\n        });\n    }\n    /**\n     * Constructs the options object to be used for a fetch request.\n     *\n     * @param method - The HTTP method to use for the request, such as \"GET\", \"POST\", \"PUT\", \"PATCH\", or \"DELETE\".\n     * @param bodyOrOptions - For \"POST\", \"PUT\", and \"PATCH\" requests, the request body as a string, Buffer, or Readable stream. For \"GET\" and \"DELETE\" requests, the fetch options to use.\n     * @param options - Additional fetch options to use for the request.\n     * @returns The constructed fetch options object.\n     */\n    _getRequestOptions(method, bodyOrOptions, options) {\n        let reqOptions = { method };\n        if (method === \"GET\" || method === \"DELETE\") {\n            reqOptions = Object.assign(Object.assign({}, reqOptions), bodyOrOptions);\n        }\n        else {\n            reqOptions = Object.assign(Object.assign({ duplex: \"half\", body: bodyOrOptions }, reqOptions), options);\n        }\n        return merge(this.namespaceOptions.fetch.options, reqOptions, { clone: false });\n    }\n    _handleRequest(method, url, bodyOrOptions, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                const fetcher = this.fetch;\n                fetcher(url, this._getRequestOptions(method, bodyOrOptions, options))\n                    .then((result) => {\n                    if (!result.ok)\n                        throw result;\n                    resolve(result);\n                })\n                    .catch((error) => this._handleError(error, reject));\n            });\n        });\n    }\n    /**\n     * Handles an HTTP GET request using the provided URL and optional request options.\n     *\n     * @param url - The URL to send the GET request to.\n     * @param options - Additional fetch options to use for the GET request.\n     * @returns A Promise that resolves to the Response object for the GET request.\n     */\n    get(url, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._handleRequest(\"GET\", url, options);\n        });\n    }\n    /**\n     * Handles an HTTP POST request using the provided URL, request body, and optional request options.\n     *\n     * @param url - The URL to send the POST request to.\n     * @param body - The request body as a string, Buffer, or Readable stream.\n     * @param options - Additional fetch options to use for the POST request.\n     * @returns A Promise that resolves to the Response object for the POST request.\n     */\n    post(url, body, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._handleRequest(\"POST\", url, body, options);\n        });\n    }\n    /**\n     * Handles an HTTP PUT request using the provided URL, request body, and optional request options.\n     *\n     * @param url - The URL to send the PUT request to.\n     * @param body - The request body as a string, Buffer, or Readable stream.\n     * @param options - Additional fetch options to use for the PUT request.\n     * @returns A Promise that resolves to the Response object for the PUT request.\n     */\n    put(url, body, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._handleRequest(\"PUT\", url, body, options);\n        });\n    }\n    /**\n     * Handles an HTTP PATCH request using the provided URL, request body, and optional request options.\n     *\n     * @param url - The URL to send the PATCH request to.\n     * @param body - The request body as a string, Buffer, or Readable stream.\n     * @param options - Additional fetch options to use for the PATCH request.\n     * @returns A Promise that resolves to the Response object for the PATCH request.\n     */\n    patch(url, body, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._handleRequest(\"PATCH\", url, body, options);\n        });\n    }\n    /**\n     * Handles an HTTP DELETE request using the provided URL and optional request options.\n     *\n     * @param url - The URL to send the DELETE request to.\n     * @param options - Additional fetch options to use for the DELETE request.\n     * @returns A Promise that resolves to the Response object for the DELETE request.\n     */\n    delete(url, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._handleRequest(\"DELETE\", url, options);\n        });\n    }\n    /**\n     * Determines whether the current instance should proxy requests.\n     * @returns {boolean} true if the current instance should proxy requests; otherwise, false\n     */\n    get proxy() {\n        var _a;\n        return this.key === \"proxy\" && !!((_a = this.namespaceOptions.fetch.options.proxy) === null || _a === void 0 ? void 0 : _a.url);\n    }\n}\nexport { AbstractRestClient as AbstractRestfulClient };\n//# sourceMappingURL=AbstractRestClient.js.map","export var AgentEvents;\n(function (AgentEvents) {\n    /**\n     * Built in socket events.\n     */\n    AgentEvents[\"Open\"] = \"Open\";\n    AgentEvents[\"Close\"] = \"Close\";\n    AgentEvents[\"Error\"] = \"Error\";\n    /**\n     * Audio event?\n     */\n    AgentEvents[\"Audio\"] = \"Audio\";\n    /**\n     * Confirms the successful connection to the websocket.\n     * { type: \"Welcome\", request_id: \"String\"}\n     */\n    AgentEvents[\"Welcome\"] = \"Welcome\";\n    /**\n     * Confirms that your `configure` request was successful.\n     * { type: \"SettingsApplied\" }\n     */\n    AgentEvents[\"SettingsApplied\"] = \"SettingsApplied\";\n    /**\n     * Triggered when the agent \"hears\" the user say something.\n     * { type: \"ConversationText\", role: string, content: string }\n     */\n    AgentEvents[\"ConversationText\"] = \"ConversationText\";\n    /**\n     * Triggered when the agent begins receiving user audio.\n     * { type: \"UserStartedSpeaking\" }\n     */\n    AgentEvents[\"UserStartedSpeaking\"] = \"UserStartedSpeaking\";\n    /**\n     * Triggered when the user has stopped speaking and the agent is processing the audio.\n     * { type: \"AgentThinking\", content: string }\n     */\n    AgentEvents[\"AgentThinking\"] = \"AgentThinking\";\n    /**\n     * A request to call client-side functions.\n     * { type: \"FunctionCallRequest\", functions: { id: string; name: string; arguments: string; client_side: boolean}[] }\n     */\n    AgentEvents[\"FunctionCallRequest\"] = \"FunctionCallRequest\";\n    /**\n     * Triggered when the agent begins streaming an audio response.\n     * YOU WILL ONLY RECEIVE THIS EVENT IF YOU HAVE ENABLED `experimental` IN YOUR CONFIG.\n     * { type: \"AgentStartedSpeaking\", total_latency: number, tts_latency: number, ttt_latency: number }\n     */\n    AgentEvents[\"AgentStartedSpeaking\"] = \"AgentStartedSpeaking\";\n    /**\n     * Triggered when the agent has finished streaming an audio response.\n     * { type: \"AgentAudioDone\" }\n     */\n    AgentEvents[\"AgentAudioDone\"] = \"AgentAudioDone\";\n    /**\n     * This event is only emitted when you send an `InjectAgentMessage` request while\n     * the user is currently speaking or the server is processing user audio.\n     * { type: \"InjectionRefused\", message: string }\n     */\n    AgentEvents[\"InjectionRefused\"] = \"InjectionRefused\";\n    /**\n     * A successful response to the `UpdateInstructions` request.\n     * { type: \"PromptUpdated\" }\n     */\n    AgentEvents[\"PromptUpdated\"] = \"PromptUpdated\";\n    /**\n     * A successful response to the `UpdateSpeak` request.\n     * { type: \"SpeakUpdated\" }\n     */\n    AgentEvents[\"SpeakUpdated\"] = \"SpeakUpdated\";\n    /**\n     * Catch all for any other message event\n     */\n    AgentEvents[\"Unhandled\"] = \"Unhandled\";\n})(AgentEvents || (AgentEvents = {}));\n//# sourceMappingURL=AgentEvents.js.map","import { DEFAULT_AGENT_URL } from \"../lib/constants\";\nimport { AgentEvents } from \"../lib/enums/AgentEvents\";\nimport { AbstractLiveClient } from \"./AbstractLiveClient\";\nexport class AgentLiveClient extends AbstractLiveClient {\n    constructor(options, endpoint = \"/:version/agent/converse\") {\n        var _a, _b, _c, _d;\n        super(options);\n        this.namespace = \"agent\";\n        this.baseUrl = (_d = (_c = (_b = (_a = options.agent) === null || _a === void 0 ? void 0 : _a.websocket) === null || _b === void 0 ? void 0 : _b.options) === null || _c === void 0 ? void 0 : _c.url) !== null && _d !== void 0 ? _d : DEFAULT_AGENT_URL;\n        this.connect({}, endpoint);\n    }\n    /**\n     * Sets up the connection event handlers.\n     * This method is responsible for handling the various events that can occur on the WebSocket connection, such as opening, closing, and receiving messages.\n     * - When the connection is opened, it emits the `AgentEvents.Open` event.\n     * - When the connection is closed, it emits the `AgentEvents.Close` event.\n     * - When an error occurs on the connection, it emits the `AgentEvents.Error` event.\n     * - When a message is received, it parses the message and emits the appropriate event based on the message type.\n     */\n    setupConnection() {\n        // Set up standard connection events (open, close, error) using abstracted method\n        this.setupConnectionEvents({\n            Open: AgentEvents.Open,\n            Close: AgentEvents.Close,\n            Error: AgentEvents.Error,\n        });\n        // Set up message handling specific to agent conversations\n        if (this.conn) {\n            this.conn.onmessage = (event) => {\n                this.handleMessage(event);\n            };\n        }\n    }\n    /**\n     * Handles incoming messages from the WebSocket connection.\n     * @param event - The MessageEvent object representing the received message.\n     */\n    handleMessage(event) {\n        var _a, _b, _c, _d, _e, _f;\n        if (typeof event.data === \"string\") {\n            try {\n                const data = JSON.parse(event.data);\n                this.handleTextMessage(data);\n            }\n            catch (error) {\n                this.emit(AgentEvents.Error, {\n                    event,\n                    data: ((_a = event.data) === null || _a === void 0 ? void 0 : _a.toString().substring(0, 200)) +\n                        (((_b = event.data) === null || _b === void 0 ? void 0 : _b.toString().length) > 200 ? \"...\" : \"\"),\n                    message: \"Unable to parse `data` as JSON.\",\n                    error,\n                    url: (_c = this.conn) === null || _c === void 0 ? void 0 : _c.url,\n                    readyState: (_d = this.conn) === null || _d === void 0 ? void 0 : _d.readyState,\n                });\n            }\n        }\n        else if (event.data instanceof Blob) {\n            event.data.arrayBuffer().then((buffer) => {\n                this.handleBinaryMessage(Buffer.from(buffer));\n            });\n        }\n        else if (event.data instanceof ArrayBuffer) {\n            this.handleBinaryMessage(Buffer.from(event.data));\n        }\n        else if (Buffer.isBuffer(event.data)) {\n            this.handleBinaryMessage(event.data);\n        }\n        else {\n            console.log(\"Received unknown data type\", event.data);\n            this.emit(AgentEvents.Error, {\n                event,\n                message: \"Received unknown data type.\",\n                url: (_e = this.conn) === null || _e === void 0 ? void 0 : _e.url,\n                readyState: (_f = this.conn) === null || _f === void 0 ? void 0 : _f.readyState,\n                dataType: typeof event.data,\n            });\n        }\n    }\n    /**\n     * Handles binary messages received from the WebSocket connection.\n     * @param data - The binary data.\n     */\n    handleBinaryMessage(data) {\n        this.emit(AgentEvents.Audio, data);\n    }\n    /**\n     * Handles text messages received from the WebSocket connection.\n     * @param data - The parsed JSON data.\n     */\n    handleTextMessage(data) {\n        if (data.type in AgentEvents) {\n            this.emit(data.type, data);\n        }\n        else {\n            this.emit(AgentEvents.Unhandled, data);\n        }\n    }\n    /**\n     * To be called with your model configuration BEFORE sending\n     * any audio data.\n     * @param options - The SettingsConfiguration object.\n     */\n    configure(options) {\n        const string = JSON.stringify(Object.assign({ type: \"Settings\" }, options));\n        this.send(string);\n    }\n    /**\n     * Provide new system prompt to the LLM.\n     * @param prompt - The system prompt to provide.\n     */\n    updatePrompt(prompt) {\n        this.send(JSON.stringify({ type: \"UpdatePrompt\", prompt }));\n    }\n    /**\n     * Change the speak model.\n     * @param model - The new model to use.\n     */\n    updateSpeak(speakConfig) {\n        this.send(JSON.stringify({ type: \"UpdateSpeak\", speak: speakConfig }));\n    }\n    /**\n     * Immediately trigger an agent message. If this message\n     * is sent while the user is speaking, or while the server is in the\n     * middle of sending audio, then the request will be ignored and an InjectionRefused\n     * event will be emitted.\n     * @example \"Hold on while I look that up for you.\"\n     * @example \"Are you still on the line?\"\n     * @param content - The message to speak.\n     */\n    injectAgentMessage(content) {\n        this.send(JSON.stringify({ type: \"InjectAgentMessage\", content }));\n    }\n    /**\n     * Send a text-based message to the agent as if it came from the user.\n     * This allows you to inject user messages into the conversation for the agent to respond to.\n     * @example \"Hello! Can you hear me?\"\n     * @example \"What's the weather like today?\"\n     * @param content - The specific phrase or statement the agent should respond to.\n     */\n    injectUserMessage(content) {\n        this.send(JSON.stringify({ type: \"InjectUserMessage\", content }));\n    }\n    /**\n     * Respond to a function call request.\n     * @param response  - The response to the function call request.\n     */\n    functionCallResponse(response) {\n        this.send(JSON.stringify(Object.assign({ type: \"FunctionCallResponse\" }, response)));\n    }\n    /**\n     * Send a keepalive to avoid closing the websocket while you\n     * are not transmitting audio. This should be sent at least\n     * every 8 seconds.\n     */\n    keepAlive() {\n        this.send(JSON.stringify({ type: \"KeepAlive\" }));\n    }\n}\n//# sourceMappingURL=AgentLiveClient.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isDeepgramError } from \"../lib/errors\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\nexport class AuthRestClient extends AbstractRestClient {\n    constructor() {\n        super(...arguments);\n        this.namespace = \"auth\";\n    }\n    /**\n     * Generates a new temporary token for the Deepgram API.\n     * @param options Optional configuration options for the token generation. Includes ttl_seconds to set token expiration.\n     * @param endpoint Optional custom endpoint to use for the request. Defaults to \":version/auth/grant\".\n     * @returns Object containing the result of the request or an error if one occurred. Result will contain access_token and expires_in properties.\n     */\n    grantToken(options = {}, endpoint = \":version/auth/grant\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint);\n                const body = JSON.stringify(options);\n                const result = yield this.post(requestUrl, body, {\n                    headers: { \"Content-Type\": \"application/json\" },\n                }).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n}\n//# sourceMappingURL=AuthRestClient.js.map","/**\n * Enumeration of events related to live transcription.\n *\n * - `Open`: Built-in socket event for when the connection is opened.\n * - `Close`: Built-in socket event for when the connection is closed.\n * - `Error`: Built-in socket event for when an error occurs.\n * - `Transcript`: Event for when a transcript message is received.\n * - `Metadata`: Event for when metadata is received.\n * - `UtteranceEnd`: Event for when an utterance ends.\n * - `SpeechStarted`: Event for when speech is detected.\n * - `Unhandled`: Catch-all event for any other message event.\n */\nexport var LiveTranscriptionEvents;\n(function (LiveTranscriptionEvents) {\n    /**\n     * Built in socket events.\n     */\n    LiveTranscriptionEvents[\"Open\"] = \"open\";\n    LiveTranscriptionEvents[\"Close\"] = \"close\";\n    LiveTranscriptionEvents[\"Error\"] = \"error\";\n    /**\n     * Message { type: string }\n     */\n    LiveTranscriptionEvents[\"Transcript\"] = \"Results\";\n    LiveTranscriptionEvents[\"Metadata\"] = \"Metadata\";\n    LiveTranscriptionEvents[\"UtteranceEnd\"] = \"UtteranceEnd\";\n    LiveTranscriptionEvents[\"SpeechStarted\"] = \"SpeechStarted\";\n    /**\n     * Catch all for any other message event\n     */\n    LiveTranscriptionEvents[\"Unhandled\"] = \"Unhandled\";\n})(LiveTranscriptionEvents || (LiveTranscriptionEvents = {}));\n//# sourceMappingURL=LiveTranscriptionEvents.js.map","/**\n * Enumeration of events related to live text-to-speech synthesis.\n *\n * - `Open`: Built-in socket event for when the connection is opened.\n * - `Close`: Built-in socket event for when the connection is closed.\n * - `Error`: Built-in socket event for when an error occurs.\n * - `Metadata`: Event for when metadata is received.\n * - `Flushed`: Event for when the server has flushed the buffer.\n * - `Warning`: Event for when a warning is received.\n * - `Unhandled`: Catch-all event for any other message event.\n */\nexport var LiveTTSEvents;\n(function (LiveTTSEvents) {\n    /**\n     * Built in socket events.\n     */\n    LiveTTSEvents[\"Open\"] = \"Open\";\n    LiveTTSEvents[\"Close\"] = \"Close\";\n    LiveTTSEvents[\"Error\"] = \"Error\";\n    /**\n     * Message { type: string }\n     */\n    LiveTTSEvents[\"Metadata\"] = \"Metadata\";\n    LiveTTSEvents[\"Flushed\"] = \"Flushed\";\n    LiveTTSEvents[\"Warning\"] = \"Warning\";\n    /**\n     * Audio data event.\n     */\n    LiveTTSEvents[\"Audio\"] = \"Audio\";\n    /**\n     * Catch all for any other message event\n     */\n    LiveTTSEvents[\"Unhandled\"] = \"Unhandled\";\n})(LiveTTSEvents || (LiveTTSEvents = {}));\n//# sourceMappingURL=LiveTTSEvents.js.map","import { AbstractLiveClient } from \"./AbstractLiveClient\";\nimport { LiveTranscriptionEvents } from \"../lib/enums\";\nimport { DeepgramError } from \"../lib/errors\";\n/**\n * The `ListenLiveClient` class extends the `AbstractLiveClient` class and provides functionality for setting up and managing a WebSocket connection for live transcription.\n *\n * The constructor takes in `DeepgramClientOptions` and an optional `LiveSchema` object, as well as an optional `endpoint` string. It then calls the `connect` method of the parent `AbstractLiveClient` class to establish the WebSocket connection.\n *\n * The `setupConnection` method is responsible for handling the various events that can occur on the WebSocket connection, such as opening, closing, and receiving messages. It sets up event handlers for these events and emits the appropriate events based on the message type.\n *\n * The `configure` method allows you to send additional configuration options to the connected session, such as enabling numerals.\n *\n * The `keepAlive` method sends a \"KeepAlive\" message to the server to maintain the connection.\n *\n * The `requestClose` method requests the server to close the connection.\n *\n * The `finish` method is deprecated as of version 3.4 and will be removed in version 4.0. Use `requestClose` instead.\n */\nexport class ListenLiveClient extends AbstractLiveClient {\n    /**\n     * Constructs a new `ListenLiveClient` instance with the provided options.\n     *\n     * @param options - The `DeepgramClientOptions` to use for the client connection.\n     * @param transcriptionOptions - An optional `LiveSchema` object containing additional configuration options for the live transcription.\n     * @param endpoint - An optional string representing the WebSocket endpoint to connect to. Defaults to `:version/listen`.\n     */\n    constructor(options, transcriptionOptions = {}, endpoint = \":version/listen\") {\n        var _a, _b;\n        super(options);\n        this.namespace = \"listen\";\n        if (((_a = transcriptionOptions.keyterm) === null || _a === void 0 ? void 0 : _a.length) && !((_b = transcriptionOptions.model) === null || _b === void 0 ? void 0 : _b.startsWith(\"nova-3\"))) {\n            throw new DeepgramError(\"Keyterms are only supported with the Nova 3 models.\");\n        }\n        this.connect(transcriptionOptions, endpoint);\n    }\n    /**\n     * Sets up the connection event handlers.\n     * This method is responsible for handling the various events that can occur on the WebSocket connection, such as opening, closing, and receiving messages.\n     * - When the connection is opened, it emits the `LiveTranscriptionEvents.Open` event.\n     * - When the connection is closed, it emits the `LiveTranscriptionEvents.Close` event.\n     * - When an error occurs on the connection, it emits the `LiveTranscriptionEvents.Error` event.\n     * - When a message is received, it parses the message and emits the appropriate event based on the message type, such as `LiveTranscriptionEvents.Metadata`, `LiveTranscriptionEvents.Transcript`, `LiveTranscriptionEvents.UtteranceEnd`, and `LiveTranscriptionEvents.SpeechStarted`.\n     */\n    setupConnection() {\n        // Set up standard connection events (open, close, error) using abstracted method\n        this.setupConnectionEvents({\n            Open: LiveTranscriptionEvents.Open,\n            Close: LiveTranscriptionEvents.Close,\n            Error: LiveTranscriptionEvents.Error,\n        });\n        // Set up message handling specific to transcription\n        if (this.conn) {\n            this.conn.onmessage = (event) => {\n                var _a, _b, _c, _d;\n                try {\n                    const data = JSON.parse(event.data.toString());\n                    if (data.type === LiveTranscriptionEvents.Metadata) {\n                        this.emit(LiveTranscriptionEvents.Metadata, data);\n                    }\n                    else if (data.type === LiveTranscriptionEvents.Transcript) {\n                        this.emit(LiveTranscriptionEvents.Transcript, data);\n                    }\n                    else if (data.type === LiveTranscriptionEvents.UtteranceEnd) {\n                        this.emit(LiveTranscriptionEvents.UtteranceEnd, data);\n                    }\n                    else if (data.type === LiveTranscriptionEvents.SpeechStarted) {\n                        this.emit(LiveTranscriptionEvents.SpeechStarted, data);\n                    }\n                    else {\n                        this.emit(LiveTranscriptionEvents.Unhandled, data);\n                    }\n                }\n                catch (error) {\n                    this.emit(LiveTranscriptionEvents.Error, {\n                        event,\n                        message: \"Unable to parse `data` as JSON.\",\n                        error,\n                        url: (_a = this.conn) === null || _a === void 0 ? void 0 : _a.url,\n                        readyState: (_b = this.conn) === null || _b === void 0 ? void 0 : _b.readyState,\n                        data: ((_c = event.data) === null || _c === void 0 ? void 0 : _c.toString().substring(0, 200)) +\n                            (((_d = event.data) === null || _d === void 0 ? void 0 : _d.toString().length) > 200 ? \"...\" : \"\"),\n                    });\n                }\n            };\n        }\n    }\n    /**\n     * Sends additional config to the connected session.\n     *\n     * @param config - The configuration options to apply to the LiveClient.\n     * @param config.numerals - We currently only support numerals.\n     */\n    configure(config) {\n        this.send(JSON.stringify({\n            type: \"Configure\",\n            processors: config,\n        }));\n    }\n    /**\n     * Sends a \"KeepAlive\" message to the server to maintain the connection.\n     */\n    keepAlive() {\n        this.send(JSON.stringify({\n            type: \"KeepAlive\",\n        }));\n    }\n    /**\n     * Sends a \"Finalize\" message to flush any transcription sitting in the server's buffer.\n     */\n    finalize() {\n        this.send(JSON.stringify({\n            type: \"Finalize\",\n        }));\n    }\n    /**\n     * @deprecated Since version 3.4. Will be removed in version 4.0. Use `requestClose` instead.\n     */\n    finish() {\n        this.requestClose();\n    }\n    /**\n     * Requests the server close the connection.\n     */\n    requestClose() {\n        this.send(JSON.stringify({\n            type: \"CloseStream\",\n        }));\n    }\n}\nexport { ListenLiveClient as LiveClient };\n//# sourceMappingURL=ListenLiveClient.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isFileSource, isUrlSource } from \"../lib/helpers\";\nimport { DeepgramError, isDeepgramError } from \"../lib/errors\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n/**\n * The `ListenRestClient` class extends the `AbstractRestClient` class and provides methods for transcribing audio from URLs or files using the Deepgram API.\n *\n * The `transcribeUrl` method is used to transcribe audio from a URL synchronously. It takes a `UrlSource` object as the source, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n *\n * The `transcribeFile` method is used to transcribe audio from a file synchronously. It takes a `FileSource` object as the source, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n *\n * The `transcribeUrlCallback` method is used to transcribe audio from a URL asynchronously. It takes a `UrlSource` object as the source, a `CallbackUrl` object as the callback, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n *\n * The `transcribeFileCallback` method is used to transcribe audio from a file asynchronously. It takes a `FileSource` object as the source, a `CallbackUrl` object as the callback, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n */\nexport class ListenRestClient extends AbstractRestClient {\n    constructor() {\n        super(...arguments);\n        this.namespace = \"listen\";\n    }\n    /**\n     * Transcribes audio from a URL synchronously.\n     *\n     * @param source - The URL source object containing the audio URL to transcribe.\n     * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n     * @param endpoint - An optional endpoint string to use for the transcription request.\n     * @returns A `DeepgramResponse` object containing the transcription result or an error.\n     */\n    transcribeUrl(source, options, endpoint = \":version/listen\") {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                if (isUrlSource(source)) {\n                    body = JSON.stringify(source);\n                }\n                else {\n                    throw new DeepgramError(\"Unknown transcription source type\");\n                }\n                if (options !== undefined && \"callback\" in options) {\n                    throw new DeepgramError(\"Callback cannot be provided as an option to a synchronous transcription. Use `transcribeUrlCallback` or `transcribeFileCallback` instead.\");\n                }\n                if (((_a = options === null || options === void 0 ? void 0 : options.keyterm) === null || _a === void 0 ? void 0 : _a.length) && !((_b = options.model) === null || _b === void 0 ? void 0 : _b.startsWith(\"nova-3\"))) {\n                    throw new DeepgramError(\"Keyterms are only supported with the Nova 3 models.\");\n                }\n                const requestUrl = this.getRequestUrl(endpoint, {}, Object.assign({}, options));\n                const result = yield this.post(requestUrl, body).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Transcribes audio from a file asynchronously.\n     *\n     * @param source - The file source object containing the audio file to transcribe.\n     * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n     * @param endpoint - An optional endpoint string to use for the transcription request.\n     * @returns A `DeepgramResponse` object containing the transcription result or an error.\n     */\n    transcribeFile(source, options, endpoint = \":version/listen\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                if (isFileSource(source)) {\n                    body = source;\n                }\n                else {\n                    throw new DeepgramError(\"Unknown transcription source type\");\n                }\n                if (options !== undefined && \"callback\" in options) {\n                    throw new DeepgramError(\"Callback cannot be provided as an option to a synchronous transcription. Use `transcribeUrlCallback` or `transcribeFileCallback` instead.\");\n                }\n                const requestUrl = this.getRequestUrl(endpoint, {}, Object.assign({}, options));\n                const result = yield this.post(requestUrl, body, {\n                    headers: { \"Content-Type\": \"deepgram/audio+video\" },\n                }).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Transcribes audio from a URL asynchronously.\n     *\n     * @param source - The URL source object containing the audio file to transcribe.\n     * @param callback - The callback URL to receive the transcription result.\n     * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n     * @param endpoint - An optional endpoint string to use for the transcription request.\n     * @returns A `DeepgramResponse` object containing the transcription result or an error.\n     */\n    transcribeUrlCallback(source, callback, options, endpoint = \":version/listen\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                if (isUrlSource(source)) {\n                    body = JSON.stringify(source);\n                }\n                else {\n                    throw new DeepgramError(\"Unknown transcription source type\");\n                }\n                const requestUrl = this.getRequestUrl(endpoint, {}, Object.assign(Object.assign({}, options), { callback: callback.toString() }));\n                const result = yield this.post(requestUrl, body).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Transcribes audio from a file asynchronously.\n     *\n     * @param source - The file source object containing the audio file to transcribe.\n     * @param callback - The callback URL to receive the transcription result.\n     * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n     * @param endpoint - An optional endpoint string to use for the transcription request.\n     * @returns A `DeepgramResponse` object containing the transcription result or an error.\n     */\n    transcribeFileCallback(source, callback, options, endpoint = \":version/listen\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                if (isFileSource(source)) {\n                    body = source;\n                }\n                else {\n                    throw new DeepgramError(\"Unknown transcription source type\");\n                }\n                const requestUrl = this.getRequestUrl(endpoint, {}, Object.assign(Object.assign({}, options), { callback: callback.toString() }));\n                const result = yield this.post(requestUrl, body, {\n                    headers: { \"Content-Type\": \"deepgram/audio+video\" },\n                }).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n}\nexport { ListenRestClient as PrerecordedClient };\n//# sourceMappingURL=ListenRestClient.js.map","import { AbstractClient } from \"./AbstractClient\";\nimport { ListenLiveClient } from \"./ListenLiveClient\";\nimport { ListenRestClient } from \"./ListenRestClient\";\n/**\n * The `ListenClient` class extends the `AbstractClient` class and provides access to the \"listen\" namespace.\n * It exposes two methods:\n *\n * 1. `prerecorded()`: Returns a `ListenRestClient` instance for interacting with the prerecorded listen API.\n * 2. `live(transcriptionOptions: LiveSchema = {}, endpoint = \":version/listen\")`: Returns a `ListenLiveClient` instance for interacting with the live listen API, with the provided transcription options and endpoint.\n */\nexport class ListenClient extends AbstractClient {\n    constructor() {\n        super(...arguments);\n        this.namespace = \"listen\";\n    }\n    /**\n     * Returns a `ListenRestClient` instance for interacting with the prerecorded listen API.\n     */\n    get prerecorded() {\n        return new ListenRestClient(this.options);\n    }\n    /**\n     * Returns a `ListenLiveClient` instance for interacting with the live listen API, with the provided transcription options and endpoint.\n     * @param {LiveSchema} [transcriptionOptions={}] - The transcription options to use for the live listen API.\n     * @param {string} [endpoint=\":version/listen\"] - The endpoint to use for the live listen API.\n     * @returns {ListenLiveClient} - A `ListenLiveClient` instance for interacting with the live listen API.\n     */\n    live(transcriptionOptions = {}, endpoint = \":version/listen\") {\n        return new ListenLiveClient(this.options, transcriptionOptions, endpoint);\n    }\n}\n//# sourceMappingURL=ListenClient.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isDeepgramError } from \"../lib/errors\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n/**\n * The `ManageRestClient` class provides a set of methods for interacting with the Deepgram Manage API. It extends the `AbstractRestClient` class and provides functionality for managing projects, keys, members, invites, usage, balances, and models.\n *\n * The class has a `namespace` property that is set to `\"manage\"`, which is used in the construction of the request URLs.\n *\n * The methods in this class include:\n * - `getTokenDetails`: Retrieves the details of the current authentication token.\n * - `getProjects`: Retrieves a list of all projects associated with the authenticated account.\n * - `getProject`: Retrieves the details of a specific project.\n * - `updateProject`: Updates the details of a specific project.\n * - `deleteProject`: Deletes a specific project.\n * - `getProjectKeys`: Retrieves a list of all API keys associated with a specific project.\n * - `getProjectKey`: Retrieves the details of a specific API key.\n * - `createProjectKey`: Creates a new API key for a specific project.\n * - `deleteProjectKey`: Deletes a specific API key.\n * - `getProjectMembers`: Retrieves a list of all members associated with a specific project.\n * - `removeProjectMember`: Removes a specific member from a project.\n * - `getProjectMemberScopes`: Retrieves the scopes associated with a specific project member.\n * - `updateProjectMemberScope`: Updates the scopes associated with a specific project member.\n * - `getProjectInvites`: Retrieves a list of all pending invitations for a specific project.\n * - `sendProjectInvite`: Sends a new invitation to a specific email address for a project.\n * - `deleteProjectInvite`: Deletes a specific invitation for a project.\n * - `leaveProject`: Removes the authenticated user from a specific project.\n * - `getProjectUsageRequests`: Retrieves a list of all usage requests for a specific project.\n * - `getProjectUsageRequest`: Retrieves the details of a specific usage request.\n * - `getProjectUsageSummary`: Retrieves a summary of the usage for a specific project.\n * - `getProjectUsageFields`: Retrieves a list of the available usage fields for a specific project.\n * - `getProjectBalances`: Retrieves a list of all balances associated with a specific project.\n * - `getProjectBalance`: Retrieves the details of a specific balance for a project.\n * - `getAllModels`: Retrieves all models for a project.\n * - `getModel`: Retrieves a specific model.\n */\nexport class ManageRestClient extends AbstractRestClient {\n    constructor() {\n        super(...arguments);\n        this.namespace = \"manage\";\n    }\n    /**\n     * Retrieves the details of the current authentication token.\n     *\n     * @returns A promise that resolves to an object containing the token details, or an error object if an error occurs.\n     * @see https://developers.deepgram.com/docs/authenticating#test-request\n     */\n    getTokenDetails(endpoint = \":version/auth/token\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint);\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves a list of all projects associated with the authenticated user.\n     *\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects\".\n     * @returns A promise that resolves to an object containing the list of projects, or an error object if an error occurs.\n     * @see https://developers.deepgram.com/reference/get-projects\n     */\n    getProjects(endpoint = \":version/projects\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint);\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the details of a specific project associated with the authenticated user.\n     *\n     * @param projectId - The ID of the project to retrieve.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId\".\n     * @returns A promise that resolves to an object containing the project details, or an error object if an error occurs.\n     * @see https://developers.deepgram.com/reference/get-project\n     */\n    getProject(projectId, endpoint = \":version/projects/:projectId\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId });\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Updates an existing project associated with the authenticated user.\n     *\n     * @param projectId - The ID of the project to update.\n     * @param options - An object containing the updated project details.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId\".\n     * @returns A promise that resolves to an object containing the response message, or an error object if an error occurs.\n     * @see https://developers.deepgram.com/reference/update-project\n     */\n    updateProject(projectId, options, endpoint = \":version/projects/:projectId\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n                const body = JSON.stringify(options);\n                const result = yield this.patch(requestUrl, body).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Deletes an existing project associated with the authenticated user.\n     *\n     * @param projectId - The ID of the project to delete.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId\".\n     * @returns A promise that resolves to an object containing the response message, or an error object if an error occurs.\n     * @see https://developers.deepgram.com/reference/delete-project\n     */\n    deleteProject(projectId, endpoint = \":version/projects/:projectId\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId });\n                yield this.delete(requestUrl);\n                return { error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves a list of project keys associated with the specified project.\n     *\n     * @param projectId - The ID of the project to retrieve the keys for.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys\".\n     * @returns A promise that resolves to an object containing the list of project keys, or an error object if an error occurs.\n     * @see https://developers.deepgram.com/reference/list-keys\n     */\n    getProjectKeys(projectId, endpoint = \":version/projects/:projectId/keys\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId });\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves a specific project key associated with the specified project.\n     *\n     * @param projectId - The ID of the project to retrieve the key for.\n     * @param keyId - The ID of the project key to retrieve.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys/:keyId\".\n     * @returns A promise that resolves to an object containing the project key, or an error object if an error occurs.\n     * @see https://developers.deepgram.com/reference/get-key\n     */\n    getProjectKey(projectId, keyId, endpoint = \":version/projects/:projectId/keys/:keyId\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId, keyId });\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a new project key for the specified project.\n     *\n     * @param projectId - The ID of the project to create the key for.\n     * @param options - An object containing the options for creating the project key.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys\".\n     * @returns A promise that resolves to an object containing the created project key, or an error object if an error occurs.\n     * @see https://developers.deepgram.com/reference/create-key\n     */\n    createProjectKey(projectId, options, endpoint = \":version/projects/:projectId/keys\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n                const body = JSON.stringify(options);\n                const result = yield this.post(requestUrl, body).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Deletes the specified project key.\n     *\n     * @param projectId - The ID of the project the key belongs to.\n     * @param keyId - The ID of the key to delete.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys/:keyId\".\n     * @returns A promise that resolves to an object containing a null result and an error object if an error occurs.\n     * @see https://developers.deepgram.com/reference/delete-key\n     */\n    deleteProjectKey(projectId, keyId, endpoint = \":version/projects/:projectId/keys/:keyId\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId, keyId });\n                yield this.delete(requestUrl);\n                return { error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the members of the specified project.\n     *\n     * @param projectId - The ID of the project to retrieve members for.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members\".\n     * @returns A promise that resolves to an object containing the project members and an error object if an error occurs.\n     * @see https://developers.deepgram.com/reference/get-members\n     */\n    getProjectMembers(projectId, endpoint = \":version/projects/:projectId/members\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId });\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Removes a member from the specified project.\n     *\n     * @param projectId - The ID of the project to remove the member from.\n     * @param memberId - The ID of the member to remove.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members/:memberId\".\n     * @returns A promise that resolves to an object containing a null error if the operation was successful, or an error object if an error occurred.\n     * @see https://developers.deepgram.com/reference/remove-member\n     */\n    removeProjectMember(projectId, memberId, endpoint = \":version/projects/:projectId/members/:memberId\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId, memberId });\n                yield this.delete(requestUrl);\n                return { error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the scopes for the specified project member.\n     *\n     * @param projectId - The ID of the project to retrieve the member scopes for.\n     * @param memberId - The ID of the member to retrieve the scopes for.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members/:memberId/scopes\".\n     * @returns A promise that resolves to an object containing the retrieved scopes or an error object if an error occurred.\n     * @see https://developers.deepgram.com/reference/get-member-scopes\n     */\n    getProjectMemberScopes(projectId, memberId, endpoint = \":version/projects/:projectId/members/:memberId/scopes\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId, memberId });\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Updates the scopes for the specified project member.\n     *\n     * @param projectId - The ID of the project to update the member scopes for.\n     * @param memberId - The ID of the member to update the scopes for.\n     * @param options - An object containing the new scopes to apply to the member.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members/:memberId/scopes\".\n     * @returns A promise that resolves to an object containing the result of the update operation or an error object if an error occurred.\n     * @see https://developers.deepgram.com/reference/update-scope\n     */\n    updateProjectMemberScope(projectId, memberId, options, endpoint = \":version/projects/:projectId/members/:memberId/scopes\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId, memberId }, options);\n                const body = JSON.stringify(options);\n                const result = yield this.put(requestUrl, body).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the project invites for the specified project.\n     *\n     * @param projectId - The ID of the project to retrieve the invites for.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/invites\".\n     * @returns A promise that resolves to an object containing the result of the get operation or an error object if an error occurred.\n     * @see https://developers.deepgram.com/reference/list-invites\n     */\n    getProjectInvites(projectId, endpoint = \":version/projects/:projectId/invites\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId });\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Sends a project invite to the specified email addresses.\n     *\n     * @param projectId - The ID of the project to send the invite for.\n     * @param options - An object containing the email addresses to invite and any additional options.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/invites\".\n     * @returns A promise that resolves to an object containing the result of the post operation or an error object if an error occurred.\n     * @see https://developers.deepgram.com/reference/send-invites\n     */\n    sendProjectInvite(projectId, options, endpoint = \":version/projects/:projectId/invites\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n                const body = JSON.stringify(options);\n                const result = yield this.post(requestUrl, body).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Deletes a project invite for the specified email address.\n     *\n     * @param projectId - The ID of the project to delete the invite for.\n     * @param email - The email address of the invite to delete.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/invites/:email\".\n     * @returns A promise that resolves to an object containing a null result and an error object if an error occurred.\n     * @see https://developers.deepgram.com/reference/delete-invite\n     */\n    deleteProjectInvite(projectId, email, endpoint = \":version/projects/:projectId/invites/:email\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId, email });\n                yield this.delete(requestUrl);\n                return { error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Leaves the specified project.\n     *\n     * @param projectId - The ID of the project to leave.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/leave\".\n     * @returns A promise that resolves to an object containing a null result and an error object if an error occurred.\n     * @see https://developers.deepgram.com/reference/leave-project\n     */\n    leaveProject(projectId, endpoint = \":version/projects/:projectId/leave\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId });\n                const result = yield this.delete(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves a list of usage requests for the specified project.\n     *\n     * @param projectId - The ID of the project to retrieve usage requests for.\n     * @param options - An object containing options to filter the usage requests, such as pagination parameters.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/requests\".\n     * @returns A promise that resolves to an object containing the list of usage requests and an error object if an error occurred.\n     * @see https://developers.deepgram.com/reference/get-all-requests\n     */\n    getProjectUsageRequests(projectId, options, endpoint = \":version/projects/:projectId/requests\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the details of a specific usage request for the specified project.\n     *\n     * @param projectId - The ID of the project to retrieve the usage request for.\n     * @param requestId - The ID of the usage request to retrieve.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/requests/:requestId\".\n     * @returns A promise that resolves to an object containing the usage request details and an error object if an error occurred.\n     * @see https://developers.deepgram.com/reference/get-request\n     */\n    getProjectUsageRequest(projectId, requestId, endpoint = \":version/projects/:projectId/requests/:requestId\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId, requestId });\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the usage summary for the specified project.\n     *\n     * @param projectId - The ID of the project to retrieve the usage summary for.\n     * @param options - An object containing optional parameters for the request, such as filters and pagination options.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/usage\".\n     * @returns A promise that resolves to an object containing the usage summary and an error object if an error occurred.\n     * @see https://developers.deepgram.com/reference/get-usage\n     */\n    getProjectUsageSummary(projectId, options, endpoint = \":version/projects/:projectId/usage\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the usage fields for the specified project.\n     *\n     * @param projectId - The ID of the project to retrieve the usage fields for.\n     * @param options - An object containing optional parameters for the request, such as filters and pagination options.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/usage/fields\".\n     * @returns A promise that resolves to an object containing the usage fields and an error object if an error occurred.\n     * @see https://developers.deepgram.com/reference/get-fields\n     */\n    getProjectUsageFields(projectId, options, endpoint = \":version/projects/:projectId/usage/fields\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the balances for the specified project.\n     *\n     * @param projectId - The ID of the project to retrieve the balances for.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/balances\".\n     * @returns A promise that resolves to an object containing the project balances and an error object if an error occurred.\n     * @see https://developers.deepgram.com/reference/get-all-balances\n     */\n    getProjectBalances(projectId, endpoint = \":version/projects/:projectId/balances\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId });\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the balance for the specified project and balance ID.\n     *\n     * @param projectId - The ID of the project to retrieve the balance for.\n     * @param balanceId - The ID of the balance to retrieve.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/balances/:balanceId\".\n     * @returns A promise that resolves to an object containing the project balance and an error object if an error occurred.\n     * @see https://developers.deepgram.com/reference/get-balance\n     */\n    getProjectBalance(projectId, balanceId, endpoint = \":version/projects/:projectId/balances/:balanceId\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId, balanceId });\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves all models for a given project.\n     *\n     * @param projectId - The ID of the project.\n     * @param endpoint - (optional) The endpoint URL for retrieving models. Defaults to \":version/projects/:projectId/models\".\n     * @returns A promise that resolves to a DeepgramResponse containing the GetModelsResponse.\n     * @example\n     * ```typescript\n     * import { createClient } from \"@deepgram/sdk\";\n     *\n     * const deepgram = createClient(DEEPGRAM_API_KEY);\n     * const { result: models, error } = deepgram.manage.getAllModels(\"projectId\");\n     *\n     * if (error) {\n     *   console.error(error);\n     * } else {\n     *   console.log(models);\n     * }\n     * ```\n     */\n    getAllModels(projectId, options = {}, endpoint = \":version/projects/:projectId/models\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves a model from the specified project.\n     *\n     * @param projectId - The ID of the project.\n     * @param modelId - The ID of the model.\n     * @param endpoint - (optional) The endpoint URL for the request. Default value is \":version/projects/:projectId/models/:modelId\".\n     * @returns A promise that resolves to a DeepgramResponse containing the GetModelResponse.\n     * @example\n     * ```typescript\n     * import { createClient } from \"@deepgram/sdk\";\n     *\n     * const deepgram = createClient(DEEPGRAM_API_KEY);\n     * const { result: model, error } = deepgram.models.getModel(\"projectId\", \"modelId\");\n     *\n     * if (error) {\n     *   console.error(error);\n     * } else {\n     *   console.log(model);\n     * }\n     * ```\n     */\n    getModel(projectId, modelId, endpoint = \":version/projects/:projectId/models/:modelId\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId, modelId });\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n}\nexport { ManageRestClient as ManageClient };\n//# sourceMappingURL=ManageRestClient.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isDeepgramError } from \"../lib/errors\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n/**\n * Represents a REST client for interacting with the Deepgram API.\n *\n * The `ModelsRestClient` class provides methods for interacting with the Deepgram API to retrieve information about available models.\n * @extends AbstractRestClient\n */\nexport class ModelsRestClient extends AbstractRestClient {\n    constructor() {\n        super(...arguments);\n        this.namespace = \"models\";\n    }\n    /**\n     * Retrieves a list of all available models.\n     *\n     * @param endpoint - (optional) The endpoint to request.\n     * @returns A promise that resolves with the response from the Deepgram API.\n     * @example\n     * ```typescript\n     * import { createClient } from \"@deepgram/sdk\";\n     *\n     * const deepgram = createClient(DEEPGRAM_API_KEY);\n     * const { result: models, error } = deepgram.models.getAll();\n     *\n     * if (error) {\n     *   console.error(error);\n     * } else {\n     *   console.log(models);\n     * }\n     * ```\n     */\n    getAll(endpoint = \":version/models\", options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, {}, options);\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves information about a specific model.\n     *\n     * @param modelId - The UUID of the model to retrieve.\n     * @param endpoint - (optional) The endpoint to request.\n     * @returns A promise that resolves with the response from the Deepgram API.\n     * @example\n     * ```typescript\n     * import { createClient } from \"@deepgram/sdk\";\n     *\n     * const deepgram = createClient(DEEPGRAM_API_KEY);\n     * const { result: model, error } = deepgram.models.getModel(\"modelId\");\n     *\n     * if (error) {\n     *   console.error(error);\n     * } else {\n     *   console.log(model);\n     * }\n     * ```\n     */\n    getModel(modelId, endpoint = \":version/models/:modelId\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { modelId });\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n}\n//# sourceMappingURL=ModelsRestClient.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isTextSource, isUrlSource } from \"../lib/helpers\";\nimport { DeepgramError, isDeepgramError } from \"../lib/errors\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n/**\n * The `ReadRestClient` class extends the `AbstractRestClient` class and provides methods for analyzing audio sources synchronously and asynchronously.\n *\n * The `analyzeUrl` method analyzes a URL-based audio source synchronously, returning a promise that resolves to the analysis response or an error.\n *\n * The `analyzeText` method analyzes a text-based audio source synchronously, returning a promise that resolves to the analysis response or an error.\n *\n * The `analyzeUrlCallback` method analyzes a URL-based audio source asynchronously, returning a promise that resolves to the analysis response or an error.\n *\n * The `analyzeTextCallback` method analyzes a text-based audio source asynchronously, returning a promise that resolves to the analysis response or an error.\n */\nexport class ReadRestClient extends AbstractRestClient {\n    constructor() {\n        super(...arguments);\n        this.namespace = \"read\";\n    }\n    /**\n     * Analyzes a URL-based audio source synchronously.\n     *\n     * @param source - The URL-based audio source to analyze.\n     * @param options - Optional analysis options.\n     * @param endpoint - The API endpoint to use for the analysis. Defaults to \":version/read\".\n     * @returns A promise that resolves to the analysis response, or an error if the analysis fails.\n     */\n    analyzeUrl(source, options, endpoint = \":version/read\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                if (isUrlSource(source)) {\n                    body = JSON.stringify(source);\n                }\n                else {\n                    throw new DeepgramError(\"Unknown source type\");\n                }\n                if (options !== undefined && \"callback\" in options) {\n                    throw new DeepgramError(\"Callback cannot be provided as an option to a synchronous transcription. Use `analyzeUrlCallback` or `analyzeTextCallback` instead.\");\n                }\n                const requestUrl = this.getRequestUrl(endpoint, {}, Object.assign({}, options));\n                const result = yield this.post(requestUrl, body).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Analyzes a text-based audio source synchronously.\n     *\n     * @param source - The text-based audio source to analyze.\n     * @param options - Optional analysis options.\n     * @param endpoint - The API endpoint to use for the analysis. Defaults to \":version/read\".\n     * @returns A promise that resolves to the analysis response, or an error if the analysis fails.\n     */\n    analyzeText(source, options, endpoint = \":version/read\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                if (isTextSource(source)) {\n                    body = JSON.stringify(source);\n                }\n                else {\n                    throw new DeepgramError(\"Unknown source type\");\n                }\n                if (options !== undefined && \"callback\" in options) {\n                    throw new DeepgramError(\"Callback cannot be provided as an option to a synchronous requests. Use `analyzeUrlCallback` or `analyzeTextCallback` instead.\");\n                }\n                const requestUrl = this.getRequestUrl(endpoint, {}, Object.assign({}, options));\n                const result = yield this.post(requestUrl, body).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Analyzes a URL-based audio source asynchronously.\n     *\n     * @param source - The URL-based audio source to analyze.\n     * @param callback - The URL to call back with the analysis results.\n     * @param options - Optional analysis options.\n     * @param endpoint - The API endpoint to use for the analysis. Defaults to \":version/read\".\n     * @returns A promise that resolves to the analysis response, or an error if the analysis fails.\n     */\n    analyzeUrlCallback(source, callback, options, endpoint = \":version/read\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                if (isUrlSource(source)) {\n                    body = JSON.stringify(source);\n                }\n                else {\n                    throw new DeepgramError(\"Unknown source type\");\n                }\n                const requestUrl = this.getRequestUrl(endpoint, {}, Object.assign(Object.assign({}, options), { callback: callback.toString() }));\n                const result = yield this.post(requestUrl, body).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Analyzes a text-based audio source asynchronously.\n     *\n     * @param source - The text-based audio source to analyze.\n     * @param callback - The URL to call back with the analysis results.\n     * @param options - Optional analysis options.\n     * @param endpoint - The API endpoint to use for the analysis. Defaults to \":version/read\".\n     * @returns A promise that resolves to the analysis response, or an error if the analysis fails.\n     */\n    analyzeTextCallback(source, callback, options, endpoint = \":version/read\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                if (isTextSource(source)) {\n                    body = JSON.stringify(source);\n                }\n                else {\n                    throw new DeepgramError(\"Unknown source type\");\n                }\n                const requestUrl = this.getRequestUrl(endpoint, {}, Object.assign(Object.assign({}, options), { callback: callback.toString() }));\n                const result = yield this.post(requestUrl, body, {\n                    headers: { \"Content-Type\": \"deepgram/audio+video\" },\n                }).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n}\nexport { ReadRestClient as ReadClient };\n//# sourceMappingURL=ReadRestClient.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isDeepgramError } from \"../lib/errors\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n/**\n * The `SelfHostedRestClient` class extends the `AbstractRestClient` class and provides methods for interacting with the Deepgram self-hosted API.\n *\n * This class is used to list, retrieve, create, and delete self-hosted credentials for a Deepgram project.\n */\nexport class SelfHostedRestClient extends AbstractRestClient {\n    constructor() {\n        super(...arguments);\n        this.namespace = \"selfhosted\";\n    }\n    /**\n     * Lists the self-hosted credentials for a Deepgram project.\n     *\n     * @param projectId - The ID of the Deepgram project.\n     * @returns A promise that resolves to an object containing the list of self-hosted credentials and any error that occurred.\n     * @see https://developers.deepgram.com/reference/list-credentials\n     */\n    listCredentials(projectId, endpoint = \":version/projects/:projectId/onprem/distribution/credentials\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId });\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the self-hosted credentials for a specific Deepgram project and credentials ID.\n     *\n     * @param projectId - The ID of the Deepgram project.\n     * @param credentialsId - The ID of the self-hosted credentials to retrieve.\n     * @returns A promise that resolves to an object containing the self-hosted credentials and any error that occurred.\n     * @see https://developers.deepgram.com/reference/get-credentials\n     */\n    getCredentials(projectId, credentialsId, endpoint = \":version/projects/:projectId/onprem/distribution/credentials/:credentialsId\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId, credentialsId });\n                const result = yield this.get(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates self-hosted credentials for a specific Deepgram project.\n     *\n     * @param projectId - The ID of the Deepgram project.\n     * @param options - The options for creating the self-hosted credentials.\n     * @returns A promise that resolves to an object containing the created self-hosted credentials and any error that occurred.\n     * @see https://developers.deepgram.com/reference/create-credentials\n     */\n    createCredentials(projectId, options, endpoint = \":version/projects/:projectId/onprem/distribution/credentials\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId });\n                const body = JSON.stringify(options);\n                const result = yield this.post(requestUrl, body).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Deletes self-hosted credentials for a specific Deepgram project.\n     *\n     * @param projectId - The ID of the Deepgram project.\n     * @param credentialsId - The ID of the self-hosted credentials to delete.\n     * @returns A promise that resolves to an object containing a message response and any error that occurred.\n     * @see https://developers.deepgram.com/reference/delete-credentials\n     */\n    deleteCredentials(projectId, credentialsId, endpoint = \":version/projects/:projectId/onprem/distribution/credentials/:credentialsId\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const requestUrl = this.getRequestUrl(endpoint, { projectId, credentialsId });\n                const result = yield this.delete(requestUrl).then((result) => result.json());\n                return { result, error: null };\n            }\n            catch (error) {\n                if (isDeepgramError(error)) {\n                    return { result: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n}\nexport { SelfHostedRestClient as OnPremClient };\n//# sourceMappingURL=SelfHostedRestClient.js.map","import { AbstractLiveClient } from \"./AbstractLiveClient\";\nimport { LiveTTSEvents } from \"../lib/enums\";\n/**\n * The `SpeakLiveClient` class extends the `AbstractLiveClient` class and provides functionality for setting up and managing a WebSocket connection for live text-to-speech synthesis.\n *\n * The constructor takes in `DeepgramClientOptions` and an optional `SpeakSchema` object, as well as an optional `endpoint` string. It then calls the `connect` method of the parent `AbstractLiveClient` class to establish the WebSocket connection.\n *\n * The `setupConnection` method is responsible for handling the various events that can occur on the WebSocket connection, such as opening, closing, and receiving messages. It sets up event handlers for these events and emits the appropriate events based on the message type.\n *\n * The `configure` method allows you to send additional configuration options to the connected session.\n *\n * The `requestClose` method requests the server to close the connection.\n */\nexport class SpeakLiveClient extends AbstractLiveClient {\n    /**\n     * Constructs a new `SpeakLiveClient` instance with the provided options.\n     *\n     * @param options - The `DeepgramClientOptions` to use for the client connection.\n     * @param speakOptions - An optional `SpeakSchema` object containing additional configuration options for the text-to-speech.\n     * @param endpoint - An optional string representing the WebSocket endpoint to connect to. Defaults to `:version/speak`.\n     */\n    constructor(options, speakOptions = {}, endpoint = \":version/speak\") {\n        super(options);\n        this.namespace = \"speak\";\n        this.connect(speakOptions, endpoint);\n    }\n    /**\n     * Sets up the connection event handlers.\n     * This method is responsible for handling the various events that can occur on the WebSocket connection, such as opening, closing, and receiving data.\n     * - When the connection is opened, it emits the `LiveTTSEvents.Open` event.\n     * - When the connection is closed, it emits the `LiveTTSEvents.Close` event.\n     * - When an error occurs on the connection, it emits the `LiveTTSEvents.Error` event.\n     * - When a message is received, it parses the message and emits the appropriate event based on the message type, such as `LiveTTSEvents.Metadata`, `LiveTTSEvents.Flushed`, and `LiveTTSEvents.Warning`.\n     */\n    setupConnection() {\n        // Set up standard connection events (open, close, error) using abstracted method\n        this.setupConnectionEvents({\n            Open: LiveTTSEvents.Open,\n            Close: LiveTTSEvents.Close,\n            Error: LiveTTSEvents.Error,\n        });\n        // Set up message handling specific to text-to-speech\n        if (this.conn) {\n            this.conn.onmessage = (event) => {\n                this.handleMessage(event);\n            };\n        }\n    }\n    /**\n     * Handles text messages received from the WebSocket connection.\n     * @param data - The parsed JSON data.\n     */\n    handleTextMessage(data) {\n        if (data.type === LiveTTSEvents.Metadata) {\n            this.emit(LiveTTSEvents.Metadata, data);\n        }\n        else if (data.type === LiveTTSEvents.Flushed) {\n            this.emit(LiveTTSEvents.Flushed, data);\n        }\n        else if (data.type === LiveTTSEvents.Warning) {\n            this.emit(LiveTTSEvents.Warning, data);\n        }\n        else {\n            this.emit(LiveTTSEvents.Unhandled, data);\n        }\n    }\n    /**\n     * Handles binary messages received from the WebSocket connection.\n     * @param data - The binary data.\n     */\n    handleBinaryMessage(data) {\n        this.emit(LiveTTSEvents.Audio, data);\n    }\n    /**\n     * Sends a text input message to the server.\n     *\n     * @param {string} text - The text to convert to speech.\n     */\n    sendText(text) {\n        this.send(JSON.stringify({\n            type: \"Speak\",\n            text,\n        }));\n    }\n    /**\n     * Requests the server flush the current buffer and return generated audio.\n     */\n    flush() {\n        this.send(JSON.stringify({\n            type: \"Flush\",\n        }));\n    }\n    /**\n     * Requests the server clear the current buffer.\n     */\n    clear() {\n        this.send(JSON.stringify({\n            type: \"Clear\",\n        }));\n    }\n    /**\n     * Requests the server close the connection.\n     */\n    requestClose() {\n        this.send(JSON.stringify({\n            type: \"Close\",\n        }));\n    }\n    /**\n     * Handles incoming messages from the WebSocket connection.\n     * @param event - The MessageEvent object representing the received message.\n     */\n    handleMessage(event) {\n        var _a, _b, _c, _d, _e, _f;\n        if (typeof event.data === \"string\") {\n            try {\n                const data = JSON.parse(event.data);\n                this.handleTextMessage(data);\n            }\n            catch (error) {\n                this.emit(LiveTTSEvents.Error, {\n                    event,\n                    message: \"Unable to parse `data` as JSON.\",\n                    error,\n                    url: (_a = this.conn) === null || _a === void 0 ? void 0 : _a.url,\n                    readyState: (_b = this.conn) === null || _b === void 0 ? void 0 : _b.readyState,\n                    data: ((_c = event.data) === null || _c === void 0 ? void 0 : _c.toString().substring(0, 200)) +\n                        (((_d = event.data) === null || _d === void 0 ? void 0 : _d.toString().length) > 200 ? \"...\" : \"\"),\n                });\n            }\n        }\n        else if (event.data instanceof Blob) {\n            event.data.arrayBuffer().then((buffer) => {\n                this.handleBinaryMessage(Buffer.from(buffer));\n            });\n        }\n        else if (event.data instanceof ArrayBuffer) {\n            this.handleBinaryMessage(Buffer.from(event.data));\n        }\n        else if (Buffer.isBuffer(event.data)) {\n            this.handleBinaryMessage(event.data);\n        }\n        else {\n            console.log(\"Received unknown data type\", event.data);\n            this.emit(LiveTTSEvents.Error, {\n                event,\n                message: \"Received unknown data type.\",\n                url: (_e = this.conn) === null || _e === void 0 ? void 0 : _e.url,\n                readyState: (_f = this.conn) === null || _f === void 0 ? void 0 : _f.readyState,\n                dataType: typeof event.data,\n            });\n        }\n    }\n}\n//# sourceMappingURL=SpeakLiveClient.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DeepgramError, DeepgramUnknownError } from \"../lib/errors\";\nimport { isTextSource } from \"../lib/helpers\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n/**\n * Provides a client for interacting with the Deepgram Text-to-Speech API.\n */\nexport class SpeakRestClient extends AbstractRestClient {\n    constructor() {\n        super(...arguments);\n        this.namespace = \"speak\";\n    }\n    /**\n     * Sends a request to the Deepgram Text-to-Speech API to generate audio from the provided text source.\n     *\n     * @param source - The text source to be converted to audio.\n     * @param options - Optional configuration options for the text-to-speech request.\n     * @param endpoint - The API endpoint to use for the request. Defaults to \":version/speak\".\n     * @returns A promise that resolves to the SpeakRestClient instance, which can be used to retrieve the response headers and body.\n     * @throws {DeepgramError} If the text source type is unknown.\n     * @throws {DeepgramUnknownError} If the request was made before a previous request completed.\n     * @see https://developers.deepgram.com/reference/text-to-speech-api\n     */\n    request(source, options, endpoint = \":version/speak\") {\n        return __awaiter(this, void 0, void 0, function* () {\n            let body;\n            if (isTextSource(source)) {\n                body = JSON.stringify(source);\n            }\n            else {\n                throw new DeepgramError(\"Unknown transcription source type\");\n            }\n            const requestUrl = this.getRequestUrl(endpoint, {}, Object.assign({ model: \"aura-2-thalia-en\" }, options));\n            this.result = yield this.post(requestUrl, body, {\n                headers: { Accept: \"audio/*\", \"Content-Type\": \"application/json\" },\n            });\n            return this;\n        });\n    }\n    /**\n     * Retrieves the response body as a readable stream.\n     *\n     * @returns A promise that resolves to the response body as a readable stream, or `null` if no request has been made yet.\n     * @throws {DeepgramUnknownError} If a request has not been made yet.\n     */\n    getStream() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.result)\n                throw new DeepgramUnknownError(\"Tried to get stream before making request\", \"\");\n            return this.result.body;\n        });\n    }\n    /**\n     * Retrieves the response headers from the previous request.\n     *\n     * @returns A promise that resolves to the response headers, or throws a `DeepgramUnknownError` if no request has been made yet.\n     */\n    getHeaders() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.result)\n                throw new DeepgramUnknownError(\"Tried to get headers before making request\", \"\");\n            return this.result.headers;\n        });\n    }\n}\n//# sourceMappingURL=SpeakRestClient.js.map","import { AbstractClient } from \"./AbstractClient\";\nimport { SpeakLiveClient } from \"./SpeakLiveClient\";\nimport { SpeakRestClient } from \"./SpeakRestClient\";\n/**\n * The `SpeakClient` class extends the `AbstractClient` class and provides access to the \"speak\" namespace.\n * It exposes two methods:\n *\n * 1. `request()`: Returns a `SpeakRestClient` instance for interacting with the rest speak API.\n * 2. `live(ttsOptions: SpeakSchema = {}, endpoint = \":version/speak\")`: Returns a `SpeakLiveClient` instance for interacting with the live speak API, with the provided TTS options and endpoint.\n */\nexport class SpeakClient extends AbstractClient {\n    constructor() {\n        super(...arguments);\n        this.namespace = \"speak\";\n    }\n    /**\n     * Returns a `SpeakRestClient` instance for interacting with the rest speak API.\n     */\n    request(source, options, endpoint = \":version/speak\") {\n        const client = new SpeakRestClient(this.options);\n        return client.request(source, options, endpoint);\n    }\n    /**\n     * Returns a `SpeakLiveClient` instance for interacting with the live speak API, with the provided TTS options and endpoint.\n     * @param {SpeakSchema} [ttsOptions={}] - The TTS options to use for the live speak API.\n     * @param {string} [endpoint=\":version/speak\"] - The endpoint to use for the live speak API.\n     * @returns {SpeakLiveClient} - A `SpeakLiveClient` instance for interacting with the live speak API.\n     */\n    live(ttsOptions = {}, endpoint = \":version/speak\") {\n        return new SpeakLiveClient(this.options, ttsOptions, endpoint);\n    }\n}\n//# sourceMappingURL=SpeakClient.js.map","import { DeepgramVersionError } from \"./lib/errors\";\nimport { AbstractClient, AgentLiveClient, AuthRestClient, ListenClient, ManageClient, ReadClient, SelfHostedRestClient, SpeakClient, ModelsRestClient, } from \"./packages\";\n/**\n * The DeepgramClient class provides access to various Deepgram API clients, including ListenClient, ManageClient, SelfHostedRestClient, ReadClient, and SpeakClient.\n *\n * @see https://github.com/deepgram/deepgram-js-sdk\n */\nexport default class DeepgramClient extends AbstractClient {\n    /**\n     * Returns a new instance of the AuthRestClient, which provides access to the Deepgram API's temporary token endpoints.\n     *\n     * @returns {AuthRestClient} A new instance of the AuthRestClient.\n     * @see https://developers.deepgram.com/reference/token-based-auth-api/grant-token\n     */\n    get auth() {\n        return new AuthRestClient(this.options);\n    }\n    /**\n     * Returns a new instance of the ListenClient, which provides access to the Deepgram API's listening functionality.\n     *\n     * @returns {ListenClient} A new instance of the ListenClient.\n     */\n    get listen() {\n        return new ListenClient(this.options);\n    }\n    /**\n     * Returns a new instance of the ManageClient, which provides access to the Deepgram API's management functionality.\n     *\n     * @returns {ManageClient} A new instance of the ManageClient.\n     */\n    get manage() {\n        return new ManageClient(this.options);\n    }\n    /**\n     * Returns a new instance of the ModelsRestClient, which provides access to the Deepgram API's model functionality.\n     *\n     * @returns {ModelsRestClient} A new instance of the ModelsRestClient.\n     */\n    get models() {\n        return new ModelsRestClient(this.options);\n    }\n    /**\n     * Returns a new instance of the SelfHostedRestClient, which provides access to the Deepgram API's self-hosted functionality.\n     *\n     * @returns {OnPremClient} A new instance of the SelfHostedRestClient named as OnPremClient.\n     * @deprecated use selfhosted() instead\n     */\n    get onprem() {\n        return this.selfhosted;\n    }\n    /**\n     * Returns a new instance of the SelfHostedRestClient, which provides access to the Deepgram API's self-hosted functionality.\n     *\n     * @returns {SelfHostedRestClient} A new instance of the SelfHostedRestClient.\n     */\n    get selfhosted() {\n        return new SelfHostedRestClient(this.options);\n    }\n    /**\n     * Returns a new instance of the ReadClient, which provides access to the Deepgram API's reading functionality.\n     *\n     * @returns {ReadClient} A new instance of the ReadClient.\n     */\n    get read() {\n        return new ReadClient(this.options);\n    }\n    /**\n     * Returns a new instance of the SpeakClient, which provides access to the Deepgram API's speaking functionality.\n     *\n     * @returns {SpeakClient} A new instance of the SpeakClient.\n     */\n    get speak() {\n        return new SpeakClient(this.options);\n    }\n    /**\n     * Returns a new instance of the AgentLiveClient, which provides access to Deepgram's Voice Agent API.\n     *\n     * @returns {AgentLiveClient} A new instance of the AgentLiveClient.\n     * @beta\n     */\n    agent(endpoint = \"/:version/agent/converse\") {\n        return new AgentLiveClient(this.options, endpoint);\n    }\n    /**\n     * @deprecated\n     * @see https://dpgr.am/js-v3\n     */\n    get transcription() {\n        throw new DeepgramVersionError();\n    }\n    /**\n     * @deprecated\n     * @see https://dpgr.am/js-v3\n     */\n    get projects() {\n        throw new DeepgramVersionError();\n    }\n    /**\n     * @deprecated\n     * @see https://dpgr.am/js-v3\n     */\n    get keys() {\n        throw new DeepgramVersionError();\n    }\n    /**\n     * @deprecated\n     * @see https://dpgr.am/js-v3\n     */\n    get members() {\n        throw new DeepgramVersionError();\n    }\n    /**\n     * @deprecated\n     * @see https://dpgr.am/js-v3\n     */\n    get scopes() {\n        throw new DeepgramVersionError();\n    }\n    /**\n     * @deprecated\n     * @see https://dpgr.am/js-v3\n     */\n    get invitation() {\n        throw new DeepgramVersionError();\n    }\n    /**\n     * @deprecated\n     * @see https://dpgr.am/js-v3\n     */\n    get usage() {\n        throw new DeepgramVersionError();\n    }\n    /**\n     * @deprecated\n     * @see https://dpgr.am/js-v3\n     */\n    get billing() {\n        throw new DeepgramVersionError();\n    }\n}\n//# sourceMappingURL=DeepgramClient.js.map","import { DeepgramVersionError } from \"./lib/errors\";\nimport DeepgramClient from \"./DeepgramClient\";\n/**\n * This class is deprecated and should not be used. It throws a `DeepgramVersionError` when instantiated.\n *\n * @deprecated\n * @see https://dpgr.am/js-v3\n */\nclass Deepgram {\n    constructor(apiKey, apiUrl, requireSSL) {\n        this.apiKey = apiKey;\n        this.apiUrl = apiUrl;\n        this.requireSSL = requireSSL;\n        throw new DeepgramVersionError();\n    }\n}\nfunction createClient(keyOrOptions, options) {\n    let resolvedOptions = {};\n    if (typeof keyOrOptions === \"string\" || typeof keyOrOptions === \"function\") {\n        if (typeof options === \"object\") {\n            resolvedOptions = options;\n        }\n        resolvedOptions.key = keyOrOptions;\n    }\n    else if (typeof keyOrOptions === \"object\") {\n        resolvedOptions = keyOrOptions;\n    }\n    return new DeepgramClient(resolvedOptions);\n}\nexport { createClient, DeepgramClient, Deepgram };\n/**\n * Helpful exports.\n */\nexport * from \"./packages\";\nexport * from \"./lib/types\";\nexport * from \"./lib/enums\";\nexport * from \"./lib/constants\";\nexport * from \"./lib/errors\";\nexport * from \"./lib/helpers\";\n/**\n * Captions. These will be tree-shaken if unused.\n *\n * @see https://github.com/deepgram/deepgram-node-captions\n *\n * import/export declarations don't do anything but set up an alias to the\n * exported variable, they do not count as a \"use\". Given their semantics,\n * they are tracked specially by any bundler and will not adversely affect\n * tree-shaking.\n */\nexport { webvtt, srt } from \"@deepgram/captions\";\n//# sourceMappingURL=index.js.map","/**\n * Deepgram SDK Service\n * HIPAA-compliant speech-to-text using official Deepgram JavaScript SDK\n * Replaces Azure Speech Services due to quota/credit issues\n * Medical-grade transcription with 83% cost savings over AWS Transcribe Medical\n */\n\nimport { createClient, LiveTranscriptionEvents } from '@deepgram/sdk';\nimport { logInfo, logError, logDebug, logWarn } from './logger.service';\nimport type { TranscriptionResult, SpeechServiceInterface } from './speechServiceRouter.service';\n\nexport interface DeepgramSDKConfig {\n  apiKey: string;\n  model: string;\n  language: string;\n  tier: string;\n  encoding: string;\n  sampleRate: number;\n  channels: number;\n}\n\nexport interface DeepgramTranscriptResult {\n  transcript: string;\n  confidence: number;\n  words: Array<{\n    word: string;\n    start: number;\n    end: number;\n    confidence: number;\n    speaker?: number;\n  }>;\n  speaker?: number;\n  is_final: boolean;\n  metadata?: {\n    duration: number;\n    model_version: string;\n    language: string;\n  };\n}\n\nclass DeepgramSDKService implements SpeechServiceInterface {\n  private deepgram: any;\n  private config: DeepgramSDKConfig;\n  private connection: any = null;\n  private isRecording = false;\n  private currentTranscript = '';\n  private onTranscriptCallback: ((result: TranscriptionResult) => void) | null = null;\n  private onErrorCallback: ((error: Error) => void) | null = null;\n  private mediaRecorder: MediaRecorder | null = null;\n  private audioStream: MediaStream | null = null;\n\n  constructor() {\n    this.config = {\n      apiKey: import.meta.env.VITE_DEEPGRAM_API_KEY,\n      model: import.meta.env.VITE_DEEPGRAM_MODEL || 'nova-2-medical',\n      language: import.meta.env.VITE_DEEPGRAM_LANGUAGE || 'en-US',\n      tier: import.meta.env.VITE_DEEPGRAM_TIER || 'enhanced',\n      encoding: 'linear16',\n      sampleRate: 16000,\n      channels: 1\n    };\n\n    if (!this.config.apiKey) {\n      throw new Error('VITE_DEEPGRAM_API_KEY environment variable is required');\n    }\n\n    // Initialize Deepgram client\n    this.deepgram = createClient(this.config.apiKey);\n\n    logInfo('deepgramSDK', `Initialized with model: ${this.config.model}`);\n  }\n\n  /**\n   * Check if Deepgram is configured and available\n   */\n  isConfigured(): boolean {\n    try {\n      return !!this.config.apiKey && !!this.deepgram;\n    } catch (error) {\n      logError('deepgramSDK', `Configuration check failed: ${error}`);\n      return false;\n    }\n  }\n\n  /**\n   * Start transcription (main method)\n   */\n  async startTranscription(\n    mode: 'CONVERSATION' | 'DICTATION',\n    onTranscript: (result: TranscriptionResult) => void,\n    onError: (error: Error) => void,\n    specialty?: string\n  ): Promise<void> {\n    logInfo('deepgramSDK', `Starting ${mode} transcription with medical model`);\n\n    this.onTranscriptCallback = onTranscript;\n    this.onErrorCallback = onError;\n\n    try {\n      // Get microphone access\n      this.audioStream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: this.config.sampleRate,\n          channelCount: this.config.channels,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n\n      // Configure Deepgram connection\n      const liveConfig = {\n        model: this.config.model,\n        language: this.config.language,\n        encoding: this.config.encoding,\n        sample_rate: this.config.sampleRate,\n        channels: this.config.channels,\n        // Medical-specific parameters\n        punctuate: true,\n        profanity_filter: false, // Medical terms might be flagged\n        redact: false, // Keep all medical information\n        diarize: mode === 'CONVERSATION', // Enable speaker diarization for conversations\n        smart_format: true, // Format numbers, dates, times properly\n        utterances: true, // Get utterance-level results\n        endpointing: 300, // Wait 300ms for end of speech\n        // Custom vocabulary boost for medical terms\n        keywords: ['medical:2', 'diagnosis:2', 'prescription:2', 'medication:2', 'symptoms:2', 'treatment:2', 'blood pressure:3', 'diabetes:3', 'insulin:3'],\n        // Enhanced medical model settings\n        tier: this.config.tier,\n        interim_results: true,\n        vad_events: true\n      };\n\n      // Create live transcription connection\n      this.connection = this.deepgram.listen.live(liveConfig);\n\n      // Set up event listeners\n      this.connection.on(LiveTranscriptionEvents.Open, () => {\n        logInfo('deepgramSDK', 'Deepgram connection opened successfully');\n        this.isRecording = true;\n      });\n\n      this.connection.on(LiveTranscriptionEvents.Transcript, (data: any) => {\n        this.handleTranscriptResult(data, mode);\n      });\n\n      this.connection.on(LiveTranscriptionEvents.Error, (error: any) => {\n        logError('deepgramSDK', `Deepgram error: ${error}`);\n        this.handleError(new Error(`Deepgram error: ${error.message || error}`));\n      });\n\n      this.connection.on(LiveTranscriptionEvents.Close, () => {\n        logInfo('deepgramSDK', 'Deepgram connection closed');\n        this.isRecording = false;\n      });\n\n      // Create MediaRecorder to send audio data\n      this.mediaRecorder = new MediaRecorder(this.audioStream, {\n        mimeType: 'audio/webm;codecs=opus'\n      });\n\n      this.mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0 && this.connection && this.isRecording) {\n          this.connection.send(event.data);\n        }\n      };\n\n      this.mediaRecorder.onerror = (error) => {\n        logError('deepgramSDK', `MediaRecorder error: ${error}`);\n        this.handleError(new Error('MediaRecorder error'));\n      };\n\n      // Start recording with frequent data chunks for real-time processing\n      this.mediaRecorder.start(100);\n\n      logInfo('deepgramSDK', `${mode} transcription started successfully`);\n\n    } catch (error) {\n      logError('deepgramSDK', `Failed to start transcription: ${error}`);\n      this.handleError(new Error(`Failed to start Deepgram transcription: ${error}`));\n    }\n  }\n\n  /**\n   * Start dictation mode\n   */\n  async startDictation(\n    onTranscript: (result: any) => void,\n    onError: (error: Error) => void,\n    specialty?: string\n  ): Promise<void> {\n    return this.startTranscription('DICTATION', onTranscript, onError, specialty);\n  }\n\n  /**\n   * Start conversation mode\n   */\n  async startConversation(\n    onTranscript: (result: any) => void,\n    onError: (error: Error) => void,\n    specialty?: string\n  ): Promise<void> {\n    return this.startTranscription('CONVERSATION', onTranscript, onError, specialty);\n  }\n\n  /**\n   * Start recording (simple interface for backward compatibility)\n   */\n  async startRecording(\n    onTranscript: (text: string, isFinal: boolean) => void,\n    onError: (error: string) => void\n  ): Promise<boolean> {\n    try {\n      await this.startTranscription(\n        'DICTATION',\n        (result) => onTranscript(result.transcript, !result.isPartial),\n        (error) => onError(error.message)\n      );\n      return true;\n    } catch (error) {\n      onError(`Failed to start recording: ${error}`);\n      return false;\n    }\n  }\n\n  /**\n   * Stop transcription\n   */\n  stop(): void {\n    logInfo('deepgramSDK', 'Stopping transcription');\n\n    this.isRecording = false;\n\n    // Stop MediaRecorder\n    if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\n      this.mediaRecorder.stop();\n    }\n\n    // Stop audio stream\n    if (this.audioStream) {\n      this.audioStream.getTracks().forEach(track => track.stop());\n      this.audioStream = null;\n    }\n\n    // Close Deepgram connection\n    if (this.connection) {\n      this.connection.finish();\n      this.connection = null;\n    }\n\n    // Clear callbacks\n    this.onTranscriptCallback = null;\n    this.onErrorCallback = null;\n    this.mediaRecorder = null;\n\n    logInfo('deepgramSDK', 'Transcription stopped successfully');\n  }\n\n  /**\n   * Stop recording (simple interface)\n   */\n  stopRecording(): string {\n    this.stop();\n    return this.currentTranscript;\n  }\n\n  /**\n   * Get current transcript\n   */\n  getCurrentTranscript(): string {\n    return this.currentTranscript;\n  }\n\n  /**\n   * Handle transcript results from Deepgram\n   */\n  private handleTranscriptResult(data: any, mode: 'CONVERSATION' | 'DICTATION'): void {\n    try {\n      const transcript = data.channel?.alternatives?.[0];\n      if (!transcript || !transcript.transcript.trim()) {\n        return;\n      }\n\n      const isFinal = data.is_final === true;\n      const confidence = transcript.confidence || 0;\n\n      // Extract speaker information for conversations\n      let speaker: string | undefined;\n      if (mode === 'CONVERSATION' && transcript.words?.[0]?.speaker !== undefined) {\n        const speakerNum = transcript.words[0].speaker;\n        speaker = speakerNum === 0 ? 'CLINICIAN' : 'PATIENT';\n      }\n\n      // Create standardized result\n      const result: TranscriptionResult = {\n        transcript: transcript.transcript,\n        isPartial: !isFinal,\n        confidence,\n        timestamp: new Date().toISOString(),\n        speaker\n      };\n\n      // Update current transcript for final results\n      if (isFinal) {\n        if (speaker) {\n          this.currentTranscript += `\\n[${speaker}]: ${transcript.transcript}`;\n        } else {\n          this.currentTranscript += ' ' + transcript.transcript;\n        }\n        this.currentTranscript = this.currentTranscript.trim();\n      }\n\n      // Send result to callback\n      if (this.onTranscriptCallback) {\n        this.onTranscriptCallback(result);\n      }\n\n      logDebug('deepgramSDK',\n        `Transcribed: \"${transcript.transcript}\" (final: ${isFinal}, confidence: ${confidence}, speaker: ${speaker || 'N/A'})`\n      );\n\n    } catch (error) {\n      logError('deepgramSDK', `Error processing transcript: ${error}`);\n      this.handleError(new Error(`Failed to process transcript: ${error}`));\n    }\n  }\n\n  /**\n   * Handle errors\n   */\n  private handleError(error: Error): void {\n    logError('deepgramSDK', `Error: ${error.message}`);\n\n    if (this.onErrorCallback) {\n      this.onErrorCallback(error);\n    }\n  }\n\n  /**\n   * Test Deepgram connection\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      // Test with a simple API call to verify credentials\n      const response = await fetch('https://api.deepgram.com/v1/projects', {\n        headers: {\n          'Authorization': `Token ${this.config.apiKey}`,\n        },\n      });\n\n      const isValid = response.ok;\n\n      if (isValid) {\n        logInfo('deepgramSDK', 'Connection test successful');\n      } else {\n        logError('deepgramSDK', `Connection test failed: ${response.status} ${response.statusText}`);\n      }\n\n      return isValid;\n    } catch (error) {\n      logError('deepgramSDK', `Connection test error: ${error}`);\n      return false;\n    }\n  }\n\n  /**\n   * Get service status\n   */\n  getStatus(): {\n    isRecording: boolean;\n    isConfigured: boolean;\n    currentTranscript: string;\n    provider: string;\n    model: string;\n  } {\n    return {\n      isRecording: this.isRecording,\n      isConfigured: this.isConfigured(),\n      currentTranscript: this.currentTranscript,\n      provider: 'deepgram-sdk',\n      model: this.config.model\n    };\n  }\n\n  /**\n   * Process pre-recorded audio file\n   */\n  async transcribeAudioFile(audioFile: File): Promise<DeepgramTranscriptResult> {\n    try {\n      logInfo('deepgramSDK', `Transcribing audio file: ${audioFile.name}`);\n\n      const response = await this.deepgram.listen.prerecorded.transcribeFile(\n        audioFile,\n        {\n          model: this.config.model,\n          language: this.config.language,\n          punctuate: true,\n          profanity_filter: false,\n          redact: false,\n          diarize: true,\n          smart_format: true,\n          keywords: ['medical:2', 'diagnosis:2', 'prescription:2', 'medication:2', 'symptoms:2', 'treatment:2']\n        }\n      );\n\n      const transcript = response.result.channels[0]?.alternatives[0];\n      if (!transcript) {\n        throw new Error('No transcription result received from Deepgram');\n      }\n\n      logInfo('deepgramSDK', `File transcription completed with confidence: ${transcript.confidence}`);\n\n      return {\n        transcript: transcript.transcript,\n        confidence: transcript.confidence,\n        words: transcript.words?.map(word => ({\n          word: word.word,\n          start: word.start,\n          end: word.end,\n          confidence: word.confidence,\n          speaker: word.speaker\n        })) || [],\n        is_final: true,\n        metadata: {\n          duration: response.result.metadata.duration,\n          model_version: this.config.model,\n          language: this.config.language\n        }\n      };\n\n    } catch (error) {\n      logError('deepgramSDK', `File transcription failed: ${error}`);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const deepgramSDKService = new DeepgramSDKService();","/**\n * Deepgram Speech-to-Text Service\n * Medical-grade transcription with 83% cost savings over AWS Transcribe Medical\n * HIPAA Compliant with BAA available\n */\n\nimport { logInfo, logError, logDebug, logWarn } from './logger.service';\n\nexport interface DeepgramConfig {\n  apiKey: string;\n  model: string;\n  language: string;\n  tier: string;\n  encoding: string;\n  sampleRate: number;\n  channels: number;\n}\n\nexport interface TranscriptionResult {\n  transcript: string;\n  confidence: number;\n  words: Array<{\n    word: string;\n    start: number;\n    end: number;\n    confidence: number;\n  }>;\n  speaker?: number;\n  is_final: boolean;\n  metadata?: {\n    duration: number;\n    model_version: string;\n    language: string;\n  };\n}\n\nexport interface DeepgramResponse {\n  channel: {\n    alternatives: Array<{\n      transcript: string;\n      confidence: number;\n      words: Array<{\n        word: string;\n        start: number;\n        end: number;\n        confidence: number;\n        speaker?: number;\n      }>;\n    }>;\n  };\n  metadata: {\n    transaction_key: string;\n    request_id: string;\n    sha256: string;\n    created: string;\n    duration: number;\n    channels: number;\n    models: string[];\n  };\n  is_final?: boolean;\n}\n\nclass DeepgramService {\n  private apiKey: string;\n  private config: DeepgramConfig;\n  private websocket: WebSocket | null = null;\n  private isConnected = false;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private transcriptionCallback: ((result: TranscriptionResult) => void) | null = null;\n\n  constructor() {\n    this.apiKey = import.meta.env.VITE_DEEPGRAM_API_KEY;\n\n    if (!this.apiKey) {\n      throw new Error('VITE_DEEPGRAM_API_KEY environment variable is required');\n    }\n\n    this.config = {\n      apiKey: this.apiKey,\n      model: import.meta.env.VITE_DEEPGRAM_MODEL || 'medical',\n      language: import.meta.env.VITE_DEEPGRAM_LANGUAGE || 'en-US',\n      tier: import.meta.env.VITE_DEEPGRAM_TIER || 'enhanced',\n      encoding: 'linear16',\n      sampleRate: 16000,\n      channels: 1\n    };\n\n    logInfo('deepgram', `Initialized with model: ${this.config.model}`);\n  }\n\n  /**\n   * Start real-time transcription session\n   */\n  async startRealTimeTranscription(\n    onTranscription: (result: TranscriptionResult) => void,\n    onError?: (error: Error) => void\n  ): Promise<void> {\n    try {\n      this.transcriptionCallback = onTranscription;\n\n      const wsUrl = this.buildWebSocketUrl();\n      logDebug('deepgram', `Connecting to Deepgram WebSocket: ${wsUrl}`);\n\n      this.websocket = new WebSocket(wsUrl);\n\n      this.websocket.onopen = () => {\n        this.isConnected = true;\n        this.reconnectAttempts = 0;\n        logInfo('deepgram', 'Real-time transcription session started');\n      };\n\n      this.websocket.onmessage = (event) => {\n        try {\n          const response: DeepgramResponse = JSON.parse(event.data);\n\n          if (response.channel?.alternatives?.[0]) {\n            const alternative = response.channel.alternatives[0];\n\n            const result: TranscriptionResult = {\n              transcript: alternative.transcript,\n              confidence: alternative.confidence,\n              words: alternative.words?.map(word => ({\n                word: word.word,\n                start: word.start,\n                end: word.end,\n                confidence: word.confidence\n              })) || [],\n              speaker: alternative.words?.[0]?.speaker,\n              is_final: response.is_final !== false,\n              metadata: response.metadata ? {\n                duration: response.metadata.duration,\n                model_version: response.metadata.models?.[0] || 'medical',\n                language: this.config.language\n              } : undefined\n            };\n\n            if (result.transcript.trim()) {\n              logDebug('deepgram', `Transcribed: \"${result.transcript}\" (confidence: ${result.confidence})`);\n              this.transcriptionCallback?.(result);\n            }\n          }\n        } catch (parseError) {\n          logError('deepgram', `Failed to parse WebSocket message: ${parseError}`);\n        }\n      };\n\n      this.websocket.onerror = (error) => {\n        logError('deepgram', `WebSocket error: ${error}`);\n        onError?.(new Error('Deepgram WebSocket error'));\n      };\n\n      this.websocket.onclose = (event) => {\n        this.isConnected = false;\n        logWarn('deepgram', `WebSocket closed: ${event.code} - ${event.reason}`);\n\n        // Auto-reconnect on unexpected close\n        if (event.code !== 1000 && this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.attemptReconnect(onTranscription, onError);\n        }\n      };\n\n    } catch (error) {\n      logError('deepgram', `Failed to start real-time transcription: ${error}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Send audio data to Deepgram for transcription\n   */\n  sendAudioData(audioData: ArrayBuffer | Blob): void {\n    if (!this.isConnected || !this.websocket) {\n      logWarn('deepgram', 'Cannot send audio - WebSocket not connected');\n      return;\n    }\n\n    try {\n      if (audioData instanceof Blob) {\n        // Convert Blob to ArrayBuffer\n        audioData.arrayBuffer().then(buffer => {\n          this.websocket?.send(buffer);\n        });\n      } else {\n        this.websocket.send(audioData);\n      }\n    } catch (error) {\n      logError('deepgram', `Failed to send audio data: ${error}`);\n    }\n  }\n\n  /**\n   * Stop real-time transcription\n   */\n  stopRealTimeTranscription(): void {\n    if (this.websocket) {\n      // Send close frame to signal end of audio\n      if (this.isConnected) {\n        this.websocket.send(JSON.stringify({ type: 'CloseStream' }));\n      }\n\n      this.websocket.close(1000, 'Session ended by user');\n      this.websocket = null;\n    }\n\n    this.isConnected = false;\n    this.transcriptionCallback = null;\n    logInfo('deepgram', 'Real-time transcription session stopped');\n  }\n\n  /**\n   * Process pre-recorded audio file\n   */\n  async transcribeAudioFile(audioFile: File): Promise<TranscriptionResult> {\n    try {\n      logInfo('deepgram', `Transcribing audio file: ${audioFile.name}`);\n\n      const formData = new FormData();\n      formData.append('audio', audioFile);\n\n      const response = await fetch('https://api.deepgram.com/v1/listen', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Token ${this.apiKey}`,\n        },\n        body: formData,\n        // Add query parameters for medical model\n        // URL will be built with parameters\n      });\n\n      if (!response.ok) {\n        throw new Error(`Deepgram API error: ${response.status} ${response.statusText}`);\n      }\n\n      const result: DeepgramResponse = await response.json();\n\n      if (!result.channel?.alternatives?.[0]) {\n        throw new Error('No transcription result received from Deepgram');\n      }\n\n      const alternative = result.channel.alternatives[0];\n\n      logInfo('deepgram', `File transcription completed with confidence: ${alternative.confidence}`);\n\n      return {\n        transcript: alternative.transcript,\n        confidence: alternative.confidence,\n        words: alternative.words?.map(word => ({\n          word: word.word,\n          start: word.start,\n          end: word.end,\n          confidence: word.confidence\n        })) || [],\n        is_final: true,\n        metadata: {\n          duration: result.metadata.duration,\n          model_version: result.metadata.models?.[0] || 'medical',\n          language: this.config.language\n        }\n      };\n\n    } catch (error) {\n      logError('deepgram', `File transcription failed: ${error}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Build WebSocket URL with medical model parameters\n   */\n  private buildWebSocketUrl(): string {\n    const baseUrl = 'wss://api.deepgram.com/v1/listen';\n    const params = new URLSearchParams({\n      model: this.config.model,\n      language: this.config.language,\n      tier: this.config.tier,\n      encoding: this.config.encoding,\n      sample_rate: this.config.sampleRate.toString(),\n      channels: this.config.channels.toString(),\n      // Medical-specific parameters\n      punctuate: 'true',\n      profanity_filter: 'false', // Medical terms might be flagged\n      redact: 'false', // Keep all medical information\n      diarize: 'true', // Enable speaker diarization for doctor-patient conversations\n      smart_format: 'true', // Format numbers, dates, times properly\n      utterances: 'true', // Get utterance-level results\n      endpointing: '300', // Wait 300ms for end of speech\n      // Custom vocabulary for medical terms\n      keywords: 'medical:2,diagnosis:2,prescription:2,medication:2,symptoms:2,treatment:2'\n    });\n\n    return `${baseUrl}?${params.toString()}`;\n  }\n\n  /**\n   * Attempt to reconnect WebSocket\n   */\n  private async attemptReconnect(\n    onTranscription: (result: TranscriptionResult) => void,\n    onError?: (error: Error) => void\n  ): Promise<void> {\n    this.reconnectAttempts++;\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 10000);\n\n    logWarn('deepgram', `Attempting reconnect ${this.reconnectAttempts}/${this.maxReconnectAttempts} in ${delay}ms`);\n\n    setTimeout(() => {\n      this.startRealTimeTranscription(onTranscription, onError);\n    }, delay);\n  }\n\n  /**\n   * Get current connection status\n   */\n  getConnectionStatus(): {\n    isConnected: boolean;\n    reconnectAttempts: number;\n    model: string;\n    language: string;\n  } {\n    return {\n      isConnected: this.isConnected,\n      reconnectAttempts: this.reconnectAttempts,\n      model: this.config.model,\n      language: this.config.language\n    };\n  }\n\n  /**\n   * Test Deepgram connection\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      const response = await fetch('https://api.deepgram.com/v1/projects', {\n        headers: {\n          'Authorization': `Token ${this.apiKey}`,\n        },\n      });\n\n      const isValid = response.ok;\n\n      if (isValid) {\n        logInfo('deepgram', 'Connection test successful');\n      } else {\n        logError('deepgram', `Connection test failed: ${response.status}`);\n      }\n\n      return isValid;\n    } catch (error) {\n      logError('deepgram', `Connection test error: ${error}`);\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const deepgramService = new DeepgramService();","/**\n * Deepgram Adapter Service\n * Adapts Deepgram service to match existing speech service interface\n * Provides seamless integration with existing audio capture pipeline\n */\n\nimport { deepgramService, type TranscriptionResult as DeepgramTranscriptionResult } from './deepgram.service';\nimport { logInfo, logError, logDebug, logWarn } from './logger.service';\nimport type { TranscriptionResult, SpeechServiceInterface } from './speechServiceRouter.service';\n\nexport class DeepgramAdapter implements SpeechServiceInterface {\n  private isRecording = false;\n  private currentTranscript = '';\n  private onTranscriptCallback: ((result: TranscriptionResult) => void) | null = null;\n  private onErrorCallback: ((error: Error) => void) | null = null;\n  private mediaRecorder: MediaRecorder | null = null;\n  private audioStream: MediaStream | null = null;\n\n  constructor() {\n    logInfo('deepgramAdapter', 'Deepgram adapter initialized');\n  }\n\n  /**\n   * Check if Deepgram is configured and available\n   */\n  isConfigured(): boolean {\n    try {\n      const apiKey = import.meta.env.VITE_DEEPGRAM_API_KEY;\n      return !!apiKey;\n    } catch (error) {\n      logError('deepgramAdapter', `Configuration check failed: ${error}`);\n      return false;\n    }\n  }\n\n  /**\n   * Start transcription (generic method)\n   */\n  async startTranscription(\n    mode: 'CONVERSATION' | 'DICTATION',\n    onTranscript: (result: TranscriptionResult) => void,\n    onError: (error: Error) => void,\n    specialty?: string\n  ): Promise<void> {\n    logInfo('deepgramAdapter', `Starting ${mode} transcription`);\n\n    this.onTranscriptCallback = onTranscript;\n    this.onErrorCallback = onError;\n\n    try {\n      // Get microphone access\n      this.audioStream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: 16000,\n          channelCount: 1,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n\n      // Start Deepgram real-time transcription\n      await deepgramService.startRealTimeTranscription(\n        this.handleDeepgramResult.bind(this),\n        this.handleDeepgramError.bind(this)\n      );\n\n      // Create MediaRecorder to send audio data to Deepgram\n      this.mediaRecorder = new MediaRecorder(this.audioStream, {\n        mimeType: 'audio/webm;codecs=opus'\n      });\n\n      this.mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          deepgramService.sendAudioData(event.data);\n        }\n      };\n\n      this.mediaRecorder.start(100); // Send audio chunks every 100ms\n      this.isRecording = true;\n\n      logInfo('deepgramAdapter', `${mode} transcription started successfully`);\n\n    } catch (error) {\n      logError('deepgramAdapter', `Failed to start transcription: ${error}`);\n      onError(new Error(`Deepgram transcription failed: ${error}`));\n    }\n  }\n\n  /**\n   * Start dictation mode\n   */\n  async startDictation(\n    onTranscript: (result: any) => void,\n    onError: (error: Error) => void,\n    specialty?: string\n  ): Promise<void> {\n    return this.startTranscription('DICTATION', onTranscript, onError, specialty);\n  }\n\n  /**\n   * Start conversation mode\n   */\n  async startConversation(\n    onTranscript: (result: any) => void,\n    onError: (error: Error) => void,\n    specialty?: string\n  ): Promise<void> {\n    return this.startTranscription('CONVERSATION', onTranscript, onError, specialty);\n  }\n\n  /**\n   * Start recording (simple interface)\n   */\n  async startRecording(\n    onTranscript: (text: string, isFinal: boolean) => void,\n    onError: (error: string) => void\n  ): Promise<boolean> {\n    try {\n      await this.startTranscription(\n        'DICTATION',\n        (result) => onTranscript(result.transcript, !result.isPartial),\n        (error) => onError(error.message)\n      );\n      return true;\n    } catch (error) {\n      onError(`Failed to start recording: ${error}`);\n      return false;\n    }\n  }\n\n  /**\n   * Stop transcription\n   */\n  stop(): void {\n    logInfo('deepgramAdapter', 'Stopping transcription');\n\n    this.isRecording = false;\n\n    if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\n      this.mediaRecorder.stop();\n    }\n\n    if (this.audioStream) {\n      this.audioStream.getTracks().forEach(track => track.stop());\n      this.audioStream = null;\n    }\n\n    deepgramService.stopRealTimeTranscription();\n\n    this.onTranscriptCallback = null;\n    this.onErrorCallback = null;\n    this.mediaRecorder = null;\n\n    logInfo('deepgramAdapter', 'Transcription stopped');\n  }\n\n  /**\n   * Stop recording (simple interface)\n   */\n  stopRecording(): string {\n    this.stop();\n    return this.currentTranscript;\n  }\n\n  /**\n   * Get current transcript\n   */\n  getCurrentTranscript(): string {\n    return this.currentTranscript;\n  }\n\n  /**\n   * Handle Deepgram transcription results\n   */\n  private handleDeepgramResult(result: DeepgramTranscriptionResult): void {\n    try {\n      // Convert Deepgram result to standard format\n      const transcriptionResult: TranscriptionResult = {\n        transcript: result.transcript,\n        isPartial: !result.is_final,\n        confidence: result.confidence,\n        timestamp: new Date().toISOString(),\n        speaker: result.speaker !== undefined ? `SPEAKER_${result.speaker}` : undefined\n      };\n\n      // Update current transcript\n      if (result.is_final) {\n        this.currentTranscript += ' ' + result.transcript;\n        this.currentTranscript = this.currentTranscript.trim();\n      }\n\n      // Call the callback\n      if (this.onTranscriptCallback) {\n        this.onTranscriptCallback(transcriptionResult);\n      }\n\n      logDebug('deepgramAdapter', `Transcribed: \"${result.transcript}\" (final: ${result.is_final})`);\n\n    } catch (error) {\n      logError('deepgramAdapter', `Error processing result: ${error}`);\n    }\n  }\n\n  /**\n   * Handle Deepgram errors\n   */\n  private handleDeepgramError(error: Error): void {\n    logError('deepgramAdapter', `Deepgram error: ${error.message}`);\n\n    if (this.onErrorCallback) {\n      this.onErrorCallback(error);\n    }\n  }\n\n  /**\n   * Get service status\n   */\n  getStatus(): {\n    isRecording: boolean;\n    isConfigured: boolean;\n    currentTranscript: string;\n    provider: string;\n  } {\n    return {\n      isRecording: this.isRecording,\n      isConfigured: this.isConfigured(),\n      currentTranscript: this.currentTranscript,\n      provider: 'deepgram'\n    };\n  }\n\n  /**\n   * Test Deepgram connection\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      return await deepgramService.testConnection();\n    } catch (error) {\n      logError('deepgramAdapter', `Connection test failed: ${error}`);\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const deepgramAdapter = new DeepgramAdapter();","/**\n * Azure Speech Services Configuration\n * HIPAA-compliant speech-to-text service configuration\n *\n * Replaces AWS Transcribe Medical in Azure migration\n */\n\nimport * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface AzureSpeechConfig {\n  subscriptionKey: string;\n  region: string;\n  language: string;\n  endpointId?: string;\n  enableDictation: boolean;\n  enableConversation: boolean;\n  enableMedicalPhrases: boolean;\n}\n\nexport class AzureSpeechConfigService {\n  private config: AzureSpeechConfig;\n  private speechConfig: SpeechSDK.SpeechConfig | null = null;\n\n  constructor() {\n    this.config = this.loadConfiguration();\n    this.initializeSpeechConfig();\n  }\n\n  private loadConfiguration(): AzureSpeechConfig {\n    const subscriptionKey = import.meta.env.VITE_AZURE_SPEECH_KEY;\n    const region = import.meta.env.VITE_AZURE_SPEECH_REGION || 'centralus';\n\n    if (!subscriptionKey) {\n      logWarn('azureSpeechConfig', 'Warning message', {});\n    }\n\n    return {\n      subscriptionKey,\n      region,\n      language: 'en-US',\n      enableDictation: true,\n      enableConversation: true,\n      enableMedicalPhrases: true,\n    };\n  }\n\n  private initializeSpeechConfig(): void {\n    if (!this.config.subscriptionKey) {\n      logWarn('azureSpeechConfig', 'Warning message', {});\n      return;\n    }\n\n    try {\n      this.speechConfig = SpeechSDK.SpeechConfig.fromSubscription(\n        this.config.subscriptionKey,\n        this.config.region\n      );\n\n      // Configure speech recognition\n      this.speechConfig.speechRecognitionLanguage = this.config.language;\n\n      // Enable medical phrase list for better medical terminology recognition\n      if (this.config.enableMedicalPhrases) {\n        // Note: Medical phrase lists will be configured per recognition session\n        logDebug('azureSpeechConfig', 'Debug message', {});\n      }\n\n      // Set output format to detailed for confidence scores\n      this.speechConfig.outputFormat = SpeechSDK.OutputFormat.Detailed;\n\n      // Enable profanity masking (medical compliance)\n      this.speechConfig.setProfanity(SpeechSDK.ProfanityOption.Masked);\n\n      logInfo('azureSpeechConfig', 'Info message', {});\n    } catch (error) {\n      logError('azureSpeechConfig', 'Error message', {});\n    }\n  }\n\n  isConfigured(): boolean {\n    return this.speechConfig !== null && !!this.config.subscriptionKey;\n  }\n\n  getSpeechConfig(): SpeechSDK.SpeechConfig | null {\n    return this.speechConfig;\n  }\n\n  getConfig(): AzureSpeechConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Create speech recognizer for dictation mode\n   */\n  createDictationRecognizer(\n    audioConfig?: SpeechSDK.AudioConfig\n  ): SpeechSDK.SpeechRecognizer | null {\n    if (!this.speechConfig) return null;\n\n    const recognizer = new SpeechSDK.SpeechRecognizer(this.speechConfig, audioConfig);\n\n    // Configure for medical dictation\n    this.configureMedicalPhrases(recognizer);\n\n    return recognizer;\n  }\n\n  /**\n   * Create conversation transcriber for multi-speaker scenarios\n   */\n  createConversationTranscriber(\n    audioConfig?: SpeechSDK.AudioConfig\n  ): SpeechSDK.ConversationTranscriber | null {\n    if (!this.speechConfig) return null;\n\n    const transcriber = new SpeechSDK.ConversationTranscriber(audioConfig);\n\n    // Configure for medical conversation\n    this.configureMedicalPhrases(transcriber as any);\n\n    return transcriber;\n  }\n\n  /**\n   * Configure medical phrases for better recognition\n   */\n  private configureMedicalPhrases(recognizer: SpeechSDK.SpeechRecognizer): void {\n    try {\n      // Create phrase list grammar for medical terminology\n      const phraseListGrammar = SpeechSDK.PhraseListGrammar.fromRecognizer(recognizer);\n\n      // Add common medical phrases\n      const medicalPhrases = [\n        // Vital signs\n        'blood pressure',\n        'heart rate',\n        'respiratory rate',\n        'temperature',\n        'oxygen saturation',\n        'systolic',\n        'diastolic',\n        'beats per minute',\n        'breaths per minute',\n\n        // Symptoms\n        'chest pain',\n        'shortness of breath',\n        'nausea',\n        'vomiting',\n        'dizziness',\n        'fatigue',\n        'headache',\n        'abdominal pain',\n        'back pain',\n        'joint pain',\n        'muscle pain',\n\n        // Medical conditions\n        'diabetes',\n        'hypertension',\n        'asthma',\n        'COPD',\n        'pneumonia',\n        'bronchitis',\n        'myocardial infarction',\n        'stroke',\n        'seizure',\n        'fracture',\n        'laceration',\n\n        // Medications\n        'milligrams',\n        'micrograms',\n        'units',\n        'twice daily',\n        'three times daily',\n        'as needed',\n        'before meals',\n        'after meals',\n        'at bedtime',\n\n        // Anatomy\n        'anterior',\n        'posterior',\n        'lateral',\n        'medial',\n        'proximal',\n        'distal',\n        'superior',\n        'inferior',\n        'cervical',\n        'thoracic',\n        'lumbar',\n        'sacral',\n\n        // Common medical abbreviations (spoken)\n        'B P',\n        'H R',\n        'R R',\n        'O two sat',\n        'E K G',\n        'C T scan',\n        'M R I',\n        'CBC',\n        'BMP',\n        'CMP',\n        'PT',\n        'PTT',\n        'INR',\n      ];\n\n      medicalPhrases.forEach(phrase => {\n        phraseListGrammar.addPhrase(phrase);\n      });\n\n      logDebug('azureSpeechConfig', 'Debug message', {});\n    } catch (error) {\n      logWarn('azureSpeechConfig', 'Warning message', {});\n    }\n  }\n\n  /**\n   * Get medical-optimized audio configuration\n   */\n  getOptimizedAudioConfig(): SpeechSDK.AudioConfig {\n    // Use default microphone with optimal settings for medical dictation\n    return SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<AzureSpeechConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    this.initializeSpeechConfig();\n  }\n\n  /**\n   * Test connection to Azure Speech Services\n   */\n  async testConnection(): Promise<boolean> {\n    if (!this.speechConfig) {\n      logError('azureSpeechConfig', 'Error message', {});\n      return false;\n    }\n\n    try {\n      const audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();\n      const recognizer = new SpeechSDK.SpeechRecognizer(this.speechConfig, audioConfig);\n\n      return new Promise(resolve => {\n        recognizer.sessionStarted = () => {\n          logInfo('azureSpeechConfig', 'Info message', {});\n          recognizer.close();\n          resolve(true);\n        };\n\n        recognizer.canceled = (s, e) => {\n          logError('azureSpeechConfig', 'Error message', {});\n          recognizer.close();\n          resolve(false);\n        };\n\n        // Start a brief recognition session to test connection\n        recognizer.startContinuousRecognitionAsync();\n\n        // Stop after 1 second\n        setTimeout(() => {\n          recognizer.stopContinuousRecognitionAsync();\n        }, 1000);\n      });\n    } catch (error) {\n      logError('azureSpeechConfig', 'Error message', {});\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const azureSpeechConfig = new AzureSpeechConfigService();\n","/**\n * Azure Speech Services - Fixed Streaming Service\n * HIPAA-compliant replacement for AWS Transcribe Medical\n * \n * This implementation provides real-time speech recognition with medical vocabulary\n * and speaker diarization capabilities using Azure Speech Services\n */\n\nimport * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport { azureSpeechConfig } from './azureSpeechConfig.service';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface TranscriptionResult {\n  transcript: string;\n  isPartial: boolean;\n  speaker?: 'CLINICIAN' | 'PATIENT' | string;\n  confidence?: number;\n  timestamp?: string;\n}\n\nclass AzureSpeechStreamingFixed {\n  private recognizer: SpeechSDK.SpeechRecognizer | null = null;\n  private conversationTranscriber: SpeechSDK.ConversationTranscriber | null = null;\n  private isRecording = false;\n  private transcriptCallback: ((result: TranscriptionResult) => void) | null = null;\n  private errorCallback: ((error: Error) => void) | null = null;\n  private currentMode: 'CONVERSATION' | 'DICTATION' = 'DICTATION';\n\n  constructor() {\n    logInfo('azureSpeechStreamingFixed', 'Info message', {});\n  }\n\n  isConfigured(): boolean {\n    return azureSpeechConfig.isConfigured();\n  }\n\n  /**\n   * Start transcription for either CONVERSATION or DICTATION mode\n   */\n  async startTranscription(\n    mode: 'CONVERSATION' | 'DICTATION',\n    onTranscript: (result: TranscriptionResult) => void,\n    onError: (error: Error) => void,\n    specialty?: string\n  ): Promise<void> {\n    if (!this.isConfigured()) {\n      logWarn('azureSpeechStreamingFixed', 'Warning message', {});\n      return this.startWebSpeechFallback(mode, onTranscript, onError);\n    }\n\n    this.currentMode = mode;\n    this.transcriptCallback = onTranscript;\n    this.errorCallback = onError;\n\n    try {\n      if (mode === 'CONVERSATION') {\n        await this.startConversationMode(specialty);\n      } else {\n        await this.startDictationMode(specialty);\n      }\n\n      this.isRecording = true;\n      logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n    } catch (error) {\n      logError('azureSpeechStreamingFixed', 'Error message', {});\n      logWarn('azureSpeechStreamingFixed', 'Warning message', {});\n      return this.startWebSpeechFallback(mode, onTranscript, onError);\n    }\n  }\n\n  /**\n   * Start dictation mode (single speaker)\n   */\n  private async startDictationMode(specialty?: string): Promise<void> {\n    const speechConfig = azureSpeechConfig.getSpeechConfig();\n    if (!speechConfig) throw new Error('Speech config not available');\n\n    const audioConfig = azureSpeechConfig.getOptimizedAudioConfig();\n    this.recognizer = azureSpeechConfig.createDictationRecognizer(audioConfig);\n\n    if (!this.recognizer) throw new Error('Failed to create recognizer');\n\n    // Configure recognition events\n    this.setupRecognizerEvents(this.recognizer);\n\n    // Start continuous recognition\n    this.recognizer.startContinuousRecognitionAsync(\n      () => {\n        logInfo('azureSpeechStreamingFixed', 'Info message', {});\n      },\n      (error) => {\n        logError('azureSpeechStreamingFixed', 'Error message', {});\n        if (this.errorCallback) {\n          this.errorCallback(new Error(`Failed to start dictation: ${error}`));\n        }\n      }\n    );\n  }\n\n  /**\n   * Start conversation mode (multi-speaker with diarization)\n   */\n  private async startConversationMode(specialty?: string): Promise<void> {\n    const audioConfig = azureSpeechConfig.getOptimizedAudioConfig();\n    this.conversationTranscriber = azureSpeechConfig.createConversationTranscriber(audioConfig);\n\n    if (!this.conversationTranscriber) throw new Error('Failed to create conversation transcriber');\n\n    // Configure conversation events\n    this.setupConversationEvents(this.conversationTranscriber);\n\n    // Start conversation transcription\n    this.conversationTranscriber.startTranscribingAsync(\n      () => {\n        logInfo('azureSpeechStreamingFixed', 'Info message', {});\n      },\n      (error) => {\n        logError('azureSpeechStreamingFixed', 'Error message', {});\n        if (this.errorCallback) {\n          this.errorCallback(new Error(`Failed to start conversation: ${error}`));\n        }\n      }\n    );\n  }\n\n  /**\n   * Setup recognizer events for dictation mode\n   */\n  private setupRecognizerEvents(recognizer: SpeechSDK.SpeechRecognizer): void {\n    // Interim results\n    recognizer.recognizing = (s, e) => {\n      if (e.result.reason === SpeechSDK.ResultReason.RecognizingSpeech && this.transcriptCallback) {\n        this.transcriptCallback({\n          transcript: e.result.text,\n          isPartial: true,\n          confidence: 0.8,\n          timestamp: new Date() });\n      }\n    };\n\n    // Final results\n    recognizer.recognized = (s, e) => {\n      if (e.result.reason === SpeechSDK.ResultReason.RecognizedSpeech && this.transcriptCallback) {\n        const confidence = this.extractConfidence(e.result);\n        this.transcriptCallback({\n          transcript: e.result.text,\n          isPartial: false,\n          confidence,\n          timestamp: new Date() });\n      } else if (e.result.reason === SpeechSDK.ResultReason.NoMatch) {\n        logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n      }\n    };\n\n    // Error handling\n    recognizer.canceled = (s, e) => {\n      if (e.reason === SpeechSDK.CancellationReason.Error) {\n        logError('azureSpeechStreamingFixed', 'Error message', {});\n        if (this.errorCallback) {\n          this.errorCallback(new Error(`Speech recognition error: ${e.errorDetails}`));\n        }\n      }\n    };\n\n    // Session events\n    recognizer.sessionStarted = (s, e) => {\n      logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n    };\n\n    recognizer.sessionStopped = (s, e) => {\n      logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n    };\n  }\n\n  /**\n   * Setup conversation transcriber events for multi-speaker mode\n   */\n  private setupConversationEvents(transcriber: SpeechSDK.ConversationTranscriber): void {\n    // Interim results\n    transcriber.transcribing = (s, e) => {\n      if (e.result.reason === SpeechSDK.ResultReason.RecognizingSpeech && this.transcriptCallback) {\n        const speaker = this.mapSpeakerLabel(e.result.speakerId);\n        this.transcriptCallback({\n          transcript: e.result.text,\n          isPartial: true,\n          speaker,\n          confidence: 0.8,\n          timestamp: new Date() });\n      }\n    };\n\n    // Final results\n    transcriber.transcribed = (s, e) => {\n      if (e.result.reason === SpeechSDK.ResultReason.RecognizedSpeech && this.transcriptCallback) {\n        const speaker = this.mapSpeakerLabel(e.result.speakerId);\n        const confidence = this.extractConfidence(e.result);\n        this.transcriptCallback({\n          transcript: e.result.text,\n          isPartial: false,\n          speaker,\n          confidence,\n          timestamp: new Date() });\n      }\n    };\n\n    // Error handling\n    transcriber.canceled = (s, e) => {\n      if (e.reason === SpeechSDK.CancellationReason.Error) {\n        logError('azureSpeechStreamingFixed', 'Error message', {});\n        if (this.errorCallback) {\n          this.errorCallback(new Error(`Conversation transcription error: ${e.errorDetails}`));\n        }\n      }\n    };\n\n    // Session events\n    transcriber.sessionStarted = (s, e) => {\n      logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n    };\n\n    transcriber.sessionStopped = (s, e) => {\n      logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n    };\n  }\n\n  /**\n   * Extract confidence score from recognition result\n   */\n  private extractConfidence(result: SpeechSDK.SpeechRecognitionResult): number {\n    try {\n      // Try to parse detailed result for confidence score\n      const detailedResult = JSON.parse(result.json);\n      const confidence = detailedResult?.NBest?.[0]?.Confidence;\n      return confidence ? parseFloat(confidence) : 0.95;\n    } catch {\n      // Default confidence if parsing fails\n      return 0.95;\n    }\n  }\n\n  /**\n   * Map Azure speaker ID to medical context\n   */\n  private mapSpeakerLabel(speakerId: string): 'CLINICIAN' | 'PATIENT' {\n    // Simple mapping - in production, this could be more sophisticated\n    // based on voice characteristics or user selection\n    if (speakerId === 'Guest-0' || speakerId === '0') {\n      return 'CLINICIAN';\n    } else {\n      return 'PATIENT';\n    }\n  }\n\n  /**\n   * Fallback to Web Speech API with improved implementation\n   */\n  private async startWebSpeechFallback(\n    mode: 'CONVERSATION' | 'DICTATION',\n    onTranscript: (result: TranscriptionResult) => void,\n    onError: (error: Error) => void\n  ): Promise<void> {\n    if (!('webkitSpeechRecognition' in window)) {\n      onError(new Error('Speech recognition not supported in this browser'));\n      return;\n    }\n\n    // Request microphone permission first\n    try {\n      logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      logInfo('azureSpeechStreamingFixed', 'Info message', {});\n      // Stop the stream as we don't need it for Web Speech API\n      stream.getTracks().forEach(track => track.stop());\n    } catch (error) {\n      logError('azureSpeechStreamingFixed', 'Error message', {});\n      onError(new Error('Microphone permission denied. Please allow microphone access and try again.'));\n      return;\n    }\n\n    const SpeechRecognition = (window as any).webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    \n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.maxAlternatives = 1;\n    recognition.lang = 'en-US';\n\n    // For conversation mode, simulate speaker detection\n    let currentSpeaker: string = mode === 'CONVERSATION' ? 'CLINICIAN' : '';\n    let lastSpeechTime = Date.now();\n    let wordCount = 0;\n\n    recognition.onresult = (event: any) => {\n      logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n      let finalTranscript = '';\n      let interimTranscript = '';\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n        \n        if (event.results[i].isFinal) {\n          finalTranscript += transcript;\n        } else {\n          interimTranscript += transcript;\n        }\n      }\n\n      // Simple speaker detection for conversation mode\n      if (mode === 'CONVERSATION') {\n        const now = Date.now();\n        const silenceDuration = now - lastSpeechTime;\n        \n        // Switch speaker after 3 seconds of silence or every 50 words\n        if (silenceDuration > 3000 || wordCount > 50) {\n          currentSpeaker = currentSpeaker === 'CLINICIAN' ? 'PATIENT' : 'CLINICIAN';\n          wordCount = 0;\n        }\n        \n        lastSpeechTime = now;\n        wordCount += (finalTranscript + interimTranscript).split(' ').length;\n      }\n\n      if (finalTranscript) {\n        logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n        onTranscript({\n          transcript: finalTranscript,\n          isPartial: false,\n          speaker: mode === 'CONVERSATION' ? currentSpeaker as 'CLINICIAN' | 'PATIENT' : undefined,\n          confidence: 0.95,\n          timestamp: new Date() });\n      } else if (interimTranscript) {\n        logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n        onTranscript({\n          transcript: interimTranscript,\n          isPartial: true,\n          speaker: mode === 'CONVERSATION' ? currentSpeaker as 'CLINICIAN' | 'PATIENT' : undefined,\n          confidence: 0.8,\n          timestamp: new Date() });\n      }\n    };\n\n    recognition.onerror = (event: any) => {\n      if (event.error !== 'no-speech' && event.error !== 'aborted') {\n        logError('azureSpeechStreamingFixed', 'Error message', {});\n        onError(new Error(`Speech recognition error: ${event.error}`));\n      }\n    };\n\n    recognition.onstart = () => {\n      logInfo('azureSpeechStreamingFixed', 'Info message', {});\n    };\n\n    recognition.onend = () => {\n      logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n      if (this.isRecording) {\n        logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n        try {\n          recognition.start();\n        } catch (e) {\n          logError('azureSpeechStreamingFixed', 'Error message', {});\n        }\n      }\n    };\n\n    try {\n      recognition.start();\n      this.isRecording = true;\n      \n      // Store recognition instance for cleanup\n      (this as any).recognition = recognition;\n      \n      logWarn('azureSpeechStreamingFixed', 'Warning message', {});\n      logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n    } catch (error) {\n      logError('azureSpeechStreamingFixed', 'Error message', {});\n      onError(error as Error);\n    }\n  }\n\n  /**\n   * Stop transcription\n   */\n  stop(): void {\n    logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n    this.isRecording = false;\n    \n    // Stop Azure Speech recognizer\n    if (this.recognizer) {\n      this.recognizer.stopContinuousRecognitionAsync(\n        () => {\n          logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n          this.recognizer?.close();\n          this.recognizer = null;\n        },\n        (error) => {\n          logError('azureSpeechStreamingFixed', 'Error message', {});\n          this.recognizer?.close();\n          this.recognizer = null;\n        }\n      );\n    }\n\n    // Stop Azure conversation transcriber\n    if (this.conversationTranscriber) {\n      this.conversationTranscriber.stopTranscribingAsync(\n        () => {\n          logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n          this.conversationTranscriber?.close();\n          this.conversationTranscriber = null;\n        },\n        (error) => {\n          logError('azureSpeechStreamingFixed', 'Error message', {});\n          this.conversationTranscriber?.close();\n          this.conversationTranscriber = null;\n        }\n      );\n    }\n\n    // Stop Web Speech API if used\n    if ((this as any).recognition) {\n      try {\n        (this as any).recognition.stop();\n        logDebug('azureSpeechStreamingFixed', 'Debug message', {});\n      } catch (e) {\n        // Ignore errors\n      }\n      (this as any).recognition = null;\n    }\n\n    logInfo('azureSpeechStreamingFixed', 'Info message', {});\n  }\n}\n\n// Export singleton instance\nexport const azureSpeechStreamingFixed = new AzureSpeechStreamingFixed();","/**\n * Azure Speech Services - DICTATION MODE (HIPAA-Compliant)\n * Replaces AWS Transcribe Medical for single-speaker dictation\n *\n * High-quality medical dictation with 99%+ accuracy on medical terms\n */\n\nimport * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport { azureSpeechConfig } from './azureSpeechConfig.service';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface DictationResult {\n  transcript: string;\n  isPartial: boolean;\n  confidence?: number;\n  timestamp?: string;\n}\n\nclass AzureSpeechDictationService {\n  private recognizer: SpeechSDK.SpeechRecognizer | null = null;\n  private isRecording = false;\n  private transcriptCallback: ((result: DictationResult) => void) | null = null;\n  private errorCallback: ((error: Error) => void) | null = null;\n  private cumulativeTranscript = '';\n\n  constructor() {\n    logInfo('azureSpeechDictation', 'Info message', {});\n  }\n\n  isConfigured(): boolean {\n    return azureSpeechConfig.isConfigured();\n  }\n\n  /**\n   * Start HIPAA-compliant medical dictation\n   */\n  async startDictation(\n    onTranscript: (result: DictationResult) => void,\n    onError: (error: Error) => void,\n    specialty?: string\n  ): Promise<void> {\n    if (!this.isConfigured()) {\n      onError(new Error('Azure Speech Services not configured. Please set Azure credentials.'));\n      return;\n    }\n\n    this.transcriptCallback = onTranscript;\n    this.errorCallback = onError;\n    this.cumulativeTranscript = '';\n\n    try {\n      // Get speech configuration\n      const speechConfig = azureSpeechConfig.getSpeechConfig();\n      if (!speechConfig) throw new Error('Speech config not available');\n\n      // Create audio configuration with optimal settings for dictation\n      const audioConfig = this.createOptimizedAudioConfig();\n\n      // Create recognizer with medical phrase enhancement\n      this.recognizer = azureSpeechConfig.createDictationRecognizer(audioConfig);\n      if (!this.recognizer) throw new Error('Failed to create recognizer');\n\n      // Configure dictation-specific settings\n      this.configureDictationSettings();\n\n      // Set up event handlers\n      this.setupDictationEvents();\n\n      // Start continuous recognition for dictation\n      this.recognizer.startContinuousRecognitionAsync(\n        () => {\n          this.isRecording = true;\n          logDebug('azureSpeechDictation', 'Debug message', {});\n        },\n        error => {\n          logError('azureSpeechDictation', 'Error message', {});\n          onError(new Error(`Failed to start dictation: ${error}`));\n          this.cleanup();\n        }\n      );\n    } catch (error) {\n      logError('azureSpeechDictation', 'Error message', {});\n      onError(error as Error);\n      this.cleanup();\n    }\n  }\n\n  /**\n   * Create optimized audio configuration for medical dictation\n   */\n  private createOptimizedAudioConfig(): SpeechSDK.AudioConfig {\n    // Use default microphone with optimal settings\n    return SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();\n  }\n\n  /**\n   * Configure dictation-specific settings\n   */\n  private configureDictationSettings(): void {\n    if (!this.recognizer) return;\n\n    // Enable dictation mode for better punctuation and formatting\n    const speechConfig = azureSpeechConfig.getSpeechConfig();\n    if (speechConfig) {\n      // Set dictation mode for better punctuation\n      speechConfig.enableDictation();\n\n      // Configure for medical context\n      speechConfig.setProperty(\n        SpeechSDK.PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs,\n        '5000' // Allow 5 seconds of initial silence\n      );\n\n      speechConfig.setProperty(\n        SpeechSDK.PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs,\n        '2000' // End recognition after 2 seconds of silence\n      );\n\n      // Enable detailed output for confidence scores\n      speechConfig.outputFormat = SpeechSDK.OutputFormat.Detailed;\n    }\n  }\n\n  /**\n   * Set up event handlers for dictation\n   */\n  private setupDictationEvents(): void {\n    if (!this.recognizer) return;\n\n    // Handle interim results\n    this.recognizer.recognizing = (s, e) => {\n      if (e.result.reason === SpeechSDK.ResultReason.RecognizingSpeech && this.transcriptCallback) {\n        const result: DictationResult = {\n          transcript: e.result.text,\n          isPartial: true,\n          confidence: 0.8,\n          timestamp: new Date().toISOString(),\n        };\n\n        logDebug('azureSpeechDictation', 'Debug message', {});\n        this.transcriptCallback(result);\n      }\n    };\n\n    // Handle final results\n    this.recognizer.recognized = (s, e) => {\n      if (e.result.reason === SpeechSDK.ResultReason.RecognizedSpeech && this.transcriptCallback) {\n        const confidence = this.extractConfidence(e.result);\n        const transcript = this.enhanceTextForMedical(e.result.text);\n\n        // Add to cumulative transcript\n        this.cumulativeTranscript += transcript + ' ';\n\n        const result: DictationResult = {\n          transcript,\n          isPartial: false,\n          confidence,\n          timestamp: new Date().toISOString(),\n        };\n\n        logInfo('azureSpeechDictation', 'Info message', {});\n        this.transcriptCallback(result);\n      } else if (e.result.reason === SpeechSDK.ResultReason.NoMatch) {\n        logDebug('azureSpeechDictation', 'Debug message', {});\n      }\n    };\n\n    // Handle cancellation and errors\n    this.recognizer.canceled = (s, e) => {\n      logDebug('azureSpeechDictation', 'Debug message', {});\n\n      if (e.reason === SpeechSDK.CancellationReason.Error) {\n        logError('azureSpeechDictation', 'Error message', {});\n        if (this.errorCallback) {\n          this.errorCallback(new Error(`Speech recognition error: ${e.errorDetails}`));\n        }\n      }\n    };\n\n    // Session events\n    this.recognizer.sessionStarted = (s, e) => {\n      logDebug('azureSpeechDictation', 'Debug message', {});\n    };\n\n    this.recognizer.sessionStopped = (s, e) => {\n      logDebug('azureSpeechDictation', 'Debug message', {});\n      this.isRecording = false;\n    };\n\n    // Speech detection events\n    this.recognizer.speechStartDetected = (s, e) => {\n      logDebug('azureSpeechDictation', 'Debug message', {});\n    };\n\n    this.recognizer.speechEndDetected = (s, e) => {\n      logDebug('azureSpeechDictation', 'Debug message', {});\n    };\n  }\n\n  /**\n   * Extract confidence score from recognition result\n   */\n  private extractConfidence(result: SpeechSDK.SpeechRecognitionResult): number {\n    try {\n      // Parse detailed result for confidence score\n      const detailedResult = JSON.parse(result.json);\n      const nBest = detailedResult?.NBest;\n\n      if (nBest && nBest.length > 0) {\n        const confidence = nBest[0]?.Confidence;\n        return confidence ? parseFloat(confidence) : 0.95;\n      }\n\n      return 0.95; // Default high confidence for medical dictation\n    } catch (error) {\n      logWarn('azureSpeechDictation', 'Warning message', {});\n      return 0.95;\n    }\n  }\n\n  /**\n   * Enhance text for medical context\n   */\n  private enhanceTextForMedical(text: string): string {\n    if (!text) return text;\n\n    // Apply medical-specific text enhancements\n    let enhanced = text;\n\n    // Common medical abbreviations and corrections\n    const medicalCorrections = {\n      'b p': 'BP',\n      'h r': 'HR',\n      'r r': 'RR',\n      'o two sat': 'O2 sat',\n      'oxygen sat': 'O2 sat',\n      'e k g': 'EKG',\n      'c t scan': 'CT scan',\n      'm r i': 'MRI',\n      'c b c': 'CBC',\n      'b m p': 'BMP',\n      'c m p': 'CMP',\n      'beats per minute': 'bpm',\n      milligrams: 'mg',\n      micrograms: 'mcg',\n      temperature: 'temp',\n      'blood pressure': 'blood pressure',\n      'heart rate': 'heart rate',\n    };\n\n    // Apply corrections (case-insensitive)\n    Object.entries(medicalCorrections).forEach(([pattern, replacement]) => {\n      const regex = new RegExp(`\\\\b${pattern}\\\\b`, 'gi');\n      enhanced = enhanced.replace(regex, replacement);\n    });\n\n    // Capitalize proper medical terms\n    const medicalTerms = [\n      'tylenol',\n      'ibuprofen',\n      'aspirin',\n      'metformin',\n      'lisinopril',\n      'diabetes',\n      'hypertension',\n      'asthma',\n      'copd',\n      'pneumonia',\n    ];\n\n    medicalTerms.forEach(term => {\n      const regex = new RegExp(`\\\\b${term}\\\\b`, 'gi');\n      enhanced = enhanced.replace(regex, term.charAt(0).toUpperCase() + term.slice(1));\n    });\n\n    return enhanced;\n  }\n\n  /**\n   * Stop dictation\n   */\n  stop(): void {\n    logDebug('azureSpeechDictation', 'Debug message', {});\n    this.isRecording = false;\n\n    if (this.recognizer) {\n      this.recognizer.stopContinuousRecognitionAsync(\n        () => {\n          logDebug('azureSpeechDictation', 'Debug message', {});\n          this.cleanup();\n        },\n        error => {\n          logError('azureSpeechDictation', 'Error message', {});\n          this.cleanup();\n        }\n      );\n    } else {\n      this.cleanup();\n    }\n  }\n\n  /**\n   * Get the complete transcript so far\n   */\n  getFullTranscript(): string {\n    return this.cumulativeTranscript.trim();\n  }\n\n  /**\n   * Clear the transcript\n   */\n  clearTranscript(): void {\n    this.cumulativeTranscript = '';\n  }\n\n  /**\n   * Clean up resources\n   */\n  private cleanup(): void {\n    if (this.recognizer) {\n      this.recognizer.close();\n      this.recognizer = null;\n    }\n\n    // Clear callbacks\n    this.transcriptCallback = null;\n    this.errorCallback = null;\n    this.isRecording = false;\n\n    logDebug('azureSpeechDictation', 'Debug message', {});\n  }\n\n  /**\n   * Check if currently recording\n   */\n  isRecordingActive(): boolean {\n    return this.isRecording;\n  }\n}\n\n// Export singleton instance\nexport const azureSpeechDictation = new AzureSpeechDictationService();\n","/**\n * Azure Speech Services - CONVERSATION MODE\n * High-quality medical conversation transcription with speaker diarization\n *\n * This implementation provides real-time multi-speaker transcription\n * using Azure Speech Services conversation transcriber\n */\n\nimport * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport { azureSpeechConfig } from './azureSpeechConfig.service';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface ConversationResult {\n  transcript: string;\n  isPartial: boolean;\n  speaker?: 'CLINICIAN' | 'PATIENT';\n  confidence?: number;\n  timestamp?: string;\n}\n\nclass AzureSpeechConversationService {\n  private conversationTranscriber: SpeechSDK.ConversationTranscriber | null = null;\n  private conversation: SpeechSDK.Conversation | null = null;\n  private isRecording = false;\n  private transcriptCallback: ((result: ConversationResult) => void) | null = null;\n  private errorCallback: ((error: Error) => void) | null = null;\n  private speakerMapping: Map<string, 'CLINICIAN' | 'PATIENT'> = new Map();\n  private nextSpeakerIndex = 0;\n\n  constructor() {\n    logInfo('azureSpeechConversation', 'Info message', {});\n  }\n\n  isConfigured(): boolean {\n    return azureSpeechConfig.isConfigured();\n  }\n\n  /**\n   * Start conversation transcription with proper speaker diarization\n   */\n  async startConversation(\n    onTranscript: (result: ConversationResult) => void,\n    onError: (error: Error) => void,\n    specialty?: string\n  ): Promise<void> {\n    if (!this.isConfigured()) {\n      onError(new Error('Azure Speech Services not configured. Please set Azure credentials.'));\n      return;\n    }\n\n    this.transcriptCallback = onTranscript;\n    this.errorCallback = onError;\n\n    try {\n      // Get speech configuration\n      const speechConfig = azureSpeechConfig.getSpeechConfig();\n      if (!speechConfig) throw new Error('Speech config not available');\n\n      // Create audio configuration\n      const audioConfig = this.createOptimizedAudioConfig();\n\n      // Create conversation transcriber\n      this.conversationTranscriber = azureSpeechConfig.createConversationTranscriber(audioConfig);\n      if (!this.conversationTranscriber)\n        throw new Error('Failed to create conversation transcriber');\n\n      // Configure conversation settings\n      this.configureConversationSettings();\n\n      // Set up event handlers\n      this.setupConversationEvents();\n\n      // Start transcription\n      this.conversationTranscriber.startTranscribingAsync(\n        () => {\n          this.isRecording = true;\n          logDebug('azureSpeechConversation', 'Debug message', {});\n        },\n        error => {\n          logError('azureSpeechConversation', 'Error message', {});\n          onError(new Error(`Failed to start conversation: ${error}`));\n          this.cleanup();\n        }\n      );\n    } catch (error) {\n      logError('azureSpeechConversation', 'Error message', {});\n      onError(error as Error);\n      this.cleanup();\n    }\n  }\n\n  /**\n   * Create optimized audio configuration for conversation\n   */\n  private createOptimizedAudioConfig(): SpeechSDK.AudioConfig {\n    // Use default microphone - Azure will handle speaker separation\n    return SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();\n  }\n\n  /**\n   * Configure conversation-specific settings\n   */\n  private configureConversationSettings(): void {\n    const speechConfig = azureSpeechConfig.getSpeechConfig();\n    if (!speechConfig) return;\n\n    // Configure for conversation mode\n    speechConfig.setProperty(\n      SpeechSDK.PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs,\n      '5000' // Allow 5 seconds of initial silence\n    );\n\n    speechConfig.setProperty(\n      SpeechSDK.PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs,\n      '1000' // Shorter end silence for conversation flow\n    );\n\n    // Enable detailed output for confidence scores and speaker info\n    speechConfig.outputFormat = SpeechSDK.OutputFormat.Detailed;\n\n    // Configure for medical vocabulary enhancement\n    speechConfig.setProperty('SpeechServiceConnection_LanguageIdMode', 'Continuous');\n  }\n\n  /**\n   * Set up event handlers for conversation transcription\n   */\n  private setupConversationEvents(): void {\n    if (!this.conversationTranscriber) return;\n\n    // Handle interim results\n    this.conversationTranscriber.transcribing = (s, e) => {\n      if (e.result.reason === SpeechSDK.ResultReason.RecognizingSpeech && this.transcriptCallback) {\n        const speaker = this.identifySpeaker(e.result.speakerId);\n        const result: ConversationResult = {\n          transcript: e.result.text,\n          isPartial: true,\n          speaker,\n          confidence: 0.8,\n          timestamp: new Date().toISOString(),\n        };\n\n        logDebug('azureSpeechConversation', 'Debug message', {});\n        this.transcriptCallback(result);\n      }\n    };\n\n    // Handle final results\n    this.conversationTranscriber.transcribed = (s, e) => {\n      if (e.result.reason === SpeechSDK.ResultReason.RecognizedSpeech && this.transcriptCallback) {\n        const speaker = this.identifySpeaker(e.result.speakerId);\n        const confidence = this.extractConfidence(e.result);\n        const enhancedTranscript = this.enhanceTextForMedical(e.result.text);\n\n        const result: ConversationResult = {\n          transcript: enhancedTranscript,\n          isPartial: false,\n          speaker,\n          confidence,\n          timestamp: new Date().toISOString(),\n        };\n\n        logInfo('azureSpeechConversation', 'Info message', {});\n        this.transcriptCallback(result);\n      } else if (e.result.reason === SpeechSDK.ResultReason.NoMatch) {\n        logDebug('azureSpeechConversation', 'Debug message', {});\n      }\n    };\n\n    // Handle cancellation and errors\n    this.conversationTranscriber.canceled = (s, e) => {\n      logDebug('azureSpeechConversation', 'Debug message', {});\n\n      if (e.reason === SpeechSDK.CancellationReason.Error) {\n        logError('azureSpeechConversation', 'Error message', {});\n        if (this.errorCallback) {\n          this.errorCallback(new Error(`Conversation transcription error: ${e.errorDetails}`));\n        }\n      }\n    };\n\n    // Session events\n    this.conversationTranscriber.sessionStarted = (s, e) => {\n      logDebug('azureSpeechConversation', 'Debug message', {});\n    };\n\n    this.conversationTranscriber.sessionStopped = (s, e) => {\n      logDebug('azureSpeechConversation', 'Debug message', {});\n      this.isRecording = false;\n    };\n\n    // Participant events\n    this.conversationTranscriber.participantAdded = (s, e) => {\n      logDebug('azureSpeechConversation', 'Debug message', {});\n      // Map new participants to medical roles\n      this.mapParticipantToRole(e.participant.id);\n    };\n\n    this.conversationTranscriber.participantRemoved = (s, e) => {\n      logDebug('azureSpeechConversation', 'Debug message', {});\n      this.speakerMapping.delete(e.participant.id);\n    };\n  }\n\n  /**\n   * Identify speaker based on speaker ID\n   */\n  private identifySpeaker(speakerId: string): 'CLINICIAN' | 'PATIENT' {\n    if (!speakerId) {\n      // Default to CLINICIAN if no speaker ID\n      return 'CLINICIAN';\n    }\n\n    // Check if we already have a mapping for this speaker\n    if (this.speakerMapping.has(speakerId)) {\n      return this.speakerMapping.get(speakerId)!;\n    }\n\n    // Assign new speaker to role\n    return this.mapParticipantToRole(speakerId);\n  }\n\n  /**\n   * Map participant to medical role (CLINICIAN or PATIENT)\n   */\n  private mapParticipantToRole(participantId: string): 'CLINICIAN' | 'PATIENT' {\n    // Simple mapping strategy: first speaker is CLINICIAN, second is PATIENT\n    // In production, this could be more sophisticated based on voice characteristics\n    // or user input\n\n    const role = this.nextSpeakerIndex === 0 ? 'CLINICIAN' : 'PATIENT';\n    this.speakerMapping.set(participantId, role);\n    this.nextSpeakerIndex = (this.nextSpeakerIndex + 1) % 2; // Alternate between 0 and 1\n\n    logDebug('azureSpeechConversation', 'Debug message', {});\n    return role;\n  }\n\n  /**\n   * Extract confidence score from recognition result\n   */\n  private extractConfidence(result: SpeechSDK.ConversationTranscriptionResult): number {\n    try {\n      // Parse detailed result for confidence score\n      const detailedResult = JSON.parse(result.json);\n      const nBest = detailedResult?.NBest;\n\n      if (nBest && nBest.length > 0) {\n        const confidence = nBest[0]?.Confidence;\n        return confidence ? parseFloat(confidence) : 0.95;\n      }\n\n      return 0.95; // Default high confidence\n    } catch (error) {\n      logWarn('azureSpeechConversation', 'Warning message', {});\n      return 0.95;\n    }\n  }\n\n  /**\n   * Enhance text for medical context\n   */\n  private enhanceTextForMedical(text: string): string {\n    if (!text) return text;\n\n    // Apply medical-specific text enhancements\n    let enhanced = text;\n\n    // Common medical abbreviations and corrections\n    const medicalCorrections = {\n      'b p': 'BP',\n      'h r': 'HR',\n      'r r': 'RR',\n      'o two sat': 'O2 sat',\n      'oxygen sat': 'O2 sat',\n      'e k g': 'EKG',\n      'c t scan': 'CT scan',\n      'm r i': 'MRI',\n      'c b c': 'CBC',\n      'b m p': 'BMP',\n      'c m p': 'CMP',\n      'beats per minute': 'bpm',\n      milligrams: 'mg',\n      micrograms: 'mcg',\n    };\n\n    // Apply corrections (case-insensitive)\n    Object.entries(medicalCorrections).forEach(([pattern, replacement]) => {\n      const regex = new RegExp(`\\\\b${pattern}\\\\b`, 'gi');\n      enhanced = enhanced.replace(regex, replacement);\n    });\n\n    return enhanced;\n  }\n\n  /**\n   * Manually assign speaker role (for user correction)\n   */\n  assignSpeakerRole(speakerId: string, role: 'CLINICIAN' | 'PATIENT'): void {\n    this.speakerMapping.set(speakerId, role);\n    logDebug('azureSpeechConversation', 'Debug message', {});\n  }\n\n  /**\n   * Get current speaker mappings\n   */\n  getSpeakerMappings(): Map<string, 'CLINICIAN' | 'PATIENT'> {\n    return new Map(this.speakerMapping);\n  }\n\n  /**\n   * Stop conversation transcription\n   */\n  stop(): void {\n    logDebug('azureSpeechConversation', 'Debug message', {});\n    this.isRecording = false;\n\n    if (this.conversationTranscriber) {\n      this.conversationTranscriber.stopTranscribingAsync(\n        () => {\n          logDebug('azureSpeechConversation', 'Debug message', {});\n          this.cleanup();\n        },\n        error => {\n          logError('azureSpeechConversation', 'Error message', {});\n          this.cleanup();\n        }\n      );\n    } else {\n      this.cleanup();\n    }\n  }\n\n  /**\n   * Check if currently recording\n   */\n  isRecordingActive(): boolean {\n    return this.isRecording;\n  }\n\n  /**\n   * Clean up resources\n   */\n  private cleanup(): void {\n    if (this.conversationTranscriber) {\n      this.conversationTranscriber.close();\n      this.conversationTranscriber = null;\n    }\n\n    if (this.conversation) {\n      this.conversation.close();\n      this.conversation = null;\n    }\n\n    // Clear state\n    this.speakerMapping.clear();\n    this.nextSpeakerIndex = 0;\n    this.transcriptCallback = null;\n    this.errorCallback = null;\n    this.isRecording = false;\n\n    logDebug('azureSpeechConversation', 'Debug message', {});\n  }\n}\n\n// Export singleton instance\nexport const azureSpeechConversation = new AzureSpeechConversationService();\n","/**\n * Azure Speech Services - AMBIENT/CONVERSATION MODE\n * HIPAA-compliant replacement for AWS Transcribe Medical ambient mode\n *\n * Optimized for ambient medical conversation capture with automatic\n * speaker identification and medical vocabulary enhancement\n */\n\nimport * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport { azureSpeechConfig } from './azureSpeechConfig.service';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface TranscriptionResult {\n  transcript: string;\n  isPartial: boolean;\n  speaker?: string;\n  confidence?: number;\n  timestamp?: string;\n}\n\nclass AzureSpeechAmbientService {\n  private conversationTranscriber: SpeechSDK.ConversationTranscriber | null = null;\n  private isRecording = false;\n  private transcriptCallback: ((result: TranscriptionResult) => void) | null = null;\n  private errorCallback: ((error: Error) => void) | null = null;\n  private speakerMapping: Map<string, string> = new Map();\n  private speakerCount = 0;\n\n  constructor() {\n    logInfo('azureSpeechAmbient', 'Info message', {});\n  }\n\n  isConfigured(): boolean {\n    return azureSpeechConfig.isConfigured();\n  }\n\n  /**\n   * Start ambient/conversation transcription\n   * This is optimized for continuous background conversation capture\n   */\n  async startConversation(\n    onTranscript: (result: TranscriptionResult) => void,\n    onError: (error: Error) => void\n  ): Promise<void> {\n    if (!this.isConfigured()) {\n      logWarn('azureSpeechAmbient', 'Warning message', {});\n      return this.fallbackToWebSpeech(onTranscript, onError);\n    }\n\n    this.transcriptCallback = onTranscript;\n    this.errorCallback = onError;\n\n    try {\n      // Create audio configuration optimized for ambient capture\n      const audioConfig = this.createAmbientAudioConfig();\n\n      // Create conversation transcriber for multi-speaker scenarios\n      this.conversationTranscriber = azureSpeechConfig.createConversationTranscriber(audioConfig);\n      if (!this.conversationTranscriber)\n        throw new Error('Failed to create conversation transcriber');\n\n      // Configure ambient-specific settings\n      this.configureAmbientSettings();\n\n      // Set up event handlers for ambient mode\n      this.setupAmbientEvents();\n\n      // Start transcription\n      this.conversationTranscriber.startTranscribingAsync(\n        () => {\n          this.isRecording = true;\n          logDebug('azureSpeechAmbient', 'Debug message', {});\n        },\n        error => {\n          logError('azureSpeechAmbient', 'Error message', {});\n          onError(new Error(`Failed to start ambient conversation: ${error}`));\n          this.cleanup();\n        }\n      );\n    } catch (error) {\n      logError('azureSpeechAmbient', 'Error message', {});\n      logWarn('azureSpeechAmbient', 'Warning message', {});\n      return this.fallbackToWebSpeech(onTranscript, onError);\n    }\n  }\n\n  /**\n   * Create audio configuration optimized for ambient capture\n   */\n  private createAmbientAudioConfig(): SpeechSDK.AudioConfig {\n    // Use default microphone with settings optimized for ambient conversation\n    return SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();\n  }\n\n  /**\n   * Configure settings specific to ambient conversation capture\n   */\n  private configureAmbientSettings(): void {\n    const speechConfig = azureSpeechConfig.getSpeechConfig();\n    if (!speechConfig) return;\n\n    // Configure for ambient conversation mode\n    speechConfig.setProperty(\n      SpeechSDK.PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs,\n      '10000' // Allow longer initial silence for ambient scenarios\n    );\n\n    speechConfig.setProperty(\n      SpeechSDK.PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs,\n      '500' // Shorter end silence for natural conversation flow\n    );\n\n    // Enable continuous recognition for ambient capture\n    speechConfig.setProperty('SpeechServiceConnection_Mode', 'Conversation');\n\n    // Optimize for multiple speakers\n    speechConfig.setProperty('ConversationTranscriptionInRoomAndOnline', 'true');\n  }\n\n  /**\n   * Set up event handlers optimized for ambient conversation\n   */\n  private setupAmbientEvents(): void {\n    if (!this.conversationTranscriber) return;\n\n    // Handle interim results (for real-time feedback)\n    this.conversationTranscriber.transcribing = (s, e) => {\n      if (e.result.reason === SpeechSDK.ResultReason.RecognizingSpeech && this.transcriptCallback) {\n        const speaker = this.getSpeakerLabel(e.result.speakerId);\n\n        this.transcriptCallback({\n          transcript: e.result.text,\n          isPartial: true,\n          speaker,\n          confidence: 0.8,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    };\n\n    // Handle final results\n    this.conversationTranscriber.transcribed = (s, e) => {\n      if (e.result.reason === SpeechSDK.ResultReason.RecognizedSpeech && this.transcriptCallback) {\n        const speaker = this.getSpeakerLabel(e.result.speakerId);\n        const confidence = this.extractConfidence(e.result);\n\n        // Log ambient conversation capture\n        logDebug('azureSpeechAmbient', 'Debug message', {});\n\n        this.transcriptCallback({\n          transcript: e.result.text,\n          isPartial: false,\n          speaker,\n          confidence,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    };\n\n    // Handle errors with ambient-specific logging\n    this.conversationTranscriber.canceled = (s, e) => {\n      if (e.reason === SpeechSDK.CancellationReason.Error) {\n        logError('azureSpeechAmbient', 'Error message', {});\n        if (this.errorCallback && e.errorDetails !== 'No speech was detected') {\n          // Don't treat \"no speech\" as an error in ambient mode\n          this.errorCallback(new Error(`Ambient conversation error: ${e.errorDetails}`));\n        }\n      }\n    };\n\n    // Session events for ambient monitoring\n    this.conversationTranscriber.sessionStarted = (s, e) => {\n      logDebug('azureSpeechAmbient', 'Debug message', {});\n    };\n\n    this.conversationTranscriber.sessionStopped = (s, e) => {\n      logDebug('azureSpeechAmbient', 'Debug message', {});\n      this.isRecording = false;\n    };\n\n    // Participant tracking for ambient scenarios\n    this.conversationTranscriber.participantAdded = (s, e) => {\n      this.addSpeaker(e.participant.id);\n      logDebug('azureSpeechAmbient', 'Debug message', {});\n    };\n\n    this.conversationTranscriber.participantRemoved = (s, e) => {\n      logDebug('azureSpeechAmbient', 'Debug message', {});\n    };\n  }\n\n  /**\n   * Get or create speaker label for ambient conversation\n   */\n  private getSpeakerLabel(speakerId: string): string {\n    if (!speakerId) {\n      return 'Speaker_1'; // Default speaker\n    }\n\n    if (this.speakerMapping.has(speakerId)) {\n      return this.speakerMapping.get(speakerId)!;\n    }\n\n    // Add new speaker\n    return this.addSpeaker(speakerId);\n  }\n\n  /**\n   * Add new speaker to the conversation\n   */\n  private addSpeaker(speakerId: string): string {\n    this.speakerCount++;\n    const speakerLabel = `Speaker_${this.speakerCount}`;\n    this.speakerMapping.set(speakerId, speakerLabel);\n    return speakerLabel;\n  }\n\n  /**\n   * Extract confidence score from recognition result\n   */\n  private extractConfidence(result: SpeechSDK.ConversationTranscriptionResult): number {\n    try {\n      const detailedResult = JSON.parse(result.json);\n      const confidence = detailedResult?.NBest?.[0]?.Confidence;\n      return confidence ? parseFloat(confidence) : 0.95;\n    } catch {\n      return 0.95;\n    }\n  }\n\n  /**\n   * Fallback to Web Speech API for ambient conversation mode\n   */\n  private async fallbackToWebSpeech(\n    onTranscript: (result: TranscriptionResult) => void,\n    onError: (error: Error) => void\n  ): Promise<void> {\n    if (!('webkitSpeechRecognition' in window)) {\n      onError(new Error('Speech recognition not supported'));\n      return;\n    }\n\n    const SpeechRecognition = (window as any).webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.maxAlternatives = 1;\n\n    let lastSpeaker = 'Speaker_1';\n    let silenceTimer: NodeJS.Timeout;\n    let wordCount = 0;\n\n    recognition.onresult = (event: any) => {\n      let finalTranscript = '';\n      let interimTranscript = '';\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n\n        if (event.results[i].isFinal) {\n          finalTranscript += transcript;\n        } else {\n          interimTranscript += transcript;\n        }\n      }\n\n      // Simple speaker detection based on silence gaps\n      clearTimeout(silenceTimer);\n      silenceTimer = setTimeout(() => {\n        // Switch speaker after 3 seconds of silence\n        lastSpeaker = lastSpeaker === 'Speaker_1' ? 'Speaker_2' : 'Speaker_1';\n        wordCount = 0;\n      }, 3000);\n\n      // Also switch speaker after every 50 words (rough heuristic)\n      wordCount += (finalTranscript + interimTranscript).split(' ').length;\n      if (wordCount > 50) {\n        lastSpeaker = lastSpeaker === 'Speaker_1' ? 'Speaker_2' : 'Speaker_1';\n        wordCount = 0;\n      }\n\n      if (finalTranscript) {\n        onTranscript({\n          transcript: finalTranscript,\n          isPartial: false,\n          speaker: lastSpeaker,\n          confidence: 0.95,\n          timestamp: new Date().toISOString(),\n        });\n      } else if (interimTranscript) {\n        onTranscript({\n          transcript: interimTranscript,\n          isPartial: true,\n          speaker: lastSpeaker,\n          confidence: 0.8,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    };\n\n    recognition.onerror = (event: any) => {\n      logError('azureSpeechAmbient', 'Error message', {});\n      if (event.error !== 'no-speech') {\n        onError(new Error(`Speech recognition error: ${event.error}`));\n      }\n    };\n\n    recognition.onend = () => {\n      if (this.isRecording) {\n        // Restart if still recording (ambient mode should be continuous)\n        recognition.start();\n      }\n    };\n\n    recognition.start();\n    this.isRecording = true;\n\n    // Store recognition instance for cleanup\n    (this as any).recognition = recognition;\n\n    logWarn('azureSpeechAmbient', 'Warning message', {});\n  }\n\n  /**\n   * Stop ambient transcription\n   */\n  stop(): void {\n    logDebug('azureSpeechAmbient', 'Debug message', {});\n    this.isRecording = false;\n\n    if (this.conversationTranscriber) {\n      this.conversationTranscriber.stopTranscribingAsync(\n        () => {\n          logDebug('azureSpeechAmbient', 'Debug message', {});\n          this.cleanup();\n        },\n        error => {\n          logError('azureSpeechAmbient', 'Error message', {});\n          this.cleanup();\n        }\n      );\n    }\n\n    if ((this as any).recognition) {\n      (this as any).recognition.stop();\n    }\n\n    this.cleanup();\n  }\n\n  /**\n   * Get current speaker mappings\n   */\n  getSpeakers(): Map<string, string> {\n    return new Map(this.speakerMapping);\n  }\n\n  /**\n   * Reset speaker mappings (for new conversation)\n   */\n  resetSpeakers(): void {\n    this.speakerMapping.clear();\n    this.speakerCount = 0;\n  }\n\n  /**\n   * Cleanup resources\n   */\n  private cleanup(): void {\n    if (this.conversationTranscriber) {\n      this.conversationTranscriber.close();\n      this.conversationTranscriber = null;\n    }\n\n    this.speakerMapping.clear();\n    this.speakerCount = 0;\n    this.transcriptCallback = null;\n    this.errorCallback = null;\n    this.isRecording = false;\n\n    logDebug('azureSpeechAmbient', 'Debug message', {});\n  }\n}\n\n// Export singleton instance\nexport const azureSpeechAmbientService = new AzureSpeechAmbientService();\n","/**\n * Azure Speech Services - Simplified Working Implementation\n * HIPAA-compliant replacement for AWS Transcribe Simple\n *\n * This is the primary service that should be used by the application\n * for reliable medical speech recognition with Azure Speech Services\n */\n\nimport * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport { azureSpeechConfig } from './azureSpeechConfig.service';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport class AzureSpeechSimpleService {\n  private recognizer: SpeechSDK.SpeechRecognizer | null = null;\n  private isRecording = false;\n  private currentTranscript = '';\n\n  constructor() {\n    logInfo('azureSpeechSimple', 'Info message', {});\n  }\n\n  /**\n   * Start recording with Azure Speech Services\n   */\n  async startRecording(\n    onTranscript: (text: string, isFinal: boolean) => void,\n    onError: (error: string) => void\n  ): Promise<boolean> {\n    if (!azureSpeechConfig.isConfigured()) {\n      onError(\n        'Azure Speech Services not configured. Please set VITE_AZURE_SPEECH_KEY and VITE_AZURE_SPEECH_REGION environment variables.'\n      );\n      return false;\n    }\n\n    try {\n      logDebug('azureSpeechSimple', 'Debug message', {});\n\n      // Get speech configuration\n      const speechConfig = azureSpeechConfig.getSpeechConfig();\n      if (!speechConfig) {\n        throw new Error('Failed to get speech configuration');\n      }\n\n      // Create audio configuration\n      const audioConfig = azureSpeechConfig.getOptimizedAudioConfig();\n\n      // Create recognizer\n      this.recognizer = azureSpeechConfig.createDictationRecognizer(audioConfig);\n      if (!this.recognizer) {\n        throw new Error('Failed to create speech recognizer');\n      }\n\n      // Clear transcript\n      this.currentTranscript = '';\n      this.isRecording = true;\n\n      logInfo('azureSpeechSimple', 'Info message', {});\n\n      // Set up event handlers\n      this.setupEventHandlers(onTranscript, onError);\n\n      // Start continuous recognition\n      this.recognizer.startContinuousRecognitionAsync(\n        () => {\n          logInfo('azureSpeechSimple', 'Info message', {});\n        },\n        error => {\n          logError('azureSpeechSimple', 'Error message', {});\n          onError(`Failed to start recognition: ${error}`);\n          this.cleanup();\n        }\n      );\n\n      return true;\n    } catch (error: any) {\n      logError('azureSpeechSimple', 'Error message', {});\n\n      // Provide specific error messages\n      let errorMessage = 'Azure Speech Services error: ';\n\n      if (error.message?.includes('Invalid subscription key')) {\n        errorMessage += 'Invalid subscription key. Please check your VITE_AZURE_SPEECH_KEY.';\n      } else if (error.message?.includes('Invalid region')) {\n        errorMessage += 'Invalid region. Please check your VITE_AZURE_SPEECH_REGION.';\n      } else if (error.message?.includes('Forbidden')) {\n        errorMessage +=\n          'Access forbidden. Your Azure subscription may not have Speech Services enabled.';\n      } else if (error.message?.includes('Network')) {\n        errorMessage += 'Network error. Please check your internet connection.';\n      } else {\n        errorMessage += error.message || 'Failed to start recording';\n      }\n\n      onError(errorMessage);\n      this.cleanup();\n      return false;\n    }\n  }\n\n  /**\n   * Set up event handlers for Azure Speech recognition\n   */\n  private setupEventHandlers(\n    onTranscript: (text: string, isFinal: boolean) => void,\n    onError: (error: string) => void\n  ): void {\n    if (!this.recognizer) return;\n\n    // Handle interim results\n    this.recognizer.recognizing = (s, e) => {\n      if (e.result.reason === SpeechSDK.ResultReason.RecognizingSpeech) {\n        const transcript = this.enhanceTranscript(e.result.text);\n        logDebug('azureSpeechSimple', 'Debug message', {});\n        onTranscript(transcript, false);\n      }\n    };\n\n    // Handle final results\n    this.recognizer.recognized = (s, e) => {\n      if (e.result.reason === SpeechSDK.ResultReason.RecognizedSpeech) {\n        const transcript = this.enhanceTranscript(e.result.text);\n        this.currentTranscript += transcript + ' ';\n\n        // Get confidence score\n        const confidence = this.extractConfidence(e.result);\n\n        logInfo('azureSpeechSimple', 'Info message', {});\n        onTranscript(transcript, true);\n      } else if (e.result.reason === SpeechSDK.ResultReason.NoMatch) {\n        logDebug('azureSpeechSimple', 'Debug message', {});\n      }\n    };\n\n    // Handle cancellation and errors\n    this.recognizer.canceled = (s, e) => {\n      logDebug('azureSpeechSimple', 'Debug message', {});\n\n      if (e.reason === SpeechSDK.CancellationReason.Error) {\n        logError('azureSpeechSimple', 'Error message', {});\n\n        // Handle specific error cases\n        if (e.errorDetails.includes('1006')) {\n          onError('Connection lost. Please check your internet connection and try again.');\n        } else if (e.errorDetails.includes('Forbidden')) {\n          onError('Access denied. Please check your Azure Speech Services subscription.');\n        } else {\n          onError(`Recognition error: ${e.errorDetails}`);\n        }\n      }\n    };\n\n    // Session events\n    this.recognizer.sessionStarted = (s, e) => {\n      logDebug('azureSpeechSimple', 'Debug message', {});\n    };\n\n    this.recognizer.sessionStopped = (s, e) => {\n      logDebug('azureSpeechSimple', 'Debug message', {});\n      this.isRecording = false;\n    };\n\n    // Speech detection events\n    this.recognizer.speechStartDetected = (s, e) => {\n      logDebug('azureSpeechSimple', 'Debug message', {});\n    };\n\n    this.recognizer.speechEndDetected = (s, e) => {\n      logDebug('azureSpeechSimple', 'Debug message', {});\n    };\n  }\n\n  /**\n   * Extract confidence score from recognition result\n   */\n  private extractConfidence(result: SpeechSDK.SpeechRecognitionResult): number {\n    try {\n      const detailedResult = JSON.parse(result.json);\n      const nBest = detailedResult?.NBest;\n\n      if (nBest && nBest.length > 0) {\n        const confidence = nBest[0]?.Confidence;\n        return confidence ? parseFloat(confidence) : 0.95;\n      }\n\n      return 0.95; // Default confidence\n    } catch (error) {\n      logWarn('azureSpeechSimple', 'Warning message', {});\n      return 0.95;\n    }\n  }\n\n  /**\n   * Enhance transcript with medical vocabulary corrections\n   */\n  private enhanceTranscript(text: string): string {\n    if (!text) return text;\n\n    let enhanced = text;\n\n    // Medical abbreviations and corrections\n    const medicalCorrections = {\n      'b p': 'BP',\n      'blood pressure': 'blood pressure',\n      'h r': 'HR',\n      'heart rate': 'heart rate',\n      'r r': 'RR',\n      'respiratory rate': 'respiratory rate',\n      'o two sat': 'O2 sat',\n      'oxygen saturation': 'O2 sat',\n      'e k g': 'EKG',\n      'c t scan': 'CT scan',\n      'm r i': 'MRI',\n      'c b c': 'CBC',\n      'b m p': 'BMP',\n      'c m p': 'CMP',\n      'beats per minute': 'bpm',\n      'breaths per minute': 'bpm',\n      milligrams: 'mg',\n      milligram: 'mg',\n      micrograms: 'mcg',\n      microgram: 'mcg',\n      temperature: 'temp',\n      'degrees fahrenheit': '°F',\n      'degrees celsius': '°C',\n    };\n\n    // Apply corrections (case-insensitive)\n    Object.entries(medicalCorrections).forEach(([pattern, replacement]) => {\n      const regex = new RegExp(`\\\\b${pattern}\\\\b`, 'gi');\n      enhanced = enhanced.replace(regex, replacement);\n    });\n\n    // Capitalize common medical terms\n    const medicalTerms = [\n      'tylenol',\n      'acetaminophen',\n      'ibuprofen',\n      'aspirin',\n      'metformin',\n      'lisinopril',\n      'atorvastatin',\n      'amlodipine',\n      'omeprazole',\n      'diabetes',\n      'hypertension',\n      'hyperlipidemia',\n      'asthma',\n      'copd',\n      'pneumonia',\n      'bronchitis',\n      'sinusitis',\n      'pharyngitis',\n    ];\n\n    medicalTerms.forEach(term => {\n      const regex = new RegExp(`\\\\b${term}\\\\b`, 'gi');\n      enhanced = enhanced.replace(regex, term.charAt(0).toUpperCase() + term.slice(1));\n    });\n\n    return enhanced;\n  }\n\n  /**\n   * Stop recording\n   */\n  stopRecording(): string {\n    logDebug('azureSpeechSimple', 'Debug message', {});\n    this.isRecording = false;\n\n    if (this.recognizer) {\n      this.recognizer.stopContinuousRecognitionAsync(\n        () => {\n          logDebug('azureSpeechSimple', 'Debug message', {});\n          this.cleanup();\n        },\n        error => {\n          logError('azureSpeechSimple', 'Error message', {});\n          this.cleanup();\n        }\n      );\n    }\n\n    logInfo('azureSpeechSimple', 'Info message', {});\n    return this.currentTranscript;\n  }\n\n  /**\n   * Clean up resources\n   */\n  private cleanup(): void {\n    if (this.recognizer) {\n      this.recognizer.close();\n      this.recognizer = null;\n    }\n\n    this.isRecording = false;\n    logDebug('azureSpeechSimple', 'Debug message', {});\n  }\n\n  /**\n   * Check if Azure Speech Services is initialized\n   */\n  isInitialized(): boolean {\n    return azureSpeechConfig.isConfigured();\n  }\n\n  /**\n   * Check if Azure Speech Services is configured (interface compatibility)\n   */\n  isConfigured(): boolean {\n    return azureSpeechConfig.isConfigured();\n  }\n\n  /**\n   * Stop all Azure Speech Services operations (interface compatibility)\n   */\n  stop(): void {\n    this.stopRecording();\n  }\n\n  /**\n   * Get current transcript\n   */\n  getCurrentTranscript(): string {\n    return this.currentTranscript;\n  }\n\n  /**\n   * Clear current transcript\n   */\n  clearTranscript(): void {\n    this.currentTranscript = '';\n  }\n\n  /**\n   * Check if currently recording\n   */\n  isRecordingActive(): boolean {\n    return this.isRecording;\n  }\n}\n\n// Singleton instance\nexport const azureSpeechSimple = new AzureSpeechSimpleService();\n","/**\n * Speech Service Router\n * Routes speech recognition requests to the appropriate service\n * Priority: Deepgram (primary) → AWS Transcribe Medical → Azure Speech (backup)\n * Based on cost, reliability, and quota limitations\n */\n\n// Deepgram Services (primary - medical optimized, 83% cost savings)\nimport { deepgramSDKService } from './deepgramSDK.service';\nimport { deepgramAdapter } from './deepgramAdapter.service';\n\n// Azure Speech Services (backup - quota limited)\nimport { azureSpeechStreamingFixed } from './azureSpeechStreamingFixed.service';\nimport { azureSpeechDictation } from './azureSpeechDictation.service';\nimport { azureSpeechConversation } from './azureSpeechConversation.service';\nimport { azureSpeechAmbientService } from './azureSpeechAmbient.service';\nimport { azureSpeechSimple } from './azureSpeechSimple.service';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\n// AWS Transcribe Services (fallback)\nimport { awsTranscribeStreamingFixed } from './awsTranscribeMedicalStreamingFixed.service';\nimport { awsTranscribeSimple } from './awsTranscribeSimple.service';\n\nexport interface TranscriptionResult {\n  transcript: string;\n  isPartial: boolean;\n  speaker?: 'CLINICIAN' | 'PATIENT' | string;\n  confidence?: number;\n  timestamp?: string;\n}\n\nexport interface SpeechServiceInterface {\n  isConfigured(): boolean;\n  startTranscription?(\n    mode: 'CONVERSATION' | 'DICTATION',\n    onTranscript: (result: TranscriptionResult) => void,\n    onError: (error: Error) => void,\n    specialty?: string\n  ): Promise<void>;\n  startDictation?(\n    onTranscript: (result: any) => void,\n    onError: (error: Error) => void,\n    specialty?: string\n  ): Promise<void>;\n  startConversation?(\n    onTranscript: (result: any) => void,\n    onError: (error: Error) => void,\n    specialty?: string\n  ): Promise<void>;\n  startRecording?(\n    onTranscript: (text: string, isFinal: boolean) => void,\n    onError: (error: string) => void\n  ): Promise<boolean>;\n  stop(): void;\n  stopRecording?(): string;\n  getCurrentTranscript?(): string;\n}\n\nclass SpeechServiceRouter {\n  private primaryProvider: 'deepgram' | 'aws' | 'azure' = 'deepgram'; // Deepgram primary for cost and reliability\n\n  constructor() {\n    // Per CLAUDE.md and cost optimization: Deepgram > AWS > Azure\n    const envProvider = import.meta.env.VITE_PRIMARY_STT_PROVIDER;\n\n    if (envProvider === 'aws') {\n      this.primaryProvider = 'aws';\n    } else if (envProvider === 'azure') {\n      this.primaryProvider = 'azure';\n    } else {\n      this.primaryProvider = 'deepgram'; // Default to Deepgram for 83% cost savings\n    }\n\n    logInfo('speechServiceRouter', `Primary STT provider: ${this.primaryProvider}`);\n  }\n\n  /**\n   * Get the streaming service (main transcription interface)\n   */\n  getStreamingService(): SpeechServiceInterface {\n    // Priority: Deepgram SDK → Deepgram Adapter → AWS Transcribe (Azure removed due to quota issues)\n    if (this.primaryProvider === 'deepgram' && deepgramSDKService.isConfigured()) {\n      logInfo('speechServiceRouter', 'Using Deepgram SDK for streaming (primary)');\n      return deepgramSDKService;\n    } else if (this.primaryProvider === 'deepgram' && deepgramAdapter.isConfigured()) {\n      logInfo('speechServiceRouter', 'Using Deepgram Adapter for streaming (fallback)');\n      return deepgramAdapter;\n    } else if (this.primaryProvider === 'aws' && awsTranscribeStreamingFixed.isConfigured()) {\n      logInfo('speechServiceRouter', 'Using AWS Transcribe Medical for streaming');\n      return awsTranscribeStreamingFixed;\n    } else {\n      // Fallback logic - prioritize Deepgram, avoid Azure due to quota issues\n      if (deepgramSDKService.isConfigured()) {\n        logWarn('speechServiceRouter', 'Falling back to Deepgram SDK');\n        return deepgramSDKService;\n      } else if (deepgramAdapter.isConfigured()) {\n        logWarn('speechServiceRouter', 'Falling back to Deepgram Adapter');\n        return deepgramAdapter;\n      } else if (awsTranscribeStreamingFixed.isConfigured()) {\n        logWarn('speechServiceRouter', 'Falling back to AWS Transcribe Medical (last resort)');\n        return awsTranscribeStreamingFixed;\n      } else {\n        logError('speechServiceRouter', 'No speech services available - Azure out of credits, check Deepgram/AWS config');\n        throw new Error('No speech transcription services available');\n      }\n    }\n  }\n\n  /**\n   * Get the dictation service\n   */\n  getDictationService(): SpeechServiceInterface {\n    // Use same priority as streaming\n    return this.getStreamingService();\n  }\n\n  /**\n   * Get the conversation service\n   */\n  getConversationService(): SpeechServiceInterface {\n    // Use same priority as streaming - Deepgram handles conversations well\n    return this.getStreamingService();\n  }\n\n  /**\n   * Get the ambient service\n   */\n  getAmbientService(): SpeechServiceInterface {\n    // Use same priority as streaming - Deepgram has excellent speaker diarization\n    return this.getStreamingService();\n  }\n\n  /**\n   * Get the simple service (most commonly used)\n   */\n  getSimpleService(): SpeechServiceInterface {\n    // Use same priority as streaming - Deepgram is simpler and more reliable\n    return this.getStreamingService();\n  }\n\n  /**\n   * Check if any speech service is available\n   */\n  isAnyServiceAvailable(): boolean {\n    return (\n      deepgramSDKService.isConfigured() ||\n      deepgramAdapter.isConfigured() ||\n      awsTranscribeStreamingFixed.isConfigured() ||\n      awsTranscribeSimple.isInitialized()\n    );\n  }\n\n  /**\n   * Get service status for debugging\n   */\n  getServiceStatus() {\n    return {\n      primaryProvider: this.primaryProvider,\n      deepgram: {\n        sdk: deepgramSDKService.isConfigured(),\n        adapter: deepgramAdapter.isConfigured(),\n      },\n      aws: {\n        streaming: awsTranscribeStreamingFixed.isConfigured(),\n        simple: awsTranscribeSimple.isInitialized(),\n      },\n      azure: {\n        status: 'DISABLED - Out of credits/quota issues',\n        streaming: false,\n        dictation: false,\n        conversation: false,\n        ambient: false,\n        simple: false,\n      },\n    };\n  }\n\n  /**\n   * Force switch to specific provider (for testing)\n   */\n  setPrimaryProvider(provider: 'deepgram' | 'aws'): void {\n    this.primaryProvider = provider;\n    logDebug('speechServiceRouter', `Primary provider switched to: ${provider}`, {});\n  }\n\n  /**\n   * Unified startRecording method for backward compatibility\n   * Adapts different service APIs to a common interface\n   */\n  async startRecording(\n    mode: 'dictation' | 'conversation',\n    callbacks: {\n      onTranscript: (text: string, isFinal: boolean) => void;\n      onError: (error: string) => void;\n      onEnd?: () => void;\n    }\n  ): Promise<boolean> {\n    try {\n      const service = this.getStreamingService();\n\n      if (this.primaryProvider === 'deepgram') {\n        // Use Deepgram Services (SDK or Adapter)\n        const transcriptionMode = mode === 'dictation' ? 'DICTATION' : 'CONVERSATION';\n\n        await service.startTranscription!(\n          transcriptionMode,\n          result => {\n            callbacks.onTranscript(result.transcript, !result.isPartial);\n          },\n          error => {\n            callbacks.onError(error.message);\n          }\n        );\n\n        return true;\n      } else {\n        // Use AWS Transcribe with existing API\n        if (service.startRecording) {\n          return await service.startRecording(\n            (text: string, isFinal: boolean) => callbacks.onTranscript(text, isFinal),\n            (error: string) => callbacks.onError(error)\n          );\n        }\n        return false;\n      }\n    } catch (error) {\n      logError('speechServiceRouter', 'Error message', {});\n      callbacks.onError(error instanceof Error ? error.message : 'Unknown error');\n      return false;\n    }\n  }\n\n  /**\n   * Unified stopRecording method\n   */\n  stopRecording(): void {\n    const service = this.getStreamingService();\n\n    if (service.stopRecording) {\n      service.stopRecording();\n    } else {\n      service.stop();\n    }\n  }\n}\n\n// Export singleton instance\nexport const speechServiceRouter = new SpeechServiceRouter();\n","/**\n * AWS Transcribe Medical Service for HIPAA-compliant speech recognition\n * Supports both dictation and conversation modes with speaker diarization\n */\n\nimport {\n  TranscribeStreamingClient,\n  StartMedicalStreamTranscriptionCommand,\n  MedicalContentIdentificationType,\n  MedicalTranscriptResultStream\n} from '@aws-sdk/client-transcribe-streaming';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport type TranscriptionMode = 'DICTATION' | 'CONVERSATION';\nexport type MedicalSpecialty = 'PRIMARYCARE' | 'CARDIOLOGY' | 'NEUROLOGY' | 'ONCOLOGY' | 'RADIOLOGY' | 'UROLOGY';\n\ninterface TranscriptionConfig {\n  mode: TranscriptionMode;\n  specialty: MedicalSpecialty;\n  enableSpeakerDiarization: boolean;\n  maxSpeakers?: number;\n  vocabularyName?: string;\n}\n\nexport interface TranscriptionResult {\n  transcript: string;\n  isPartial: boolean;\n  speaker?: string;\n  confidence?: number;\n  alternatives?: Array<{\n    transcript: string;\n    confidence: number;\n  }>;\n}\n\nclass AWSTranscribeService {\n  private client: TranscribeStreamingClient;\n  private audioStream: MediaStream | null = null;\n  private audioContext: AudioContext | null = null;\n  private processor: ScriptProcessorNode | null = null;\n  private isRecording = false;\n  private onTranscript: ((result: TranscriptionResult) => void) | null = null;\n  private onError: ((error: Error) => void) | null = null;\n  private currentConfig: TranscriptionConfig = {\n    mode: 'DICTATION',\n    specialty: 'PRIMARYCARE',\n    enableSpeakerDiarization: false\n  };\n\n  constructor() {\n    // Initialize AWS Transcribe client\n    const accessKeyId = import.meta.env.VITE_AWS_ACCESS_KEY_ID;\n    const secretAccessKey = import.meta.env.VITE_AWS_SECRET_ACCESS_KEY;\n    const region = import.meta.env.VITE_AWS_REGION || 'us-east-1';\n\n    if (!accessKeyId || !secretAccessKey) {\n      logWarn('awsTranscribe', 'Warning message', {});\n      // Create a dummy client that will fail gracefully\n      this.client = new TranscribeStreamingClient({\n        region,\n        credentials: {\n          accessKeyId: 'not-configured',\n          secretAccessKey: 'not-configured'\n        }\n      });\n    } else {\n      this.client = new TranscribeStreamingClient({\n        region,\n        credentials: {\n          accessKeyId,\n          secretAccessKey\n        }\n      });\n      logInfo('awsTranscribe', 'Info message', {});\n    }\n  }\n\n  /**\n   * Check if AWS Transcribe is properly configured\n   */\n  isConfigured(): boolean {\n    const hasKeys = !!(import.meta.env.VITE_AWS_ACCESS_KEY_ID && import.meta.env.VITE_AWS_SECRET_ACCESS_KEY);\n    logDebug('awsTranscribe', 'Debug message', {});\n    return hasKeys;\n  }\n\n  /**\n   * Start transcription with specified configuration\n   */\n  async startTranscription(\n    config: Partial<TranscriptionConfig> = {},\n    onTranscript: (result: TranscriptionResult) => void,\n    onError: (error: Error) => void\n  ): Promise<void> {\n    // Set callbacks first\n    this.onTranscript = onTranscript;\n    this.onError = onError;\n    \n    if (!this.isConfigured()) {\n      logWarn('awsTranscribe', 'Warning message', {});\n      \n      try {\n        // Just get microphone access for recording\n        this.audioStream = await navigator.mediaDevices.getUserMedia({ \n          audio: {\n            channelCount: 1,\n            sampleRate: 16000,\n            echoCancellation: true,\n            noiseSuppression: true\n          } \n        });\n        \n        this.isRecording = true;\n        \n        // Provide feedback that recording is happening\n        if (onTranscript) {\n          onTranscript({\n            transcript: '[Recording audio - real-time transcription unavailable]',\n            isPartial: true\n          });\n        }\n        \n        return;\n      } catch (micError) {\n        logError('awsTranscribe', 'Error message', {});\n        onError(micError as Error);\n        return;\n      }\n    }\n\n    // Merge with default config\n    this.currentConfig = {\n      ...this.currentConfig,\n      ...config\n    };\n\n    try {\n      // Get microphone access\n      this.audioStream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          channelCount: 1,\n          sampleRate: 16000,\n          echoCancellation: true,\n          noiseSuppression: true\n        } \n      });\n\n      // Create audio context\n      this.audioContext = new AudioContext({ sampleRate: 16000 });\n      const source = this.audioContext.createMediaStreamSource(this.audioStream);\n      \n      // Create processor for audio chunks\n      this.processor = this.audioContext.createScriptProcessor(4096, 1, 1);\n      \n      // Connect audio pipeline\n      source.connect(this.processor);\n      this.processor.connect(this.audioContext.destination);\n\n      // Try to start AWS Transcribe Medical streaming\n      try {\n        logDebug('awsTranscribe', 'Debug message', {});\n        await this.startAWSTranscribeStream();\n        this.isRecording = true;\n        logDebug('awsTranscribe', 'Debug message', {});\n      } catch (streamError) {\n        logError('awsTranscribe', 'Error message', {});\n        logError('awsTranscribe', 'Error message', {});\n        this.isRecording = true;\n        \n        // Notify user that we're recording without transcription\n        if (onTranscript) {\n          onTranscript({\n            transcript: '[Recording audio - real-time transcription unavailable]',\n            isPartial: true\n          });\n        }\n      }\n      \n    } catch (error) {\n      logError('awsTranscribe', 'Error message', {});\n      \n      // Try fallback to simple recording\n      try {\n        this.audioStream = await navigator.mediaDevices.getUserMedia({ \n          audio: {\n            echoCancellation: true,\n            noiseSuppression: true\n          } \n        });\n        \n        this.isRecording = true;\n        \n        if (onTranscript) {\n          onTranscript({\n            transcript: '[Recording audio...]',\n            isPartial: true\n          });\n        }\n      } catch (fallbackError) {\n        logError('awsTranscribe', 'Error message', {});\n        onError(fallbackError as Error);\n        this.cleanup();\n      }\n    }\n  }\n\n  /**\n   * Start AWS Transcribe Medical streaming\n   */\n  private async startAWSTranscribeStream(): Promise<void> {\n    const command = new StartMedicalStreamTranscriptionCommand({\n      LanguageCode: 'en-US',\n      MediaEncoding: 'pcm',\n      MediaSampleRateHertz: 16000,\n      Specialty: this.currentConfig.specialty,\n      Type: this.currentConfig.mode,\n      ContentIdentificationType: MedicalContentIdentificationType.PHI,\n      ShowSpeakerLabel: this.currentConfig.mode === 'CONVERSATION',\n      NumberOfChannels: 1,\n      EnableChannelIdentification: false\n    });\n\n    try {\n      const response = await this.client.send(command);\n      \n      if (response.TranscriptResultStream) {\n        this.processTranscriptStream(response.TranscriptResultStream);\n      }\n      \n      // Set up audio chunk processing\n      if (this.processor) {\n        this.processor.onaudioprocess = (event) => {\n          if (this.isRecording) {\n            const audioData = event.inputBuffer.getChannelData(0);\n            const pcmData = this.float32ToPCM16(audioData);\n            // Send audio chunks to AWS Transcribe\n            this.sendAudioChunk(pcmData);\n          }\n        };\n      }\n    } catch (error) {\n      logError('awsTranscribe', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Process transcript stream from AWS\n   */\n  private async processTranscriptStream(stream: MedicalTranscriptResultStream): Promise<void> {\n    try {\n      // Check if stream is iterable\n      if (!stream || typeof stream[Symbol.asyncIterator] !== 'function') {\n        logError('awsTranscribe', 'Error message', {});\n        return;\n      }\n      \n      for await (const event of stream) {\n        if (event.TranscriptEvent?.Transcript?.Results) {\n          for (const result of event.TranscriptEvent.Transcript.Results) {\n            if (!result.IsPartial && result.Alternatives && result.Alternatives[0]) {\n              const alternative = result.Alternatives[0];\n              const items = alternative.Items || [];\n              \n              // Build transcript with speaker labels if available\n              let transcript = '';\n              let currentSpeaker = '';\n              \n              for (const item of items) {\n                if (item.Content) {\n                  // Check if speaker changed\n                  if (this.currentConfig.mode === 'CONVERSATION' && item.Speaker) {\n                    const speaker = `Speaker_${item.Speaker}`;\n                    if (speaker !== currentSpeaker) {\n                      if (transcript) transcript += '\\n';\n                      transcript += `[${speaker === 'Speaker_0' ? 'DOCTOR' : 'PATIENT'}]: `;\n                      currentSpeaker = speaker;\n                    }\n                  }\n                  \n                  // Add content\n                  transcript += item.Content + ' ';\n                }\n              }\n              \n              // Send to callback\n              if (this.onTranscript && transcript.trim()) {\n                this.onTranscript({\n                  transcript: transcript.trim(),\n                  isPartial: false,\n                  confidence: alternative.Transcript ? 0.95 : 0,\n                  speaker: currentSpeaker\n                });\n              }\n            } else if (result.IsPartial && result.Alternatives && result.Alternatives[0]) {\n              // Handle partial results for real-time feedback\n              const alternative = result.Alternatives[0];\n              if (this.onTranscript && alternative.Transcript) {\n                this.onTranscript({\n                  transcript: alternative.Transcript,\n                  isPartial: true,\n                  confidence: 0\n                });\n              }\n            }\n          }\n        }\n      }\n    } catch (error) {\n      logError('awsTranscribe', 'Error message', {});\n      if (this.onError) {\n        this.onError(error as Error);\n      }\n    }\n  }\n\n  /**\n   * Convert Float32 audio to PCM16\n   */\n  private float32ToPCM16(float32Array: Float32Array): ArrayBuffer {\n    const buffer = new ArrayBuffer(float32Array.length * 2);\n    const view = new DataView(buffer);\n    let offset = 0;\n    \n    for (let i = 0; i < float32Array.length; i++, offset += 2) {\n      const s = Math.max(-1, Math.min(1, float32Array[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n    }\n    \n    return buffer;\n  }\n\n  /**\n   * Send audio chunk to AWS Transcribe\n   */\n  private sendAudioChunk(pcmData: ArrayBuffer): void {\n    // This would need WebSocket implementation for real streaming\n    // For now, we'll accumulate and send in batches\n    // In production, use WebSocket connection to AWS Transcribe\n    logDebug('awsTranscribe', 'Debug message', {});\n  }\n\n  /**\n   * Stop transcription\n   */\n  stopTranscription(): void {\n    this.isRecording = false;\n    this.cleanup();\n    logDebug('awsTranscribe', 'Debug message', {});\n  }\n\n  /**\n   * Clean up resources\n   */\n  private cleanup(): void {\n    if (this.processor) {\n      this.processor.disconnect();\n      this.processor = null;\n    }\n    \n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n    \n    if (this.audioStream) {\n      this.audioStream.getTracks().forEach(track => track.stop());\n      this.audioStream = null;\n    }\n    \n    this.onTranscript = null;\n    this.onError = null;\n  }\n\n  /**\n   * Set recording mode\n   */\n  setMode(mode: TranscriptionMode): void {\n    this.currentConfig.mode = mode;\n    this.currentConfig.enableSpeakerDiarization = mode === 'CONVERSATION';\n  }\n\n  /**\n   * Set medical specialty\n   */\n  setSpecialty(specialty: MedicalSpecialty): void {\n    this.currentConfig.specialty = specialty;\n  }\n}\n\n// Export singleton instance\nexport const awsTranscribeService = new AWSTranscribeService();","import { logError, logWarn, logInfo, logDebug } from './logger.service';\n/**\n * Dictated Notes Service\n * Frontend service for managing dictated notes storage and retrieval\n */\n\nconst API_BASE = import.meta.env.VITE_API_URL || 'https://www.tshla.ai/api/schedules';\n\nexport interface DictatedNote {\n  id: string;\n  provider_id: string;\n  provider_name: string;\n  provider_email: string;\n  provider_specialty: string;\n  patient_name: string;\n  patient_phone: string;\n  patient_email?: string;\n  patient_mrn?: string;\n  patient_dob?: string;\n  appointment_id?: string;\n  visit_date: string;\n  visit_type: 'new-patient' | 'follow-up' | 'consultation' | 'emergency' | 'annual-exam' | 'other';\n  note_title: string;\n  chief_complaint?: string;\n  raw_transcript: string;\n  processed_note: string;\n  ai_summary?: string;\n  clinical_impression?: string;\n  template_id?: string;\n  template_name?: string;\n  template_sections?: any;\n  recording_mode: 'dictation' | 'conversation';\n  recording_duration_seconds: number;\n  ai_model_used?: string;\n  processing_confidence_score?: number;\n  medical_terms_detected?: any;\n  status: 'draft' | 'pending-review' | 'reviewed' | 'final' | 'signed' | 'amended' | 'cancelled';\n  is_locked: boolean;\n  requires_review: boolean;\n  review_priority: 'low' | 'medium' | 'high' | 'urgent';\n  quality_score?: number;\n  created_at: string;\n  updated_at: string;\n  dictated_at: string;\n  last_edited_at?: string;\n  signed_at?: string;\n  signed_by_provider_name?: string;\n}\n\nexport interface CreateNoteRequest {\n  provider_id: string;\n  provider_name: string;\n  provider_email?: string;\n  provider_specialty?: string;\n  patient_name: string;\n  patient_phone: string;\n  patient_email?: string;\n  patient_mrn?: string;\n  patient_dob?: string;\n  appointment_id?: string;\n  visit_date?: string;\n  visit_type?: string;\n  note_title?: string;\n  chief_complaint?: string;\n  raw_transcript: string;\n  processed_note: string;\n  ai_summary?: string;\n  clinical_impression?: string;\n  template_id?: string;\n  template_name?: string;\n  template_sections?: any;\n  recording_mode?: string;\n  recording_duration_seconds?: number;\n  ai_model_used?: string;\n  processing_confidence_score?: number;\n  medical_terms_detected?: any;\n  status?: string;\n}\n\nexport interface UpdateNoteRequest {\n  processed_note?: string;\n  ai_summary?: string;\n  clinical_impression?: string;\n  status?: string;\n  updated_by_provider_id: string;\n  updated_by_provider_name: string;\n  change_description?: string;\n}\n\nexport interface NoteSearchParams {\n  query?: string;\n  provider_id?: string;\n  patient_name?: string;\n  date_from?: string;\n  date_to?: string;\n}\n\nexport interface NoteVersion {\n  id: string;\n  note_id: string;\n  version_number: number;\n  change_type: string;\n  change_description?: string;\n  changed_by_provider_name: string;\n  created_at: string;\n}\n\nexport interface NoteComment {\n  id: string;\n  note_id: string;\n  comment_text: string;\n  comment_type: string;\n  comment_priority: string;\n  commented_by_provider_name: string;\n  created_at: string;\n  is_resolved: boolean;\n}\n\nclass DictatedNotesService {\n  private authToken: string | null = null;\n\n  constructor() {\n    this.authToken = localStorage.getItem('auth_token');\n  }\n\n  private getHeaders(): HeadersInit {\n    const headers: HeadersInit = {\n      'Content-Type': 'application/json',\n    };\n\n    if (this.authToken) {\n      headers['Authorization'] = `Bearer ${this.authToken}`;\n    }\n\n    return headers;\n  }\n\n  /**\n   * Save a dictated note to the database\n   */\n  async saveDictatedNote(note: CreateNoteRequest): Promise<string> {\n    try {\n      const response = await fetch(`${API_BASE}/api/dictated-notes`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify({\n          ...note,\n          visit_date: note.visit_date || new Date().toISOString().split('T')[0],\n          note_title: note.note_title || `Note for ${note.patient_name}`,\n          status: note.status || 'draft',\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to save note: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      logInfo('dictatedNotesService', 'Info message', {});\n      return data.noteId;\n    } catch (error) {\n      logError('dictatedNotesService', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Get provider's notes\n   */\n  async getProviderNotes(\n    providerId: string,\n    options: {\n      limit?: number;\n      offset?: number;\n      status?: string;\n      startDate?: string;\n      endDate?: string;\n    } = {}\n  ): Promise<DictatedNote[]> {\n    try {\n      const params = new URLSearchParams();\n      if (options.limit) params.append('limit', options.limit.toString());\n      if (options.offset) params.append('offset', options.offset.toString());\n      if (options.status) params.append('status', options.status);\n      if (options.startDate) params.append('startDate', options.startDate);\n      if (options.endDate) params.append('endDate', options.endDate);\n\n      const queryString = params.toString();\n      const url = `${API_BASE}/api/providers/${providerId}/notes${queryString ? `?${queryString}` : ''}`;\n\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: this.getHeaders(),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch notes: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.notes || [];\n    } catch (error) {\n      logError('dictatedNotesService', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Get specific note details with versions and comments\n   */\n  async getNoteDetails(noteId: string): Promise<{\n    note: DictatedNote;\n    versions: NoteVersion[];\n    comments: NoteComment[];\n  }> {\n    try {\n      const response = await fetch(`${API_BASE}/api/notes/${noteId}`, {\n        method: 'GET',\n        headers: this.getHeaders(),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch note details: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return {\n        note: data.note,\n        versions: data.versions || [],\n        comments: data.comments || [],\n      };\n    } catch (error) {\n      logError('dictatedNotesService', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Update an existing note\n   */\n  async updateNote(noteId: string, updates: UpdateNoteRequest): Promise<number> {\n    try {\n      const response = await fetch(`${API_BASE}/api/notes/${noteId}`, {\n        method: 'PUT',\n        headers: this.getHeaders(),\n        body: JSON.stringify(updates),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update note: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.version;\n    } catch (error) {\n      logError('dictatedNotesService', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Search notes\n   */\n  async searchNotes(searchParams: NoteSearchParams): Promise<DictatedNote[]> {\n    try {\n      const params = new URLSearchParams();\n      Object.entries(searchParams).forEach(([key, value]) => {\n        if (value) params.append(key, value);\n      });\n\n      const queryString = params.toString();\n      const url = `${API_BASE}/api/notes/search${queryString ? `?${queryString}` : ''}`;\n\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: this.getHeaders(),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to search notes: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.results || [];\n    } catch (error) {\n      logError('dictatedNotesService', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Save note from current dictation session\n   */\n  async saveFromDictationSession(sessionData: {\n    transcript: string;\n    processedNote: string;\n    patientDetails: any;\n    selectedTemplate?: any;\n    recordingMode?: string;\n    providerId: string;\n    providerName: string;\n    providerEmail?: string;\n    appointmentId?: string;\n  }): Promise<string> {\n    const noteRequest: CreateNoteRequest = {\n      provider_id: sessionData.providerId,\n      provider_name: sessionData.providerName,\n      provider_email: sessionData.providerEmail,\n      patient_name: sessionData.patientDetails.name || 'Unknown Patient',\n      patient_phone: sessionData.patientDetails.phone || '',\n      patient_email: sessionData.patientDetails.email,\n      patient_mrn: sessionData.patientDetails.mrn,\n      appointment_id: sessionData.appointmentId,\n      raw_transcript: sessionData.transcript,\n      processed_note: sessionData.processedNote,\n      recording_mode: sessionData.recordingMode as 'dictation' | 'conversation',\n      template_id: sessionData.selectedTemplate?.id,\n      template_name: sessionData.selectedTemplate?.name,\n      template_sections: sessionData.selectedTemplate?.sections,\n      ai_model_used: 'claude-3-5-sonnet',\n      status: 'draft',\n    };\n\n    return this.saveDictatedNote(noteRequest);\n  }\n\n  /**\n   * Get recent notes for provider dashboard\n   */\n  async getRecentNotes(providerId: string, days: number = 7): Promise<DictatedNote[]> {\n    const endDate = new Date().toISOString().split('T')[0];\n    const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n\n    return this.getProviderNotes(providerId, {\n      startDate,\n      endDate,\n      limit: 20,\n    });\n  }\n\n  /**\n   * Get notes requiring review\n   */\n  async getNotesRequiringReview(providerId: string): Promise<DictatedNote[]> {\n    return this.getProviderNotes(providerId, {\n      status: 'pending-review',\n      limit: 50,\n    });\n  }\n\n  /**\n   * Mark note as final/signed\n   */\n  async signNote(noteId: string, providerId: string, providerName: string): Promise<void> {\n    return this.updateNote(noteId, {\n      status: 'signed',\n      updated_by_provider_id: providerId,\n      updated_by_provider_name: providerName,\n      change_description: 'Note signed by provider',\n    });\n  }\n\n  /**\n   * Get notes for specific patient\n   */\n  async getPatientNotes(patientName: string, providerId?: string): Promise<DictatedNote[]> {\n    return this.searchNotes({\n      patient_name: patientName,\n      provider_id: providerId,\n    });\n  }\n\n  /**\n   * Format note status for display\n   */\n  formatStatus(status: string): string {\n    const statusMap: Record<string, string> = {\n      draft: 'Draft',\n      'pending-review': 'Pending Review',\n      reviewed: 'Reviewed',\n      final: 'Final',\n      signed: 'Signed',\n      amended: 'Amended',\n      cancelled: 'Cancelled',\n    };\n\n    return statusMap[status] || status;\n  }\n\n  /**\n   * Get status color for UI\n   */\n  getStatusColor(status: string): string {\n    const colorMap: Record<string, string> = {\n      draft: 'gray',\n      'pending-review': 'yellow',\n      reviewed: 'blue',\n      final: 'green',\n      signed: 'green',\n      amended: 'orange',\n      cancelled: 'red',\n    };\n\n    return colorMap[status] || 'gray';\n  }\n\n  /**\n   * Calculate reading time estimate\n   */\n  estimateReadingTime(text: string): number {\n    const wordsPerMinute = 200; // Average reading speed\n    const wordCount = text.split(/\\s+/).length;\n    return Math.ceil(wordCount / wordsPerMinute);\n  }\n\n  /**\n   * Extract key information from note\n   */\n  extractKeyInfo(note: DictatedNote): {\n    patientInfo: string;\n    visitInfo: string;\n    duration: string;\n    wordCount: number;\n  } {\n    return {\n      patientInfo: `${note.patient_name}${note.patient_phone ? ` • ${note.patient_phone}` : ''}`,\n      visitInfo: `${this.formatVisitType(note.visit_type)} • ${this.formatDate(note.visit_date)}`,\n      duration: this.formatDuration(note.recording_duration_seconds),\n      wordCount: note.processed_note.split(/\\s+/).length,\n    };\n  }\n\n  private formatVisitType(visitType: string): string {\n    const typeMap: Record<string, string> = {\n      'new-patient': 'New Patient',\n      'follow-up': 'Follow-up',\n      consultation: 'Consultation',\n      emergency: 'Emergency',\n      'annual-exam': 'Annual Exam',\n      other: 'Other',\n    };\n\n    return typeMap[visitType] || visitType;\n  }\n\n  private formatDate(dateString: string): string {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n    });\n  }\n\n  private formatDuration(seconds: number): string {\n    if (seconds < 60) return `${seconds}s`;\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return remainingSeconds > 0 ? `${minutes}m ${remainingSeconds}s` : `${minutes}m`;\n  }\n}\n\nexport const dictatedNotesService = new DictatedNotesService();\n","import { logError, logWarn, logInfo, logDebug } from './logger.service';\n/**\n * Schedule Service\n * Frontend service for provider schedule management\n */\n\nconst API_BASE = import.meta.env.VITE_API_URL || 'https://www.tshla.ai/api/schedules';\n\nexport interface ProviderSchedule {\n  id: string;\n  provider_id: string;\n  provider_name: string;\n  patient_name?: string;\n  patient_phone?: string;\n  patient_email?: string;\n  appointment_type:\n    | 'new-patient'\n    | 'follow-up'\n    | 'consultation'\n    | 'emergency'\n    | 'block-time'\n    | 'break';\n  appointment_title: string;\n  scheduled_date: string;\n  start_time: string;\n  end_time: string;\n  duration_minutes: number;\n  status: 'scheduled' | 'confirmed' | 'in-progress' | 'completed' | 'cancelled' | 'no-show';\n  chief_complaint?: string;\n  urgency_level: 'routine' | 'urgent' | 'emergency';\n  is_telehealth: boolean;\n  provider_notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CreateAppointmentRequest {\n  provider_id: string;\n  provider_name: string;\n  patient_name: string;\n  patient_phone: string;\n  patient_email?: string;\n  appointment_type: string;\n  appointment_title: string;\n  scheduled_date: string;\n  start_time: string;\n  end_time: string;\n  chief_complaint?: string;\n  urgency_level?: string;\n  is_telehealth?: boolean;\n  provider_notes?: string;\n}\n\nclass ScheduleService {\n  private authToken: string | null = null;\n\n  constructor() {\n    this.authToken = localStorage.getItem('auth_token');\n  }\n\n  private getHeaders(): HeadersInit {\n    const headers: HeadersInit = {\n      'Content-Type': 'application/json',\n    };\n\n    if (this.authToken) {\n      headers['Authorization'] = `Bearer ${this.authToken}`;\n    }\n\n    return headers;\n  }\n\n  /**\n   * Get provider schedule for a specific date or date range\n   */\n  async getProviderSchedule(\n    providerId: string,\n    date?: string,\n    startDate?: string,\n    endDate?: string\n  ): Promise<ProviderSchedule[]> {\n    try {\n      const params = new URLSearchParams();\n      if (date) params.append('date', date);\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n\n      const queryString = params.toString();\n      const url = `${API_BASE}/api/providers/${providerId}/schedule${queryString ? `?${queryString}` : ''}`;\n\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: this.getHeaders(),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch schedule: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.appointments || [];\n    } catch (error) {\n      logError('scheduleService', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new appointment\n   */\n  async createAppointment(appointment: CreateAppointmentRequest): Promise<string> {\n    try {\n      const response = await fetch(`${API_BASE}/api/appointments`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify(appointment),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to create appointment: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.appointmentId;\n    } catch (error) {\n      logError('scheduleService', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Update an existing appointment\n   */\n  async updateAppointment(\n    appointmentId: string,\n    updates: Partial<ProviderSchedule>\n  ): Promise<void> {\n    try {\n      const response = await fetch(`${API_BASE}/api/appointments/${appointmentId}`, {\n        method: 'PUT',\n        headers: this.getHeaders(),\n        body: JSON.stringify(updates),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update appointment: ${response.statusText}`);\n      }\n    } catch (error) {\n      logError('scheduleService', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Get today's schedule for all providers\n   */\n  async getTodaysSchedule(): Promise<ProviderSchedule[]> {\n    try {\n      const response = await fetch(`${API_BASE}/api/schedule/today`, {\n        method: 'GET',\n        headers: this.getHeaders(),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch today's schedule: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.schedule || [];\n    } catch (error) {\n      logError('scheduleService', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Get provider's today schedule\n   */\n  async getProviderTodaySchedule(providerId: string): Promise<ProviderSchedule[]> {\n    const today = new Date().toISOString().split('T')[0];\n    return this.getProviderSchedule(providerId, today);\n  }\n\n  /**\n   * Get provider's weekly schedule\n   */\n  async getProviderWeeklySchedule(\n    providerId: string,\n    startOfWeek?: Date\n  ): Promise<ProviderSchedule[]> {\n    const start = startOfWeek || this.getStartOfWeek(new Date());\n    const end = new Date(start);\n    end.setDate(start.getDate() + 6);\n\n    const startDate = start.toISOString().split('T')[0];\n    const endDate = end.toISOString().split('T')[0];\n\n    return this.getProviderSchedule(providerId, undefined, startDate, endDate);\n  }\n\n  /**\n   * Mark appointment as completed\n   */\n  async completeAppointment(appointmentId: string): Promise<void> {\n    return this.updateAppointment(appointmentId, {\n      status: 'completed',\n      updated_at: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Cancel appointment\n   */\n  async cancelAppointment(appointmentId: string, reason?: string): Promise<void> {\n    const updates: Partial<ProviderSchedule> = {\n      status: 'cancelled',\n      updated_at: new Date().toISOString(),\n    };\n\n    if (reason) {\n      updates.provider_notes = reason;\n    }\n\n    return this.updateAppointment(appointmentId, updates);\n  }\n\n  /**\n   * Quick appointment creation for dictation\n   */\n  async createQuickAppointment(\n    providerId: string,\n    providerName: string,\n    patientName: string,\n    patientPhone: string,\n    chiefComplaint?: string\n  ): Promise<string> {\n    const now = new Date();\n    const todayStr = now.toISOString().split('T')[0];\n    const timeStr = now.toTimeString().slice(0, 5);\n    const endTime = new Date(now.getTime() + 30 * 60000).toTimeString().slice(0, 5); // 30 minutes later\n\n    const appointment: CreateAppointmentRequest = {\n      provider_id: providerId,\n      provider_name: providerName,\n      patient_name: patientName,\n      patient_phone: patientPhone,\n      appointment_type: 'follow-up',\n      appointment_title: `Quick Note - ${patientName}`,\n      scheduled_date: todayStr,\n      start_time: timeStr,\n      end_time: endTime,\n      chief_complaint: chiefComplaint,\n      urgency_level: 'routine',\n      is_telehealth: false,\n    };\n\n    return this.createAppointment(appointment);\n  }\n\n  /**\n   * Utility: Get start of week (Monday)\n   */\n  private getStartOfWeek(date: Date): Date {\n    const d = new Date(date);\n    const day = d.getDay();\n    const diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is Sunday\n    return new Date(d.setDate(diff));\n  }\n\n  /**\n   * Format time for display\n   */\n  formatTime(timeString: string): string {\n    const [hours, minutes] = timeString.split(':');\n    const hour = parseInt(hours);\n    const ampm = hour >= 12 ? 'PM' : 'AM';\n    const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n    return `${displayHour}:${minutes} ${ampm}`;\n  }\n\n  /**\n   * Format date for display\n   */\n  formatDate(dateString: string): string {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      weekday: 'short',\n      month: 'short',\n      day: 'numeric',\n    });\n  }\n\n  /**\n   * Get appointment duration in minutes\n   */\n  getAppointmentDuration(startTime: string, endTime: string): number {\n    const start = new Date(`2000-01-01T${startTime}`);\n    const end = new Date(`2000-01-01T${endTime}`);\n    return Math.round((end.getTime() - start.getTime()) / 60000);\n  }\n}\n\nexport const scheduleService = new ScheduleService();\n","import React from 'react';\n\ninterface NoteFormatterProps {\n  content: string;\n}\n\nexport default function NoteFormatter({ content }: NoteFormatterProps) {\n  const formatNote = (text: string) => {\n    // Split content into sections\n    const lines = text.split('\\n');\n    const formattedSections: JSX.Element[] = [];\n    let currentSection: string[] = [];\n    let sectionKey = 0;\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n\n      // Check if this is a main section header (starts with ###)\n      if (line.startsWith('###')) {\n        // Process previous section if exists\n        if (currentSection.length > 0) {\n          formattedSections.push(\n            <div key={`section-${sectionKey}`} className=\"mb-4\">\n              {formatSection(currentSection.join('\\n'))}\n            </div>\n          );\n          sectionKey++;\n          currentSection = [];\n        }\n\n        // Add the header with special formatting\n        const headerText = line.replace(/^###\\s*/, '');\n        formattedSections.push(\n          <h3\n            key={`header-${sectionKey}`}\n            className=\"text-lg font-bold text-blue-800 border-b-2 border-blue-200 pb-2 mb-3 mt-6\"\n          >\n            {getSectionIcon(headerText)} {headerText}\n          </h3>\n        );\n        sectionKey++;\n      } else {\n        currentSection.push(line);\n      }\n    }\n\n    // Process last section\n    if (currentSection.length > 0) {\n      formattedSections.push(\n        <div key={`section-${sectionKey}`} className=\"mb-4\">\n          {formatSection(currentSection.join('\\n'))}\n        </div>\n      );\n    }\n\n    return formattedSections;\n  };\n\n  const formatSection = (text: string): JSX.Element[] => {\n    const lines = text.split('\\n').filter(line => line.trim());\n    return lines.map((line, index) => {\n      const trimmedLine = line.trim();\n\n      // Assessment / Plan special formatting\n      if (trimmedLine.match(/^Assessment\\s*\\/\\s*Plan$/i)) {\n        return (\n          <h4 key={index} className=\"font-bold text-gray-900 mt-3 mb-2 text-base\">\n            {trimmedLine}\n          </h4>\n        );\n      }\n\n      // Condition headers (e.g., \"T1DM:\", \"HTN:\", etc.)\n      if (trimmedLine.match(/^[A-Z0-9]+:/) && trimmedLine.length < 30) {\n        const [condition, ...rest] = trimmedLine.split(':');\n        return (\n          <div key={index} className=\"mb-2\">\n            <span className=\"font-bold text-purple-700 mr-2\">{condition}:</span>\n            <span className=\"text-gray-700\">{rest.join(':').trim()}</span>\n          </div>\n        );\n      }\n\n      // ICD-10 codes\n      if (trimmedLine.match(/^[A-Z]\\d{2}\\.?\\d*/)) {\n        const [code, ...description] = trimmedLine.split(':');\n        return (\n          <div key={index} className=\"ml-4 mb-1\">\n            <span className=\"inline-block bg-gray-100 text-gray-800 px-2 py-1 rounded text-sm font-mono mr-2\">\n              {code.trim()}\n            </span>\n            <span className=\"text-gray-700\">{description.join(':').trim()}</span>\n          </div>\n        );\n      }\n\n      // Numbered items\n      if (trimmedLine.match(/^\\d+\\./)) {\n        return (\n          <div key={index} className=\"ml-4 mb-2 flex\">\n            <span className=\"text-blue-600 font-semibold mr-2\">\n              {trimmedLine.match(/^\\d+\\./)![0]}\n            </span>\n            <span className=\"text-gray-700 flex-1\">{trimmedLine.replace(/^\\d+\\.\\s*/, '')}</span>\n          </div>\n        );\n      }\n\n      // Bullet points\n      if (trimmedLine.startsWith('•') || trimmedLine.startsWith('-')) {\n        return (\n          <div key={index} className=\"ml-4 mb-1 flex\">\n            <span className=\"text-green-600 mr-2\">•</span>\n            <span className=\"text-gray-700 flex-1\">{trimmedLine.replace(/^[•-]\\s*/, '')}</span>\n          </div>\n        );\n      }\n\n      // Lab values and vitals (contains numbers with units)\n      if (trimmedLine.match(/\\d+\\s*(mg|ml|units|mcg|%|mmHg)/i)) {\n        return (\n          <div key={index} className=\"ml-4 mb-1\">\n            <span className=\"text-gray-700\">{highlightValues(trimmedLine)}</span>\n          </div>\n        );\n      }\n\n      // Medications (contains mg, units, etc.)\n      if (trimmedLine.match(/(mg|mcg|units?|tablet|capsule|injection|daily|twice|three times)/i)) {\n        return (\n          <div key={index} className=\"ml-4 mb-2 bg-blue-50 border-l-4 border-blue-400 p-2\">\n            <span className=\"text-gray-800\">{highlightMedication(trimmedLine)}</span>\n          </div>\n        );\n      }\n\n      // A1C values\n      if (trimmedLine.match(/A1[Cc].*:\\s*\\d/)) {\n        return (\n          <div key={index} className=\"ml-4 mb-1\">\n            <span className=\"font-semibold text-orange-600\">A1C: </span>\n            <span className=\"text-gray-700\">{trimmedLine.replace(/A1[Cc].*?:\\s*/, '')}</span>\n          </div>\n        );\n      }\n\n      // Return to Office\n      if (\n        trimmedLine.toLowerCase().includes('return') &&\n        trimmedLine.toLowerCase().includes('office')\n      ) {\n        return (\n          <div key={index} className=\"mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded\">\n            <span className=\"text-gray-800 font-medium\">📅 {trimmedLine}</span>\n          </div>\n        );\n      }\n\n      // Default paragraph\n      return (\n        <p key={index} className=\"text-gray-700 mb-2 leading-relaxed\">\n          {trimmedLine}\n        </p>\n      );\n    });\n  };\n\n  const highlightValues = (text: string): JSX.Element => {\n    const parts = text.split(/(\\d+\\.?\\d*\\s*(?:mg|ml|units|mcg|%|mmHg))/gi);\n    return (\n      <>\n        {parts.map((part, i) => {\n          if (part.match(/\\d+\\.?\\d*\\s*(?:mg|ml|units|mcg|%|mmHg)/i)) {\n            return (\n              <span key={i} className=\"font-semibold text-indigo-600 bg-indigo-50 px-1 rounded\">\n                {part}\n              </span>\n            );\n          }\n          return <span key={i}>{part}</span>;\n        })}\n      </>\n    );\n  };\n\n  const highlightMedication = (text: string): JSX.Element => {\n    // Highlight medication names (usually at the beginning)\n    const parts = text.split(/^([A-Za-z]+(?:\\s+[A-Za-z]+)?)\\s*/);\n    if (parts.length > 1) {\n      return (\n        <>\n          <span className=\"font-bold text-blue-700\">{parts[1]}</span>\n          <span>{highlightValues(parts.slice(2).join(''))}</span>\n        </>\n      );\n    }\n    return <>{highlightValues(text)}</>;\n  };\n\n  const getSectionIcon = (headerText: string): string => {\n    const lowerHeader = headerText.toLowerCase();\n\n    if (lowerHeader.includes('presenting')) return '🏥';\n    if (lowerHeader.includes('diabetes') || lowerHeader.includes('t1d')) return '🩺';\n    if (lowerHeader.includes('hypertension') || lowerHeader.includes('htn')) return '❤️';\n    if (lowerHeader.includes('mental') || lowerHeader.includes('depression')) return '🧠';\n    if (lowerHeader.includes('vitamin')) return '💊';\n    if (lowerHeader.includes('lipid') || lowerHeader.includes('cholesterol')) return '🫀';\n    if (lowerHeader.includes('assessment') || lowerHeader.includes('plan')) return '📋';\n    if (lowerHeader.includes('pump') || lowerHeader.includes('insulin')) return '💉';\n    if (lowerHeader.includes('monitoring')) return '📊';\n    if (lowerHeader.includes('management')) return '⚕️';\n    if (lowerHeader.includes('problem list') || lowerHeader.includes('icd')) return '📝';\n    if (lowerHeader.includes('laboratory') || lowerHeader.includes('lab')) return '🧪';\n    if (lowerHeader.includes('prescription')) return '💊';\n    if (lowerHeader.includes('return') || lowerHeader.includes('follow')) return '📅';\n\n    return '📌';\n  };\n\n  return (\n    <div className=\"prose prose-sm max-w-none\">\n      <div className=\"bg-white rounded-lg p-6\">{formatNote(content)}</div>\n    </div>\n  );\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { medicalCorrections } from '../services/medicalCorrections.service';\nimport { speechServiceRouter } from '../services/speechServiceRouter.service';\nimport { awsTranscribeService } from '../services/awsTranscribe.service';\nimport { awsTranscribeStreamingFixed } from '../services/awsTranscribeMedicalStreamingFixed.service';\nimport { awsTranscribeSimple } from '../services/awsTranscribeSimple.service';\nimport { getPatientData, type PatientData } from '../services/patientData.service';\nimport { specialtyService, type DoctorSpecialty } from '../services/specialty.service';\nimport { doctorProfileService, type DoctorTemplate } from '../services/doctorProfile.service';\nimport { unifiedAuthService } from '../services/unifiedAuth.service';\nimport { dictatedNotesService } from '../services/dictatedNotesService';\nimport { scheduleService } from '../services/scheduleService';\nimport { scheduleDatabaseService } from '../services/scheduleDatabase.service';\nimport { azureAIService } from '../services/azureAI.service';\nimport { ChevronDown, FileText, Star, Clock, Mic, MicOff, Brain, User, Trash2, Copy, Printer, Stethoscope, ArrowLeft } from 'lucide-react';\nimport NoteFormatter from './NoteFormatter';\nimport { NoteSharing } from './NoteSharing';\nimport { noteSharingService, type ShareableNote } from '../services/noteSharing.service';\nimport '../styles/modernUI.css';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\n// Speech recognition interfaces removed - using HIPAA-compliant services only\n\ninterface MedicalDictationProps {\n  patientId?: string;\n  preloadPatientData?: boolean;\n}\n\nexport default function MedicalDictation({ patientId, preloadPatientData = false }: MedicalDictationProps) {\n  const navigate = useNavigate();\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [interimText, setInterimText] = useState('');\n  const [processedNote, setProcessedNote] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [showProcessed, setShowProcessed] = useState(false);\n  const [recordingError, setRecordingError] = useState<string>('');\n  const [recordingMode, setRecordingMode] = useState<'dictation' | 'conversation' | null>(null); // Force selection\n  // Speech recognition ref removed - using HIPAA-compliant services\n  const [doctorSpecialty, setDoctorSpecialty] = useState<string>('');\n  const [selectedTemplate, setSelectedTemplate] = useState<DoctorTemplate | null>(null);\n  const [showTemplateSelector, setShowTemplateSelector] = useState(false);\n  const [templates, setTemplates] = useState<DoctorTemplate[]>([]);\n  const [recentTemplates, setRecentTemplates] = useState<DoctorTemplate[]>([]);\n  const [favoriteTemplates, setFavoriteTemplates] = useState<DoctorTemplate[]>([]);\n  const [previousVisitNote, setPreviousVisitNote] = useState('');\n  const [showPatientDetails, setShowPatientDetails] = useState(false);\n  const [autoSaveStatus, setAutoSaveStatus] = useState<'idle' | 'saving' | 'saved'>('idle');\n  const [lastSaveTime, setLastSaveTime] = useState<Date | null>(null);\n  const [showDataRestored, setShowDataRestored] = useState(false);\n  const [isSavingToDatabase, setIsSavingToDatabase] = useState(false);\n  const [lastSavedNoteId, setLastSavedNoteId] = useState<string | null>(null);\n  const [showSaveSuccess, setShowSaveSuccess] = useState(false);\n  const [databaseAutoSaveStatus, setDatabaseAutoSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n  const [lastDatabaseSaveTime, setLastDatabaseSaveTime] = useState<Date | null>(null);\n  \n  // Patient details for live editing\n  const [patientDetails, setPatientDetails] = useState({\n    name: '',\n    mrn: '',\n    dob: '',\n    email: '',\n    visitDate: new Date().toLocaleDateString()\n  });\n\n  // Get current user for provider ID\n  const currentUser = unifiedAuthService.getCurrentUser();\n  const providerId = currentUser?.id || currentUser?.email || 'doctor-default-001';\n  const providerName = currentUser?.name || 'Dr. Default';\n\n  // Load patient data if patientId is provided and preload is enabled\n  useEffect(() => {\n    const loadPatientFromDatabase = async () => {\n      if (patientId && preloadPatientData) {\n        try {\n          // First try to get patient data from database schedule\n          const today = new Date().toISOString().split('T')[0];\n          const schedule = await scheduleDatabaseService.getScheduleForDate(providerId, today);\n\n          // Find the patient in today's schedule\n          const patient = schedule.find(p => p.id === patientId || p.name.includes(patientId) || p.mrn === patientId);\n\n          if (patient) {\n            setPatientDetails({\n              name: patient.name || '',\n              mrn: patient.mrn || '',\n              dob: patient.dob || '',\n              email: patient.phone || '', // Use phone as email fallback\n              visitDate: new Date().toLocaleDateString()\n            });\n            logInfo('MedicalDictation', 'Info message', {});\n          } else {\n            // Fallback to old localStorage method\n            const data = getPatientData(patientId);\n            if (data) {\n              setPatientDetails({\n                name: data.name || '',\n                mrn: data.mrn || '',\n                dob: data.dob || '',\n                email: data.email || '',\n                visitDate: new Date().toLocaleDateString()\n              });\n              logInfo('MedicalDictation', 'Info message', {});\n            }\n          }\n        } catch (error) {\n          logError('MedicalDictation', 'Error message', {});\n          // Fallback to old localStorage method\n          const data = getPatientData(patientId);\n          if (data) {\n            setPatientDetails({\n              name: data.name || '',\n              mrn: data.mrn || '',\n              dob: data.dob || '',\n              email: data.email || '',\n              visitDate: new Date().toLocaleDateString()\n            });\n          }\n        }\n      }\n    };\n\n    loadPatientFromDatabase();\n  }, [patientId, preloadPatientData, providerId]);\n\n  // Load existing notes for this patient from database\n  useEffect(() => {\n    const loadExistingNotes = async () => {\n      if (patientId && patientDetails.name) {\n        try {\n          logDebug('MedicalDictation', 'Debug message', {});\n          const existingNotes = await scheduleDatabaseService.getNotes(providerId);\n\n          // Find the most recent note for this patient\n          const patientNotes = existingNotes.filter(note =>\n            note.patientName === patientDetails.name ||\n            (note.patientMrn && patientDetails.mrn && note.patientMrn === patientDetails.mrn)\n          );\n\n          if (patientNotes.length > 0) {\n            // Sort by created date (assuming most recent first)\n            const mostRecentNote = patientNotes[0];\n\n            // Load the existing content\n            if (mostRecentNote.rawTranscript) {\n              setTranscript(mostRecentNote.rawTranscript);\n            }\n            if (mostRecentNote.aiProcessedNote) {\n              setProcessedNote(mostRecentNote.aiProcessedNote);\n            }\n\n            setLastSavedNoteId(String(mostRecentNote.id || ''));\n            logInfo('MedicalDictation', 'Info message', {});\n\n            // Show notification that previous notes were loaded\n            setTimeout(() => {\n              alert(`📋 Loaded previous notes for ${patientDetails.name}\\n\\nYou can continue editing where you left off!`);\n            }, 1000);\n          }\n        } catch (error) {\n          logError('MedicalDictation', 'Error message', {});\n        }\n      }\n    };\n\n    // Only load once when component mounts with patient data\n    if (patientId && patientDetails.name && !transcript && !processedNote) {\n      loadExistingNotes();\n    }\n  }, [patientId, patientDetails.name, patientDetails.mrn, providerId]);\n\n  // Load doctor templates\n  useEffect(() => {\n    const loadTemplates = async () => {\n      const currentUser = unifiedAuthService.getCurrentUser();\n      // Always use a default doctor ID if no user is logged in\n      const doctorId = currentUser?.id || currentUser?.email || 'doctor-default-001';\n      \n      logDebug('MedicalDictation', 'Debug message', {});\n      doctorProfileService.initialize(doctorId);\n      \n      try {\n        const allTemplates = await doctorProfileService.getTemplates(doctorId);\n        const recent = await doctorProfileService.getRecentTemplates(doctorId);\n        const favorites = await doctorProfileService.getFavoriteTemplates(doctorId);\n        \n        logDebug('MedicalDictation', 'Debug message', {});\n        setTemplates(allTemplates);\n        setRecentTemplates(recent);\n        setFavoriteTemplates(favorites);\n        \n        // Set default template if available\n        const defaultTemplate = await doctorProfileService.getDefaultTemplate(doctorId);\n        if (defaultTemplate) {\n          setSelectedTemplate(defaultTemplate);\n        }\n      } catch (error) {\n        logError('MedicalDictation', 'Error message', {});\n        // Load empty array as fallback, don't block dictation\n        setTemplates([]);\n        setRecentTemplates([]);\n        setFavoriteTemplates([]);\n      }\n    };\n    loadTemplates();\n  }, []);\n\n  // Auto-save transcript to localStorage every 10 seconds with visual feedback\n  useEffect(() => {\n    const autoSaveInterval = setInterval(() => {\n      if (transcript || processedNote) {\n        setAutoSaveStatus('saving');\n\n        const autoSaveData = {\n          transcript,\n          processedNote,\n          patientDetails,\n          previousVisitNote,\n          selectedTemplate: selectedTemplate?.id,\n          recordingMode,\n          timestamp: new Date().toISOString()\n        };\n\n        localStorage.setItem('autosave_dictation', JSON.stringify(autoSaveData));\n        const now = new Date();\n        setLastSaveTime(now);\n        setAutoSaveStatus('saved');\n\n        logDebug('MedicalDictation', 'Debug message', {}); \n\n        // Reset status after 2 seconds\n        setTimeout(() => setAutoSaveStatus('idle'), 2000);\n      }\n    }, 10000); // Save every 10 seconds\n\n    return () => clearInterval(autoSaveInterval);\n  }, [transcript, processedNote, patientDetails, previousVisitNote, selectedTemplate, recordingMode]);\n\n  // Auto-save to database every 30 seconds with changes detected\n  useEffect(() => {\n    const databaseAutoSaveInterval = setInterval(async () => {\n      if ((transcript || processedNote) && patientDetails.name && databaseAutoSaveStatus !== 'saving') {\n        try {\n          setDatabaseAutoSaveStatus('saving');\n\n          const noteId = await scheduleDatabaseService.saveNote(\n            providerId,\n            providerName,\n            {\n              patientName: patientDetails.name,\n              patientMrn: patientDetails.mrn,\n              rawTranscript: transcript,\n              aiProcessedNote: processedNote,\n              recordingMode: recordingMode || 'dictation',\n              isQuickNote: !patientId\n            }\n          );\n\n          if (noteId) {\n            setLastSavedNoteId(String(noteId));\n            setLastDatabaseSaveTime(new Date());\n            setDatabaseAutoSaveStatus('saved');\n            logDebug('MedicalDictation', `Auto-saved at ${new Date().toLocaleTimeString()}`);\n\n            setTimeout(() => setDatabaseAutoSaveStatus('idle'), 3000);\n          } else {\n            setDatabaseAutoSaveStatus('error');\n            setTimeout(() => setDatabaseAutoSaveStatus('idle'), 5000);\n          }\n        } catch (error) {\n          logError('MedicalDictation', 'Error message', {});\n          setDatabaseAutoSaveStatus('error');\n          setTimeout(() => setDatabaseAutoSaveStatus('idle'), 5000);\n        }\n      }\n    }, 30000); // Save every 30 seconds\n\n    return () => clearInterval(databaseAutoSaveInterval);\n  }, [transcript, processedNote, patientDetails.name, patientDetails.mrn, recordingMode, patientId, providerId, providerName, databaseAutoSaveStatus]);\n\n  // Restore auto-saved data on mount with improved UX\n  useEffect(() => {\n    const savedData = localStorage.getItem('autosave_dictation');\n    if (savedData) {\n      try {\n        const data = JSON.parse(savedData);\n        const savedTime = new Date(data.timestamp);\n        const now = new Date();\n        const hoursSince = (now.getTime() - savedTime.getTime()) / (1000 * 60 * 60);\n\n        // Auto-restore if less than 1 hour old (no prompt needed)\n        if (hoursSince < 1) {\n          setTranscript(data.transcript || '');\n          setProcessedNote(data.processedNote || '');\n          setPatientDetails(data.patientDetails || patientDetails);\n          setPreviousVisitNote(data.previousVisitNote || '');\n          setRecordingMode(data.recordingMode || null);\n          if (data.selectedTemplate) {\n            const template = templates.find(t => t.id === data.selectedTemplate);\n            if (template) setSelectedTemplate(template);\n          }\n          setShowProcessed(!!data.processedNote);\n          setShowDataRestored(true);\n          setTimeout(() => setShowDataRestored(false), 5000); // Hide after 5 seconds\n          logDebug('MedicalDictation', 'Debug message', {});\n        }\n        // Prompt if 1-24 hours old\n        else if (hoursSince < 24) {\n          if (window.confirm(`Found saved work from ${savedTime.toLocaleString()}. Continue where you left off?`)) {\n            setTranscript(data.transcript || '');\n            setProcessedNote(data.processedNote || '');\n            setPatientDetails(data.patientDetails || patientDetails);\n            setPreviousVisitNote(data.previousVisitNote || '');\n            setRecordingMode(data.recordingMode || null);\n            if (data.selectedTemplate) {\n              const template = templates.find(t => t.id === data.selectedTemplate);\n              if (template) setSelectedTemplate(template);\n            }\n            setShowProcessed(!!data.processedNote);\n            setShowDataRestored(true);\n            setTimeout(() => setShowDataRestored(false), 5000);\n          } else {\n            localStorage.removeItem('autosave_dictation');\n          }\n        }\n        // Remove if older than 24 hours\n        else {\n          localStorage.removeItem('autosave_dictation');\n        }\n      } catch (error) {\n        logError('MedicalDictation', 'Error message', {});\n        localStorage.removeItem('autosave_dictation');\n      }\n    }\n  }, [templates]);\n\n  // Enhanced session extension for active dictation\n  useEffect(() => {\n    const extendSession = (reason = 'activity') => {\n      const expiresAt = new Date(Date.now() + 120 * 60 * 1000); // Extend by 2 hours\n      localStorage.setItem('session_expires', expiresAt.toISOString());\n      logDebug('MedicalDictation', 'Debug message', {});\n    };\n\n    // AUTO-EXTEND WHILE RECORDING - Never timeout during active recording\n    if (isRecording) {\n      const recordingExtender = setInterval(() => {\n        extendSession('recording');\n      }, 30000); // Extend every 30 seconds while recording\n\n      return () => clearInterval(recordingExtender);\n    }\n\n    // Extend session on meaningful user interactions (not just mouse movement)\n    const events = ['click', 'keypress', 'input'];\n    const handleActivity = () => extendSession('user-interaction');\n\n    events.forEach(event => {\n      window.addEventListener(event, handleActivity);\n    });\n\n    // Enhanced session monitoring with auto-extension for active work\n    const sessionCheck = setInterval(() => {\n      const expires = localStorage.getItem('session_expires');\n      if (expires) {\n        const expiresAt = new Date(expires);\n        const now = new Date();\n        const minutesLeft = (expiresAt.getTime() - now.getTime()) / (1000 * 60);\n\n        // Auto-extend if user has been actively working (transcript or note content exists)\n        if (minutesLeft < 10 && (transcript.length > 0 || processedNote.length > 0)) {\n          extendSession('auto-extend-active-work');\n        }\n        // Show warning for empty sessions only\n        else if (minutesLeft < 5 && minutesLeft > 0 && !transcript && !processedNote) {\n          if (window.confirm('Your session will expire in less than 5 minutes. Click OK to extend your session.')) {\n            extendSession('manual-extension');\n          }\n        }\n      }\n    }, 60000); // Check every minute\n\n    return () => {\n      events.forEach(event => {\n        window.removeEventListener(event, handleActivity);\n      });\n      clearInterval(sessionCheck);\n    };\n  }, [isRecording, transcript, processedNote]);\n\n  // Load doctor's specialty from localStorage and set in specialty service\n  useEffect(() => {\n    const userData = localStorage.getItem('user_data');\n    if (userData) {\n      try {\n        const user = JSON.parse(userData);\n        if (user.specialty) {\n          // Set the doctor in the specialty service\n          const doctor = {\n            id: user.id || 'default',\n            name: user.name || 'Doctor',\n            specialty: user.specialty as DoctorSpecialty\n          };\n          specialtyService.setCurrentDoctor(doctor);\n          \n          // Format specialty for display\n          const displaySpecialty = user.specialty === 'endocrinology' ? 'Endocrinology' :\n                                 user.specialty === 'psychiatry' ? 'Psychiatry' :\n                                 user.specialty === 'nutrition' ? 'Nutrition' : \n                                 user.specialty;\n          setDoctorSpecialty(displaySpecialty);\n          logDebug('MedicalDictation', 'Debug message', {});\n        }\n      } catch (error) {\n        logError('MedicalDictation', 'Error message', {});\n      }\n    }\n  }, []);\n\n  // Initialize HIPAA-compliant speech services\n  useEffect(() => {\n    logDebug('MedicalDictation', 'Debug message', {});\n    \n    // Check if speech services are available\n    if (!speechServiceRouter.isAnyServiceAvailable()) {\n      setRecordingError('HIPAA-compliant speech services are not configured. Please contact administrator.');\n      logWarn('MedicalDictation', 'Warning message', {});\n      return;\n    }\n\n    logInfo('MedicalDictation', 'Info message', {});\n    logDebug('MedicalDictation', 'Debug message', {}); \n\n    return () => {\n      // Cleanup will be handled by individual services\n      logDebug('MedicalDictation', 'Debug message', {});\n    };\n  }, []);\n\n  const startRecording = async () => {\n    if (isRecording) return;\n    \n    if (!recordingMode) {\n      alert('Please select a recording mode (Dictation or Conversation) before starting.');\n      return;\n    }\n    \n    try {\n      // Use Speech Service Router for Azure/AWS migration support\n      logDebug('MedicalDictation', 'Debug message', {});\n      \n      const transcriptionStarted = await speechServiceRouter.startRecording(\n        recordingMode === 'conversation' ? 'conversation' : 'dictation',\n        {\n          onTranscript:\n        (text, isFinal) => {\n          logDebug('MedicalDictation', 'Debug message', {});\n          const corrected = medicalCorrections.correctTranscription(text);\n          \n          if (!isFinal) {\n            // Show partial results\n            setInterimText(corrected);\n          } else {\n            // Append final results\n            setTranscript(prev => {\n              const updated = prev + (prev ? ' ' : '') + corrected;\n              logDebug('MedicalDictation', 'Debug message', {});\n              return updated;\n            });\n            setInterimText('');\n          }\n        },\n        onError: (error) => {\n          logError('MedicalDictation', 'Error message', {});\n          setRecordingError(`Speech Recognition Error: ${error}`);\n          setIsRecording(false);\n        }\n      }\n      );\n      \n      if (transcriptionStarted) {\n        setIsRecording(true);\n        setRecordingError('');\n        logInfo('MedicalDictation', 'Info message', {});\n      } else {\n        setRecordingError('Failed to start AWS Transcribe Medical');\n      }\n    } catch (error) {\n      logError('MedicalDictation', 'Error message', {});\n      setRecordingError('Failed to start recording. Please try again.');\n    }\n  };\n\n  const stopRecording = async () => {\n    if (!isRecording) {\n      logDebug('MedicalDictation', 'Debug message', {});\n      return;\n    }\n    \n    logDebug('MedicalDictation', 'Debug message', {});\n    \n    // Immediately set recording to false to update UI\n    setIsRecording(false);\n    \n    // Stop the Speech Service Router\n    try {\n      speechServiceRouter.stopRecording();\n      logDebug('MedicalDictation', 'Debug message', {});\n      \n      // Speech service router handles transcript internally\n      // Final transcript is already set via callbacks\n    } catch (error) {\n      logError('MedicalDictation', 'Error message', {});\n    }\n    \n    // Build the final transcript including any interim text\n    let finalTranscript = transcript;\n    if (interimText.trim()) {\n      const correctedText = medicalCorrections.correctTranscription(interimText);\n      finalTranscript = transcript + (transcript ? ' ' : '') + correctedText;\n      logDebug('MedicalDictation', 'Debug message', {});\n    }\n    \n    // Always update transcript state with the final version\n    if (finalTranscript !== transcript || interimText.trim()) {\n      setTranscript(finalTranscript);\n      setInterimText('');\n    }\n    \n    // Check current transcript state as well\n    logDebug('MedicalDictation', 'Debug message', {});\n    logDebug('MedicalDictation', 'Debug message', {});\n    logDebug('MedicalDictation', 'Debug message', {});\n    \n    // Process with AI if we have any content (transcript or interim)\n    if (finalTranscript.trim() || transcript.trim() || interimText.trim()) {\n      logDebug('MedicalDictation', 'Debug message', {});\n      // Force update transcript if needed\n      if (!finalTranscript.trim() && (transcript.trim() || interimText.trim())) {\n        finalTranscript = transcript + (transcript && interimText ? ' ' : '') + interimText;\n        setTranscript(finalTranscript);\n      }\n      // Pass the finalTranscript directly to avoid closure issues\n      // Use setTimeout to ensure state updates have propagated\n      setTimeout(() => {\n        processWithAI(finalTranscript);\n      }, 100);\n    } else {\n      logDebug('MedicalDictation', 'Debug message', {});\n      alert('No audio was captured. Please check your microphone permissions and try again.');\n    }\n  };\n\n  const processWithAI = async (transcriptToProcess?: string) => {\n    // Use the passed transcript or fall back to state\n    const contentToProcess = transcriptToProcess || transcript;\n    logDebug('MedicalDictation', 'Debug message', {});\n    \n    if (!contentToProcess.trim()) {\n      logError('MedicalDictation', 'Error message', {});\n      alert('Please record some content first');\n      return;\n    }\n\n    setIsProcessing(true);\n    setShowProcessed(false);\n\n    try {\n      // Build patient context with previous visit if available\n      const patientContext = `\nPATIENT INFORMATION:\nName: ${patientDetails.name || '[Not provided]'}\nMRN: ${patientDetails.mrn || '[Not provided]'}\nDOB: ${patientDetails.dob || '[Not provided]'}\nEmail: ${patientDetails.email || '[Not provided]'}\nVisit Date: ${patientDetails.visitDate}\n\n${previousVisitNote ? `PREVIOUS VISIT NOTE:\n${previousVisitNote}\n\nINSTRUCTIONS: Create a comprehensive note that builds upon the previous visit. Include:\n- Reference to previous conditions and their current status\n- Trend analysis for chronic conditions\n- Updated assessment incorporating historical context\n- Continuity in the treatment plan` : ''}\n      `.trim();\n\n      // For dictation, include mode information\n      const combinedContent = recordingMode === 'conversation' \n        ? `CONVERSATION TRANSCRIPT:\\n${contentToProcess}`\n        : contentToProcess;\n\n      logDebug('MedicalDictation', 'Debug message', {});\n      \n      // Create minimal patient data for processing\n      const minimalPatientData = {\n        id: patientId || 'quick-note',\n        name: patientDetails.name || 'Unknown Patient',\n        mrn: patientDetails.mrn || 'Unknown MRN',\n        dob: patientDetails.dob || '',\n        email: patientDetails.email || '',\n        diagnosis: [],\n        medications: [],\n        labResults: [],\n        vitalSigns: {\n          bp: '',\n          hr: '',\n          temp: '',\n          weight: '',\n          bmi: ''\n        }\n      };\n      \n      // Use selected template if available\n      let templateInstructions = undefined;\n      if (selectedTemplate) {\n        try {\n          const settings = await doctorProfileService.getSettings();\n          templateInstructions = {\n            template: selectedTemplate,\n            doctorSettings: settings\n          };\n        } catch (error) {\n          logError('MedicalDictation', 'Error message', {});\n          // Continue without custom settings\n          templateInstructions = {\n            template: selectedTemplate,\n            doctorSettings: null\n          };\n        }\n      }\n\n      const result = await azureAIService.processMedicalTranscription(\n        combinedContent,\n        minimalPatientData,\n        null, // Legacy template parameter\n        `Patient context: ${patientContext}`,\n        templateInstructions // Pass custom template instructions\n      );\n\n      // Extract just the formatted note from the result\n      const processedContent = result.formatted;\n      \n      logDebug('MedicalDictation', 'Debug message', {});\n\n      setProcessedNote(processedContent);\n      setShowProcessed(true);\n    } catch (error) {\n      logError('MedicalDictation', 'Error message', {});\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      alert(`Failed to process with AI: ${errorMessage}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const clearAll = () => {\n    setTranscript('');\n    setInterimText('');\n    setProcessedNote('');\n    setShowProcessed(false);\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      alert('Copied to clipboard!');\n    } catch (error) {\n      logError('MedicalDictation', 'Error message', {});\n      alert('Failed to copy to clipboard');\n    }\n  };\n\n  const saveToDatabase = async () => {\n    if (!transcript && !processedNote) {\n      alert('No content to save. Please dictate some notes first.');\n      return;\n    }\n\n    if (!patientDetails.name) {\n      alert('Please enter patient name before saving to database.');\n      return;\n    }\n\n    setIsSavingToDatabase(true);\n\n    try {\n      const currentUser = unifiedAuthService.getCurrentUser();\n      if (!currentUser) {\n        throw new Error('No authenticated user found');\n      }\n\n      const providerId = currentUser.id || currentUser.email || 'doctor-default-001';\n      const providerName = currentUser.name || 'Dr. Provider';\n\n      // Save the note to database using our new simplified service\n      const noteId = await scheduleDatabaseService.saveNote(\n        providerId,\n        providerName,\n        {\n          patientName: patientDetails.name,\n          patientMrn: patientDetails.mrn,\n          rawTranscript: transcript,\n          aiProcessedNote: processedNote,\n          recordingMode: recordingMode || 'dictation',\n          isQuickNote: !patientId // true for QuickNote, false for regular dictation\n        }\n      );\n\n      if (noteId) {\n        // If this is a QuickNote, also add the patient to today's schedule\n        if (!patientId) {\n          await scheduleDatabaseService.addQuickNotePatientToSchedule(\n            providerId,\n            providerName,\n            patientDetails.name,\n            patientDetails.mrn\n          );\n        }\n\n        setLastSavedNoteId(noteId.toString());\n        setShowSaveSuccess(true);\n        setTimeout(() => setShowSaveSuccess(false), 5000);\n\n        logInfo('MedicalDictation', 'Info message', {});\n\n        // Clear auto-save data since it's now permanently saved\n        localStorage.removeItem('autosave_dictation');\n      } else {\n        throw new Error('Failed to save note - no ID returned');\n      }\n\n    } catch (error) {\n      logError('MedicalDictation', 'Error message', {});\n      alert(`Failed to save to database: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      setIsSavingToDatabase(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Compact Header with Patient Info */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          {/* Top Row - Title and Actions */}\n          <div className=\"flex justify-between items-center py-2 border-b\">\n            <div className=\"flex items-center gap-4\">\n              <h1 className=\"text-lg font-bold text-gray-900\">\n                {patientId ? 'Patient Dictation' : 'Quick Note'}\n              </h1>\n              {doctorSpecialty && (\n                <span className=\"px-2 py-1 text-xs font-semibold rounded-full bg-gradient-to-r from-blue-500 to-purple-600 text-white\">\n                  {doctorSpecialty}\n                </span>\n              )}\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <button\n                onClick={() => navigate('/doctor')}\n                className=\"px-3 py-1 text-xs bg-gray-200 text-gray-700 rounded hover:bg-gray-300\"\n              >\n                ← Dashboard\n              </button>\n              <button\n                onClick={() => {\n                  localStorage.removeItem('auth_token');\n                  localStorage.removeItem('session_expires');\n                  window.location.href = '/login';\n                }}\n                className=\"px-3 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700\"\n              >\n                Logout\n              </button>\n            </div>\n          </div>\n          \n          {/* Patient info moved to bottom */}\n        </div>\n      </div>\n\n      {/* Auto-save Status & Data Restored Notifications */}\n      {showDataRestored && (\n        <div className=\"fixed top-4 right-4 z-50 animate-fade-in\">\n          <div className=\"bg-green-50 border border-green-200 rounded-lg shadow-lg p-3 flex items-center gap-2\">\n            <svg className=\"w-4 h-4 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            <span className=\"text-sm font-medium text-green-800\">Work restored - continue where you left off!</span>\n          </div>\n        </div>\n      )}\n\n      {/* Database Save Success Notification */}\n      {showSaveSuccess && (\n        <div className=\"fixed top-16 right-4 z-50 animate-fade-in\">\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg shadow-lg p-3 flex items-center gap-2\">\n            <svg className=\"w-4 h-4 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 7v10c0 2.21 1.79 4 4 4h8c2.21 0 4-1.79 4-4V7M4 7l2-3h12l2 3M4 7h16M12 11v4\" />\n            </svg>\n            <span className=\"text-sm font-medium text-blue-800\">\n              ✅ Note saved to database! ID: {lastSavedNoteId?.slice(-8)} | Added to schedule\n            </span>\n          </div>\n        </div>\n      )}\n\n      <div className=\"fixed top-4 left-4 z-40\">\n        {autoSaveStatus === 'saving' && (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg shadow-sm p-2 flex items-center gap-2\">\n            <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-blue-600\"></div>\n            <span className=\"text-xs text-blue-800\">Saving...</span>\n          </div>\n        )}\n        {autoSaveStatus === 'saved' && (\n          <div className=\"bg-green-50 border border-green-200 rounded-lg shadow-sm p-2 flex items-center gap-2\">\n            <svg className=\"w-3 h-3 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n            </svg>\n            <span className=\"text-xs text-green-800\">\n              Saved {lastSaveTime ? lastSaveTime.toLocaleTimeString() : ''}\n            </span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"fixed top-4 right-4 z-40\">\n        {databaseAutoSaveStatus === 'saving' && (\n          <div className=\"bg-purple-50 border border-purple-200 rounded-lg shadow-sm p-2 flex items-center gap-2\">\n            <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-purple-600\"></div>\n            <span className=\"text-xs text-purple-800\">Saving to database...</span>\n          </div>\n        )}\n        {databaseAutoSaveStatus === 'saved' && (\n          <div className=\"bg-green-50 border border-green-200 rounded-lg shadow-sm p-2 flex items-center gap-2\">\n            <svg className=\"w-3 h-3 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n            </svg>\n            <span className=\"text-xs text-green-800\">\n              📊 Database saved {lastDatabaseSaveTime ? lastDatabaseSaveTime.toLocaleTimeString() : ''}\n            </span>\n          </div>\n        )}\n        {databaseAutoSaveStatus === 'error' && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg shadow-sm p-2 flex items-center gap-2\">\n            <svg className=\"w-3 h-3 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n            <span className=\"text-xs text-red-800\">Database save failed</span>\n          </div>\n        )}\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 py-4\">\n        {/* Compact Top Control Bar with Mode Selection and Recording Controls */}\n        <div className=\"bg-white rounded-lg shadow-md p-3 mb-4 border-2 border-blue-200\">\n          <div className=\"flex items-center justify-between gap-4\">\n            {/* Mode Selection - Compact but Prominent */}\n            <div className=\"flex items-center gap-3\">\n              <span className=\"text-sm font-bold text-gray-700\">MODE:</span>\n              <button\n                onClick={() => {\n                  setRecordingMode('dictation');\n                }}\n                className={`px-4 py-2 rounded-lg text-sm font-bold transition-all ${\n                  recordingMode === 'dictation'\n                    ? 'bg-green-500 text-white shadow-lg scale-105'\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                }`}\n              >\n                🎤 DICTATION\n              </button>\n              <button\n                onClick={() => {\n                  setRecordingMode('conversation');\n                }}\n                className={`px-4 py-2 rounded-lg text-sm font-bold transition-all ${\n                  recordingMode === 'conversation'\n                    ? 'bg-purple-500 text-white shadow-lg scale-105'\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                }`}\n              >\n                👥 CONVERSATION\n              </button>\n            </div>\n\n            {/* Recording and Process Controls - Moved to Top */}\n            <div className=\"flex items-center gap-2\">\n              <button\n                onClick={isRecording ? stopRecording : startRecording}\n                disabled={isProcessing || !recordingMode}\n                className={`px-8 py-3 rounded-lg font-bold transition-all flex items-center gap-2 text-lg shadow-lg ${\n                  !recordingMode\n                    ? 'bg-gray-300 cursor-not-allowed text-gray-500'\n                    : isProcessing\n                    ? 'bg-gray-400 cursor-not-allowed text-gray-200'\n                    : isRecording\n                    ? 'bg-red-500 hover:bg-red-600 text-white animate-pulse ring-4 ring-red-300'\n                    : 'bg-green-500 hover:bg-green-600 text-white ring-2 ring-green-300'\n                }`}\n              >\n                {isRecording ? '⏹ STOP RECORDING' : '🎙️ START RECORDING'}\n              </button>\n              \n              <button\n                onClick={() => processWithAI()}\n                disabled={!transcript.trim() || isProcessing}\n                className=\"px-6 py-3 bg-blue-600 text-white text-base font-bold rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all flex items-center gap-2 shadow-lg\"\n              >\n                {isProcessing ? '⏳ PROCESSING...' : '🤖 PROCESS WITH AI'}\n              </button>\n\n              <button\n                onClick={saveToDatabase}\n                disabled={(!transcript.trim() && !processedNote.trim()) || !patientDetails.name.trim() || isSavingToDatabase}\n                className=\"px-6 py-3 bg-green-600 text-white text-base font-bold rounded-lg hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all flex items-center gap-2 shadow-lg\"\n                title=\"Save note and create appointment in database\"\n              >\n                {isSavingToDatabase ? '💾 SAVING...' : '💾 SAVE TO DATABASE'}\n              </button>\n\n              <button\n                onClick={clearAll}\n                className=\"px-4 py-3 bg-red-100 text-red-700 text-base font-bold rounded-lg hover:bg-red-200 transition shadow\"\n                title=\"Clear All\"\n              >\n                🗑️ Clear\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Template selector removed - using the one in left column instead */}\n\n        {/* Two Column Layout - 40% | 60% */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-[2fr_3fr] gap-4\">\n          {/* Left Column - Previous Visit & Template */}\n          <div className=\"space-y-4\">\n            {/* Previous Visit Note */}\n            <div className=\"bg-white rounded-lg shadow-sm p-4\">\n              <h2 className=\"text-md font-semibold text-gray-800 mb-2\">\n                📋 Previous Visit Note\n              </h2>\n              <textarea\n                value={previousVisitNote}\n                onChange={(e) => setPreviousVisitNote(e.target.value)}\n                placeholder=\"Paste previous visit note from EMR here...\"\n                className=\"w-full h-20 px-2 py-1 border border-gray-300 rounded-lg text-xs focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none\"\n              />\n              <div className=\"mt-2 text-xs text-gray-500\">\n                This will be used to create continuity with today's visit\n              </div>\n            </div>\n\n            {/* Template Selection */}\n            <div className=\"bg-white rounded-lg shadow-sm p-4\">\n              <h2 className=\"text-md font-semibold text-gray-800 mb-2 flex items-center gap-2\">\n                <FileText className=\"w-4 h-4\" />\n                Change Template\n              </h2>\n              \n              <button\n                onClick={() => setShowTemplateSelector(!showTemplateSelector)}\n                className=\"w-full px-3 py-2 text-left border border-gray-300 rounded-lg hover:bg-gray-50 flex items-center justify-between\"\n              >\n                <span className=\"text-sm\">\n                  {selectedTemplate ? selectedTemplate.name : 'No Template Selected'}\n                </span>\n                <ChevronDown className={`w-4 h-4 transition-transform ${showTemplateSelector ? 'rotate-180' : ''}`} />\n              </button>\n\n              {showTemplateSelector && (\n                <div className=\"mt-2 border rounded-lg max-h-96 overflow-y-auto\">\n                  {/* No Template Option */}\n                  <button\n                    onClick={() => {\n                      setSelectedTemplate(null);\n                      setShowTemplateSelector(false);\n                    }}\n                    className=\"w-full px-3 py-2 text-left hover:bg-gray-50 text-sm border-b\"\n                  >\n                    No Template (Standard SOAP)\n                  </button>\n\n                  {/* Recent Templates */}\n                  {recentTemplates.length > 0 && (\n                    <>\n                      <div className=\"px-3 py-1 text-xs font-semibold text-gray-500 bg-gray-50 flex items-center gap-1\">\n                        <Clock className=\"w-3 h-3\" /> Recent\n                      </div>\n                      {recentTemplates.map(template => (\n                        <button\n                          key={template.id}\n                          onClick={() => {\n                            setSelectedTemplate(template);\n                            setShowTemplateSelector(false);\n                            doctorProfileService.addToRecent(template.id);\n                          }}\n                          className=\"w-full px-3 py-2 text-left hover:bg-blue-50 text-sm border-b flex items-center justify-between\"\n                        >\n                          <span>{template.name}</span>\n                          {template.visitType && (\n                            <span className=\"text-xs text-gray-500\">{template.visitType}</span>\n                          )}\n                        </button>\n                      ))}\n                    </>\n                  )}\n\n                  {/* Favorite Templates */}\n                  {favoriteTemplates.length > 0 && (\n                    <>\n                      <div className=\"px-3 py-1 text-xs font-semibold text-gray-500 bg-gray-50 flex items-center gap-1\">\n                        <Star className=\"w-3 h-3\" /> Favorites\n                      </div>\n                      {favoriteTemplates.map(template => (\n                        <button\n                          key={template.id}\n                          onClick={() => {\n                            setSelectedTemplate(template);\n                            setShowTemplateSelector(false);\n                            doctorProfileService.addToRecent(template.id);\n                          }}\n                          className=\"w-full px-3 py-2 text-left hover:bg-yellow-50 text-sm border-b flex items-center justify-between\"\n                        >\n                          <span>{template.name}</span>\n                          {template.visitType && (\n                            <span className=\"text-xs text-gray-500\">{template.visitType}</span>\n                          )}\n                        </button>\n                      ))}\n                    </>\n                  )}\n\n                  {/* Templates Organized by Specialty */}\n                  {templates.length > 0 ? (() => {\n                    // Group templates by specialty based on name prefixes\n                    const specialtyGroups = {\n                      'Endocrinology': templates.filter(t => t.name.includes('Endo -') || t.name.includes('Diabetes') || t.name.includes('Thyroid') || t.name.includes('Tess') || t.name.includes('Elina') || t.name.includes('Radha') || t.name.includes('Shannon')),\n                      'Primary Care': templates.filter(t => t.name.includes('Primary Care -') || t.name.includes('Quick Progress') || t.name.includes('Annual')),\n                      'Sports Medicine': templates.filter(t => t.name.includes('Sports Med -')),\n                      'Psychiatry': templates.filter(t => t.name.includes('Psychiatry') || t.name.includes('Nikki') || t.name.includes('Ghislaine')),\n                      'Nutrition': templates.filter(t => t.name.includes('Nutrition') || t.name.includes('Vanessa')),\n                      'General/Other': templates.filter(t =>\n                        !t.name.includes('Endo -') &&\n                        !t.name.includes('Primary Care -') &&\n                        !t.name.includes('Sports Med -') &&\n                        !t.name.includes('Diabetes') &&\n                        !t.name.includes('Thyroid') &&\n                        !t.name.includes('Psychiatry') &&\n                        !t.name.includes('Nutrition') &&\n                        !t.name.includes('Tess') &&\n                        !t.name.includes('Nikki') &&\n                        !t.name.includes('Vanessa') &&\n                        !t.name.includes('Elina') &&\n                        !t.name.includes('Radha') &&\n                        !t.name.includes('Shannon') &&\n                        !t.name.includes('Ghislaine') &&\n                        !t.name.includes('Quick Progress') &&\n                        !t.name.includes('Annual')\n                      )\n                    };\n\n                    return Object.entries(specialtyGroups).map(([specialty, specialtyTemplates]) => {\n                      if (specialtyTemplates.length === 0) return null;\n\n                      return (\n                        <div key={specialty}>\n                          <div className=\"px-3 py-1 text-xs font-semibold text-gray-500 bg-gray-50 flex items-center gap-2\">\n                            {specialty === 'Endocrinology' && '🩺'}\n                            {specialty === 'Primary Care' && '👩‍⚕️'}\n                            {specialty === 'Sports Medicine' && '🏃‍♂️'}\n                            {specialty === 'Psychiatry' && '🧠'}\n                            {specialty === 'Nutrition' && '🥗'}\n                            {specialty === 'General/Other' && '📝'}\n                            {specialty} ({specialtyTemplates.length})\n                          </div>\n                          {specialtyTemplates.map(template => (\n                            <button\n                              key={template.id}\n                              onClick={() => {\n                                setSelectedTemplate(template);\n                                setShowTemplateSelector(false);\n                                doctorProfileService.addToRecent(template.id);\n                              }}\n                              className=\"w-full px-3 py-2 text-left hover:bg-gray-50 text-sm border-b flex items-center justify-between\"\n                            >\n                              <span className=\"text-gray-800\">{template.name}</span>\n                              <div className=\"flex items-center gap-2\">\n                                {template.visitType && (\n                                  <span className=\"text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded\">\n                                    {template.visitType}\n                                  </span>\n                                )}\n                              </div>\n                            </button>\n                          ))}\n                        </div>\n                      );\n                    }).filter(Boolean);\n                  })() : (\n                    <div className=\"px-3 py-4 text-sm text-gray-500 text-center\">\n                      No templates created yet.\n                      <button\n                        onClick={() => navigate('/doctor/templates')}\n                        className=\"block w-full mt-2 text-blue-600 hover:text-blue-700\"\n                      >\n                        Create your first template →\n                      </button>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {selectedTemplate && (\n                <div className=\"mt-2 p-2 bg-blue-50 rounded text-xs text-blue-700\">\n                  Using: {selectedTemplate.name}\n                </div>\n              )}\n            </div>\n\n            {/* Transcript Display */}\n            <div className=\"bg-white rounded-lg shadow-sm p-4\">\n              <h2 className=\"text-md font-semibold text-gray-800 mb-3\">\n                📝 Transcript\n              </h2>\n\n              {/* Error Display */}\n              {recordingError && (\n                <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n                  <p className=\"text-sm text-red-700\">{recordingError}</p>\n                </div>\n              )}\n\n              {/* Transcript Display */}\n              <div className=\"border border-gray-200 rounded-lg p-3 min-h-[200px] max-h-[300px] overflow-y-auto bg-gray-50\">\n                <h3 className=\"text-sm font-medium text-gray-700 mb-2\">\n                  {recordingMode === 'conversation' ? 'Conversation Transcript:' : 'Dictation Transcript:'}\n                </h3>\n                {transcript || interimText ? (\n                  <div className=\"text-sm text-gray-800 whitespace-pre-wrap\">\n                    {transcript}\n                    {interimText && (\n                      <span className=\"text-gray-500 italic\">{interimText}</span>\n                    )}\n                  </div>\n                ) : (\n                  <p className=\"text-sm text-gray-400 italic\">\n                    {isRecording ? 'Listening...' : 'Click \"Start Recording\" to begin'}\n                  </p>\n                )}\n              </div>\n\n            </div>\n          </div>\n\n          {/* Right Column - Processed Super Note */}\n          <div className=\"space-y-4\">\n            <div className=\"bg-white rounded-lg shadow-sm p-4\">\n              <div className=\"flex justify-between items-center mb-3\">\n                <h2 className=\"text-lg font-semibold text-gray-800\">\n                  📝 Processed Clinical Note\n                  {previousVisitNote && (\n                    <span className=\"ml-2 text-xs px-2 py-1 bg-blue-100 text-blue-700 rounded\">\n                      + History\n                    </span>\n                  )}\n                </h2>\n                {showProcessed && (\n                  <div className=\"flex gap-2\">\n                    <button\n                      onClick={() => copyToClipboard(processedNote.replace(/###\\s*/g, '').replace(/\\*\\*(.*?)\\*\\*/g, '$1'))}\n                      className=\"px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded hover:bg-blue-200\"\n                    >\n                      📋 Copy\n                    </button>\n                    <button\n                      onClick={() => {\n                        const printContent = processedNote.replace(/###\\s*/g, '').replace(/\\*\\*(.*?)\\*\\*/g, '$1');\n                        const printWindow = window.open('', '_blank');\n                        if (printWindow) {\n                          printWindow.document.write(`\n                            <html>\n                              <head>\n                                <title>Medical Note - ${patientDetails.name || 'Patient'}</title>\n                                <style>\n                                  body { font-family: Arial, sans-serif; padding: 20px; white-space: pre-wrap; }\n                                  @media print { body { padding: 10px; } }\n                                </style>\n                              </head>\n                              <body>${printContent.replace(/\\n/g, '<br>')}</body>\n                            </html>\n                          `);\n                          printWindow.document.close();\n                          printWindow.print();\n                        }\n                      }}\n                      className=\"px-2 py-1 text-xs bg-green-100 text-green-700 rounded hover:bg-green-200\"\n                    >\n                      🖨️ Print\n                    </button>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"border border-gray-200 rounded-lg p-4 min-h-[700px] max-h-[800px] overflow-y-auto bg-gradient-to-br from-white to-blue-50\">\n                {showProcessed && processedNote ? (\n                  <NoteFormatter content={processedNote} />\n                ) : (\n                  <p className=\"text-sm text-gray-400 italic\">\n                    Processed note will appear here after clicking \"Process with AI\"\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Patient Details Section - At Bottom */}\n        <div className=\"mt-4 bg-white rounded-lg shadow-sm p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-sm font-semibold text-gray-700\">Patient Information</h3>\n            {lastDatabaseSaveTime && (\n              <span className=\"text-xs text-gray-500 flex items-center gap-1\">\n                <Clock className=\"w-3 h-3\" />\n                Last saved: {lastDatabaseSaveTime.toLocaleTimeString()}\n              </span>\n            )}\n          </div>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex flex-col gap-1\">\n              <label className=\"text-xs font-medium text-gray-600\">Patient Name</label>\n              <input\n                type=\"text\"\n                value={patientDetails.name}\n                onChange={(e) => setPatientDetails(prev => ({ ...prev, name: e.target.value }))}\n                className=\"px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"Enter patient name\"\n              />\n            </div>\n            <div className=\"flex flex-col gap-1\">\n              <label className=\"text-xs font-medium text-gray-600\">MRN</label>\n              <input\n                type=\"text\"\n                value={patientDetails.mrn}\n                onChange={(e) => setPatientDetails(prev => ({ ...prev, mrn: e.target.value }))}\n                className=\"px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"Medical Record #\"\n              />\n            </div>\n            <div className=\"flex flex-col gap-1\">\n              <label className=\"text-xs font-medium text-gray-600\">Date of Birth</label>\n              <input\n                type=\"date\"\n                value={patientDetails.dob}\n                onChange={(e) => setPatientDetails(prev => ({ ...prev, dob: e.target.value }))}\n                className=\"px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n            <div className=\"flex flex-col gap-1\">\n              <label className=\"text-xs font-medium text-gray-600\">Email</label>\n              <input\n                type=\"email\"\n                value={patientDetails.email}\n                onChange={(e) => setPatientDetails(prev => ({ ...prev, email: e.target.value }))}\n                className=\"px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"patient@email.com\"\n              />\n            </div>\n          </div>\n          <div className=\"mt-2 text-xs text-gray-500\">\n            Visit Date: {patientDetails.visitDate}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"],"file":"assets/MedicalDictation-BrIZBXNY.js"}