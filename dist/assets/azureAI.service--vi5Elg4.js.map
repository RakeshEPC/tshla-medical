{"version":3,"file":"azureAI.service--vi5Elg4.js","sources":["../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/configuration.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/recursionDetectionMiddleware.browser.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/getRecursionDetectionPlugin.js","../../node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/util-endpoints/dist-es/aws.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js","../../node_modules/@smithy/smithy-client/dist-es/constants.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-user-agent/dist-es/check-features.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-user-agent/dist-es/encode-features.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js","../../node_modules/@aws-sdk/middleware-websocket/dist-es/get-event-signing-stream.js","../../node_modules/@aws-sdk/middleware-websocket/dist-es/EventStreamPayloadHandler.js","../../node_modules/@aws-sdk/middleware-websocket/dist-es/eventstream-payload-handler-provider.js","../../node_modules/@aws-sdk/client-bedrock-runtime/dist-es/auth/httpAuthSchemeProvider.js","../../node_modules/@aws-sdk/client-bedrock-runtime/dist-es/endpoint/EndpointParameters.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js","../../node_modules/@aws-sdk/client-bedrock-runtime/dist-es/endpoint/ruleset.js","../../node_modules/@aws-sdk/client-bedrock-runtime/dist-es/endpoint/endpointResolver.js","../../node_modules/@aws-sdk/client-bedrock-runtime/dist-es/runtimeConfig.shared.js","../../node_modules/@aws-sdk/client-bedrock-runtime/dist-es/runtimeConfig.browser.js","../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js","../../node_modules/@aws-sdk/client-bedrock-runtime/dist-es/auth/httpAuthExtensionConfiguration.js","../../node_modules/@aws-sdk/client-bedrock-runtime/dist-es/runtimeExtensions.js","../../node_modules/@aws-sdk/client-bedrock-runtime/dist-es/BedrockRuntimeClient.js","../../node_modules/@aws-sdk/client-bedrock-runtime/dist-es/models/BedrockRuntimeServiceException.js","../../node_modules/@aws-sdk/client-bedrock-runtime/dist-es/models/models_0.js","../../node_modules/@aws-sdk/client-bedrock-runtime/dist-es/protocols/Aws_restJson1.js","../../node_modules/@aws-sdk/client-bedrock-runtime/dist-es/commands/InvokeModelCommand.js","../../src/services/orderExtraction.service.ts","../../src/services/azureOpenAI.service.ts","../../src/services/azureAI.service.ts"],"sourcesContent":["import { HttpRequest } from \"@smithy/protocol-http\";\nexport function resolveHostHeaderConfig(input) {\n    return input;\n}\nexport const hostHeaderMiddleware = (options) => (next) => async (args) => {\n    if (!HttpRequest.isInstance(args.request))\n        return next(args);\n    const { request } = args;\n    const { handlerProtocol = \"\" } = options.requestHandler.metadata || {};\n    if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n        delete request.headers[\"host\"];\n        request.headers[\":authority\"] = request.hostname + (request.port ? \":\" + request.port : \"\");\n    }\n    else if (!request.headers[\"host\"]) {\n        let host = request.hostname;\n        if (request.port != null)\n            host += `:${request.port}`;\n        request.headers[\"host\"] = host;\n    }\n    return next(args);\n};\nexport const hostHeaderMiddlewareOptions = {\n    name: \"hostHeaderMiddleware\",\n    step: \"build\",\n    priority: \"low\",\n    tags: [\"HOST\"],\n    override: true,\n};\nexport const getHostHeaderPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n    },\n});\n","export const loggerMiddleware = () => (next, context) => async (args) => {\n    try {\n        const response = await next(args);\n        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;\n        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;\n        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;\n        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;\n        const { $metadata, ...outputWithoutMetadata } = response.output;\n        logger?.info?.({\n            clientName,\n            commandName,\n            input: inputFilterSensitiveLog(args.input),\n            output: outputFilterSensitiveLog(outputWithoutMetadata),\n            metadata: $metadata,\n        });\n        return response;\n    }\n    catch (error) {\n        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;\n        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;\n        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;\n        logger?.error?.({\n            clientName,\n            commandName,\n            input: inputFilterSensitiveLog(args.input),\n            error,\n            metadata: error.$metadata,\n        });\n        throw error;\n    }\n};\nexport const loggerMiddlewareOptions = {\n    name: \"loggerMiddleware\",\n    tags: [\"LOGGER\"],\n    step: \"initialize\",\n    override: true,\n};\nexport const getLoggerPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    },\n});\n","export const recursionDetectionMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"RECURSION_DETECTION\"],\n    name: \"recursionDetectionMiddleware\",\n    override: true,\n    priority: \"low\",\n};\n","export const recursionDetectionMiddleware = () => (next) => async (args) => next(args);\n","import { recursionDetectionMiddlewareOptions } from \"./configuration\";\nimport { recursionDetectionMiddleware } from \"./recursionDetectionMiddleware\";\nexport const getRecursionDetectionPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(recursionDetectionMiddleware(), recursionDetectionMiddlewareOptions);\n    },\n});\n","import { HttpRequest } from \"@smithy/protocol-http\";\nexport class HttpBearerAuthSigner {\n    async sign(httpRequest, identity, signingProperties) {\n        const clonedRequest = HttpRequest.clone(httpRequest);\n        if (!identity.token) {\n            throw new Error(\"request could not be signed with `token` since the `token` is not defined\");\n        }\n        clonedRequest.headers[\"Authorization\"] = `Bearer ${identity.token}`;\n        return clonedRequest;\n    }\n}\n","import { normalizeProvider } from \"@smithy/core\";\nexport const DEFAULT_UA_APP_ID = undefined;\nfunction isValidUserAgentAppId(appId) {\n    if (appId === undefined) {\n        return true;\n    }\n    return typeof appId === \"string\" && appId.length <= 50;\n}\nexport function resolveUserAgentConfig(input) {\n    const normalizedAppIdProvider = normalizeProvider(input.userAgentAppId ?? DEFAULT_UA_APP_ID);\n    const { customUserAgent } = input;\n    return Object.assign(input, {\n        customUserAgent: typeof customUserAgent === \"string\" ? [[customUserAgent]] : customUserAgent,\n        userAgentAppId: async () => {\n            const appId = await normalizedAppIdProvider();\n            if (!isValidUserAgentAppId(appId)) {\n                const logger = input.logger?.constructor?.name === \"NoOpLogger\" || !input.logger ? console : input.logger;\n                if (typeof appId !== \"string\") {\n                    logger?.warn(\"userAgentAppId must be a string or undefined.\");\n                }\n                else if (appId.length > 50) {\n                    logger?.warn(\"The provided userAgentAppId exceeds the maximum length of 50 characters.\");\n                }\n            }\n            return appId;\n        },\n    });\n}\n","import { isValidHostLabel } from \"@smithy/util-endpoints\";\nimport { isIpAddress } from \"../isIpAddress\";\nexport const isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {\n    if (allowSubDomains) {\n        for (const label of value.split(\".\")) {\n            if (!isVirtualHostableS3Bucket(label)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (!isValidHostLabel(value)) {\n        return false;\n    }\n    if (value.length < 3 || value.length > 63) {\n        return false;\n    }\n    if (value !== value.toLowerCase()) {\n        return false;\n    }\n    if (isIpAddress(value)) {\n        return false;\n    }\n    return true;\n};\n","const ARN_DELIMITER = \":\";\nconst RESOURCE_DELIMITER = \"/\";\nexport const parseArn = (value) => {\n    const segments = value.split(ARN_DELIMITER);\n    if (segments.length < 6)\n        return null;\n    const [arn, partition, service, region, accountId, ...resourcePath] = segments;\n    if (arn !== \"arn\" || partition === \"\" || service === \"\" || resourcePath.join(ARN_DELIMITER) === \"\")\n        return null;\n    const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER)).flat();\n    return {\n        partition,\n        service,\n        region,\n        accountId,\n        resourceId,\n    };\n};\n","import partitionsInfo from \"./partitions.json\";\nlet selectedPartitionsInfo = partitionsInfo;\nlet selectedUserAgentPrefix = \"\";\nexport const partition = (value) => {\n    const { partitions } = selectedPartitionsInfo;\n    for (const partition of partitions) {\n        const { regions, outputs } = partition;\n        for (const [region, regionData] of Object.entries(regions)) {\n            if (region === value) {\n                return {\n                    ...outputs,\n                    ...regionData,\n                };\n            }\n        }\n    }\n    for (const partition of partitions) {\n        const { regionRegex, outputs } = partition;\n        if (new RegExp(regionRegex).test(value)) {\n            return {\n                ...outputs,\n            };\n        }\n    }\n    const DEFAULT_PARTITION = partitions.find((partition) => partition.id === \"aws\");\n    if (!DEFAULT_PARTITION) {\n        throw new Error(\"Provided region was not found in the partition array or regex,\" +\n            \" and default partition with id 'aws' doesn't exist.\");\n    }\n    return {\n        ...DEFAULT_PARTITION.outputs,\n    };\n};\nexport const setPartitionInfo = (partitionsInfo, userAgentPrefix = \"\") => {\n    selectedPartitionsInfo = partitionsInfo;\n    selectedUserAgentPrefix = userAgentPrefix;\n};\nexport const useDefaultPartitionInfo = () => {\n    setPartitionInfo(partitionsInfo, \"\");\n};\nexport const getUserAgentPrefix = () => selectedUserAgentPrefix;\n","import { customEndpointFunctions } from \"@smithy/util-endpoints\";\nimport { isVirtualHostableS3Bucket } from \"./lib/aws/isVirtualHostableS3Bucket\";\nimport { parseArn } from \"./lib/aws/parseArn\";\nimport { partition } from \"./lib/aws/partition\";\nexport const awsEndpointFunctions = {\n    isVirtualHostableS3Bucket: isVirtualHostableS3Bucket,\n    parseArn: parseArn,\n    partition: partition,\n};\ncustomEndpointFunctions.aws = awsEndpointFunctions;\n","export function setCredentialFeature(credentials, feature, value) {\n    if (!credentials.$source) {\n        credentials.$source = {};\n    }\n    credentials.$source[feature] = value;\n    return credentials;\n}\n","export function setFeature(context, feature, value) {\n    if (!context.__aws_sdk_context) {\n        context.__aws_sdk_context = {\n            features: {},\n        };\n    }\n    else if (!context.__aws_sdk_context.features) {\n        context.__aws_sdk_context.features = {};\n    }\n    context.__aws_sdk_context.features[feature] = value;\n}\n","import { HttpResponse } from \"@smithy/protocol-http\";\nexport const getDateHeader = (response) => HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;\n","export const getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);\n","import { getSkewCorrectedDate } from \"./getSkewCorrectedDate\";\nexport const isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 300000;\n","import { isClockSkewed } from \"./isClockSkewed\";\nexport const getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {\n    const clockTimeInMs = Date.parse(clockTime);\n    if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {\n        return clockTimeInMs - Date.now();\n    }\n    return currentSystemClockOffset;\n};\n","import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getDateHeader, getSkewCorrectedDate, getUpdatedSystemClockOffset } from \"../utils\";\nconst throwSigningPropertyError = (name, property) => {\n    if (!property) {\n        throw new Error(`Property \\`${name}\\` is not resolved for AWS SDK SigV4Auth`);\n    }\n    return property;\n};\nexport const validateSigningProperties = async (signingProperties) => {\n    const context = throwSigningPropertyError(\"context\", signingProperties.context);\n    const config = throwSigningPropertyError(\"config\", signingProperties.config);\n    const authScheme = context.endpointV2?.properties?.authSchemes?.[0];\n    const signerFunction = throwSigningPropertyError(\"signer\", config.signer);\n    const signer = await signerFunction(authScheme);\n    const signingRegion = signingProperties?.signingRegion;\n    const signingRegionSet = signingProperties?.signingRegionSet;\n    const signingName = signingProperties?.signingName;\n    return {\n        config,\n        signer,\n        signingRegion,\n        signingRegionSet,\n        signingName,\n    };\n};\nexport class AwsSdkSigV4Signer {\n    async sign(httpRequest, identity, signingProperties) {\n        if (!HttpRequest.isInstance(httpRequest)) {\n            throw new Error(\"The request is not an instance of `HttpRequest` and cannot be signed\");\n        }\n        const validatedProps = await validateSigningProperties(signingProperties);\n        const { config, signer } = validatedProps;\n        let { signingRegion, signingName } = validatedProps;\n        const handlerExecutionContext = signingProperties.context;\n        if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {\n            const [first, second] = handlerExecutionContext.authSchemes;\n            if (first?.name === \"sigv4a\" && second?.name === \"sigv4\") {\n                signingRegion = second?.signingRegion ?? signingRegion;\n                signingName = second?.signingName ?? signingName;\n            }\n        }\n        const signedRequest = await signer.sign(httpRequest, {\n            signingDate: getSkewCorrectedDate(config.systemClockOffset),\n            signingRegion: signingRegion,\n            signingService: signingName,\n        });\n        return signedRequest;\n    }\n    errorHandler(signingProperties) {\n        return (error) => {\n            const serverTime = error.ServerTime ?? getDateHeader(error.$response);\n            if (serverTime) {\n                const config = throwSigningPropertyError(\"config\", signingProperties.config);\n                const initialSystemClockOffset = config.systemClockOffset;\n                config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);\n                const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;\n                if (clockSkewCorrected && error.$metadata) {\n                    error.$metadata.clockSkewCorrected = true;\n                }\n            }\n            throw error;\n        };\n    }\n    successHandler(httpResponse, signingProperties) {\n        const dateHeader = getDateHeader(httpResponse);\n        if (dateHeader) {\n            const config = throwSigningPropertyError(\"config\", signingProperties.config);\n            config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);\n        }\n    }\n}\nexport const AWSSDKSigV4Signer = AwsSdkSigV4Signer;\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { doesIdentityRequireRefresh, isIdentityExpired, memoizeIdentityProvider, normalizeProvider, } from \"@smithy/core\";\nimport { SignatureV4 } from \"@smithy/signature-v4\";\nexport const resolveAwsSdkSigV4Config = (config) => {\n    let inputCredentials = config.credentials;\n    let isUserSupplied = !!config.credentials;\n    let resolvedCredentials = undefined;\n    Object.defineProperty(config, \"credentials\", {\n        set(credentials) {\n            if (credentials && credentials !== inputCredentials && credentials !== resolvedCredentials) {\n                isUserSupplied = true;\n            }\n            inputCredentials = credentials;\n            const memoizedProvider = normalizeCredentialProvider(config, {\n                credentials: inputCredentials,\n                credentialDefaultProvider: config.credentialDefaultProvider,\n            });\n            const boundProvider = bindCallerConfig(config, memoizedProvider);\n            if (isUserSupplied && !boundProvider.attributed) {\n                resolvedCredentials = async (options) => boundProvider(options).then((creds) => setCredentialFeature(creds, \"CREDENTIALS_CODE\", \"e\"));\n                resolvedCredentials.memoized = boundProvider.memoized;\n                resolvedCredentials.configBound = boundProvider.configBound;\n                resolvedCredentials.attributed = true;\n            }\n            else {\n                resolvedCredentials = boundProvider;\n            }\n        },\n        get() {\n            return resolvedCredentials;\n        },\n        enumerable: true,\n        configurable: true,\n    });\n    config.credentials = inputCredentials;\n    const { signingEscapePath = true, systemClockOffset = config.systemClockOffset || 0, sha256, } = config;\n    let signer;\n    if (config.signer) {\n        signer = normalizeProvider(config.signer);\n    }\n    else if (config.regionInfoProvider) {\n        signer = () => normalizeProvider(config.region)()\n            .then(async (region) => [\n            (await config.regionInfoProvider(region, {\n                useFipsEndpoint: await config.useFipsEndpoint(),\n                useDualstackEndpoint: await config.useDualstackEndpoint(),\n            })) || {},\n            region,\n        ])\n            .then(([regionInfo, region]) => {\n            const { signingRegion, signingService } = regionInfo;\n            config.signingRegion = config.signingRegion || signingRegion || region;\n            config.signingName = config.signingName || signingService || config.serviceId;\n            const params = {\n                ...config,\n                credentials: config.credentials,\n                region: config.signingRegion,\n                service: config.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = config.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        });\n    }\n    else {\n        signer = async (authScheme) => {\n            authScheme = Object.assign({}, {\n                name: \"sigv4\",\n                signingName: config.signingName || config.defaultSigningName,\n                signingRegion: await normalizeProvider(config.region)(),\n                properties: {},\n            }, authScheme);\n            const signingRegion = authScheme.signingRegion;\n            const signingService = authScheme.signingName;\n            config.signingRegion = config.signingRegion || signingRegion;\n            config.signingName = config.signingName || signingService || config.serviceId;\n            const params = {\n                ...config,\n                credentials: config.credentials,\n                region: config.signingRegion,\n                service: config.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = config.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        };\n    }\n    const resolvedConfig = Object.assign(config, {\n        systemClockOffset,\n        signingEscapePath,\n        signer,\n    });\n    return resolvedConfig;\n};\nexport const resolveAWSSDKSigV4Config = resolveAwsSdkSigV4Config;\nfunction normalizeCredentialProvider(config, { credentials, credentialDefaultProvider, }) {\n    let credentialsProvider;\n    if (credentials) {\n        if (!credentials?.memoized) {\n            credentialsProvider = memoizeIdentityProvider(credentials, isIdentityExpired, doesIdentityRequireRefresh);\n        }\n        else {\n            credentialsProvider = credentials;\n        }\n    }\n    else {\n        if (credentialDefaultProvider) {\n            credentialsProvider = normalizeProvider(credentialDefaultProvider(Object.assign({}, config, {\n                parentClientConfig: config,\n            })));\n        }\n        else {\n            credentialsProvider = async () => {\n                throw new Error(\"@aws-sdk/core::resolveAwsSdkSigV4Config - `credentials` not provided and no credentialDefaultProvider was configured.\");\n            };\n        }\n    }\n    credentialsProvider.memoized = true;\n    return credentialsProvider;\n}\nfunction bindCallerConfig(config, credentialsProvider) {\n    if (credentialsProvider.configBound) {\n        return credentialsProvider;\n    }\n    const fn = async (options) => credentialsProvider({ ...options, callerClientConfig: config });\n    fn.memoized = credentialsProvider.memoized;\n    fn.configBound = true;\n    return fn;\n}\n","export const SENSITIVE_STRING = \"***SensitiveInformation***\";\n","import { collectBody } from \"@smithy/smithy-client\";\nimport { toUtf8 } from \"@smithy/util-utf8\";\nexport const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => (context?.utf8Encoder ?? toUtf8)(body));\n","import { collectBodyString } from \"../common\";\nexport const parseJsonBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        try {\n            return JSON.parse(encoded);\n        }\n        catch (e) {\n            if (e?.name === \"SyntaxError\") {\n                Object.defineProperty(e, \"$responseBodyText\", {\n                    value: encoded,\n                });\n            }\n            throw e;\n        }\n    }\n    return {};\n});\nexport const parseJsonErrorBody = async (errorBody, context) => {\n    const value = await parseJsonBody(errorBody, context);\n    value.message = value.message ?? value.Message;\n    return value;\n};\nexport const loadRestJsonErrorCode = (output, data) => {\n    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n    const sanitizeErrorCode = (rawValue) => {\n        let cleanValue = rawValue;\n        if (typeof cleanValue === \"number\") {\n            cleanValue = cleanValue.toString();\n        }\n        if (cleanValue.indexOf(\",\") >= 0) {\n            cleanValue = cleanValue.split(\",\")[0];\n        }\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data && typeof data === \"object\") {\n        const codeKey = findKey(data, \"code\");\n        if (codeKey && data[codeKey] !== undefined) {\n            return sanitizeErrorCode(data[codeKey]);\n        }\n        if (data[\"__type\"] !== undefined) {\n            return sanitizeErrorCode(data[\"__type\"]);\n        }\n    }\n};\n","import { setFeature } from \"@aws-sdk/core\";\nconst ACCOUNT_ID_ENDPOINT_REGEX = /\\d{12}\\.ddb/;\nexport async function checkFeatures(context, config, args) {\n    const request = args.request;\n    if (request?.headers?.[\"smithy-protocol\"] === \"rpc-v2-cbor\") {\n        setFeature(context, \"PROTOCOL_RPC_V2_CBOR\", \"M\");\n    }\n    if (typeof config.retryStrategy === \"function\") {\n        const retryStrategy = await config.retryStrategy();\n        if (typeof retryStrategy.acquireInitialRetryToken === \"function\") {\n            if (retryStrategy.constructor?.name?.includes(\"Adaptive\")) {\n                setFeature(context, \"RETRY_MODE_ADAPTIVE\", \"F\");\n            }\n            else {\n                setFeature(context, \"RETRY_MODE_STANDARD\", \"E\");\n            }\n        }\n        else {\n            setFeature(context, \"RETRY_MODE_LEGACY\", \"D\");\n        }\n    }\n    if (typeof config.accountIdEndpointMode === \"function\") {\n        const endpointV2 = context.endpointV2;\n        if (String(endpointV2?.url?.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX)) {\n            setFeature(context, \"ACCOUNT_ID_ENDPOINT\", \"O\");\n        }\n        switch (await config.accountIdEndpointMode?.()) {\n            case \"disabled\":\n                setFeature(context, \"ACCOUNT_ID_MODE_DISABLED\", \"Q\");\n                break;\n            case \"preferred\":\n                setFeature(context, \"ACCOUNT_ID_MODE_PREFERRED\", \"P\");\n                break;\n            case \"required\":\n                setFeature(context, \"ACCOUNT_ID_MODE_REQUIRED\", \"R\");\n                break;\n        }\n    }\n    const identity = context.__smithy_context?.selectedHttpAuthScheme?.identity;\n    if (identity?.$source) {\n        const credentials = identity;\n        if (credentials.accountId) {\n            setFeature(context, \"RESOLVED_ACCOUNT_ID\", \"T\");\n        }\n        for (const [key, value] of Object.entries(credentials.$source ?? {})) {\n            setFeature(context, key, value);\n        }\n    }\n}\n","export const USER_AGENT = \"user-agent\";\nexport const X_AMZ_USER_AGENT = \"x-amz-user-agent\";\nexport const SPACE = \" \";\nexport const UA_NAME_SEPARATOR = \"/\";\nexport const UA_NAME_ESCAPE_REGEX = /[^\\!\\$\\%\\&\\'\\*\\+\\-\\.\\^\\_\\`\\|\\~\\d\\w]/g;\nexport const UA_VALUE_ESCAPE_REGEX = /[^\\!\\$\\%\\&\\'\\*\\+\\-\\.\\^\\_\\`\\|\\~\\d\\w\\#]/g;\nexport const UA_ESCAPE_CHAR = \"-\";\n","const BYTE_LIMIT = 1024;\nexport function encodeFeatures(features) {\n    let buffer = \"\";\n    for (const key in features) {\n        const val = features[key];\n        if (buffer.length + val.length + 1 <= BYTE_LIMIT) {\n            if (buffer.length) {\n                buffer += \",\" + val;\n            }\n            else {\n                buffer += val;\n            }\n            continue;\n        }\n        break;\n    }\n    return buffer;\n}\n","import { getUserAgentPrefix } from \"@aws-sdk/util-endpoints\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { checkFeatures } from \"./check-features\";\nimport { SPACE, UA_ESCAPE_CHAR, UA_NAME_ESCAPE_REGEX, UA_NAME_SEPARATOR, UA_VALUE_ESCAPE_REGEX, USER_AGENT, X_AMZ_USER_AGENT, } from \"./constants\";\nimport { encodeFeatures } from \"./encode-features\";\nexport const userAgentMiddleware = (options) => (next, context) => async (args) => {\n    const { request } = args;\n    if (!HttpRequest.isInstance(request)) {\n        return next(args);\n    }\n    const { headers } = request;\n    const userAgent = context?.userAgent?.map(escapeUserAgent) || [];\n    const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);\n    await checkFeatures(context, options, args);\n    const awsContext = context;\n    defaultUserAgent.push(`m/${encodeFeatures(Object.assign({}, context.__smithy_context?.features, awsContext.__aws_sdk_context?.features))}`);\n    const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];\n    const appId = await options.userAgentAppId();\n    if (appId) {\n        defaultUserAgent.push(escapeUserAgent([`app/${appId}`]));\n    }\n    const prefix = getUserAgentPrefix();\n    const sdkUserAgentValue = (prefix ? [prefix] : [])\n        .concat([...defaultUserAgent, ...userAgent, ...customUserAgent])\n        .join(SPACE);\n    const normalUAValue = [\n        ...defaultUserAgent.filter((section) => section.startsWith(\"aws-sdk-\")),\n        ...customUserAgent,\n    ].join(SPACE);\n    if (options.runtime !== \"browser\") {\n        if (normalUAValue) {\n            headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT]\n                ? `${headers[USER_AGENT]} ${normalUAValue}`\n                : normalUAValue;\n        }\n        headers[USER_AGENT] = sdkUserAgentValue;\n    }\n    else {\n        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;\n    }\n    return next({\n        ...args,\n        request,\n    });\n};\nconst escapeUserAgent = (userAgentPair) => {\n    const name = userAgentPair[0]\n        .split(UA_NAME_SEPARATOR)\n        .map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR))\n        .join(UA_NAME_SEPARATOR);\n    const version = userAgentPair[1]?.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);\n    const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);\n    const prefix = name.substring(0, prefixSeparatorIndex);\n    let uaName = name.substring(prefixSeparatorIndex + 1);\n    if (prefix === \"api\") {\n        uaName = uaName.toLowerCase();\n    }\n    return [prefix, uaName, version]\n        .filter((item) => item && item.length > 0)\n        .reduce((acc, item, index) => {\n        switch (index) {\n            case 0:\n                return item;\n            case 1:\n                return `${acc}/${item}`;\n            default:\n                return `${acc}#${item}`;\n        }\n    }, \"\");\n};\nexport const getUserAgentMiddlewareOptions = {\n    name: \"getUserAgentMiddleware\",\n    step: \"build\",\n    priority: \"low\",\n    tags: [\"SET_USER_AGENT\", \"USER_AGENT\"],\n    override: true,\n};\nexport const getUserAgentPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);\n    },\n});\n","import { fromHex } from \"@smithy/util-hex-encoding\";\nexport const getEventSigningTransformStream = (initialSignature, messageSigner, eventStreamCodec, systemClockOffsetProvider) => {\n    let priorSignature = initialSignature;\n    const transformer = {\n        start() { },\n        async transform(chunk, controller) {\n            try {\n                const now = new Date(Date.now() + (await systemClockOffsetProvider()));\n                const dateHeader = {\n                    \":date\": { type: \"timestamp\", value: now },\n                };\n                const signedMessage = await messageSigner.sign({\n                    message: {\n                        body: chunk,\n                        headers: dateHeader,\n                    },\n                    priorSignature: priorSignature,\n                }, {\n                    signingDate: now,\n                });\n                priorSignature = signedMessage.signature;\n                const serializedSigned = eventStreamCodec.encode({\n                    headers: {\n                        ...dateHeader,\n                        \":chunk-signature\": {\n                            type: \"binary\",\n                            value: fromHex(signedMessage.signature),\n                        },\n                    },\n                    body: chunk,\n                });\n                controller.enqueue(serializedSigned);\n            }\n            catch (error) {\n                controller.error(error);\n            }\n        },\n    };\n    return new TransformStream({ ...transformer });\n};\n","import { EventStreamCodec } from \"@smithy/eventstream-codec\";\nimport { getEventSigningTransformStream } from \"./get-event-signing-stream\";\nexport class EventStreamPayloadHandler {\n    messageSigner;\n    eventStreamCodec;\n    systemClockOffsetProvider;\n    constructor(options) {\n        this.messageSigner = options.messageSigner;\n        this.eventStreamCodec = new EventStreamCodec(options.utf8Encoder, options.utf8Decoder);\n        this.systemClockOffsetProvider = async () => options.systemClockOffset ?? 0;\n    }\n    async handle(next, args, context = {}) {\n        const request = args.request;\n        const { body: payload, headers, query } = request;\n        if (!(payload instanceof ReadableStream)) {\n            throw new Error(\"Eventstream payload must be a ReadableStream.\");\n        }\n        const placeHolderStream = new TransformStream();\n        request.body = placeHolderStream.readable;\n        let result;\n        try {\n            result = await next(args);\n        }\n        catch (e) {\n            request.body.cancel();\n            throw e;\n        }\n        const match = (headers[\"authorization\"] || \"\").match(/Signature=([\\w]+)$/);\n        const priorSignature = (match || [])[1] || (query && query[\"X-Amz-Signature\"]) || \"\";\n        const signingStream = getEventSigningTransformStream(priorSignature, await this.messageSigner(), this.eventStreamCodec, this.systemClockOffsetProvider);\n        const signedPayload = payload.pipeThrough(signingStream);\n        signedPayload.pipeThrough(placeHolderStream);\n        return result;\n    }\n}\n","import { EventStreamPayloadHandler } from \"./EventStreamPayloadHandler\";\nexport const eventStreamPayloadHandlerProvider = (options) => new EventStreamPayloadHandler(options);\n","import { resolveAwsSdkSigV4Config, } from \"@aws-sdk/core\";\nimport { doesIdentityRequireRefresh, isIdentityExpired, memoizeIdentityProvider } from \"@smithy/core\";\nimport { getSmithyContext, normalizeProvider } from \"@smithy/util-middleware\";\nexport const defaultBedrockRuntimeHttpAuthSchemeParametersProvider = async (config, context, input) => {\n    return {\n        operation: getSmithyContext(context).operation,\n        region: (await normalizeProvider(config.region)()) ||\n            (() => {\n                throw new Error(\"expected `region` to be configured for `aws.auth#sigv4`\");\n            })(),\n    };\n};\nfunction createAwsAuthSigv4HttpAuthOption(authParameters) {\n    return {\n        schemeId: \"aws.auth#sigv4\",\n        signingProperties: {\n            name: \"bedrock\",\n            region: authParameters.region,\n        },\n        propertiesExtractor: (config, context) => ({\n            signingProperties: {\n                config,\n                context,\n            },\n        }),\n    };\n}\nfunction createSmithyApiHttpBearerAuthHttpAuthOption(authParameters) {\n    return {\n        schemeId: \"smithy.api#httpBearerAuth\",\n        propertiesExtractor: ({ profile, filepath, configFilepath, ignoreCache }, context) => ({\n            identityProperties: {\n                profile,\n                filepath,\n                configFilepath,\n                ignoreCache,\n            },\n        }),\n    };\n}\nexport const defaultBedrockRuntimeHttpAuthSchemeProvider = (authParameters) => {\n    const options = [];\n    switch (authParameters.operation) {\n        default: {\n            options.push(createAwsAuthSigv4HttpAuthOption(authParameters));\n            options.push(createSmithyApiHttpBearerAuthHttpAuthOption(authParameters));\n        }\n    }\n    return options;\n};\nexport const resolveHttpAuthSchemeConfig = (config) => {\n    const token = memoizeIdentityProvider(config.token, isIdentityExpired, doesIdentityRequireRefresh);\n    const config_0 = resolveAwsSdkSigV4Config(config);\n    return Object.assign(config_0, {\n        authSchemePreference: normalizeProvider(config.authSchemePreference ?? []),\n        token,\n    });\n};\n","export const resolveClientEndpointParameters = (options) => {\n    return Object.assign(options, {\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        defaultSigningName: \"bedrock\",\n    });\n};\nexport const commonParams = {\n    UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n    Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n    Region: { type: \"builtInParams\", name: \"region\" },\n    UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n};\n","import bowser from \"bowser\";\nexport const createDefaultUserAgentProvider = ({ serviceId, clientVersion }) => async (config) => {\n    const parsedUA = typeof window !== \"undefined\" && window?.navigator?.userAgent\n        ? bowser.parse(window.navigator.userAgent)\n        : undefined;\n    const sections = [\n        [\"aws-sdk-js\", clientVersion],\n        [\"ua\", \"2.1\"],\n        [`os/${parsedUA?.os?.name || \"other\"}`, parsedUA?.os?.version],\n        [\"lang/js\"],\n        [\"md/browser\", `${parsedUA?.browser?.name ?? \"unknown\"}_${parsedUA?.browser?.version ?? \"unknown\"}`],\n    ];\n    if (serviceId) {\n        sections.push([`api/${serviceId}`, clientVersion]);\n    }\n    const appId = await config?.userAgentAppId?.();\n    if (appId) {\n        sections.push([`app/${appId}`]);\n    }\n    return sections;\n};\nexport const defaultUserAgent = createDefaultUserAgentProvider;\n","const s = \"required\", t = \"fn\", u = \"argv\", v = \"ref\";\nconst a = true, b = \"isSet\", c = \"booleanEquals\", d = \"error\", e = \"endpoint\", f = \"tree\", g = \"PartitionResult\", h = { [s]: false, \"type\": \"String\" }, i = { [s]: true, \"default\": false, \"type\": \"Boolean\" }, j = { [v]: \"Endpoint\" }, k = { [t]: c, [u]: [{ [v]: \"UseFIPS\" }, true] }, l = { [t]: c, [u]: [{ [v]: \"UseDualStack\" }, true] }, m = {}, n = { [t]: \"getAttr\", [u]: [{ [v]: g }, \"supportsFIPS\"] }, o = { [t]: c, [u]: [true, { [t]: \"getAttr\", [u]: [{ [v]: g }, \"supportsDualStack\"] }] }, p = [k], q = [l], r = [{ [v]: \"Region\" }];\nconst _data = { version: \"1.0\", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [t]: b, [u]: [j] }], rules: [{ conditions: p, error: \"Invalid Configuration: FIPS and custom endpoint are not supported\", type: d }, { rules: [{ conditions: q, error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\", type: d }, { endpoint: { url: j, properties: m, headers: m }, type: e }], type: f }], type: f }, { rules: [{ conditions: [{ [t]: b, [u]: r }], rules: [{ conditions: [{ [t]: \"aws.partition\", [u]: r, assign: g }], rules: [{ conditions: [k, l], rules: [{ conditions: [{ [t]: c, [u]: [a, n] }, o], rules: [{ rules: [{ endpoint: { url: \"https://bedrock-runtime-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: \"FIPS and DualStack are enabled, but this partition does not support one or both\", type: d }], type: f }, { conditions: p, rules: [{ conditions: [{ [t]: c, [u]: [n, a] }], rules: [{ rules: [{ endpoint: { url: \"https://bedrock-runtime-fips.{Region}.{PartitionResult#dnsSuffix}\", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: \"FIPS is enabled but this partition does not support FIPS\", type: d }], type: f }, { conditions: q, rules: [{ conditions: [o], rules: [{ rules: [{ endpoint: { url: \"https://bedrock-runtime.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: \"DualStack is enabled but this partition does not support DualStack\", type: d }], type: f }, { rules: [{ endpoint: { url: \"https://bedrock-runtime.{Region}.{PartitionResult#dnsSuffix}\", properties: m, headers: m }, type: e }], type: f }], type: f }], type: f }, { error: \"Invalid Configuration: Missing Region\", type: d }], type: f }] };\nexport const ruleSet = _data;\n","import { awsEndpointFunctions } from \"@aws-sdk/util-endpoints\";\nimport { customEndpointFunctions, EndpointCache, resolveEndpoint } from \"@smithy/util-endpoints\";\nimport { ruleSet } from \"./ruleset\";\nconst cache = new EndpointCache({\n    size: 50,\n    params: [\"Endpoint\", \"Region\", \"UseDualStack\", \"UseFIPS\"],\n});\nexport const defaultEndpointResolver = (endpointParams, context = {}) => {\n    return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {\n        endpointParams: endpointParams,\n        logger: context.logger,\n    }));\n};\ncustomEndpointFunctions.aws = awsEndpointFunctions;\n","import { AwsSdkSigV4Signer } from \"@aws-sdk/core\";\nimport { HttpBearerAuthSigner } from \"@smithy/core\";\nimport { NoOpLogger } from \"@smithy/smithy-client\";\nimport { parseUrl } from \"@smithy/url-parser\";\nimport { fromBase64, toBase64 } from \"@smithy/util-base64\";\nimport { fromUtf8, toUtf8 } from \"@smithy/util-utf8\";\nimport { defaultBedrockRuntimeHttpAuthSchemeProvider } from \"./auth/httpAuthSchemeProvider\";\nimport { defaultEndpointResolver } from \"./endpoint/endpointResolver\";\nexport const getRuntimeConfig = (config) => {\n    return {\n        apiVersion: \"2023-09-30\",\n        base64Decoder: config?.base64Decoder ?? fromBase64,\n        base64Encoder: config?.base64Encoder ?? toBase64,\n        disableHostPrefix: config?.disableHostPrefix ?? false,\n        endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,\n        extensions: config?.extensions ?? [],\n        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultBedrockRuntimeHttpAuthSchemeProvider,\n        httpAuthSchemes: config?.httpAuthSchemes ?? [\n            {\n                schemeId: \"aws.auth#sigv4\",\n                identityProvider: (ipc) => ipc.getIdentityProvider(\"aws.auth#sigv4\"),\n                signer: new AwsSdkSigV4Signer(),\n            },\n            {\n                schemeId: \"smithy.api#httpBearerAuth\",\n                identityProvider: (ipc) => ipc.getIdentityProvider(\"smithy.api#httpBearerAuth\"),\n                signer: new HttpBearerAuthSigner(),\n            },\n        ],\n        logger: config?.logger ?? new NoOpLogger(),\n        serviceId: config?.serviceId ?? \"Bedrock Runtime\",\n        urlParser: config?.urlParser ?? parseUrl,\n        utf8Decoder: config?.utf8Decoder ?? fromUtf8,\n        utf8Encoder: config?.utf8Encoder ?? toUtf8,\n    };\n};\n","import packageInfo from \"../package.json\";\nimport { Sha256 } from \"@aws-crypto/sha256-browser\";\nimport { WebSocketFetchHandler as WebSocketRequestHandler, eventStreamPayloadHandlerProvider, } from \"@aws-sdk/middleware-websocket\";\nimport { createDefaultUserAgentProvider } from \"@aws-sdk/util-user-agent-browser\";\nimport { DEFAULT_USE_DUALSTACK_ENDPOINT, DEFAULT_USE_FIPS_ENDPOINT } from \"@smithy/config-resolver\";\nimport { eventStreamSerdeProvider } from \"@smithy/eventstream-serde-browser\";\nimport { FetchHttpHandler as HttpRequestHandler, streamCollector } from \"@smithy/fetch-http-handler\";\nimport { invalidProvider } from \"@smithy/invalid-dependency\";\nimport { calculateBodyLength } from \"@smithy/util-body-length-browser\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE } from \"@smithy/util-retry\";\nimport { getRuntimeConfig as getSharedRuntimeConfig } from \"./runtimeConfig.shared\";\nimport { loadConfigsForDefaultMode } from \"@smithy/smithy-client\";\nimport { resolveDefaultsModeConfig } from \"@smithy/util-defaults-mode-browser\";\nexport const getRuntimeConfig = (config) => {\n    const defaultsMode = resolveDefaultsModeConfig(config);\n    const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);\n    const clientSharedValues = getSharedRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"browser\",\n        defaultsMode,\n        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,\n        credentialDefaultProvider: config?.credentialDefaultProvider ?? ((_) => () => Promise.reject(new Error(\"Credential is missing\"))),\n        defaultUserAgentProvider: config?.defaultUserAgentProvider ??\n            createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: packageInfo.version }),\n        eventStreamPayloadHandlerProvider: config?.eventStreamPayloadHandlerProvider ?? eventStreamPayloadHandlerProvider,\n        eventStreamSerdeProvider: config?.eventStreamSerdeProvider ?? eventStreamSerdeProvider,\n        maxAttempts: config?.maxAttempts ?? DEFAULT_MAX_ATTEMPTS,\n        region: config?.region ?? invalidProvider(\"Region is missing\"),\n        requestHandler: WebSocketRequestHandler.create(config?.requestHandler ?? defaultConfigProvider, HttpRequestHandler.create(defaultConfigProvider)),\n        retryMode: config?.retryMode ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),\n        sha256: config?.sha256 ?? Sha256,\n        streamCollector: config?.streamCollector ?? streamCollector,\n        useDualstackEndpoint: config?.useDualstackEndpoint ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),\n        useFipsEndpoint: config?.useFipsEndpoint ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT)),\n    };\n};\n","export const getAwsRegionExtensionConfiguration = (runtimeConfig) => {\n    return {\n        setRegion(region) {\n            runtimeConfig.region = region;\n        },\n        region() {\n            return runtimeConfig.region;\n        },\n    };\n};\nexport const resolveAwsRegionExtensionConfiguration = (awsRegionExtensionConfiguration) => {\n    return {\n        region: awsRegionExtensionConfiguration.region(),\n    };\n};\n","export const getHttpAuthExtensionConfiguration = (runtimeConfig) => {\n    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;\n    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;\n    let _credentials = runtimeConfig.credentials;\n    let _token = runtimeConfig.token;\n    return {\n        setHttpAuthScheme(httpAuthScheme) {\n            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);\n            if (index === -1) {\n                _httpAuthSchemes.push(httpAuthScheme);\n            }\n            else {\n                _httpAuthSchemes.splice(index, 1, httpAuthScheme);\n            }\n        },\n        httpAuthSchemes() {\n            return _httpAuthSchemes;\n        },\n        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {\n            _httpAuthSchemeProvider = httpAuthSchemeProvider;\n        },\n        httpAuthSchemeProvider() {\n            return _httpAuthSchemeProvider;\n        },\n        setCredentials(credentials) {\n            _credentials = credentials;\n        },\n        credentials() {\n            return _credentials;\n        },\n        setToken(token) {\n            _token = token;\n        },\n        token() {\n            return _token;\n        },\n    };\n};\nexport const resolveHttpAuthRuntimeConfig = (config) => {\n    return {\n        httpAuthSchemes: config.httpAuthSchemes(),\n        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),\n        credentials: config.credentials(),\n        token: config.token(),\n    };\n};\n","import { getAwsRegionExtensionConfiguration, resolveAwsRegionExtensionConfiguration, } from \"@aws-sdk/region-config-resolver\";\nimport { getHttpHandlerExtensionConfiguration, resolveHttpHandlerRuntimeConfig } from \"@smithy/protocol-http\";\nimport { getDefaultExtensionConfiguration, resolveDefaultRuntimeConfig } from \"@smithy/smithy-client\";\nimport { getHttpAuthExtensionConfiguration, resolveHttpAuthRuntimeConfig } from \"./auth/httpAuthExtensionConfiguration\";\nexport const resolveRuntimeExtensions = (runtimeConfig, extensions) => {\n    const extensionConfiguration = Object.assign(getAwsRegionExtensionConfiguration(runtimeConfig), getDefaultExtensionConfiguration(runtimeConfig), getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));\n    extensions.forEach((extension) => extension.configure(extensionConfiguration));\n    return Object.assign(runtimeConfig, resolveAwsRegionExtensionConfiguration(extensionConfiguration), resolveDefaultRuntimeConfig(extensionConfiguration), resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));\n};\n","import { resolveEventStreamConfig, } from \"@aws-sdk/middleware-eventstream\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig, } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRecursionDetectionPlugin } from \"@aws-sdk/middleware-recursion-detection\";\nimport { getUserAgentPlugin, resolveUserAgentConfig, } from \"@aws-sdk/middleware-user-agent\";\nimport { resolveWebSocketConfig } from \"@aws-sdk/middleware-websocket\";\nimport { resolveRegionConfig } from \"@smithy/config-resolver\";\nimport { DefaultIdentityProviderConfig, getHttpAuthSchemeEndpointRuleSetPlugin, getHttpSigningPlugin, } from \"@smithy/core\";\nimport { resolveEventStreamSerdeConfig, } from \"@smithy/eventstream-serde-config-resolver\";\nimport { getContentLengthPlugin } from \"@smithy/middleware-content-length\";\nimport { resolveEndpointConfig } from \"@smithy/middleware-endpoint\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@smithy/middleware-retry\";\nimport { Client as __Client, } from \"@smithy/smithy-client\";\nimport { defaultBedrockRuntimeHttpAuthSchemeParametersProvider, resolveHttpAuthSchemeConfig, } from \"./auth/httpAuthSchemeProvider\";\nimport { resolveClientEndpointParameters, } from \"./endpoint/EndpointParameters\";\nimport { getRuntimeConfig as __getRuntimeConfig } from \"./runtimeConfig\";\nimport { resolveRuntimeExtensions } from \"./runtimeExtensions\";\nexport { __Client };\nexport class BedrockRuntimeClient extends __Client {\n    config;\n    constructor(...[configuration]) {\n        const _config_0 = __getRuntimeConfig(configuration || {});\n        super(_config_0);\n        this.initConfig = _config_0;\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = resolveUserAgentConfig(_config_1);\n        const _config_3 = resolveRetryConfig(_config_2);\n        const _config_4 = resolveRegionConfig(_config_3);\n        const _config_5 = resolveHostHeaderConfig(_config_4);\n        const _config_6 = resolveEndpointConfig(_config_5);\n        const _config_7 = resolveEventStreamSerdeConfig(_config_6);\n        const _config_8 = resolveHttpAuthSchemeConfig(_config_7);\n        const _config_9 = resolveEventStreamConfig(_config_8);\n        const _config_10 = resolveWebSocketConfig(_config_9);\n        const _config_11 = resolveRuntimeExtensions(_config_10, configuration?.extensions || []);\n        this.config = _config_11;\n        this.middlewareStack.use(getUserAgentPlugin(this.config));\n        this.middlewareStack.use(getRetryPlugin(this.config));\n        this.middlewareStack.use(getContentLengthPlugin(this.config));\n        this.middlewareStack.use(getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(getLoggerPlugin(this.config));\n        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));\n        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {\n            httpAuthSchemeParametersProvider: defaultBedrockRuntimeHttpAuthSchemeParametersProvider,\n            identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({\n                \"aws.auth#sigv4\": config.credentials,\n                \"smithy.api#httpBearerAuth\": config.token,\n            }),\n        }));\n        this.middlewareStack.use(getHttpSigningPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n","import { ServiceException as __ServiceException, } from \"@smithy/smithy-client\";\nexport { __ServiceException };\nexport class BedrockRuntimeServiceException extends __ServiceException {\n    constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, BedrockRuntimeServiceException.prototype);\n    }\n}\n","import { SENSITIVE_STRING } from \"@smithy/smithy-client\";\nimport { BedrockRuntimeServiceException as __BaseException } from \"./BedrockRuntimeServiceException\";\nexport class AccessDeniedException extends __BaseException {\n    name = \"AccessDeniedException\";\n    $fault = \"client\";\n    constructor(opts) {\n        super({\n            name: \"AccessDeniedException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, AccessDeniedException.prototype);\n    }\n}\nexport var AsyncInvokeOutputDataConfig;\n(function (AsyncInvokeOutputDataConfig) {\n    AsyncInvokeOutputDataConfig.visit = (value, visitor) => {\n        if (value.s3OutputDataConfig !== undefined)\n            return visitor.s3OutputDataConfig(value.s3OutputDataConfig);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(AsyncInvokeOutputDataConfig || (AsyncInvokeOutputDataConfig = {}));\nexport const AsyncInvokeStatus = {\n    COMPLETED: \"Completed\",\n    FAILED: \"Failed\",\n    IN_PROGRESS: \"InProgress\",\n};\nexport class InternalServerException extends __BaseException {\n    name = \"InternalServerException\";\n    $fault = \"server\";\n    constructor(opts) {\n        super({\n            name: \"InternalServerException\",\n            $fault: \"server\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, InternalServerException.prototype);\n    }\n}\nexport class ThrottlingException extends __BaseException {\n    name = \"ThrottlingException\";\n    $fault = \"client\";\n    constructor(opts) {\n        super({\n            name: \"ThrottlingException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, ThrottlingException.prototype);\n    }\n}\nexport class ValidationException extends __BaseException {\n    name = \"ValidationException\";\n    $fault = \"client\";\n    constructor(opts) {\n        super({\n            name: \"ValidationException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, ValidationException.prototype);\n    }\n}\nexport const SortAsyncInvocationBy = {\n    SUBMISSION_TIME: \"SubmissionTime\",\n};\nexport const SortOrder = {\n    ASCENDING: \"Ascending\",\n    DESCENDING: \"Descending\",\n};\nexport class ConflictException extends __BaseException {\n    name = \"ConflictException\";\n    $fault = \"client\";\n    constructor(opts) {\n        super({\n            name: \"ConflictException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, ConflictException.prototype);\n    }\n}\nexport class ResourceNotFoundException extends __BaseException {\n    name = \"ResourceNotFoundException\";\n    $fault = \"client\";\n    constructor(opts) {\n        super({\n            name: \"ResourceNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);\n    }\n}\nexport class ServiceQuotaExceededException extends __BaseException {\n    name = \"ServiceQuotaExceededException\";\n    $fault = \"client\";\n    constructor(opts) {\n        super({\n            name: \"ServiceQuotaExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);\n    }\n}\nexport class ServiceUnavailableException extends __BaseException {\n    name = \"ServiceUnavailableException\";\n    $fault = \"server\";\n    constructor(opts) {\n        super({\n            name: \"ServiceUnavailableException\",\n            $fault: \"server\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);\n    }\n}\nexport const GuardrailImageFormat = {\n    JPEG: \"jpeg\",\n    PNG: \"png\",\n};\nexport var GuardrailImageSource;\n(function (GuardrailImageSource) {\n    GuardrailImageSource.visit = (value, visitor) => {\n        if (value.bytes !== undefined)\n            return visitor.bytes(value.bytes);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(GuardrailImageSource || (GuardrailImageSource = {}));\nexport const GuardrailContentQualifier = {\n    GROUNDING_SOURCE: \"grounding_source\",\n    GUARD_CONTENT: \"guard_content\",\n    QUERY: \"query\",\n};\nexport var GuardrailContentBlock;\n(function (GuardrailContentBlock) {\n    GuardrailContentBlock.visit = (value, visitor) => {\n        if (value.text !== undefined)\n            return visitor.text(value.text);\n        if (value.image !== undefined)\n            return visitor.image(value.image);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(GuardrailContentBlock || (GuardrailContentBlock = {}));\nexport const GuardrailOutputScope = {\n    FULL: \"FULL\",\n    INTERVENTIONS: \"INTERVENTIONS\",\n};\nexport const GuardrailContentSource = {\n    INPUT: \"INPUT\",\n    OUTPUT: \"OUTPUT\",\n};\nexport const GuardrailAction = {\n    GUARDRAIL_INTERVENED: \"GUARDRAIL_INTERVENED\",\n    NONE: \"NONE\",\n};\nexport const GuardrailAutomatedReasoningLogicWarningType = {\n    ALWAYS_FALSE: \"ALWAYS_FALSE\",\n    ALWAYS_TRUE: \"ALWAYS_TRUE\",\n};\nexport var GuardrailAutomatedReasoningFinding;\n(function (GuardrailAutomatedReasoningFinding) {\n    GuardrailAutomatedReasoningFinding.visit = (value, visitor) => {\n        if (value.valid !== undefined)\n            return visitor.valid(value.valid);\n        if (value.invalid !== undefined)\n            return visitor.invalid(value.invalid);\n        if (value.satisfiable !== undefined)\n            return visitor.satisfiable(value.satisfiable);\n        if (value.impossible !== undefined)\n            return visitor.impossible(value.impossible);\n        if (value.translationAmbiguous !== undefined)\n            return visitor.translationAmbiguous(value.translationAmbiguous);\n        if (value.tooComplex !== undefined)\n            return visitor.tooComplex(value.tooComplex);\n        if (value.noTranslations !== undefined)\n            return visitor.noTranslations(value.noTranslations);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(GuardrailAutomatedReasoningFinding || (GuardrailAutomatedReasoningFinding = {}));\nexport const GuardrailContentPolicyAction = {\n    BLOCKED: \"BLOCKED\",\n    NONE: \"NONE\",\n};\nexport const GuardrailContentFilterConfidence = {\n    HIGH: \"HIGH\",\n    LOW: \"LOW\",\n    MEDIUM: \"MEDIUM\",\n    NONE: \"NONE\",\n};\nexport const GuardrailContentFilterStrength = {\n    HIGH: \"HIGH\",\n    LOW: \"LOW\",\n    MEDIUM: \"MEDIUM\",\n    NONE: \"NONE\",\n};\nexport const GuardrailContentFilterType = {\n    HATE: \"HATE\",\n    INSULTS: \"INSULTS\",\n    MISCONDUCT: \"MISCONDUCT\",\n    PROMPT_ATTACK: \"PROMPT_ATTACK\",\n    SEXUAL: \"SEXUAL\",\n    VIOLENCE: \"VIOLENCE\",\n};\nexport const GuardrailContextualGroundingPolicyAction = {\n    BLOCKED: \"BLOCKED\",\n    NONE: \"NONE\",\n};\nexport const GuardrailContextualGroundingFilterType = {\n    GROUNDING: \"GROUNDING\",\n    RELEVANCE: \"RELEVANCE\",\n};\nexport const GuardrailSensitiveInformationPolicyAction = {\n    ANONYMIZED: \"ANONYMIZED\",\n    BLOCKED: \"BLOCKED\",\n    NONE: \"NONE\",\n};\nexport const GuardrailPiiEntityType = {\n    ADDRESS: \"ADDRESS\",\n    AGE: \"AGE\",\n    AWS_ACCESS_KEY: \"AWS_ACCESS_KEY\",\n    AWS_SECRET_KEY: \"AWS_SECRET_KEY\",\n    CA_HEALTH_NUMBER: \"CA_HEALTH_NUMBER\",\n    CA_SOCIAL_INSURANCE_NUMBER: \"CA_SOCIAL_INSURANCE_NUMBER\",\n    CREDIT_DEBIT_CARD_CVV: \"CREDIT_DEBIT_CARD_CVV\",\n    CREDIT_DEBIT_CARD_EXPIRY: \"CREDIT_DEBIT_CARD_EXPIRY\",\n    CREDIT_DEBIT_CARD_NUMBER: \"CREDIT_DEBIT_CARD_NUMBER\",\n    DRIVER_ID: \"DRIVER_ID\",\n    EMAIL: \"EMAIL\",\n    INTERNATIONAL_BANK_ACCOUNT_NUMBER: \"INTERNATIONAL_BANK_ACCOUNT_NUMBER\",\n    IP_ADDRESS: \"IP_ADDRESS\",\n    LICENSE_PLATE: \"LICENSE_PLATE\",\n    MAC_ADDRESS: \"MAC_ADDRESS\",\n    NAME: \"NAME\",\n    PASSWORD: \"PASSWORD\",\n    PHONE: \"PHONE\",\n    PIN: \"PIN\",\n    SWIFT_CODE: \"SWIFT_CODE\",\n    UK_NATIONAL_HEALTH_SERVICE_NUMBER: \"UK_NATIONAL_HEALTH_SERVICE_NUMBER\",\n    UK_NATIONAL_INSURANCE_NUMBER: \"UK_NATIONAL_INSURANCE_NUMBER\",\n    UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER: \"UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER\",\n    URL: \"URL\",\n    USERNAME: \"USERNAME\",\n    US_BANK_ACCOUNT_NUMBER: \"US_BANK_ACCOUNT_NUMBER\",\n    US_BANK_ROUTING_NUMBER: \"US_BANK_ROUTING_NUMBER\",\n    US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER: \"US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER\",\n    US_PASSPORT_NUMBER: \"US_PASSPORT_NUMBER\",\n    US_SOCIAL_SECURITY_NUMBER: \"US_SOCIAL_SECURITY_NUMBER\",\n    VEHICLE_IDENTIFICATION_NUMBER: \"VEHICLE_IDENTIFICATION_NUMBER\",\n};\nexport const GuardrailTopicPolicyAction = {\n    BLOCKED: \"BLOCKED\",\n    NONE: \"NONE\",\n};\nexport const GuardrailTopicType = {\n    DENY: \"DENY\",\n};\nexport const GuardrailWordPolicyAction = {\n    BLOCKED: \"BLOCKED\",\n    NONE: \"NONE\",\n};\nexport const GuardrailManagedWordType = {\n    PROFANITY: \"PROFANITY\",\n};\nexport const GuardrailTrace = {\n    DISABLED: \"disabled\",\n    ENABLED: \"enabled\",\n    ENABLED_FULL: \"enabled_full\",\n};\nexport const CachePointType = {\n    DEFAULT: \"default\",\n};\nexport var CitationLocation;\n(function (CitationLocation) {\n    CitationLocation.visit = (value, visitor) => {\n        if (value.documentChar !== undefined)\n            return visitor.documentChar(value.documentChar);\n        if (value.documentPage !== undefined)\n            return visitor.documentPage(value.documentPage);\n        if (value.documentChunk !== undefined)\n            return visitor.documentChunk(value.documentChunk);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(CitationLocation || (CitationLocation = {}));\nexport var CitationSourceContent;\n(function (CitationSourceContent) {\n    CitationSourceContent.visit = (value, visitor) => {\n        if (value.text !== undefined)\n            return visitor.text(value.text);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(CitationSourceContent || (CitationSourceContent = {}));\nexport var CitationGeneratedContent;\n(function (CitationGeneratedContent) {\n    CitationGeneratedContent.visit = (value, visitor) => {\n        if (value.text !== undefined)\n            return visitor.text(value.text);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(CitationGeneratedContent || (CitationGeneratedContent = {}));\nexport const DocumentFormat = {\n    CSV: \"csv\",\n    DOC: \"doc\",\n    DOCX: \"docx\",\n    HTML: \"html\",\n    MD: \"md\",\n    PDF: \"pdf\",\n    TXT: \"txt\",\n    XLS: \"xls\",\n    XLSX: \"xlsx\",\n};\nexport var DocumentContentBlock;\n(function (DocumentContentBlock) {\n    DocumentContentBlock.visit = (value, visitor) => {\n        if (value.text !== undefined)\n            return visitor.text(value.text);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(DocumentContentBlock || (DocumentContentBlock = {}));\nexport var DocumentSource;\n(function (DocumentSource) {\n    DocumentSource.visit = (value, visitor) => {\n        if (value.bytes !== undefined)\n            return visitor.bytes(value.bytes);\n        if (value.s3Location !== undefined)\n            return visitor.s3Location(value.s3Location);\n        if (value.text !== undefined)\n            return visitor.text(value.text);\n        if (value.content !== undefined)\n            return visitor.content(value.content);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(DocumentSource || (DocumentSource = {}));\nexport const GuardrailConverseImageFormat = {\n    JPEG: \"jpeg\",\n    PNG: \"png\",\n};\nexport var GuardrailConverseImageSource;\n(function (GuardrailConverseImageSource) {\n    GuardrailConverseImageSource.visit = (value, visitor) => {\n        if (value.bytes !== undefined)\n            return visitor.bytes(value.bytes);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(GuardrailConverseImageSource || (GuardrailConverseImageSource = {}));\nexport const GuardrailConverseContentQualifier = {\n    GROUNDING_SOURCE: \"grounding_source\",\n    GUARD_CONTENT: \"guard_content\",\n    QUERY: \"query\",\n};\nexport var GuardrailConverseContentBlock;\n(function (GuardrailConverseContentBlock) {\n    GuardrailConverseContentBlock.visit = (value, visitor) => {\n        if (value.text !== undefined)\n            return visitor.text(value.text);\n        if (value.image !== undefined)\n            return visitor.image(value.image);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(GuardrailConverseContentBlock || (GuardrailConverseContentBlock = {}));\nexport const ImageFormat = {\n    GIF: \"gif\",\n    JPEG: \"jpeg\",\n    PNG: \"png\",\n    WEBP: \"webp\",\n};\nexport var ImageSource;\n(function (ImageSource) {\n    ImageSource.visit = (value, visitor) => {\n        if (value.bytes !== undefined)\n            return visitor.bytes(value.bytes);\n        if (value.s3Location !== undefined)\n            return visitor.s3Location(value.s3Location);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(ImageSource || (ImageSource = {}));\nexport var ReasoningContentBlock;\n(function (ReasoningContentBlock) {\n    ReasoningContentBlock.visit = (value, visitor) => {\n        if (value.reasoningText !== undefined)\n            return visitor.reasoningText(value.reasoningText);\n        if (value.redactedContent !== undefined)\n            return visitor.redactedContent(value.redactedContent);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(ReasoningContentBlock || (ReasoningContentBlock = {}));\nexport const VideoFormat = {\n    FLV: \"flv\",\n    MKV: \"mkv\",\n    MOV: \"mov\",\n    MP4: \"mp4\",\n    MPEG: \"mpeg\",\n    MPG: \"mpg\",\n    THREE_GP: \"three_gp\",\n    WEBM: \"webm\",\n    WMV: \"wmv\",\n};\nexport var VideoSource;\n(function (VideoSource) {\n    VideoSource.visit = (value, visitor) => {\n        if (value.bytes !== undefined)\n            return visitor.bytes(value.bytes);\n        if (value.s3Location !== undefined)\n            return visitor.s3Location(value.s3Location);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(VideoSource || (VideoSource = {}));\nexport var ToolResultContentBlock;\n(function (ToolResultContentBlock) {\n    ToolResultContentBlock.visit = (value, visitor) => {\n        if (value.json !== undefined)\n            return visitor.json(value.json);\n        if (value.text !== undefined)\n            return visitor.text(value.text);\n        if (value.image !== undefined)\n            return visitor.image(value.image);\n        if (value.document !== undefined)\n            return visitor.document(value.document);\n        if (value.video !== undefined)\n            return visitor.video(value.video);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(ToolResultContentBlock || (ToolResultContentBlock = {}));\nexport const ToolResultStatus = {\n    ERROR: \"error\",\n    SUCCESS: \"success\",\n};\nexport var ContentBlock;\n(function (ContentBlock) {\n    ContentBlock.visit = (value, visitor) => {\n        if (value.text !== undefined)\n            return visitor.text(value.text);\n        if (value.image !== undefined)\n            return visitor.image(value.image);\n        if (value.document !== undefined)\n            return visitor.document(value.document);\n        if (value.video !== undefined)\n            return visitor.video(value.video);\n        if (value.toolUse !== undefined)\n            return visitor.toolUse(value.toolUse);\n        if (value.toolResult !== undefined)\n            return visitor.toolResult(value.toolResult);\n        if (value.guardContent !== undefined)\n            return visitor.guardContent(value.guardContent);\n        if (value.cachePoint !== undefined)\n            return visitor.cachePoint(value.cachePoint);\n        if (value.reasoningContent !== undefined)\n            return visitor.reasoningContent(value.reasoningContent);\n        if (value.citationsContent !== undefined)\n            return visitor.citationsContent(value.citationsContent);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(ContentBlock || (ContentBlock = {}));\nexport const ConversationRole = {\n    ASSISTANT: \"assistant\",\n    USER: \"user\",\n};\nexport const PerformanceConfigLatency = {\n    OPTIMIZED: \"optimized\",\n    STANDARD: \"standard\",\n};\nexport var PromptVariableValues;\n(function (PromptVariableValues) {\n    PromptVariableValues.visit = (value, visitor) => {\n        if (value.text !== undefined)\n            return visitor.text(value.text);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(PromptVariableValues || (PromptVariableValues = {}));\nexport var SystemContentBlock;\n(function (SystemContentBlock) {\n    SystemContentBlock.visit = (value, visitor) => {\n        if (value.text !== undefined)\n            return visitor.text(value.text);\n        if (value.guardContent !== undefined)\n            return visitor.guardContent(value.guardContent);\n        if (value.cachePoint !== undefined)\n            return visitor.cachePoint(value.cachePoint);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(SystemContentBlock || (SystemContentBlock = {}));\nexport var ToolChoice;\n(function (ToolChoice) {\n    ToolChoice.visit = (value, visitor) => {\n        if (value.auto !== undefined)\n            return visitor.auto(value.auto);\n        if (value.any !== undefined)\n            return visitor.any(value.any);\n        if (value.tool !== undefined)\n            return visitor.tool(value.tool);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(ToolChoice || (ToolChoice = {}));\nexport var ToolInputSchema;\n(function (ToolInputSchema) {\n    ToolInputSchema.visit = (value, visitor) => {\n        if (value.json !== undefined)\n            return visitor.json(value.json);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(ToolInputSchema || (ToolInputSchema = {}));\nexport var Tool;\n(function (Tool) {\n    Tool.visit = (value, visitor) => {\n        if (value.toolSpec !== undefined)\n            return visitor.toolSpec(value.toolSpec);\n        if (value.cachePoint !== undefined)\n            return visitor.cachePoint(value.cachePoint);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(Tool || (Tool = {}));\nexport var ConverseOutput;\n(function (ConverseOutput) {\n    ConverseOutput.visit = (value, visitor) => {\n        if (value.message !== undefined)\n            return visitor.message(value.message);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(ConverseOutput || (ConverseOutput = {}));\nexport const StopReason = {\n    CONTENT_FILTERED: \"content_filtered\",\n    END_TURN: \"end_turn\",\n    GUARDRAIL_INTERVENED: \"guardrail_intervened\",\n    MAX_TOKENS: \"max_tokens\",\n    MODEL_CONTEXT_WINDOW_EXCEEDED: \"model_context_window_exceeded\",\n    STOP_SEQUENCE: \"stop_sequence\",\n    TOOL_USE: \"tool_use\",\n};\nexport class ModelErrorException extends __BaseException {\n    name = \"ModelErrorException\";\n    $fault = \"client\";\n    originalStatusCode;\n    resourceName;\n    constructor(opts) {\n        super({\n            name: \"ModelErrorException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, ModelErrorException.prototype);\n        this.originalStatusCode = opts.originalStatusCode;\n        this.resourceName = opts.resourceName;\n    }\n}\nexport class ModelNotReadyException extends __BaseException {\n    name = \"ModelNotReadyException\";\n    $fault = \"client\";\n    $retryable = {};\n    constructor(opts) {\n        super({\n            name: \"ModelNotReadyException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, ModelNotReadyException.prototype);\n    }\n}\nexport class ModelTimeoutException extends __BaseException {\n    name = \"ModelTimeoutException\";\n    $fault = \"client\";\n    constructor(opts) {\n        super({\n            name: \"ModelTimeoutException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, ModelTimeoutException.prototype);\n    }\n}\nexport const GuardrailStreamProcessingMode = {\n    ASYNC: \"async\",\n    SYNC: \"sync\",\n};\nexport var ReasoningContentBlockDelta;\n(function (ReasoningContentBlockDelta) {\n    ReasoningContentBlockDelta.visit = (value, visitor) => {\n        if (value.text !== undefined)\n            return visitor.text(value.text);\n        if (value.redactedContent !== undefined)\n            return visitor.redactedContent(value.redactedContent);\n        if (value.signature !== undefined)\n            return visitor.signature(value.signature);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(ReasoningContentBlockDelta || (ReasoningContentBlockDelta = {}));\nexport var ContentBlockDelta;\n(function (ContentBlockDelta) {\n    ContentBlockDelta.visit = (value, visitor) => {\n        if (value.text !== undefined)\n            return visitor.text(value.text);\n        if (value.toolUse !== undefined)\n            return visitor.toolUse(value.toolUse);\n        if (value.reasoningContent !== undefined)\n            return visitor.reasoningContent(value.reasoningContent);\n        if (value.citation !== undefined)\n            return visitor.citation(value.citation);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(ContentBlockDelta || (ContentBlockDelta = {}));\nexport var ContentBlockStart;\n(function (ContentBlockStart) {\n    ContentBlockStart.visit = (value, visitor) => {\n        if (value.toolUse !== undefined)\n            return visitor.toolUse(value.toolUse);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(ContentBlockStart || (ContentBlockStart = {}));\nexport class ModelStreamErrorException extends __BaseException {\n    name = \"ModelStreamErrorException\";\n    $fault = \"client\";\n    originalStatusCode;\n    originalMessage;\n    constructor(opts) {\n        super({\n            name: \"ModelStreamErrorException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        Object.setPrototypeOf(this, ModelStreamErrorException.prototype);\n        this.originalStatusCode = opts.originalStatusCode;\n        this.originalMessage = opts.originalMessage;\n    }\n}\nexport var ConverseStreamOutput;\n(function (ConverseStreamOutput) {\n    ConverseStreamOutput.visit = (value, visitor) => {\n        if (value.messageStart !== undefined)\n            return visitor.messageStart(value.messageStart);\n        if (value.contentBlockStart !== undefined)\n            return visitor.contentBlockStart(value.contentBlockStart);\n        if (value.contentBlockDelta !== undefined)\n            return visitor.contentBlockDelta(value.contentBlockDelta);\n        if (value.contentBlockStop !== undefined)\n            return visitor.contentBlockStop(value.contentBlockStop);\n        if (value.messageStop !== undefined)\n            return visitor.messageStop(value.messageStop);\n        if (value.metadata !== undefined)\n            return visitor.metadata(value.metadata);\n        if (value.internalServerException !== undefined)\n            return visitor.internalServerException(value.internalServerException);\n        if (value.modelStreamErrorException !== undefined)\n            return visitor.modelStreamErrorException(value.modelStreamErrorException);\n        if (value.validationException !== undefined)\n            return visitor.validationException(value.validationException);\n        if (value.throttlingException !== undefined)\n            return visitor.throttlingException(value.throttlingException);\n        if (value.serviceUnavailableException !== undefined)\n            return visitor.serviceUnavailableException(value.serviceUnavailableException);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(ConverseStreamOutput || (ConverseStreamOutput = {}));\nexport const Trace = {\n    DISABLED: \"DISABLED\",\n    ENABLED: \"ENABLED\",\n    ENABLED_FULL: \"ENABLED_FULL\",\n};\nexport var InvokeModelWithBidirectionalStreamInput;\n(function (InvokeModelWithBidirectionalStreamInput) {\n    InvokeModelWithBidirectionalStreamInput.visit = (value, visitor) => {\n        if (value.chunk !== undefined)\n            return visitor.chunk(value.chunk);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(InvokeModelWithBidirectionalStreamInput || (InvokeModelWithBidirectionalStreamInput = {}));\nexport var InvokeModelWithBidirectionalStreamOutput;\n(function (InvokeModelWithBidirectionalStreamOutput) {\n    InvokeModelWithBidirectionalStreamOutput.visit = (value, visitor) => {\n        if (value.chunk !== undefined)\n            return visitor.chunk(value.chunk);\n        if (value.internalServerException !== undefined)\n            return visitor.internalServerException(value.internalServerException);\n        if (value.modelStreamErrorException !== undefined)\n            return visitor.modelStreamErrorException(value.modelStreamErrorException);\n        if (value.validationException !== undefined)\n            return visitor.validationException(value.validationException);\n        if (value.throttlingException !== undefined)\n            return visitor.throttlingException(value.throttlingException);\n        if (value.modelTimeoutException !== undefined)\n            return visitor.modelTimeoutException(value.modelTimeoutException);\n        if (value.serviceUnavailableException !== undefined)\n            return visitor.serviceUnavailableException(value.serviceUnavailableException);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(InvokeModelWithBidirectionalStreamOutput || (InvokeModelWithBidirectionalStreamOutput = {}));\nexport var ResponseStream;\n(function (ResponseStream) {\n    ResponseStream.visit = (value, visitor) => {\n        if (value.chunk !== undefined)\n            return visitor.chunk(value.chunk);\n        if (value.internalServerException !== undefined)\n            return visitor.internalServerException(value.internalServerException);\n        if (value.modelStreamErrorException !== undefined)\n            return visitor.modelStreamErrorException(value.modelStreamErrorException);\n        if (value.validationException !== undefined)\n            return visitor.validationException(value.validationException);\n        if (value.throttlingException !== undefined)\n            return visitor.throttlingException(value.throttlingException);\n        if (value.modelTimeoutException !== undefined)\n            return visitor.modelTimeoutException(value.modelTimeoutException);\n        if (value.serviceUnavailableException !== undefined)\n            return visitor.serviceUnavailableException(value.serviceUnavailableException);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(ResponseStream || (ResponseStream = {}));\nexport var CountTokensInput;\n(function (CountTokensInput) {\n    CountTokensInput.visit = (value, visitor) => {\n        if (value.invokeModel !== undefined)\n            return visitor.invokeModel(value.invokeModel);\n        if (value.converse !== undefined)\n            return visitor.converse(value.converse);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(CountTokensInput || (CountTokensInput = {}));\nexport const GetAsyncInvokeResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.failureMessage && { failureMessage: SENSITIVE_STRING }),\n    ...(obj.outputDataConfig && { outputDataConfig: obj.outputDataConfig }),\n});\nexport const AsyncInvokeSummaryFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.failureMessage && { failureMessage: SENSITIVE_STRING }),\n    ...(obj.outputDataConfig && { outputDataConfig: obj.outputDataConfig }),\n});\nexport const ListAsyncInvokesResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.asyncInvokeSummaries && {\n        asyncInvokeSummaries: obj.asyncInvokeSummaries.map((item) => AsyncInvokeSummaryFilterSensitiveLog(item)),\n    }),\n});\nexport const StartAsyncInvokeRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.modelInput && { modelInput: SENSITIVE_STRING }),\n    ...(obj.outputDataConfig && { outputDataConfig: obj.outputDataConfig }),\n});\nexport const GuardrailImageSourceFilterSensitiveLog = (obj) => {\n    if (obj.bytes !== undefined)\n        return { bytes: obj.bytes };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const GuardrailImageBlockFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.source && { source: SENSITIVE_STRING }),\n});\nexport const GuardrailContentBlockFilterSensitiveLog = (obj) => {\n    if (obj.text !== undefined)\n        return { text: obj.text };\n    if (obj.image !== undefined)\n        return { image: SENSITIVE_STRING };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const ApplyGuardrailRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.content && { content: obj.content.map((item) => GuardrailContentBlockFilterSensitiveLog(item)) }),\n});\nexport const GuardrailAutomatedReasoningStatementFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.logic && { logic: SENSITIVE_STRING }),\n    ...(obj.naturalLanguage && { naturalLanguage: SENSITIVE_STRING }),\n});\nexport const GuardrailAutomatedReasoningLogicWarningFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.premises && {\n        premises: obj.premises.map((item) => GuardrailAutomatedReasoningStatementFilterSensitiveLog(item)),\n    }),\n    ...(obj.claims && { claims: obj.claims.map((item) => GuardrailAutomatedReasoningStatementFilterSensitiveLog(item)) }),\n});\nexport const GuardrailAutomatedReasoningInputTextReferenceFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.text && { text: SENSITIVE_STRING }),\n});\nexport const GuardrailAutomatedReasoningTranslationFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.premises && {\n        premises: obj.premises.map((item) => GuardrailAutomatedReasoningStatementFilterSensitiveLog(item)),\n    }),\n    ...(obj.claims && { claims: obj.claims.map((item) => GuardrailAutomatedReasoningStatementFilterSensitiveLog(item)) }),\n    ...(obj.untranslatedPremises && {\n        untranslatedPremises: obj.untranslatedPremises.map((item) => GuardrailAutomatedReasoningInputTextReferenceFilterSensitiveLog(item)),\n    }),\n    ...(obj.untranslatedClaims && {\n        untranslatedClaims: obj.untranslatedClaims.map((item) => GuardrailAutomatedReasoningInputTextReferenceFilterSensitiveLog(item)),\n    }),\n});\nexport const GuardrailAutomatedReasoningImpossibleFindingFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.translation && { translation: GuardrailAutomatedReasoningTranslationFilterSensitiveLog(obj.translation) }),\n    ...(obj.logicWarning && {\n        logicWarning: GuardrailAutomatedReasoningLogicWarningFilterSensitiveLog(obj.logicWarning),\n    }),\n});\nexport const GuardrailAutomatedReasoningInvalidFindingFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.translation && { translation: GuardrailAutomatedReasoningTranslationFilterSensitiveLog(obj.translation) }),\n    ...(obj.logicWarning && {\n        logicWarning: GuardrailAutomatedReasoningLogicWarningFilterSensitiveLog(obj.logicWarning),\n    }),\n});\nexport const GuardrailAutomatedReasoningScenarioFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.statements && {\n        statements: obj.statements.map((item) => GuardrailAutomatedReasoningStatementFilterSensitiveLog(item)),\n    }),\n});\nexport const GuardrailAutomatedReasoningSatisfiableFindingFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.translation && { translation: GuardrailAutomatedReasoningTranslationFilterSensitiveLog(obj.translation) }),\n    ...(obj.claimsTrueScenario && {\n        claimsTrueScenario: GuardrailAutomatedReasoningScenarioFilterSensitiveLog(obj.claimsTrueScenario),\n    }),\n    ...(obj.claimsFalseScenario && {\n        claimsFalseScenario: GuardrailAutomatedReasoningScenarioFilterSensitiveLog(obj.claimsFalseScenario),\n    }),\n    ...(obj.logicWarning && {\n        logicWarning: GuardrailAutomatedReasoningLogicWarningFilterSensitiveLog(obj.logicWarning),\n    }),\n});\nexport const GuardrailAutomatedReasoningTranslationOptionFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nexport const GuardrailAutomatedReasoningTranslationAmbiguousFindingFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nexport const GuardrailAutomatedReasoningValidFindingFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.translation && { translation: GuardrailAutomatedReasoningTranslationFilterSensitiveLog(obj.translation) }),\n    ...(obj.claimsTrueScenario && {\n        claimsTrueScenario: GuardrailAutomatedReasoningScenarioFilterSensitiveLog(obj.claimsTrueScenario),\n    }),\n    ...(obj.logicWarning && {\n        logicWarning: GuardrailAutomatedReasoningLogicWarningFilterSensitiveLog(obj.logicWarning),\n    }),\n});\nexport const GuardrailAutomatedReasoningFindingFilterSensitiveLog = (obj) => {\n    if (obj.valid !== undefined)\n        return { valid: GuardrailAutomatedReasoningValidFindingFilterSensitiveLog(obj.valid) };\n    if (obj.invalid !== undefined)\n        return { invalid: GuardrailAutomatedReasoningInvalidFindingFilterSensitiveLog(obj.invalid) };\n    if (obj.satisfiable !== undefined)\n        return { satisfiable: GuardrailAutomatedReasoningSatisfiableFindingFilterSensitiveLog(obj.satisfiable) };\n    if (obj.impossible !== undefined)\n        return { impossible: GuardrailAutomatedReasoningImpossibleFindingFilterSensitiveLog(obj.impossible) };\n    if (obj.translationAmbiguous !== undefined)\n        return {\n            translationAmbiguous: GuardrailAutomatedReasoningTranslationAmbiguousFindingFilterSensitiveLog(obj.translationAmbiguous),\n        };\n    if (obj.tooComplex !== undefined)\n        return { tooComplex: obj.tooComplex };\n    if (obj.noTranslations !== undefined)\n        return { noTranslations: obj.noTranslations };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const GuardrailAutomatedReasoningPolicyAssessmentFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.findings && {\n        findings: obj.findings.map((item) => GuardrailAutomatedReasoningFindingFilterSensitiveLog(item)),\n    }),\n});\nexport const GuardrailAssessmentFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.automatedReasoningPolicy && {\n        automatedReasoningPolicy: GuardrailAutomatedReasoningPolicyAssessmentFilterSensitiveLog(obj.automatedReasoningPolicy),\n    }),\n});\nexport const ApplyGuardrailResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.assessments && { assessments: obj.assessments.map((item) => GuardrailAssessmentFilterSensitiveLog(item)) }),\n});\nexport const GuardrailConverseImageSourceFilterSensitiveLog = (obj) => {\n    if (obj.bytes !== undefined)\n        return { bytes: obj.bytes };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const GuardrailConverseImageBlockFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.source && { source: SENSITIVE_STRING }),\n});\nexport const GuardrailConverseContentBlockFilterSensitiveLog = (obj) => {\n    if (obj.text !== undefined)\n        return { text: obj.text };\n    if (obj.image !== undefined)\n        return { image: SENSITIVE_STRING };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const ReasoningTextBlockFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nexport const ReasoningContentBlockFilterSensitiveLog = (obj) => {\n    if (obj.reasoningText !== undefined)\n        return { reasoningText: SENSITIVE_STRING };\n    if (obj.redactedContent !== undefined)\n        return { redactedContent: obj.redactedContent };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const ContentBlockFilterSensitiveLog = (obj) => {\n    if (obj.text !== undefined)\n        return { text: obj.text };\n    if (obj.image !== undefined)\n        return { image: obj.image };\n    if (obj.document !== undefined)\n        return { document: obj.document };\n    if (obj.video !== undefined)\n        return { video: obj.video };\n    if (obj.toolUse !== undefined)\n        return { toolUse: obj.toolUse };\n    if (obj.toolResult !== undefined)\n        return { toolResult: obj.toolResult };\n    if (obj.guardContent !== undefined)\n        return { guardContent: GuardrailConverseContentBlockFilterSensitiveLog(obj.guardContent) };\n    if (obj.cachePoint !== undefined)\n        return { cachePoint: obj.cachePoint };\n    if (obj.reasoningContent !== undefined)\n        return { reasoningContent: SENSITIVE_STRING };\n    if (obj.citationsContent !== undefined)\n        return { citationsContent: obj.citationsContent };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const MessageFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.content && { content: obj.content.map((item) => ContentBlockFilterSensitiveLog(item)) }),\n});\nexport const SystemContentBlockFilterSensitiveLog = (obj) => {\n    if (obj.text !== undefined)\n        return { text: obj.text };\n    if (obj.guardContent !== undefined)\n        return { guardContent: GuardrailConverseContentBlockFilterSensitiveLog(obj.guardContent) };\n    if (obj.cachePoint !== undefined)\n        return { cachePoint: obj.cachePoint };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const ConverseRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) }),\n    ...(obj.system && { system: obj.system.map((item) => SystemContentBlockFilterSensitiveLog(item)) }),\n    ...(obj.toolConfig && { toolConfig: obj.toolConfig }),\n    ...(obj.promptVariables && { promptVariables: SENSITIVE_STRING }),\n    ...(obj.requestMetadata && { requestMetadata: SENSITIVE_STRING }),\n});\nexport const ConverseOutputFilterSensitiveLog = (obj) => {\n    if (obj.message !== undefined)\n        return { message: MessageFilterSensitiveLog(obj.message) };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const GuardrailTraceAssessmentFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.inputAssessment && {\n        inputAssessment: Object.entries(obj.inputAssessment).reduce((acc, [key, value]) => ((acc[key] = GuardrailAssessmentFilterSensitiveLog(value)), acc), {}),\n    }),\n    ...(obj.outputAssessments && {\n        outputAssessments: Object.entries(obj.outputAssessments).reduce((acc, [key, value]) => ((acc[key] = value.map((item) => GuardrailAssessmentFilterSensitiveLog(item))), acc), {}),\n    }),\n});\nexport const ConverseTraceFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.guardrail && { guardrail: GuardrailTraceAssessmentFilterSensitiveLog(obj.guardrail) }),\n});\nexport const ConverseResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.output && { output: ConverseOutputFilterSensitiveLog(obj.output) }),\n    ...(obj.trace && { trace: ConverseTraceFilterSensitiveLog(obj.trace) }),\n});\nexport const ConverseStreamRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) }),\n    ...(obj.system && { system: obj.system.map((item) => SystemContentBlockFilterSensitiveLog(item)) }),\n    ...(obj.toolConfig && { toolConfig: obj.toolConfig }),\n    ...(obj.promptVariables && { promptVariables: SENSITIVE_STRING }),\n    ...(obj.requestMetadata && { requestMetadata: SENSITIVE_STRING }),\n});\nexport const ReasoningContentBlockDeltaFilterSensitiveLog = (obj) => {\n    if (obj.text !== undefined)\n        return { text: obj.text };\n    if (obj.redactedContent !== undefined)\n        return { redactedContent: obj.redactedContent };\n    if (obj.signature !== undefined)\n        return { signature: obj.signature };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const ContentBlockDeltaFilterSensitiveLog = (obj) => {\n    if (obj.text !== undefined)\n        return { text: obj.text };\n    if (obj.toolUse !== undefined)\n        return { toolUse: obj.toolUse };\n    if (obj.reasoningContent !== undefined)\n        return { reasoningContent: SENSITIVE_STRING };\n    if (obj.citation !== undefined)\n        return { citation: obj.citation };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const ContentBlockDeltaEventFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.delta && { delta: ContentBlockDeltaFilterSensitiveLog(obj.delta) }),\n});\nexport const ConverseStreamTraceFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.guardrail && { guardrail: GuardrailTraceAssessmentFilterSensitiveLog(obj.guardrail) }),\n});\nexport const ConverseStreamMetadataEventFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.trace && { trace: ConverseStreamTraceFilterSensitiveLog(obj.trace) }),\n});\nexport const ConverseStreamOutputFilterSensitiveLog = (obj) => {\n    if (obj.messageStart !== undefined)\n        return { messageStart: obj.messageStart };\n    if (obj.contentBlockStart !== undefined)\n        return { contentBlockStart: obj.contentBlockStart };\n    if (obj.contentBlockDelta !== undefined)\n        return { contentBlockDelta: ContentBlockDeltaEventFilterSensitiveLog(obj.contentBlockDelta) };\n    if (obj.contentBlockStop !== undefined)\n        return { contentBlockStop: obj.contentBlockStop };\n    if (obj.messageStop !== undefined)\n        return { messageStop: obj.messageStop };\n    if (obj.metadata !== undefined)\n        return { metadata: ConverseStreamMetadataEventFilterSensitiveLog(obj.metadata) };\n    if (obj.internalServerException !== undefined)\n        return { internalServerException: obj.internalServerException };\n    if (obj.modelStreamErrorException !== undefined)\n        return { modelStreamErrorException: obj.modelStreamErrorException };\n    if (obj.validationException !== undefined)\n        return { validationException: obj.validationException };\n    if (obj.throttlingException !== undefined)\n        return { throttlingException: obj.throttlingException };\n    if (obj.serviceUnavailableException !== undefined)\n        return { serviceUnavailableException: obj.serviceUnavailableException };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const ConverseStreamResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.stream && { stream: \"STREAMING_CONTENT\" }),\n});\nexport const InvokeModelRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.body && { body: SENSITIVE_STRING }),\n});\nexport const InvokeModelResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.body && { body: SENSITIVE_STRING }),\n});\nexport const BidirectionalInputPayloadPartFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.bytes && { bytes: SENSITIVE_STRING }),\n});\nexport const InvokeModelWithBidirectionalStreamInputFilterSensitiveLog = (obj) => {\n    if (obj.chunk !== undefined)\n        return { chunk: SENSITIVE_STRING };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const InvokeModelWithBidirectionalStreamRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.body && { body: \"STREAMING_CONTENT\" }),\n});\nexport const BidirectionalOutputPayloadPartFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.bytes && { bytes: SENSITIVE_STRING }),\n});\nexport const InvokeModelWithBidirectionalStreamOutputFilterSensitiveLog = (obj) => {\n    if (obj.chunk !== undefined)\n        return { chunk: SENSITIVE_STRING };\n    if (obj.internalServerException !== undefined)\n        return { internalServerException: obj.internalServerException };\n    if (obj.modelStreamErrorException !== undefined)\n        return { modelStreamErrorException: obj.modelStreamErrorException };\n    if (obj.validationException !== undefined)\n        return { validationException: obj.validationException };\n    if (obj.throttlingException !== undefined)\n        return { throttlingException: obj.throttlingException };\n    if (obj.modelTimeoutException !== undefined)\n        return { modelTimeoutException: obj.modelTimeoutException };\n    if (obj.serviceUnavailableException !== undefined)\n        return { serviceUnavailableException: obj.serviceUnavailableException };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const InvokeModelWithBidirectionalStreamResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.body && { body: \"STREAMING_CONTENT\" }),\n});\nexport const InvokeModelWithResponseStreamRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.body && { body: SENSITIVE_STRING }),\n});\nexport const PayloadPartFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.bytes && { bytes: SENSITIVE_STRING }),\n});\nexport const ResponseStreamFilterSensitiveLog = (obj) => {\n    if (obj.chunk !== undefined)\n        return { chunk: SENSITIVE_STRING };\n    if (obj.internalServerException !== undefined)\n        return { internalServerException: obj.internalServerException };\n    if (obj.modelStreamErrorException !== undefined)\n        return { modelStreamErrorException: obj.modelStreamErrorException };\n    if (obj.validationException !== undefined)\n        return { validationException: obj.validationException };\n    if (obj.throttlingException !== undefined)\n        return { throttlingException: obj.throttlingException };\n    if (obj.modelTimeoutException !== undefined)\n        return { modelTimeoutException: obj.modelTimeoutException };\n    if (obj.serviceUnavailableException !== undefined)\n        return { serviceUnavailableException: obj.serviceUnavailableException };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const InvokeModelWithResponseStreamResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.body && { body: \"STREAMING_CONTENT\" }),\n});\nexport const ConverseTokensRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) }),\n    ...(obj.system && { system: obj.system.map((item) => SystemContentBlockFilterSensitiveLog(item)) }),\n});\nexport const InvokeModelTokensRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.body && { body: SENSITIVE_STRING }),\n});\nexport const CountTokensInputFilterSensitiveLog = (obj) => {\n    if (obj.invokeModel !== undefined)\n        return { invokeModel: InvokeModelTokensRequestFilterSensitiveLog(obj.invokeModel) };\n    if (obj.converse !== undefined)\n        return { converse: ConverseTokensRequestFilterSensitiveLog(obj.converse) };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nexport const CountTokensRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.input && { input: CountTokensInputFilterSensitiveLog(obj.input) }),\n});\n","import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from \"@aws-sdk/core\";\nimport { requestBuilder as rb } from \"@smithy/core\";\nimport { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, isSerializableHeaderValue, limitedParseDouble as __limitedParseDouble, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeDateTime as __serializeDateTime, serializeFloat as __serializeFloat, take, withBaseException, } from \"@smithy/smithy-client\";\nimport { v4 as generateIdempotencyToken } from \"@smithy/uuid\";\nimport { BedrockRuntimeServiceException as __BaseException } from \"../models/BedrockRuntimeServiceException\";\nimport { AccessDeniedException, ConflictException, ContentBlock, CountTokensInput, DocumentSource, GuardrailContentBlock, GuardrailConverseContentBlock, GuardrailConverseImageSource, GuardrailImageSource, ImageSource, InternalServerException, InvokeModelWithBidirectionalStreamInput, ModelErrorException, ModelNotReadyException, ModelStreamErrorException, ModelTimeoutException, ReasoningContentBlock, ResourceNotFoundException, ServiceQuotaExceededException, ServiceUnavailableException, SystemContentBlock, ThrottlingException, Tool, ToolInputSchema, ToolResultContentBlock, ValidationException, VideoSource, } from \"../models/models_0\";\nexport const se_ApplyGuardrailCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = {\n        \"content-type\": \"application/json\",\n    };\n    b.bp(\"/guardrail/{guardrailIdentifier}/version/{guardrailVersion}/apply\");\n    b.p(\"guardrailIdentifier\", () => input.guardrailIdentifier, \"{guardrailIdentifier}\", false);\n    b.p(\"guardrailVersion\", () => input.guardrailVersion, \"{guardrailVersion}\", false);\n    let body;\n    body = JSON.stringify(take(input, {\n        content: (_) => se_GuardrailContentBlockList(_, context),\n        outputScope: [],\n        source: [],\n    }));\n    b.m(\"POST\").h(headers).b(body);\n    return b.build();\n};\nexport const se_ConverseCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = {\n        \"content-type\": \"application/json\",\n    };\n    b.bp(\"/model/{modelId}/converse\");\n    b.p(\"modelId\", () => input.modelId, \"{modelId}\", false);\n    let body;\n    body = JSON.stringify(take(input, {\n        additionalModelRequestFields: (_) => se_Document(_, context),\n        additionalModelResponseFieldPaths: (_) => _json(_),\n        guardrailConfig: (_) => _json(_),\n        inferenceConfig: (_) => se_InferenceConfiguration(_, context),\n        messages: (_) => se_Messages(_, context),\n        performanceConfig: (_) => _json(_),\n        promptVariables: (_) => _json(_),\n        requestMetadata: (_) => _json(_),\n        system: (_) => se_SystemContentBlocks(_, context),\n        toolConfig: (_) => se_ToolConfiguration(_, context),\n    }));\n    b.m(\"POST\").h(headers).b(body);\n    return b.build();\n};\nexport const se_ConverseStreamCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = {\n        \"content-type\": \"application/json\",\n    };\n    b.bp(\"/model/{modelId}/converse-stream\");\n    b.p(\"modelId\", () => input.modelId, \"{modelId}\", false);\n    let body;\n    body = JSON.stringify(take(input, {\n        additionalModelRequestFields: (_) => se_Document(_, context),\n        additionalModelResponseFieldPaths: (_) => _json(_),\n        guardrailConfig: (_) => _json(_),\n        inferenceConfig: (_) => se_InferenceConfiguration(_, context),\n        messages: (_) => se_Messages(_, context),\n        performanceConfig: (_) => _json(_),\n        promptVariables: (_) => _json(_),\n        requestMetadata: (_) => _json(_),\n        system: (_) => se_SystemContentBlocks(_, context),\n        toolConfig: (_) => se_ToolConfiguration(_, context),\n    }));\n    b.m(\"POST\").h(headers).b(body);\n    return b.build();\n};\nexport const se_CountTokensCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = {\n        \"content-type\": \"application/json\",\n    };\n    b.bp(\"/model/{modelId}/count-tokens\");\n    b.p(\"modelId\", () => input.modelId, \"{modelId}\", false);\n    let body;\n    body = JSON.stringify(take(input, {\n        input: (_) => se_CountTokensInput(_, context),\n    }));\n    b.m(\"POST\").h(headers).b(body);\n    return b.build();\n};\nexport const se_GetAsyncInvokeCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = {};\n    b.bp(\"/async-invoke/{invocationArn}\");\n    b.p(\"invocationArn\", () => input.invocationArn, \"{invocationArn}\", false);\n    let body;\n    b.m(\"GET\").h(headers).b(body);\n    return b.build();\n};\nexport const se_InvokeModelCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = map({}, isSerializableHeaderValue, {\n        [_ct]: input[_cT] || \"application/octet-stream\",\n        [_a]: input[_a],\n        [_xabt]: input[_t],\n        [_xabg]: input[_gI],\n        [_xabg_]: input[_gV],\n        [_xabpl]: input[_pCL],\n    });\n    b.bp(\"/model/{modelId}/invoke\");\n    b.p(\"modelId\", () => input.modelId, \"{modelId}\", false);\n    let body;\n    if (input.body !== undefined) {\n        body = input.body;\n    }\n    b.m(\"POST\").h(headers).b(body);\n    return b.build();\n};\nexport const se_InvokeModelWithBidirectionalStreamCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = {\n        \"content-type\": \"application/json\",\n    };\n    b.bp(\"/model/{modelId}/invoke-with-bidirectional-stream\");\n    b.p(\"modelId\", () => input.modelId, \"{modelId}\", false);\n    let body;\n    if (input.body !== undefined) {\n        body = se_InvokeModelWithBidirectionalStreamInput(input.body, context);\n    }\n    b.m(\"POST\").h(headers).b(body);\n    return b.build();\n};\nexport const se_InvokeModelWithResponseStreamCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = map({}, isSerializableHeaderValue, {\n        [_ct]: input[_cT] || \"application/octet-stream\",\n        [_xaba]: input[_a],\n        [_xabt]: input[_t],\n        [_xabg]: input[_gI],\n        [_xabg_]: input[_gV],\n        [_xabpl]: input[_pCL],\n    });\n    b.bp(\"/model/{modelId}/invoke-with-response-stream\");\n    b.p(\"modelId\", () => input.modelId, \"{modelId}\", false);\n    let body;\n    if (input.body !== undefined) {\n        body = input.body;\n    }\n    b.m(\"POST\").h(headers).b(body);\n    return b.build();\n};\nexport const se_ListAsyncInvokesCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = {};\n    b.bp(\"/async-invoke\");\n    const query = map({\n        [_sTA]: [() => input.submitTimeAfter !== void 0, () => __serializeDateTime(input[_sTA]).toString()],\n        [_sTB]: [() => input.submitTimeBefore !== void 0, () => __serializeDateTime(input[_sTB]).toString()],\n        [_sE]: [, input[_sE]],\n        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],\n        [_nT]: [, input[_nT]],\n        [_sB]: [, input[_sB]],\n        [_sO]: [, input[_sO]],\n    });\n    let body;\n    b.m(\"GET\").h(headers).q(query).b(body);\n    return b.build();\n};\nexport const se_StartAsyncInvokeCommand = async (input, context) => {\n    const b = rb(input, context);\n    const headers = {\n        \"content-type\": \"application/json\",\n    };\n    b.bp(\"/async-invoke\");\n    let body;\n    body = JSON.stringify(take(input, {\n        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],\n        modelId: [],\n        modelInput: (_) => se_ModelInputPayload(_, context),\n        outputDataConfig: (_) => _json(_),\n        tags: (_) => _json(_),\n    }));\n    b.m(\"POST\").h(headers).b(body);\n    return b.build();\n};\nexport const de_ApplyGuardrailCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        action: __expectString,\n        actionReason: __expectString,\n        assessments: (_) => de_GuardrailAssessmentList(_, context),\n        guardrailCoverage: _json,\n        outputs: _json,\n        usage: _json,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nexport const de_ConverseCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        additionalModelResponseFields: (_) => de_Document(_, context),\n        metrics: _json,\n        output: (_) => de_ConverseOutput(__expectUnion(_), context),\n        performanceConfig: _json,\n        stopReason: __expectString,\n        trace: (_) => de_ConverseTrace(_, context),\n        usage: _json,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nexport const de_ConverseStreamCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = output.body;\n    contents.stream = de_ConverseStreamOutput(data, context);\n    return contents;\n};\nexport const de_CountTokensCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        inputTokens: __expectInt32,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nexport const de_GetAsyncInvokeCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        clientRequestToken: __expectString,\n        endTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),\n        failureMessage: __expectString,\n        invocationArn: __expectString,\n        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),\n        modelArn: __expectString,\n        outputDataConfig: (_) => _json(__expectUnion(_)),\n        status: __expectString,\n        submitTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nexport const de_InvokeModelCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        [_cT]: [, output.headers[_ct]],\n        [_pCL]: [, output.headers[_xabpl]],\n    });\n    const data = await collectBody(output.body, context);\n    contents.body = data;\n    return contents;\n};\nexport const de_InvokeModelWithBidirectionalStreamCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = output.body;\n    contents.body = de_InvokeModelWithBidirectionalStreamOutput(data, context);\n    return contents;\n};\nexport const de_InvokeModelWithResponseStreamCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        [_cT]: [, output.headers[_xabct]],\n        [_pCL]: [, output.headers[_xabpl]],\n    });\n    const data = output.body;\n    contents.body = de_ResponseStream(data, context);\n    return contents;\n};\nexport const de_ListAsyncInvokesCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        asyncInvokeSummaries: (_) => de_AsyncInvokeSummaries(_, context),\n        nextToken: __expectString,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nexport const de_StartAsyncInvokeCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        invocationArn: __expectString,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nconst de_CommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDeniedException\":\n        case \"com.amazonaws.bedrockruntime#AccessDeniedException\":\n            throw await de_AccessDeniedExceptionRes(parsedOutput, context);\n        case \"InternalServerException\":\n        case \"com.amazonaws.bedrockruntime#InternalServerException\":\n            throw await de_InternalServerExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.bedrockruntime#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceQuotaExceededException\":\n        case \"com.amazonaws.bedrockruntime#ServiceQuotaExceededException\":\n            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.bedrockruntime#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        case \"ThrottlingException\":\n        case \"com.amazonaws.bedrockruntime#ThrottlingException\":\n            throw await de_ThrottlingExceptionRes(parsedOutput, context);\n        case \"ValidationException\":\n        case \"com.amazonaws.bedrockruntime#ValidationException\":\n            throw await de_ValidationExceptionRes(parsedOutput, context);\n        case \"ModelErrorException\":\n        case \"com.amazonaws.bedrockruntime#ModelErrorException\":\n            throw await de_ModelErrorExceptionRes(parsedOutput, context);\n        case \"ModelNotReadyException\":\n        case \"com.amazonaws.bedrockruntime#ModelNotReadyException\":\n            throw await de_ModelNotReadyExceptionRes(parsedOutput, context);\n        case \"ModelTimeoutException\":\n        case \"com.amazonaws.bedrockruntime#ModelTimeoutException\":\n            throw await de_ModelTimeoutExceptionRes(parsedOutput, context);\n        case \"ModelStreamErrorException\":\n        case \"com.amazonaws.bedrockruntime#ModelStreamErrorException\":\n            throw await de_ModelStreamErrorExceptionRes(parsedOutput, context);\n        case \"ConflictException\":\n        case \"com.amazonaws.bedrockruntime#ConflictException\":\n            throw await de_ConflictExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nconst throwDefaultError = withBaseException(__BaseException);\nconst de_AccessDeniedExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new AccessDeniedException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ConflictExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ConflictException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InternalServerExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InternalServerException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ModelErrorExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n        originalStatusCode: __expectInt32,\n        resourceName: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ModelErrorException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ModelNotReadyExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ModelNotReadyException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ModelStreamErrorExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n        originalMessage: __expectString,\n        originalStatusCode: __expectInt32,\n    });\n    Object.assign(contents, doc);\n    const exception = new ModelStreamErrorException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ModelTimeoutExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ModelTimeoutException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ResourceNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ServiceQuotaExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ServiceUnavailableException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ThrottlingExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ThrottlingException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ValidationExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ValidationException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst se_InvokeModelWithBidirectionalStreamInput = (input, context) => {\n    const eventMarshallingVisitor = (event) => InvokeModelWithBidirectionalStreamInput.visit(event, {\n        chunk: (value) => se_BidirectionalInputPayloadPart_event(value, context),\n        _: (value) => value,\n    });\n    return context.eventStreamMarshaller.serialize(input, eventMarshallingVisitor);\n};\nconst se_BidirectionalInputPayloadPart_event = (input, context) => {\n    const headers = {\n        \":event-type\": { type: \"string\", value: \"chunk\" },\n        \":message-type\": { type: \"string\", value: \"event\" },\n        \":content-type\": { type: \"string\", value: \"application/json\" },\n    };\n    let body = new Uint8Array();\n    body = se_BidirectionalInputPayloadPart(input, context);\n    body = context.utf8Decoder(JSON.stringify(body));\n    return { headers, body };\n};\nconst de_ConverseStreamOutput = (output, context) => {\n    return context.eventStreamMarshaller.deserialize(output, async (event) => {\n        if (event[\"messageStart\"] != null) {\n            return {\n                messageStart: await de_MessageStartEvent_event(event[\"messageStart\"], context),\n            };\n        }\n        if (event[\"contentBlockStart\"] != null) {\n            return {\n                contentBlockStart: await de_ContentBlockStartEvent_event(event[\"contentBlockStart\"], context),\n            };\n        }\n        if (event[\"contentBlockDelta\"] != null) {\n            return {\n                contentBlockDelta: await de_ContentBlockDeltaEvent_event(event[\"contentBlockDelta\"], context),\n            };\n        }\n        if (event[\"contentBlockStop\"] != null) {\n            return {\n                contentBlockStop: await de_ContentBlockStopEvent_event(event[\"contentBlockStop\"], context),\n            };\n        }\n        if (event[\"messageStop\"] != null) {\n            return {\n                messageStop: await de_MessageStopEvent_event(event[\"messageStop\"], context),\n            };\n        }\n        if (event[\"metadata\"] != null) {\n            return {\n                metadata: await de_ConverseStreamMetadataEvent_event(event[\"metadata\"], context),\n            };\n        }\n        if (event[\"internalServerException\"] != null) {\n            return {\n                internalServerException: await de_InternalServerException_event(event[\"internalServerException\"], context),\n            };\n        }\n        if (event[\"modelStreamErrorException\"] != null) {\n            return {\n                modelStreamErrorException: await de_ModelStreamErrorException_event(event[\"modelStreamErrorException\"], context),\n            };\n        }\n        if (event[\"validationException\"] != null) {\n            return {\n                validationException: await de_ValidationException_event(event[\"validationException\"], context),\n            };\n        }\n        if (event[\"throttlingException\"] != null) {\n            return {\n                throttlingException: await de_ThrottlingException_event(event[\"throttlingException\"], context),\n            };\n        }\n        if (event[\"serviceUnavailableException\"] != null) {\n            return {\n                serviceUnavailableException: await de_ServiceUnavailableException_event(event[\"serviceUnavailableException\"], context),\n            };\n        }\n        return { $unknown: event };\n    });\n};\nconst de_InvokeModelWithBidirectionalStreamOutput = (output, context) => {\n    return context.eventStreamMarshaller.deserialize(output, async (event) => {\n        if (event[\"chunk\"] != null) {\n            return {\n                chunk: await de_BidirectionalOutputPayloadPart_event(event[\"chunk\"], context),\n            };\n        }\n        if (event[\"internalServerException\"] != null) {\n            return {\n                internalServerException: await de_InternalServerException_event(event[\"internalServerException\"], context),\n            };\n        }\n        if (event[\"modelStreamErrorException\"] != null) {\n            return {\n                modelStreamErrorException: await de_ModelStreamErrorException_event(event[\"modelStreamErrorException\"], context),\n            };\n        }\n        if (event[\"validationException\"] != null) {\n            return {\n                validationException: await de_ValidationException_event(event[\"validationException\"], context),\n            };\n        }\n        if (event[\"throttlingException\"] != null) {\n            return {\n                throttlingException: await de_ThrottlingException_event(event[\"throttlingException\"], context),\n            };\n        }\n        if (event[\"modelTimeoutException\"] != null) {\n            return {\n                modelTimeoutException: await de_ModelTimeoutException_event(event[\"modelTimeoutException\"], context),\n            };\n        }\n        if (event[\"serviceUnavailableException\"] != null) {\n            return {\n                serviceUnavailableException: await de_ServiceUnavailableException_event(event[\"serviceUnavailableException\"], context),\n            };\n        }\n        return { $unknown: event };\n    });\n};\nconst de_ResponseStream = (output, context) => {\n    return context.eventStreamMarshaller.deserialize(output, async (event) => {\n        if (event[\"chunk\"] != null) {\n            return {\n                chunk: await de_PayloadPart_event(event[\"chunk\"], context),\n            };\n        }\n        if (event[\"internalServerException\"] != null) {\n            return {\n                internalServerException: await de_InternalServerException_event(event[\"internalServerException\"], context),\n            };\n        }\n        if (event[\"modelStreamErrorException\"] != null) {\n            return {\n                modelStreamErrorException: await de_ModelStreamErrorException_event(event[\"modelStreamErrorException\"], context),\n            };\n        }\n        if (event[\"validationException\"] != null) {\n            return {\n                validationException: await de_ValidationException_event(event[\"validationException\"], context),\n            };\n        }\n        if (event[\"throttlingException\"] != null) {\n            return {\n                throttlingException: await de_ThrottlingException_event(event[\"throttlingException\"], context),\n            };\n        }\n        if (event[\"modelTimeoutException\"] != null) {\n            return {\n                modelTimeoutException: await de_ModelTimeoutException_event(event[\"modelTimeoutException\"], context),\n            };\n        }\n        if (event[\"serviceUnavailableException\"] != null) {\n            return {\n                serviceUnavailableException: await de_ServiceUnavailableException_event(event[\"serviceUnavailableException\"], context),\n            };\n        }\n        return { $unknown: event };\n    });\n};\nconst de_BidirectionalOutputPayloadPart_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, de_BidirectionalOutputPayloadPart(data, context));\n    return contents;\n};\nconst de_ContentBlockDeltaEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, de_ContentBlockDeltaEvent(data, context));\n    return contents;\n};\nconst de_ContentBlockStartEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, _json(data));\n    return contents;\n};\nconst de_ContentBlockStopEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, _json(data));\n    return contents;\n};\nconst de_ConverseStreamMetadataEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, de_ConverseStreamMetadataEvent(data, context));\n    return contents;\n};\nconst de_InternalServerException_event = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    return de_InternalServerExceptionRes(parsedOutput, context);\n};\nconst de_MessageStartEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, _json(data));\n    return contents;\n};\nconst de_MessageStopEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, de_MessageStopEvent(data, context));\n    return contents;\n};\nconst de_ModelStreamErrorException_event = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    return de_ModelStreamErrorExceptionRes(parsedOutput, context);\n};\nconst de_ModelTimeoutException_event = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    return de_ModelTimeoutExceptionRes(parsedOutput, context);\n};\nconst de_PayloadPart_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, de_PayloadPart(data, context));\n    return contents;\n};\nconst de_ServiceUnavailableException_event = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    return de_ServiceUnavailableExceptionRes(parsedOutput, context);\n};\nconst de_ThrottlingException_event = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    return de_ThrottlingExceptionRes(parsedOutput, context);\n};\nconst de_ValidationException_event = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    return de_ValidationExceptionRes(parsedOutput, context);\n};\nconst se_BidirectionalInputPayloadPart = (input, context) => {\n    return take(input, {\n        bytes: context.base64Encoder,\n    });\n};\nconst se_ContentBlock = (input, context) => {\n    return ContentBlock.visit(input, {\n        cachePoint: (value) => ({ cachePoint: _json(value) }),\n        citationsContent: (value) => ({ citationsContent: _json(value) }),\n        document: (value) => ({ document: se_DocumentBlock(value, context) }),\n        guardContent: (value) => ({ guardContent: se_GuardrailConverseContentBlock(value, context) }),\n        image: (value) => ({ image: se_ImageBlock(value, context) }),\n        reasoningContent: (value) => ({ reasoningContent: se_ReasoningContentBlock(value, context) }),\n        text: (value) => ({ text: value }),\n        toolResult: (value) => ({ toolResult: se_ToolResultBlock(value, context) }),\n        toolUse: (value) => ({ toolUse: se_ToolUseBlock(value, context) }),\n        video: (value) => ({ video: se_VideoBlock(value, context) }),\n        _: (name, value) => ({ [name]: value }),\n    });\n};\nconst se_ContentBlocks = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        return se_ContentBlock(entry, context);\n    });\n};\nconst se_ConverseTokensRequest = (input, context) => {\n    return take(input, {\n        messages: (_) => se_Messages(_, context),\n        system: (_) => se_SystemContentBlocks(_, context),\n    });\n};\nconst se_CountTokensInput = (input, context) => {\n    return CountTokensInput.visit(input, {\n        converse: (value) => ({ converse: se_ConverseTokensRequest(value, context) }),\n        invokeModel: (value) => ({ invokeModel: se_InvokeModelTokensRequest(value, context) }),\n        _: (name, value) => ({ [name]: value }),\n    });\n};\nconst se_DocumentBlock = (input, context) => {\n    return take(input, {\n        citations: _json,\n        context: [],\n        format: [],\n        name: [],\n        source: (_) => se_DocumentSource(_, context),\n    });\n};\nconst se_DocumentSource = (input, context) => {\n    return DocumentSource.visit(input, {\n        bytes: (value) => ({ bytes: context.base64Encoder(value) }),\n        content: (value) => ({ content: _json(value) }),\n        s3Location: (value) => ({ s3Location: _json(value) }),\n        text: (value) => ({ text: value }),\n        _: (name, value) => ({ [name]: value }),\n    });\n};\nconst se_GuardrailContentBlock = (input, context) => {\n    return GuardrailContentBlock.visit(input, {\n        image: (value) => ({ image: se_GuardrailImageBlock(value, context) }),\n        text: (value) => ({ text: _json(value) }),\n        _: (name, value) => ({ [name]: value }),\n    });\n};\nconst se_GuardrailContentBlockList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        return se_GuardrailContentBlock(entry, context);\n    });\n};\nconst se_GuardrailConverseContentBlock = (input, context) => {\n    return GuardrailConverseContentBlock.visit(input, {\n        image: (value) => ({ image: se_GuardrailConverseImageBlock(value, context) }),\n        text: (value) => ({ text: _json(value) }),\n        _: (name, value) => ({ [name]: value }),\n    });\n};\nconst se_GuardrailConverseImageBlock = (input, context) => {\n    return take(input, {\n        format: [],\n        source: (_) => se_GuardrailConverseImageSource(_, context),\n    });\n};\nconst se_GuardrailConverseImageSource = (input, context) => {\n    return GuardrailConverseImageSource.visit(input, {\n        bytes: (value) => ({ bytes: context.base64Encoder(value) }),\n        _: (name, value) => ({ [name]: value }),\n    });\n};\nconst se_GuardrailImageBlock = (input, context) => {\n    return take(input, {\n        format: [],\n        source: (_) => se_GuardrailImageSource(_, context),\n    });\n};\nconst se_GuardrailImageSource = (input, context) => {\n    return GuardrailImageSource.visit(input, {\n        bytes: (value) => ({ bytes: context.base64Encoder(value) }),\n        _: (name, value) => ({ [name]: value }),\n    });\n};\nconst se_ImageBlock = (input, context) => {\n    return take(input, {\n        format: [],\n        source: (_) => se_ImageSource(_, context),\n    });\n};\nconst se_ImageSource = (input, context) => {\n    return ImageSource.visit(input, {\n        bytes: (value) => ({ bytes: context.base64Encoder(value) }),\n        s3Location: (value) => ({ s3Location: _json(value) }),\n        _: (name, value) => ({ [name]: value }),\n    });\n};\nconst se_InferenceConfiguration = (input, context) => {\n    return take(input, {\n        maxTokens: [],\n        stopSequences: _json,\n        temperature: __serializeFloat,\n        topP: __serializeFloat,\n    });\n};\nconst se_InvokeModelTokensRequest = (input, context) => {\n    return take(input, {\n        body: context.base64Encoder,\n    });\n};\nconst se_Message = (input, context) => {\n    return take(input, {\n        content: (_) => se_ContentBlocks(_, context),\n        role: [],\n    });\n};\nconst se_Messages = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        return se_Message(entry, context);\n    });\n};\nconst se_ModelInputPayload = (input, context) => {\n    return input;\n};\nconst se_ReasoningContentBlock = (input, context) => {\n    return ReasoningContentBlock.visit(input, {\n        reasoningText: (value) => ({ reasoningText: _json(value) }),\n        redactedContent: (value) => ({ redactedContent: context.base64Encoder(value) }),\n        _: (name, value) => ({ [name]: value }),\n    });\n};\nconst se_SystemContentBlock = (input, context) => {\n    return SystemContentBlock.visit(input, {\n        cachePoint: (value) => ({ cachePoint: _json(value) }),\n        guardContent: (value) => ({ guardContent: se_GuardrailConverseContentBlock(value, context) }),\n        text: (value) => ({ text: value }),\n        _: (name, value) => ({ [name]: value }),\n    });\n};\nconst se_SystemContentBlocks = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        return se_SystemContentBlock(entry, context);\n    });\n};\nconst se_Tool = (input, context) => {\n    return Tool.visit(input, {\n        cachePoint: (value) => ({ cachePoint: _json(value) }),\n        toolSpec: (value) => ({ toolSpec: se_ToolSpecification(value, context) }),\n        _: (name, value) => ({ [name]: value }),\n    });\n};\nconst se_ToolConfiguration = (input, context) => {\n    return take(input, {\n        toolChoice: _json,\n        tools: (_) => se_Tools(_, context),\n    });\n};\nconst se_ToolInputSchema = (input, context) => {\n    return ToolInputSchema.visit(input, {\n        json: (value) => ({ json: se_Document(value, context) }),\n        _: (name, value) => ({ [name]: value }),\n    });\n};\nconst se_ToolResultBlock = (input, context) => {\n    return take(input, {\n        content: (_) => se_ToolResultContentBlocks(_, context),\n        status: [],\n        toolUseId: [],\n    });\n};\nconst se_ToolResultContentBlock = (input, context) => {\n    return ToolResultContentBlock.visit(input, {\n        document: (value) => ({ document: se_DocumentBlock(value, context) }),\n        image: (value) => ({ image: se_ImageBlock(value, context) }),\n        json: (value) => ({ json: se_Document(value, context) }),\n        text: (value) => ({ text: value }),\n        video: (value) => ({ video: se_VideoBlock(value, context) }),\n        _: (name, value) => ({ [name]: value }),\n    });\n};\nconst se_ToolResultContentBlocks = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        return se_ToolResultContentBlock(entry, context);\n    });\n};\nconst se_Tools = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        return se_Tool(entry, context);\n    });\n};\nconst se_ToolSpecification = (input, context) => {\n    return take(input, {\n        description: [],\n        inputSchema: (_) => se_ToolInputSchema(_, context),\n        name: [],\n    });\n};\nconst se_ToolUseBlock = (input, context) => {\n    return take(input, {\n        input: (_) => se_Document(_, context),\n        name: [],\n        toolUseId: [],\n    });\n};\nconst se_VideoBlock = (input, context) => {\n    return take(input, {\n        format: [],\n        source: (_) => se_VideoSource(_, context),\n    });\n};\nconst se_VideoSource = (input, context) => {\n    return VideoSource.visit(input, {\n        bytes: (value) => ({ bytes: context.base64Encoder(value) }),\n        s3Location: (value) => ({ s3Location: _json(value) }),\n        _: (name, value) => ({ [name]: value }),\n    });\n};\nconst se_Document = (input, context) => {\n    return input;\n};\nconst de_AsyncInvokeSummaries = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_AsyncInvokeSummary(entry, context);\n    });\n    return retVal;\n};\nconst de_AsyncInvokeSummary = (output, context) => {\n    return take(output, {\n        clientRequestToken: __expectString,\n        endTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),\n        failureMessage: __expectString,\n        invocationArn: __expectString,\n        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),\n        modelArn: __expectString,\n        outputDataConfig: (_) => _json(__expectUnion(_)),\n        status: __expectString,\n        submitTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),\n    });\n};\nconst de_BidirectionalOutputPayloadPart = (output, context) => {\n    return take(output, {\n        bytes: context.base64Decoder,\n    });\n};\nconst de_ContentBlock = (output, context) => {\n    if (output.cachePoint != null) {\n        return {\n            cachePoint: _json(output.cachePoint),\n        };\n    }\n    if (output.citationsContent != null) {\n        return {\n            citationsContent: _json(output.citationsContent),\n        };\n    }\n    if (output.document != null) {\n        return {\n            document: de_DocumentBlock(output.document, context),\n        };\n    }\n    if (output.guardContent != null) {\n        return {\n            guardContent: de_GuardrailConverseContentBlock(__expectUnion(output.guardContent), context),\n        };\n    }\n    if (output.image != null) {\n        return {\n            image: de_ImageBlock(output.image, context),\n        };\n    }\n    if (output.reasoningContent != null) {\n        return {\n            reasoningContent: de_ReasoningContentBlock(__expectUnion(output.reasoningContent), context),\n        };\n    }\n    if (__expectString(output.text) !== undefined) {\n        return { text: __expectString(output.text) };\n    }\n    if (output.toolResult != null) {\n        return {\n            toolResult: de_ToolResultBlock(output.toolResult, context),\n        };\n    }\n    if (output.toolUse != null) {\n        return {\n            toolUse: de_ToolUseBlock(output.toolUse, context),\n        };\n    }\n    if (output.video != null) {\n        return {\n            video: de_VideoBlock(output.video, context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_ContentBlockDelta = (output, context) => {\n    if (output.citation != null) {\n        return {\n            citation: _json(output.citation),\n        };\n    }\n    if (output.reasoningContent != null) {\n        return {\n            reasoningContent: de_ReasoningContentBlockDelta(__expectUnion(output.reasoningContent), context),\n        };\n    }\n    if (__expectString(output.text) !== undefined) {\n        return { text: __expectString(output.text) };\n    }\n    if (output.toolUse != null) {\n        return {\n            toolUse: _json(output.toolUse),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_ContentBlockDeltaEvent = (output, context) => {\n    return take(output, {\n        contentBlockIndex: __expectInt32,\n        delta: (_) => de_ContentBlockDelta(__expectUnion(_), context),\n    });\n};\nconst de_ContentBlocks = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ContentBlock(__expectUnion(entry), context);\n    });\n    return retVal;\n};\nconst de_ConverseOutput = (output, context) => {\n    if (output.message != null) {\n        return {\n            message: de_Message(output.message, context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_ConverseStreamMetadataEvent = (output, context) => {\n    return take(output, {\n        metrics: _json,\n        performanceConfig: _json,\n        trace: (_) => de_ConverseStreamTrace(_, context),\n        usage: _json,\n    });\n};\nconst de_ConverseStreamTrace = (output, context) => {\n    return take(output, {\n        guardrail: (_) => de_GuardrailTraceAssessment(_, context),\n        promptRouter: _json,\n    });\n};\nconst de_ConverseTrace = (output, context) => {\n    return take(output, {\n        guardrail: (_) => de_GuardrailTraceAssessment(_, context),\n        promptRouter: _json,\n    });\n};\nconst de_DocumentBlock = (output, context) => {\n    return take(output, {\n        citations: _json,\n        context: __expectString,\n        format: __expectString,\n        name: __expectString,\n        source: (_) => de_DocumentSource(__expectUnion(_), context),\n    });\n};\nconst de_DocumentSource = (output, context) => {\n    if (output.bytes != null) {\n        return {\n            bytes: context.base64Decoder(output.bytes),\n        };\n    }\n    if (output.content != null) {\n        return {\n            content: _json(output.content),\n        };\n    }\n    if (output.s3Location != null) {\n        return {\n            s3Location: _json(output.s3Location),\n        };\n    }\n    if (__expectString(output.text) !== undefined) {\n        return { text: __expectString(output.text) };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_GuardrailAssessment = (output, context) => {\n    return take(output, {\n        automatedReasoningPolicy: (_) => de_GuardrailAutomatedReasoningPolicyAssessment(_, context),\n        contentPolicy: _json,\n        contextualGroundingPolicy: (_) => de_GuardrailContextualGroundingPolicyAssessment(_, context),\n        invocationMetrics: _json,\n        sensitiveInformationPolicy: _json,\n        topicPolicy: _json,\n        wordPolicy: _json,\n    });\n};\nconst de_GuardrailAssessmentList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_GuardrailAssessment(entry, context);\n    });\n    return retVal;\n};\nconst de_GuardrailAssessmentListMap = (output, context) => {\n    return Object.entries(output).reduce((acc, [key, value]) => {\n        if (value === null) {\n            return acc;\n        }\n        acc[key] = de_GuardrailAssessmentList(value, context);\n        return acc;\n    }, {});\n};\nconst de_GuardrailAssessmentMap = (output, context) => {\n    return Object.entries(output).reduce((acc, [key, value]) => {\n        if (value === null) {\n            return acc;\n        }\n        acc[key] = de_GuardrailAssessment(value, context);\n        return acc;\n    }, {});\n};\nconst de_GuardrailAutomatedReasoningFinding = (output, context) => {\n    if (output.impossible != null) {\n        return {\n            impossible: de_GuardrailAutomatedReasoningImpossibleFinding(output.impossible, context),\n        };\n    }\n    if (output.invalid != null) {\n        return {\n            invalid: de_GuardrailAutomatedReasoningInvalidFinding(output.invalid, context),\n        };\n    }\n    if (output.noTranslations != null) {\n        return {\n            noTranslations: _json(output.noTranslations),\n        };\n    }\n    if (output.satisfiable != null) {\n        return {\n            satisfiable: de_GuardrailAutomatedReasoningSatisfiableFinding(output.satisfiable, context),\n        };\n    }\n    if (output.tooComplex != null) {\n        return {\n            tooComplex: _json(output.tooComplex),\n        };\n    }\n    if (output.translationAmbiguous != null) {\n        return {\n            translationAmbiguous: de_GuardrailAutomatedReasoningTranslationAmbiguousFinding(output.translationAmbiguous, context),\n        };\n    }\n    if (output.valid != null) {\n        return {\n            valid: de_GuardrailAutomatedReasoningValidFinding(output.valid, context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_GuardrailAutomatedReasoningFindingList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_GuardrailAutomatedReasoningFinding(__expectUnion(entry), context);\n    });\n    return retVal;\n};\nconst de_GuardrailAutomatedReasoningImpossibleFinding = (output, context) => {\n    return take(output, {\n        contradictingRules: _json,\n        logicWarning: _json,\n        translation: (_) => de_GuardrailAutomatedReasoningTranslation(_, context),\n    });\n};\nconst de_GuardrailAutomatedReasoningInvalidFinding = (output, context) => {\n    return take(output, {\n        contradictingRules: _json,\n        logicWarning: _json,\n        translation: (_) => de_GuardrailAutomatedReasoningTranslation(_, context),\n    });\n};\nconst de_GuardrailAutomatedReasoningPolicyAssessment = (output, context) => {\n    return take(output, {\n        findings: (_) => de_GuardrailAutomatedReasoningFindingList(_, context),\n    });\n};\nconst de_GuardrailAutomatedReasoningSatisfiableFinding = (output, context) => {\n    return take(output, {\n        claimsFalseScenario: _json,\n        claimsTrueScenario: _json,\n        logicWarning: _json,\n        translation: (_) => de_GuardrailAutomatedReasoningTranslation(_, context),\n    });\n};\nconst de_GuardrailAutomatedReasoningTranslation = (output, context) => {\n    return take(output, {\n        claims: _json,\n        confidence: __limitedParseDouble,\n        premises: _json,\n        untranslatedClaims: _json,\n        untranslatedPremises: _json,\n    });\n};\nconst de_GuardrailAutomatedReasoningTranslationAmbiguousFinding = (output, context) => {\n    return take(output, {\n        differenceScenarios: _json,\n        options: (_) => de_GuardrailAutomatedReasoningTranslationOptionList(_, context),\n    });\n};\nconst de_GuardrailAutomatedReasoningTranslationList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_GuardrailAutomatedReasoningTranslation(entry, context);\n    });\n    return retVal;\n};\nconst de_GuardrailAutomatedReasoningTranslationOption = (output, context) => {\n    return take(output, {\n        translations: (_) => de_GuardrailAutomatedReasoningTranslationList(_, context),\n    });\n};\nconst de_GuardrailAutomatedReasoningTranslationOptionList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_GuardrailAutomatedReasoningTranslationOption(entry, context);\n    });\n    return retVal;\n};\nconst de_GuardrailAutomatedReasoningValidFinding = (output, context) => {\n    return take(output, {\n        claimsTrueScenario: _json,\n        logicWarning: _json,\n        supportingRules: _json,\n        translation: (_) => de_GuardrailAutomatedReasoningTranslation(_, context),\n    });\n};\nconst de_GuardrailContextualGroundingFilter = (output, context) => {\n    return take(output, {\n        action: __expectString,\n        detected: __expectBoolean,\n        score: __limitedParseDouble,\n        threshold: __limitedParseDouble,\n        type: __expectString,\n    });\n};\nconst de_GuardrailContextualGroundingFilters = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_GuardrailContextualGroundingFilter(entry, context);\n    });\n    return retVal;\n};\nconst de_GuardrailContextualGroundingPolicyAssessment = (output, context) => {\n    return take(output, {\n        filters: (_) => de_GuardrailContextualGroundingFilters(_, context),\n    });\n};\nconst de_GuardrailConverseContentBlock = (output, context) => {\n    if (output.image != null) {\n        return {\n            image: de_GuardrailConverseImageBlock(output.image, context),\n        };\n    }\n    if (output.text != null) {\n        return {\n            text: _json(output.text),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_GuardrailConverseImageBlock = (output, context) => {\n    return take(output, {\n        format: __expectString,\n        source: (_) => de_GuardrailConverseImageSource(__expectUnion(_), context),\n    });\n};\nconst de_GuardrailConverseImageSource = (output, context) => {\n    if (output.bytes != null) {\n        return {\n            bytes: context.base64Decoder(output.bytes),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_GuardrailTraceAssessment = (output, context) => {\n    return take(output, {\n        actionReason: __expectString,\n        inputAssessment: (_) => de_GuardrailAssessmentMap(_, context),\n        modelOutput: _json,\n        outputAssessments: (_) => de_GuardrailAssessmentListMap(_, context),\n    });\n};\nconst de_ImageBlock = (output, context) => {\n    return take(output, {\n        format: __expectString,\n        source: (_) => de_ImageSource(__expectUnion(_), context),\n    });\n};\nconst de_ImageSource = (output, context) => {\n    if (output.bytes != null) {\n        return {\n            bytes: context.base64Decoder(output.bytes),\n        };\n    }\n    if (output.s3Location != null) {\n        return {\n            s3Location: _json(output.s3Location),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_Message = (output, context) => {\n    return take(output, {\n        content: (_) => de_ContentBlocks(_, context),\n        role: __expectString,\n    });\n};\nconst de_MessageStopEvent = (output, context) => {\n    return take(output, {\n        additionalModelResponseFields: (_) => de_Document(_, context),\n        stopReason: __expectString,\n    });\n};\nconst de_PayloadPart = (output, context) => {\n    return take(output, {\n        bytes: context.base64Decoder,\n    });\n};\nconst de_ReasoningContentBlock = (output, context) => {\n    if (output.reasoningText != null) {\n        return {\n            reasoningText: _json(output.reasoningText),\n        };\n    }\n    if (output.redactedContent != null) {\n        return {\n            redactedContent: context.base64Decoder(output.redactedContent),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_ReasoningContentBlockDelta = (output, context) => {\n    if (output.redactedContent != null) {\n        return {\n            redactedContent: context.base64Decoder(output.redactedContent),\n        };\n    }\n    if (__expectString(output.signature) !== undefined) {\n        return { signature: __expectString(output.signature) };\n    }\n    if (__expectString(output.text) !== undefined) {\n        return { text: __expectString(output.text) };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_ToolResultBlock = (output, context) => {\n    return take(output, {\n        content: (_) => de_ToolResultContentBlocks(_, context),\n        status: __expectString,\n        toolUseId: __expectString,\n    });\n};\nconst de_ToolResultContentBlock = (output, context) => {\n    if (output.document != null) {\n        return {\n            document: de_DocumentBlock(output.document, context),\n        };\n    }\n    if (output.image != null) {\n        return {\n            image: de_ImageBlock(output.image, context),\n        };\n    }\n    if (output.json != null) {\n        return {\n            json: de_Document(output.json, context),\n        };\n    }\n    if (__expectString(output.text) !== undefined) {\n        return { text: __expectString(output.text) };\n    }\n    if (output.video != null) {\n        return {\n            video: de_VideoBlock(output.video, context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_ToolResultContentBlocks = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ToolResultContentBlock(__expectUnion(entry), context);\n    });\n    return retVal;\n};\nconst de_ToolUseBlock = (output, context) => {\n    return take(output, {\n        input: (_) => de_Document(_, context),\n        name: __expectString,\n        toolUseId: __expectString,\n    });\n};\nconst de_VideoBlock = (output, context) => {\n    return take(output, {\n        format: __expectString,\n        source: (_) => de_VideoSource(__expectUnion(_), context),\n    });\n};\nconst de_VideoSource = (output, context) => {\n    if (output.bytes != null) {\n        return {\n            bytes: context.base64Decoder(output.bytes),\n        };\n    }\n    if (output.s3Location != null) {\n        return {\n            s3Location: _json(output.s3Location),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_Document = (output, context) => {\n    return output;\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst _a = \"accept\";\nconst _cT = \"contentType\";\nconst _ct = \"content-type\";\nconst _gI = \"guardrailIdentifier\";\nconst _gV = \"guardrailVersion\";\nconst _mR = \"maxResults\";\nconst _nT = \"nextToken\";\nconst _pCL = \"performanceConfigLatency\";\nconst _sB = \"sortBy\";\nconst _sE = \"statusEquals\";\nconst _sO = \"sortOrder\";\nconst _sTA = \"submitTimeAfter\";\nconst _sTB = \"submitTimeBefore\";\nconst _t = \"trace\";\nconst _xaba = \"x-amzn-bedrock-accept\";\nconst _xabct = \"x-amzn-bedrock-content-type\";\nconst _xabg = \"x-amzn-bedrock-guardrailidentifier\";\nconst _xabg_ = \"x-amzn-bedrock-guardrailversion\";\nconst _xabpl = \"x-amzn-bedrock-performanceconfig-latency\";\nconst _xabt = \"x-amzn-bedrock-trace\";\n","import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { InvokeModelRequestFilterSensitiveLog, InvokeModelResponseFilterSensitiveLog, } from \"../models/models_0\";\nimport { de_InvokeModelCommand, se_InvokeModelCommand } from \"../protocols/Aws_restJson1\";\nexport { $Command };\nexport class InvokeModelCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"AmazonBedrockFrontendService\", \"InvokeModel\", {})\n    .n(\"BedrockRuntimeClient\", \"InvokeModelCommand\")\n    .f(InvokeModelRequestFilterSensitiveLog, InvokeModelResponseFilterSensitiveLog)\n    .ser(se_InvokeModelCommand)\n    .de(de_InvokeModelCommand)\n    .build() {\n}\n","/**\n * Order Extraction Service\n * Parses medical orders from dictation text using keyword detection\n */\n\nexport interface ExtractedOrder {\n  order_id?: string;\n  type: 'medication' | 'lab' | 'imaging' | 'prior_auth' | 'referral' | 'other';\n  text: string;\n  action?: 'start' | 'stop' | 'continue' | 'increase' | 'decrease' | 'order' | 'check';\n  details?: string;\n  urgency?: 'routine' | 'urgent' | 'stat';\n  confidence: number; // 0-1 confidence score\n}\n\nexport interface OrderExtractionResult {\n  medications: ExtractedOrder[];\n  labs: ExtractedOrder[];\n  imaging: ExtractedOrder[];\n  priorAuths: ExtractedOrder[];\n  referrals: ExtractedOrder[];\n  other: ExtractedOrder[];\n  rawOrders: string; // Combined text for Orders & Actions section\n}\n\nclass OrderExtractionService {\n  // Medication keywords\n  private medicationKeywords = {\n    start: ['start', 'begin', 'initiate', 'prescribe', 'give', 'add'],\n    stop: ['stop', 'discontinue', 'dc', 'd/c', 'hold', 'cease'],\n    continue: ['continue', 'keep', 'maintain', 'stay on'],\n    increase: ['increase', 'up', 'raise', 'higher', 'more'],\n    decrease: ['decrease', 'lower', 'reduce', 'less', 'down', 'taper'],\n  };\n\n  // Lab keywords\n  private labKeywords = [\n    'order',\n    \"let's get\",\n    \"let's check\",\n    'draw',\n    'check',\n    'labs',\n    'blood work',\n    'bloodwork',\n    'test',\n    'panel',\n    'cbc',\n    'cmp',\n    'bmp',\n    'tsh',\n    'a1c',\n    'hemoglobin',\n    'glucose',\n    'lipid',\n    'liver',\n    'kidney',\n    'electrolytes',\n  ];\n\n  // Lab value keywords (for detecting existing lab results, not orders)\n  private labValueKeywords = [\n    'sugars of',\n    'tsh of',\n    'a1c of',\n    'ldl',\n    'hdl',\n    'cholesterol',\n    'glucose of',\n    'hemoglobin of',\n    'creatinine of',\n    'a1c ',\n    'tsh is',\n    'tsh ',\n    'glucose ',\n  ];\n\n  // Demographic keywords (exclude from lab orders)\n  private demographicKeywords = [\n    'year old',\n    'years old',\n    'comes in with',\n    'patient with',\n    'history of',\n    'diagnosed with',\n  ];\n\n  // Imaging keywords\n  private imagingKeywords = [\n    'x-ray',\n    'xray',\n    'ct',\n    'mri',\n    'ultrasound',\n    'echo',\n    'scan',\n    'imaging',\n    'radiograph',\n    'mammogram',\n    'dexa',\n  ];\n\n  // Prior auth keywords\n  private priorAuthKeywords = [\n    'prior auth',\n    'prior authorization',\n    'pre-auth',\n    'preauth',\n    'authorization',\n    'approval needed',\n  ];\n\n  // Referral keywords\n  private referralKeywords = [\n    'refer',\n    'referral',\n    'consult',\n    'send to',\n    'see',\n    'appointment with',\n    'schedule with',\n  ];\n\n  // Common medication names for better detection\n  private commonMedications = [\n    'metformin',\n    'insulin',\n    'glipizide',\n    'januvia',\n    'ozempic',\n    'trulicity',\n    'jardiance',\n    'farxiga',\n    'humalog',\n    'lantus',\n    'levothyroxine',\n    'synthroid',\n    'lisinopril',\n    'metoprolol',\n    'atorvastatin',\n    'simvastatin',\n    'aspirin',\n    'clopidogrel',\n    'warfarin',\n    'eliquis',\n    'xarelto',\n    'gabapentin',\n    'lyrica',\n  ];\n\n  /**\n   * Extract orders from dictation text\n   */\n  extractOrders(text: string): OrderExtractionResult {\n    const result: OrderExtractionResult = {\n      medications: [],\n      labs: [],\n      imaging: [],\n      priorAuths: [],\n      referrals: [],\n      other: [],\n      rawOrders: '',\n    };\n\n    // Split text into sentences for better parsing\n    const sentences = this.splitIntoSentences(text);\n    const orderSentences: string[] = [];\n\n    for (const sentence of sentences) {\n      const lowerSentence = sentence.toLowerCase();\n\n      // Check for medications\n      const medicationOrder = this.extractMedicationOrder(sentence);\n      if (medicationOrder) {\n        result.medications.push(medicationOrder);\n        orderSentences.push(sentence);\n      }\n\n      // Check for labs\n      if (this.containsLabOrder(lowerSentence)) {\n        const labOrder = this.extractLabOrder(sentence);\n        if (labOrder) {\n          result.labs.push(labOrder);\n          orderSentences.push(sentence);\n        }\n      }\n\n      // Check for imaging\n      if (this.containsImagingOrder(lowerSentence)) {\n        result.imaging.push({\n          type: 'imaging',\n          text: sentence,\n          action: 'order',\n          confidence: 0.8,\n        });\n        orderSentences.push(sentence);\n      }\n\n      // Check for prior auth\n      if (this.containsPriorAuth(lowerSentence)) {\n        result.priorAuths.push({\n          type: 'prior_auth',\n          text: sentence,\n          action: 'order',\n          confidence: 0.9,\n        });\n        orderSentences.push(sentence);\n      }\n\n      // Check for referrals\n      if (this.containsReferral(lowerSentence)) {\n        result.referrals.push({\n          type: 'referral',\n          text: sentence,\n          action: 'order',\n          confidence: 0.7,\n        });\n        orderSentences.push(sentence);\n      }\n    }\n\n    // Don't use raw orders - this causes duplication in the formatted note\n    // The orderSentences will be formatted properly by formatOrdersForTemplate() instead\n    result.rawOrders = '';\n\n    return result;\n  }\n\n  /**\n   * Split text into sentences\n   */\n  private splitIntoSentences(text: string): string[] {\n    // Enhanced sentence splitting for medical dictation\n    // Split on punctuation first\n    let sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);\n\n    // If we have only one long sentence (no punctuation), try to split on medical action keywords\n    if (sentences.length === 1 && sentences[0].length > 100) {\n      const actionKeywords = [\n        'continue',\n        'start',\n        'begin',\n        'initiate',\n        'stop',\n        'discontinue',\n        'check',\n        'order',\n        'refer',\n      ];\n      let splitText = sentences[0];\n\n      // Find positions of action keywords\n      const splitPositions: number[] = [];\n      actionKeywords.forEach(keyword => {\n        const regex = new RegExp(`\\\\b${keyword}\\\\b`, 'gi');\n        let match;\n        while ((match = regex.exec(splitText)) !== null) {\n          if (match.index > 20) {\n            // Don't split too early\n            splitPositions.push(match.index);\n          }\n        }\n      });\n\n      // Sort positions and split\n      if (splitPositions.length > 0) {\n        splitPositions.sort((a, b) => a - b);\n        const splitSentences: string[] = [];\n        let lastPos = 0;\n\n        splitPositions.forEach(pos => {\n          if (pos > lastPos + 10) {\n            // Minimum sentence length\n            splitSentences.push(splitText.substring(lastPos, pos).trim());\n            lastPos = pos;\n          }\n        });\n\n        // Add the remainder\n        if (lastPos < splitText.length) {\n          splitSentences.push(splitText.substring(lastPos).trim());\n        }\n\n        sentences = splitSentences.filter(s => s.length > 0);\n      }\n    }\n\n    return sentences.map(s => s.trim()).filter(s => s.length > 0);\n  }\n\n  /**\n   * Extract medication order from sentence\n   */\n  private extractMedicationOrder(sentence: string): ExtractedOrder | null {\n    const lowerSentence = sentence.toLowerCase();\n\n    // Check for medication action keywords\n    for (const [action, keywords] of Object.entries(this.medicationKeywords)) {\n      for (const keyword of keywords) {\n        if (lowerSentence.includes(keyword)) {\n          // Check if it's actually about medication\n          const isMedication =\n            this.commonMedications.some(med => lowerSentence.includes(med.toLowerCase())) ||\n            lowerSentence.includes('mg') ||\n            lowerSentence.includes('medication');\n\n          if (isMedication) {\n            return {\n              type: 'medication',\n              text: sentence,\n              action: action as any,\n              confidence: 0.85,\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Check if sentence contains lab order\n   */\n  private containsLabOrder(sentence: string): boolean {\n    // Check for actual lab orders (not just lab values)\n    const hasLabOrder = this.labKeywords.some(keyword => sentence.includes(keyword));\n\n    // Exclude sentences that only contain lab values without order words\n    const isOnlyLabValue =\n      this.labValueKeywords.some(keyword => sentence.includes(keyword)) &&\n      !['check', 'order', 'get', 'draw', 'test', 'will check'].some(orderWord =>\n        sentence.includes(orderWord)\n      );\n\n    // Exclude demographic information\n    const isDemographic = this.demographicKeywords.some(keyword => sentence.includes(keyword));\n\n    return hasLabOrder && !isOnlyLabValue && !isDemographic;\n  }\n\n  /**\n   * Extract lab order details\n   */\n  private extractLabOrder(sentence: string): ExtractedOrder {\n    const urgency = this.extractUrgency(sentence);\n\n    return {\n      type: 'lab',\n      text: sentence,\n      action: 'order',\n      urgency,\n      confidence: 0.8,\n    };\n  }\n\n  /**\n   * Check if sentence contains imaging order\n   */\n  private containsImagingOrder(sentence: string): boolean {\n    return this.imagingKeywords.some(keyword => sentence.includes(keyword));\n  }\n\n  /**\n   * Check if sentence contains prior auth\n   */\n  private containsPriorAuth(sentence: string): boolean {\n    return this.priorAuthKeywords.some(keyword => sentence.includes(keyword));\n  }\n\n  /**\n   * Check if sentence contains referral\n   */\n  private containsReferral(sentence: string): boolean {\n    return this.referralKeywords.some(keyword => sentence.includes(keyword));\n  }\n\n  /**\n   * Extract urgency from order\n   */\n  private extractUrgency(text: string): 'routine' | 'urgent' | 'stat' {\n    const lowerText = text.toLowerCase();\n\n    if (lowerText.includes('stat') || lowerText.includes('immediately')) {\n      return 'stat';\n    }\n    if (lowerText.includes('urgent') || lowerText.includes('asap')) {\n      return 'urgent';\n    }\n\n    return 'routine';\n  }\n\n  /**\n   * Format orders for display in note template\n   */\n  formatOrdersForTemplate(orders: OrderExtractionResult): string {\n    const sections: string[] = [];\n\n    if (orders.medications.length > 0) {\n      sections.push('MEDICATIONS:');\n      orders.medications.forEach(med => {\n        const action = med.action ? med.action.toUpperCase() : 'ORDER';\n        sections.push(`- ${action}: ${med.text}`);\n      });\n    }\n\n    if (orders.labs.length > 0) {\n      sections.push('\\nLABS:');\n      orders.labs.forEach(lab => {\n        sections.push(`- ${lab.text}`);\n      });\n    }\n\n    if (orders.imaging.length > 0) {\n      sections.push('\\nIMAGING:');\n      orders.imaging.forEach(img => {\n        sections.push(`- ${img.text}`);\n      });\n    }\n\n    if (orders.priorAuths.length > 0) {\n      sections.push('\\nPRIOR AUTHORIZATIONS:');\n      orders.priorAuths.forEach(auth => {\n        sections.push(`- ${auth.text}`);\n      });\n    }\n\n    if (orders.referrals.length > 0) {\n      sections.push('\\nREFERRALS:');\n      orders.referrals.forEach(ref => {\n        sections.push(`- ${ref.text}`);\n      });\n    }\n\n    return sections.join('\\n');\n  }\n\n  /**\n   * Parse orders from the Orders & Actions section of a note\n   */\n  parseOrdersSection(ordersText: string): ExtractedOrder[] {\n    const orders: ExtractedOrder[] = [];\n    const lines = ordersText.split('\\n');\n\n    let currentType: ExtractedOrder['type'] = 'other';\n\n    for (const line of lines) {\n      const trimmedLine = line.trim();\n\n      // Check for section headers\n      if (trimmedLine.includes('MEDICATION')) {\n        currentType = 'medication';\n        continue;\n      }\n      if (trimmedLine.includes('LAB')) {\n        currentType = 'lab';\n        continue;\n      }\n      if (trimmedLine.includes('IMAGING')) {\n        currentType = 'imaging';\n        continue;\n      }\n      if (trimmedLine.includes('PRIOR AUTH')) {\n        currentType = 'prior_auth';\n        continue;\n      }\n      if (trimmedLine.includes('REFERRAL')) {\n        currentType = 'referral';\n        continue;\n      }\n\n      // Parse individual order lines\n      if (trimmedLine.startsWith('-') || trimmedLine.startsWith('•')) {\n        const orderText = trimmedLine.substring(1).trim();\n\n        // Extract action if present\n        const actionMatch = orderText.match(/^(START|STOP|CONTINUE|INCREASE|DECREASE|ORDER):\\s*/i);\n        let action: ExtractedOrder['action'] | undefined;\n        let text = orderText;\n\n        if (actionMatch) {\n          action = actionMatch[1].toLowerCase() as ExtractedOrder['action'];\n          text = orderText.substring(actionMatch[0].length);\n        }\n\n        orders.push({\n          type: currentType,\n          text,\n          action,\n          confidence: 1.0, // High confidence since it's from structured section\n        });\n      }\n    }\n\n    return orders;\n  }\n\n  /**\n   * Merge extracted orders with existing orders\n   */\n  mergeOrders(existing: ExtractedOrder[], extracted: ExtractedOrder[]): ExtractedOrder[] {\n    const merged = [...existing];\n\n    for (const newOrder of extracted) {\n      // Check if order already exists (simple duplicate check)\n      const isDuplicate = merged.some(\n        order =>\n          order.text.toLowerCase() === newOrder.text.toLowerCase() && order.type === newOrder.type\n      );\n\n      if (!isDuplicate) {\n        merged.push(newOrder);\n      }\n    }\n\n    return merged;\n  }\n}\n\n// Export singleton instance\nexport const orderExtractionService = new OrderExtractionService();\n","/**\n * Azure OpenAI Service for Medical Note Processing\n * HIPAA Compliant with BAA from Microsoft\n * Fallback for AWS Bedrock when unavailable\n */\n\nimport { logInfo, logError, logDebug, logPerformance } from './logger.service';\n\ninterface ProcessedNote {\n  formattedNote: string;\n  sections: {\n    chiefComplaint?: string;\n    hpi?: string;\n    reviewOfSystems?: string;\n    physicalExam?: string;\n    assessment?: string;\n    plan?: string;\n  };\n  metadata?: {\n    processingTime: number;\n    model: string;\n    tokenCount?: number;\n  };\n}\n\nclass AzureOpenAIService {\n  private endpoint: string;\n  private apiKey: string;\n  private deploymentName: string;\n  private apiVersion = '2024-02-01';\n\n  constructor() {\n    // Azure OpenAI configuration - PRODUCTION ENVIRONMENT\n    this.endpoint = import.meta.env.VITE_AZURE_OPENAI_ENDPOINT;\n    this.apiKey = import.meta.env.VITE_AZURE_OPENAI_KEY;\n    this.deploymentName = import.meta.env.VITE_AZURE_OPENAI_DEPLOYMENT || 'gpt-4o';\n    this.apiVersion = import.meta.env.VITE_AZURE_OPENAI_API_VERSION || '2024-02-01';\n\n    // Log configuration for debugging (without exposing keys)\n    logDebug('AzureOpenAI', 'Service initialization', {\n      hasEndpoint: !!this.endpoint,\n      hasApiKey: !!this.apiKey,\n      deploymentName: this.deploymentName,\n      apiVersion: this.apiVersion,\n      endpointUrl: this.endpoint ? this.endpoint.substring(0, 30) + '...' : 'not set'\n    });\n\n    // Validate required environment variables - Don't throw, just log warning\n    if (!this.endpoint) {\n      logError('AzureOpenAI', 'VITE_AZURE_OPENAI_ENDPOINT environment variable is required', {});\n    }\n    if (!this.apiKey) {\n      logError('AzureOpenAI', 'VITE_AZURE_OPENAI_KEY environment variable is required', {});\n    }\n  }\n\n  async processMedicalTranscription(\n    transcription: string,\n    patientData: any,\n    template: any,\n    patientContext?: string,\n    templateInstructions?: string\n  ): Promise<{ formatted: string }> {\n    // Build enhanced medical prompt with clinical expertise\n    let prompt = `You are an expert medical scribe and clinical documentation specialist with 15+ years of experience in medical note generation. You excel at creating comprehensive, accurate, and clinically relevant SOAP notes from dictated content.\n\nTRANSCRIPTION TO PROCESS:\n${transcription}\n\nPATIENT INFORMATION:\n${patientContext || 'No additional patient context provided'}\n\nCLINICAL DOCUMENTATION REQUIREMENTS:\n${templateInstructions || 'Use comprehensive medical documentation standards'}\n\nINSTRUCTION: Create a detailed, professional medical note following these guidelines:\n\n🏥 **SOAP NOTE FORMAT**:\n1. **CHIEF COMPLAINT**: Extract the primary reason for visit (1-2 sentences)\n2. **SUBJECTIVE**:\n   - History of Present Illness (HPI): Detailed narrative with timing, quality, severity, context\n   - Review of Systems (ROS): Extract any mentioned systems review\n   - Past Medical History (PMH): Include relevant past medical conditions\n   - Medications: List current medications with dosages when mentioned\n   - Allergies: Note any mentioned allergies or state \"NKDA\" if none\n   - Social History: Include relevant social factors (smoking, alcohol, etc.)\n   - Family History: Include relevant family medical history\n\n3. **OBJECTIVE**:\n   - Vital Signs: Extract any mentioned vital signs with units\n   - Physical Examination: Organize by body systems, be specific about findings\n   - Diagnostic Results: Include any mentioned lab results, imaging, or test results\n\n4. **ASSESSMENT**:\n   - Primary diagnosis with ICD-10 code when appropriate\n   - Differential diagnoses when mentioned\n   - Clinical reasoning and severity assessment\n\n5. **PLAN**:\n   - Medications: Include drug names, dosages, frequencies, and durations\n   - Diagnostic Orders: Labs, imaging, or tests ordered\n   - Follow-up Instructions: When and where to return\n   - Patient Education: Instructions given to patient\n   - Referrals: Any specialist referrals mentioned\n\n💊 **MEDICAL TERMINOLOGY**:\n- Use proper medical abbreviations (e.g., \"b.i.d.\" not \"twice daily\")\n- Include specific medication dosages and routes when mentioned\n- Use exact vital sign measurements with units\n- Include severity scales when mentioned (e.g., \"7/10 pain\")\n- Spell out medical conditions formally\n\n🔢 **BILLING & CODING SUPPORT**:\n- Suggest appropriate ICD-10 codes in brackets after diagnoses\n- Include CPT code suggestions for procedures mentioned\n- Note level of medical decision making when apparent\n\n📋 **QUALITY STANDARDS**:\n- Be thorough but concise\n- Use professional medical language\n- Maintain chronological flow in HPI\n- Separate subjective vs objective findings clearly\n- Ensure all dictated information is captured\n- Add clinical context when medically appropriate\n\n⚠️ **CRITICAL REQUIREMENTS**:\n- NEVER add information not mentioned in the transcription\n- Use \"Not mentioned\" or \"Not assessed\" for missing elements\n- Maintain medical accuracy and professional tone\n- Format consistently with standard medical documentation\n- Include timing and duration of symptoms when provided\n\nGenerate a comprehensive, medically accurate SOAP note that would meet hospital documentation standards:`;\n\n    const result = await this.processTranscriptionWithCustomPrompt(\n      transcription,\n      prompt,\n      patientData\n    );\n    return { formatted: result.formattedNote };\n  }\n\n  async processTranscriptionWithCustomPrompt(\n    transcription: string,\n    customPrompt: string,\n    patientContext?: {\n      name?: string;\n      mrn?: string;\n      dob?: string;\n    }\n  ): Promise<ProcessedNote> {\n    const startTime = Date.now();\n\n    if (!this.endpoint || !this.apiKey) {\n      logError('AzureOpenAI', 'Azure OpenAI not configured', {\n        hasEndpoint: !!this.endpoint,\n        hasApiKey: !!this.apiKey\n      });\n      // Return fallback instead of throwing\n      return this.createBasicFormattedNote(transcription, patientContext);\n    }\n\n    try {\n      const url = `${this.endpoint}/openai/deployments/${this.deploymentName}/chat/completions?api-version=${this.apiVersion}`;\n\n      const response = await this.makeAPICall(url, {\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert medical scribe with extensive experience in clinical documentation. Generate comprehensive, accurate SOAP notes that meet hospital documentation standards. Focus on medical accuracy, proper terminology, and complete information capture.'\n          },\n          {\n            role: 'user',\n            content: customPrompt\n          }\n        ],\n        temperature: 0.5, // Increased for more detailed and varied responses\n        max_tokens: 4000, // Increased for comprehensive notes\n        top_p: 0.9, // Slightly lower for more focused responses\n        frequency_penalty: 0.1, // Slight penalty to avoid repetition\n        presence_penalty: 0.1, // Encourage diverse vocabulary\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(`Azure OpenAI API error: ${response.status} - ${error}`);\n      }\n\n      const data = await response.json();\n      const formattedNote = data.choices[0].message.content;\n\n      // Parse the note into sections\n      const sections = this.parseNoteIntoSections(formattedNote);\n\n      return {\n        formattedNote,\n        sections,\n        metadata: {\n          processingTime: Date.now() - startTime,\n          model: `Azure OpenAI ${this.deploymentName}`,\n          tokenCount: data.usage?.total_tokens,\n        },\n      };\n    } catch (error) {\n      logError('AzureOpenAI', 'Custom prompt processing failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        hasTranscription: !!transcription,\n        hasPatientContext: !!patientContext,\n      });\n\n      // Return a basic formatted version as fallback\n      return this.createBasicFormattedNote(transcription, patientContext);\n    }\n  }\n\n  async processTranscription(\n    transcription: string,\n    template: string,\n    patientContext?: {\n      name?: string;\n      mrn?: string;\n      dob?: string;\n    }\n  ): Promise<ProcessedNote> {\n    const startTime = Date.now();\n\n    if (!this.endpoint || !this.apiKey) {\n      logError('AzureOpenAI', 'Azure OpenAI not configured', {\n        hasEndpoint: !!this.endpoint,\n        hasApiKey: !!this.apiKey\n      });\n      // Return fallback instead of throwing\n      return this.createBasicFormattedNote(transcription, patientContext);\n    }\n\n    try {\n      const systemPrompt = this.createSystemPrompt(template);\n      const userPrompt = this.createUserPrompt(transcription, patientContext);\n\n      const url = `${this.endpoint}/openai/deployments/${this.deploymentName}/chat/completions?api-version=${this.apiVersion}`;\n\n      const response = await this.makeAPICall(url, {\n        messages: [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: userPrompt },\n        ],\n        temperature: 0.3, // Lower temperature for more consistent medical notes\n        max_tokens: 2000,\n        top_p: 0.95,\n        frequency_penalty: 0,\n        presence_penalty: 0,\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(`Azure OpenAI API error: ${response.status} - ${error}`);\n      }\n\n      const data = await response.json();\n      const formattedNote = data.choices[0].message.content;\n\n      // Parse the note into sections\n      const sections = this.parseNoteIntoSections(formattedNote);\n\n      return {\n        formattedNote,\n        sections,\n        metadata: {\n          processingTime: Date.now() - startTime,\n          model: `Azure OpenAI ${this.deploymentName}`,\n          tokenCount: data.usage?.total_tokens,\n        },\n      };\n    } catch (error) {\n      logError('AzureOpenAI', 'Note processing failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        transcriptionLength: transcription?.length || 0,\n        templateLength: template?.length || 0,\n        hasPatientContext: !!patientContext,\n      });\n\n      // Return a basic formatted version as fallback\n      return this.createBasicFormattedNote(transcription, patientContext);\n    }\n  }\n\n  private createSystemPrompt(template: string): string {\n    return `You are a medical scribe assistant. Create a clean, professional medical note from the provided transcription.\n\nCRITICAL: Your response must ONLY contain the medical note content - no instructions, explanations, or meta-commentary.\n\nRequirements:\n- Format as proper SOAP note\n- Preserve all medical information \n- Correct obvious medical terminology errors\n- Use standard medical abbreviations\n- Professional medical language only\n\nTemplate: ${template}\n\nOutput only the formatted medical note with clear section headers (Chief Complaint, HPI, Review of Systems, Physical Exam, Assessment, Plan). Do not include any instructions or explanations in your response.`;\n  }\n\n  private createUserPrompt(transcription: string, patientContext?: any): string {\n    let prompt = '';\n\n    if (patientContext?.name || patientContext?.mrn) {\n      prompt += 'Patient Information:\\n';\n      if (patientContext.name) prompt += `Name: ${patientContext.name}\\n`;\n      if (patientContext.mrn) prompt += `MRN: ${patientContext.mrn}\\n`;\n      if (patientContext.dob) prompt += `DOB: ${patientContext.dob}\\n`;\n      prompt += '\\n';\n    }\n\n    prompt += `Medical Transcription:\\n${transcription}`;\n\n    return prompt;\n  }\n\n  private parseNoteIntoSections(note: string): any {\n    const sections: any = {};\n\n    // Common section headers to look for\n    const sectionHeaders = [\n      'chief complaint',\n      'hpi',\n      'history of present illness',\n      'review of systems',\n      'ros',\n      'physical exam',\n      'physical examination',\n      'assessment',\n      'plan',\n    ];\n\n    const lines = note.split('\\n');\n    let currentSection = '';\n    let currentContent: string[] = [];\n\n    for (const line of lines) {\n      const lowerLine = line.toLowerCase();\n      let foundSection = false;\n\n      for (const header of sectionHeaders) {\n        if (lowerLine.includes(header)) {\n          // Save previous section\n          if (currentSection && currentContent.length > 0) {\n            sections[this.normalizeSection(currentSection)] = currentContent.join('\\n').trim();\n          }\n\n          currentSection = header;\n          currentContent = [line];\n          foundSection = true;\n          break;\n        }\n      }\n\n      if (!foundSection && currentSection) {\n        currentContent.push(line);\n      }\n    }\n\n    // Save last section\n    if (currentSection && currentContent.length > 0) {\n      sections[this.normalizeSection(currentSection)] = currentContent.join('\\n').trim();\n    }\n\n    return sections;\n  }\n\n  private normalizeSection(section: string): string {\n    const mapping: { [key: string]: string } = {\n      'chief complaint': 'chiefComplaint',\n      hpi: 'hpi',\n      'history of present illness': 'hpi',\n      'review of systems': 'reviewOfSystems',\n      ros: 'reviewOfSystems',\n      'physical exam': 'physicalExam',\n      'physical examination': 'physicalExam',\n      assessment: 'assessment',\n      plan: 'plan',\n    };\n\n    return mapping[section.toLowerCase()] || section;\n  }\n\n  private createBasicFormattedNote(transcription: string, patientContext?: any): ProcessedNote {\n    // Fallback formatting when API fails\n    let formattedNote = '';\n\n    if (patientContext?.name || patientContext?.mrn) {\n      formattedNote += 'PATIENT INFORMATION\\n';\n      if (patientContext.name) formattedNote += `Name: ${patientContext.name}\\n`;\n      if (patientContext.mrn) formattedNote += `MRN: ${patientContext.mrn}\\n`;\n      if (patientContext.dob) formattedNote += `DOB: ${patientContext.dob}\\n`;\n      formattedNote += '\\n';\n    }\n\n    formattedNote += 'CLINICAL NOTE\\n\\n';\n    formattedNote += transcription;\n\n    return {\n      formattedNote,\n      sections: {\n        chiefComplaint: '',\n        hpi: transcription,\n        reviewOfSystems: '',\n        physicalExam: '',\n        assessment: '',\n        plan: '',\n      },\n      metadata: {\n        processingTime: 0,\n        model: 'Basic Formatter (API Unavailable)',\n      },\n    };\n  }\n\n  /**\n   * Process conversational prompts (non-medical note format)\n   * For pump recommendations, follow-up questions, etc.\n   */\n  async processConversationalPrompt(prompt: string): Promise<string> {\n    const startTime = performance.now();\n\n    // Check configuration first\n    if (!this.endpoint || !this.apiKey) {\n      logError('AzureOpenAI', 'Azure OpenAI not configured for conversational prompt', {\n        hasEndpoint: !!this.endpoint,\n        hasApiKey: !!this.apiKey\n      });\n      // Return a helpful fallback response\n      return \"I understand your question about pump selection. Let me help you find the best option based on your needs.\";\n    }\n\n    try {\n      logDebug('AzureOpenAI', 'Processing conversational prompt', {\n        promptLength: prompt.length,\n        model: this.deploymentName\n      });\n\n      const url = `${this.endpoint}/openai/deployments/${this.deploymentName}/chat/completions?api-version=${this.apiVersion}`;\n      const response = await this.makeAPICall(url, {\n        messages: [\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        max_tokens: 2000,\n        temperature: 0.7,\n        top_p: 0.95,\n        frequency_penalty: 0,\n        presence_penalty: 0\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Azure OpenAI API error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      const result = data.choices?.[0]?.message?.content;\n\n      if (!result) {\n        throw new Error('No response from Azure OpenAI');\n      }\n\n      const processingTime = performance.now() - startTime;\n\n      logInfo('AzureOpenAI', 'Successfully processed conversational prompt', {\n        processingTime: Math.round(processingTime),\n        model: this.deploymentName,\n        tokenCount: data.usage?.total_tokens\n      });\n\n      return result.trim();\n\n    } catch (error) {\n      const processingTime = performance.now() - startTime;\n      logError('AzureOpenAI', 'Failed to process conversational prompt', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        processingTime: Math.round(processingTime)\n      });\n\n      // Return fallback response instead of throwing\n      return \"I'm having trouble processing your question right now, but I can help you understand your pump recommendation. Please try again or contact support if the issue persists.\";\n    }\n  }\n\n  /**\n   * Retry utility with exponential backoff for handling rate limits\n   */\n  private async retryWithBackoff<T>(\n    fn: () => Promise<T>,\n    maxRetries: number = 3,\n    initialDelay: number = 1000\n  ): Promise<T> {\n    let lastError: Error;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error as Error;\n\n        // Check if it's a rate limit error (429)\n        if (error instanceof Error && error.message.includes('429')) {\n          const delay = initialDelay * Math.pow(2, attempt);\n          logInfo('AzureOpenAI', `Rate limited, retrying in ${delay}ms (attempt ${attempt + 1}/${maxRetries + 1})`, {});\n\n          if (attempt < maxRetries) {\n            await new Promise(resolve => setTimeout(resolve, delay));\n            continue;\n          }\n        }\n\n        // For non-rate-limit errors, don't retry\n        if (attempt === 0 && !error.message.includes('429')) {\n          throw error;\n        }\n\n        // If we've exhausted retries, throw the last error\n        if (attempt === maxRetries) {\n          throw error;\n        }\n      }\n    }\n\n    throw lastError!;\n  }\n\n  /**\n   * Make API call with retry logic\n   */\n  private async makeAPICall(url: string, body: any): Promise<Response> {\n    return this.retryWithBackoff(async () => {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'api-key': this.apiKey,\n        },\n        body: JSON.stringify(body),\n      });\n\n      if (response.status === 429) {\n        const rateLimitError = new Error(`Rate limited: ${response.status}`);\n        (rateLimitError as any).status = 429;\n        throw rateLimitError;\n      }\n\n      if (!response.ok) {\n        const apiError = new Error(`API call failed: ${response.status} ${response.statusText}`);\n        (apiError as any).status = response.status;\n        throw apiError;\n      }\n\n      return response;\n    });\n  }\n\n  // Test method to verify Azure OpenAI is working\n  async testConnection(): Promise<boolean> {\n    try {\n      const result = await this.processTranscription(\n        'Patient has diabetes with A1C of 9.5',\n        'Standard SOAP Note',\n        { name: 'Test Patient' }\n      );\n\n      logInfo('AzureOpenAI', 'Connection test successful', {\n        processingTime: result.metadata?.processingTime,\n        model: result.metadata?.model,\n        tokenCount: result.metadata?.tokenCount,\n      });\n      return true;\n    } catch (error) {\n      logError('AzureOpenAI', 'Connection test failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      return false;\n    }\n  }\n}\n\nexport const azureOpenAIService = new AzureOpenAIService();\n","/**\n * Azure AI Service for HIPAA-Compliant AI Processing\n * Primary: Azure OpenAI (GPT-4o) - Fallback: AWS Bedrock (Claude)\n */\n\nimport { BedrockRuntimeClient, InvokeModelCommand } from '@aws-sdk/client-bedrock-runtime';\nimport type { Template } from '../types/template.types';\nimport type { PatientData } from './patientData.service';\nimport { specialtyService } from './specialty.service';\nimport type { DoctorTemplate, DoctorSettings } from './doctorProfile.service';\nimport { orderExtractionService, type OrderExtractionResult } from './orderExtraction.service';\nimport { azureOpenAIService } from './azureOpenAI.service';\nimport { medicalCorrections } from './medicalCorrections.service';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface ProcessedNote {\n  formatted: string;\n  sections: {\n    chiefComplaint?: string;\n    historyOfPresentIllness?: string;\n    reviewOfSystems?: string;\n    pastMedicalHistory?: string;\n    medications?: string;\n    allergies?: string;\n    socialHistory?: string;\n    familyHistory?: string;\n    physicalExam?: string;\n    assessment?: string;\n    plan?: string;\n    ordersAndActions?: string;  // New section for extracted orders\n    patientSummary?: string;    // New 2-3 sentence summary\n  };\n  extractedOrders?: OrderExtractionResult;  // Raw extracted orders data\n  metadata?: {\n    processedAt: string;\n    model: string;\n    confidence?: number;\n  };\n}\n\nclass AzureAIService {\n  private client: BedrockRuntimeClient;\n  // MIGRATION PHASE 1: Azure OpenAI PRIMARY, AWS Bedrock FALLBACK ONLY\n  private primaryProvider = 'azure'; // FORCED TO AZURE FOR MIGRATION\n  private modelId = 'us.anthropic.claude-opus-4-1-20250805-v1:0'; // AWS Bedrock fallback model\n  private fallbackModelId = 'anthropic.claude-3-5-sonnet-20241022-v2:0'; // AWS Bedrock secondary fallback\n  private workingModelId: string | null = null;\n  private migrationMode = true; // Phase 1 of migration active\n\n  constructor() {\n    if (this.migrationMode) {\n      logInfo('azureAI', 'Info message', {});\n      logInfo('azureAI', 'Info message', {});\n      logDebug('azureAI', 'Debug message', {});\n      logDebug('azureAI', 'Debug message', {});\n      logDebug('azureAI', 'Debug message', {});\n    }\n    \n    const bearerToken = import.meta.env.VITE_AWS_BEARER_TOKEN_BEDROCK;\n    \n    // Check if we have standard AWS credentials first\n    if (import.meta.env.VITE_AWS_ACCESS_KEY_ID && import.meta.env.VITE_AWS_SECRET_ACCESS_KEY) {\n      logDebug('azureAI', 'Debug message', {});\n      this.client = new BedrockRuntimeClient({\n        region: import.meta.env.VITE_AWS_REGION || 'us-east-1',\n        credentials: {\n          accessKeyId: import.meta.env.VITE_AWS_ACCESS_KEY_ID,\n          secretAccessKey: import.meta.env.VITE_AWS_SECRET_ACCESS_KEY\n        }\n      });\n    } else if (bearerToken) {\n      // Bearer token authentication needs special handling\n      logDebug('azureAI', 'Debug message', {});\n      logWarn('azureAI', 'Warning message', {});\n      \n      // For browser-based Bearer token auth, we need a different approach\n      // The Bearer token should be used in Authorization header\n      this.client = new BedrockRuntimeClient({\n        region: import.meta.env.VITE_AWS_REGION || 'us-east-1',\n        credentials: {\n          accessKeyId: 'dummy', // Required but not used with Bearer token\n          secretAccessKey: 'dummy' // Required but not used with Bearer token\n        },\n        customUserAgent: 'BedrockAPIKey',\n        // Add custom request handler for Bearer token\n        requestHandler: {\n          handle: async (request: any) => {\n            request.headers['Authorization'] = `Bearer ${bearerToken}`;\n            return request;\n          }\n        } as any\n      });\n    } else {\n      logWarn('azureAI', 'Warning message', {});\n      // Create a dummy client to avoid errors\n      this.client = new BedrockRuntimeClient({\n        region: 'us-east-1',\n        credentials: {\n          accessKeyId: 'not-configured',\n          secretAccessKey: 'not-configured'\n        }\n      });\n    }\n  }\n\n  /**\n   * Process medical transcription into structured note\n   * HIPAA COMPLIANT - Covered by AWS BAA\n   */\n  async processMedicalTranscription(\n    transcript: string,\n    patient: PatientData,\n    template: Template | null,\n    additionalContext?: string,\n    customTemplate?: { template: DoctorTemplate; doctorSettings: DoctorSettings }\n  ): Promise<ProcessedNote> {\n    // MIGRATION PHASE 1: Azure OpenAI is now PRIMARY provider\n    if (this.migrationMode || this.primaryProvider === 'azure') {\n      try {\n        logDebug('azureAI', 'Debug message', {});\n        logDebug('azureAI', 'Debug message', {});\n        const azureResult = await this.processWithAzureOpenAI(transcript, patient, template, additionalContext, customTemplate);\n        logInfo('azureAI', 'Info message', {});\n        return azureResult;\n      } catch (azureError) {\n        logWarn('azureAI', 'Warning message', {});\n        logDebug('azureAI', 'Debug message', {});\n        // Continue to AWS Bedrock fallback below\n      }\n    }\n\n    try {\n      const prompt = customTemplate \n        ? this.buildCustomPrompt(transcript, patient, customTemplate.template, customTemplate.doctorSettings, additionalContext)\n        : this.buildPrompt(transcript, patient, template, additionalContext);\n      \n      // AWS Bedrock fallback\n      logDebug('azureAI', 'Debug message', {});\n      logDebug('azureAI', 'Debug message', {});\n      \n      const command = new InvokeModelCommand({\n        modelId: this.modelId,\n        contentType: 'application/json',\n        accept: 'application/json',\n        body: JSON.stringify({\n          anthropic_version: 'bedrock-2023-05-31',\n          max_tokens: 2000,\n          temperature: 0.3,\n          messages: [\n            {\n              role: 'user',\n              content: prompt\n            }\n          ]\n        })\n      });\n\n      // Add retry logic with exponential backoff for rate limits\n      let response;\n      let retryCount = 0;\n      const maxRetries = 12; // Increased for better resilience against 429 errors\n      \n      while (retryCount <= maxRetries) {\n        try {\n          if (retryCount > 0) {\n            // Aggressive backoff with jitter: starts at 10s, increases to max 90s\n            const baseDelay = Math.min(10000 * Math.pow(2, retryCount - 1), 90000);\n            const jitter = Math.random() * 5000; // Add 0-5s random jitter\n            const delay = baseDelay + jitter;\n            logDebug('azureAI', 'Debug message', {});\n            await new Promise(resolve => setTimeout(resolve, delay));\n          }\n          \n          response = await this.client.send(command);\n          logInfo('azureAI', 'Info message', {});\n          break; // Success, exit the retry loop\n          \n        } catch (error: any) {\n          // Check for rate limit error (429 or TooManyRequestsException)\n          if (error?.name === 'TooManyRequestsException' || \n              error?.name === 'ThrottlingException' ||\n              error?.$metadata?.httpStatusCode === 429 ||\n              error?.message?.toLowerCase().includes('too many requests') ||\n              error?.message?.toLowerCase().includes('throttl') ||\n              error?.message?.toLowerCase().includes('rate')) {\n            retryCount++;\n            if (retryCount > maxRetries) {\n              logError('azureAI', 'Error message', {});\n              throw new Error('AI service is temporarily busy. Please wait a moment and try again.');\n            }\n            continue; // Retry with backoff\n          }\n          \n          // Check for model access issues and try next model in preference list\n          if (error?.name === 'AccessDeniedException' || \n              error?.name === 'ValidationException' ||\n              error?.message?.includes('Operation not allowed') ||\n              error?.message?.includes('not authorized') ||\n              error?.message?.includes('model') ||\n              error?.$metadata?.httpStatusCode === 403 ||\n              error?.$metadata?.httpStatusCode === 400) {\n            \n            logWarn('azureAI', 'Warning message', {});\n            \n            // Try the fallback model\n            const fallbackModels = [this.fallbackModelId, 'anthropic.claude-3-sonnet-20240229-v1:0', 'anthropic.claude-instant-v1', 'anthropic.claude-v2'];\n            for (const nextModelId of fallbackModels) {\n              \n              logDebug('azureAI', 'Debug message', {});\n              \n              try {\n                const fallbackCommand = new InvokeModelCommand({\n                  modelId: nextModelId,\n                  contentType: 'application/json',\n                  accept: 'application/json',\n                  body: JSON.stringify({\n                    anthropic_version: 'bedrock-2023-05-31',\n                    max_tokens: 2000,\n                    temperature: 0.3,\n                    messages: [\n                      {\n                        role: 'user',\n                        content: prompt\n                      }\n                    ]\n                  })\n                });\n                \n                response = await this.client.send(fallbackCommand);\n                \n                // Success! Save this as the working model\n                this.workingModelId = nextModelId;\n                logInfo('azureAI', 'Info message', {});\n                break; // Exit both loops\n              } catch (modelError: any) {\n                logDebug('azureAI', 'Debug message', {});\n                continue; // Try next model\n              }\n            }\n            \n            if (!response) {\n              logError('azureAI', 'Error message', {});\n              throw new Error('AWS Bedrock models not accessible. Please enable Claude models in the AWS Bedrock console at: https://console.aws.amazon.com/bedrock/');\n            }\n            break; // Exit retry loop if we found a working model\n          }\n          \n          // If it's a different type of error, check if we should try fallback\n          if (error?.name === 'ValidationException' || \n              error?.message?.includes('model') ||\n              error?.message?.includes('not found')) {\n            logWarn('azureAI', 'Warning message', {});\n            const fallbackCommand = new InvokeModelCommand({\n              modelId: this.fallbackModelId,\n              contentType: 'application/json',\n              accept: 'application/json',\n              body: JSON.stringify({\n                anthropic_version: 'bedrock-2023-05-31',\n                max_tokens: 2000,\n                temperature: 0.3,\n                messages: [\n                  {\n                    role: 'user',\n                    content: prompt\n                  }\n                ]\n              })\n            });\n            \n            // Apply same retry logic for fallback model\n            retryCount = 0;\n            while (retryCount <= maxRetries) {\n              try {\n                if (retryCount > 0) {\n                  const delay = Math.min(1000 * Math.pow(2, retryCount), 8000);\n                  logDebug('azureAI', 'Debug message', {});\n                  await new Promise(resolve => setTimeout(resolve, delay));\n                }\n                response = await this.client.send(fallbackCommand);\n                // Update the modelId for future calls\n                this.modelId = this.fallbackModelId;\n                logInfo('azureAI', 'Info message', {});\n                break;\n              } catch (fallbackError: any) {\n                if (fallbackError?.name === 'TooManyRequestsException' || \n                    fallbackError?.name === 'ThrottlingException' ||\n                    fallbackError?.$metadata?.httpStatusCode === 429) {\n                  retryCount++;\n                  if (retryCount > maxRetries) {\n                    throw new Error('AI service is temporarily busy. Please wait a moment and try again.');\n                  }\n                  continue;\n                }\n                throw fallbackError;\n              }\n            }\n            break; // Exit main loop after fallback\n          } else {\n            throw error; // Other errors, don't retry\n          }\n        }\n      }\n      const responseBody = JSON.parse(new TextDecoder().decode(response.body));\n      \n      const parsedNote = this.parseResponse(responseBody.content[0].text, patient, template, transcript);\n      return this.validateAndCleanProcessedNote(parsedNote, transcript);\n    } catch (error) {\n      logError('azureAI', 'Error message', {});\n      \n      // Try Azure OpenAI as fallback when Bedrock fails\n      logWarn('azureAI', 'Warning message', {});\n      \n      try {\n        // Convert template to string format for Azure OpenAI\n        const templateString = template ? \n          `${template.name}\\n${template.sections.map(s => s.title).join('\\n')}` : \n          'Standard SOAP Note Format';\n        \n        const azureResult = await azureOpenAIService.processTranscription(\n          transcript,\n          templateString,\n          {\n            name: patient.fullName,\n            mrn: patient.mrn,\n            dob: patient.dateOfBirth\n          }\n        );\n        \n        logInfo('azureAI', 'Info message', {});\n        \n        // Convert Azure OpenAI result to our ProcessedNote format\n        const convertedNote = {\n          formatted: azureResult.formattedNote,\n          sections: {\n            chiefComplaint: azureResult.sections.chiefComplaint,\n            historyOfPresentIllness: azureResult.sections.hpi,\n            reviewOfSystems: azureResult.sections.reviewOfSystems,\n            physicalExam: azureResult.sections.physicalExam,\n            assessment: azureResult.sections.assessment,\n            plan: azureResult.sections.plan\n          },\n          metadata: {\n            processedAt: new Date().toISOString(),\n            model: azureResult.metadata?.model || 'Azure OpenAI',\n            confidence: 0.85\n          }\n        };\n        return this.validateAndCleanProcessedNote(convertedNote, transcript);\n      } catch (azureError) {\n        logError('azureAI', 'Error message', {});\n        \n        // If both Bedrock and Azure fail, provide basic formatting\n        logWarn('azureAI', 'Warning message', {});\n        \n        // Create basic note with order extraction\n        const basicNote = this.createBasicFormattedNote(transcript, patient);\n        \n        // Extract orders even for basic formatting - use corrected transcript\n        const correctedTranscript = medicalCorrections.correctTranscription(transcript);\n        const extractedOrders = orderExtractionService.extractOrders(correctedTranscript);\n        if (extractedOrders && (\n          extractedOrders.medications.length > 0 ||\n          extractedOrders.labs.length > 0 ||\n          extractedOrders.imaging.length > 0 ||\n          extractedOrders.priorAuths.length > 0 ||\n          extractedOrders.referrals.length > 0\n        )) {\n          const ordersAndActions = orderExtractionService.formatOrdersForTemplate(extractedOrders);\n          basicNote.formatted += `\\n\\n**ORDERS & ACTIONS:**\\n${ordersAndActions}`;\n          basicNote.sections.ordersAndActions = ordersAndActions;\n          basicNote.extractedOrders = extractedOrders;\n        }\n\n        return this.validateAndCleanProcessedNote(basicNote, transcript);\n      }\n    }\n  }\n\n  /**\n   * Process medical transcription using Azure OpenAI (Primary Provider)\n   * HIPAA COMPLIANT - Covered by Microsoft BAA\n   * Enhanced for Phase 1 Migration with improved template support\n   */\n  private async processWithAzureOpenAI(\n    transcript: string,\n    patient: PatientData,\n    template: Template | null,\n    additionalContext?: string,\n    customTemplate?: { template: DoctorTemplate; doctorSettings: DoctorSettings }\n  ): Promise<ProcessedNote> {\n    logInfo('azureAI', 'Info message', {});\n    logDebug('azureAI', 'Debug message', {});\n    \n    // 🔍 TEMPLATE CONNECTION DEBUG\n    logDebug('azureAI', 'Debug message', {});\n    logDebug('azureAI', 'Debug message', {});\n    logDebug('azureAI', 'Debug message', {});\n    logDebug('azureAI', 'Debug message', {});\n    logDebug('azureAI', 'Debug message', {});\n    \n    if (customTemplate) {\n      logInfo('azureAI', 'Info message', {});\n      logDebug('azureAI', 'Debug message', {});\n      logDebug('azureAI', 'Debug message', {}); \n      logDebug('azureAI', 'Debug message', {});\n      logDebug('azureAI', 'Debug message', {});\n      \n      // Check for Tess template specifically\n      if (customTemplate.template.name?.toLowerCase().includes('tess')) {\n        logDebug('azureAI', 'Debug message', {});\n        logDebug('azureAI', 'Debug message', {});\n        Object.entries(customTemplate.template.sections).forEach(([key, section]) => {\n          if (section.aiInstructions) {\n              logDebug(\"azureAI\", \"Found section with AI instructions\");\n          }\n        });\n      }\n    } else if (template) {\n      logInfo('azureAI', 'Info message', {});\n      logDebug('azureAI', 'Debug message', {});\n      logDebug('azureAI', 'Debug message', {});\n        logDebug(\"azureAI\", \"Continuing with processing\");\n    } else {\n      logDebug('azureAI', 'Debug message', {});\n    }\n    \n    // Build enhanced template string with AI instructions\n    let templateString = 'Standard SOAP Note Format';\n    let prompt = '';\n    \n    if (customTemplate) {\n      // Use custom template with doctor's specific instructions\n      logDebug('azureAI', 'Debug message', {});\n      prompt = this.buildCustomPrompt(transcript, patient, customTemplate.template, customTemplate.doctorSettings, additionalContext);\n      templateString = customTemplate.template.name;\n      logInfo('azureAI', 'Info message', {});\n    } else if (template && template.sections) {\n      // Use standard template with AI instructions\n      logDebug('azureAI', 'Debug message', {});\n      prompt = this.buildPrompt(transcript, patient, template, additionalContext);\n      templateString = template.name || 'Template-based SOAP Note';\n      logInfo('azureAI', 'Info message', {});\n    } else {\n      // Default medical scribe prompt\n      logDebug('azureAI', 'Debug message', {});\n      prompt = this.buildPrompt(transcript, patient, null, additionalContext);\n      templateString = 'Standard Medical SOAP Note';\n      logInfo('azureAI', 'Info message', {});\n    }\n    \n    logInfo('azureAI', 'Info message', {});\n    logDebug('azureAI', 'Debug message', {});\n      logDebug(\"azureAI\", \"Processing enhanced template\");\n    logDebug('azureAI', 'Debug message', {});\n    \n    try {\n      // Process ALL templates (custom and standard) with Azure OpenAI using updated credentials\n      logDebug('azureAI', 'Debug message', {});\n      logInfo('azureAI', 'Info message', {});\n        logDebug(\"azureAI\", \"Using standard SOAP format\");\n      logDebug('azureAI', 'Debug message', {});\n      logDebug('azureAI', 'Debug message', {});\n      logInfo('azureAI', 'Info message', {});\n      \n      // Use the appropriate Azure OpenAI method based on template type\n      let azureResult;\n      if (customTemplate) {\n        // For custom templates, use the custom prompt with detailed instructions\n        logDebug('azureAI', 'Debug message', {});\n        azureResult = await azureOpenAIService.processTranscriptionWithCustomPrompt(\n          transcript,\n          prompt, // Use the detailed custom prompt we built\n          {\n            name: patient.fullName,\n            mrn: patient.mrn,\n            dob: patient.dateOfBirth\n          }\n        );\n      } else {\n        // For standard templates, use the standard method\n        logDebug('azureAI', 'Debug message', {});\n        azureResult = await azureOpenAIService.processTranscription(\n          transcript,\n          templateString,\n          {\n            name: patient.fullName,\n            mrn: patient.mrn,\n            dob: patient.dateOfBirth\n          }\n        );\n      }\n        \n        // Convert Azure OpenAI result to our ProcessedNote format\n        const processedNote: ProcessedNote = this.convertAzureToProcessedNote(azureResult, patient);\n        return this.enhanceWithOrderExtraction(processedNote, transcript);\n    } catch (azureError: any) {\n      logError('azureAI', 'Error message', {});\n      logDebug('azureAI', 'Debug message', {});\n      \n      // For now, disable Azure OpenAI fallback and use standard processing\n      logDebug('azureAI', 'Debug message', {});\n      logInfo('azureAI', 'Info message', {});\n      \n      throw azureError; // Re-throw to trigger fallback\n    }\n  }\n\n  /**\n   * Convert Azure OpenAI result to ProcessedNote format\n   */\n  private convertAzureToProcessedNote(azureResult: any, patient: PatientData): ProcessedNote {\n    return {\n      formatted: azureResult.formattedNote,\n      sections: {\n        chiefComplaint: azureResult.sections.chiefComplaint || '',\n        historyOfPresentIllness: azureResult.sections.hpi || azureResult.sections.historyOfPresentIllness || '',\n        reviewOfSystems: azureResult.sections.reviewOfSystems || azureResult.sections.ros || '',\n        pastMedicalHistory: azureResult.sections.pastMedicalHistory || '',\n        medications: azureResult.sections.medications || '',\n        allergies: azureResult.sections.allergies || '',\n        socialHistory: azureResult.sections.socialHistory || '',\n        familyHistory: azureResult.sections.familyHistory || '',\n        physicalExam: azureResult.sections.physicalExam || azureResult.sections.physicalExamination || '',\n        assessment: azureResult.sections.assessment || '',\n        plan: azureResult.sections.plan || ''\n      },\n      metadata: {\n        processedAt: new Date().toISOString(),\n        model: `Azure OpenAI ${azureResult.metadata?.model || 'GPT-4o'}`,\n        confidence: 0.95\n      }\n    };\n  }\n\n  /**\n   * Enhance ProcessedNote with order extraction\n   */\n  private enhanceWithOrderExtraction(processedNote: ProcessedNote, transcript: string): ProcessedNote {\n    logDebug('azureAI', 'Debug message', {});\n    const correctedTranscript = medicalCorrections.correctTranscription(transcript);\n    const extractedOrders = orderExtractionService.extractOrders(correctedTranscript);\n    \n    if (extractedOrders && (\n      extractedOrders.medications.length > 0 ||\n      extractedOrders.labs.length > 0 ||\n      extractedOrders.imaging.length > 0 ||\n      extractedOrders.priorAuths.length > 0 ||\n      extractedOrders.referrals.length > 0\n    )) {\n      const ordersAndActions = orderExtractionService.formatOrdersForTemplate(extractedOrders);\n      processedNote.sections.ordersAndActions = ordersAndActions;\n      processedNote.extractedOrders = extractedOrders;\n      processedNote.formatted += `\\n\\n**ORDERS & ACTIONS:**\\n${ordersAndActions}`;\n      logInfo('azureAI', 'Info message', {});\n    }\n\n    logInfo('azureAI', 'Info message', {});\n    logDebug('azureAI', 'Debug message', {});\n    logDebug('azureAI', 'Debug message', {});\n    \n    return this.validateAndCleanProcessedNote(processedNote, transcript);\n  }\n\n  /**\n   * Post-processing validation to remove duplicate content and ensure accuracy\n   */\n  private validateAndCleanProcessedNote(processedNote: ProcessedNote, originalTranscript: string): ProcessedNote {\n    logDebug('azureAI', 'Debug message', {});\n\n    // Check for transcript duplication in sections\n    const transcriptWords = originalTranscript.toLowerCase().split(/\\s+/);\n    const transcriptText = originalTranscript.toLowerCase();\n\n    // Clean each section\n    Object.keys(processedNote.sections).forEach(sectionKey => {\n      const section = processedNote.sections[sectionKey as keyof typeof processedNote.sections];\n      if (section && typeof section === 'string') {\n        const sectionLower = section.toLowerCase();\n\n        // Check if section contains large chunks of the original transcript (indicating duplication)\n        const overlapRatio = this.calculateTextOverlap(sectionLower, transcriptText);\n        if (overlapRatio > 0.8) {\n          logDebug('azureAI', 'Debug message', {});\n          // If section is mostly transcript duplication, mark as needing extraction\n          processedNote.sections[sectionKey as keyof typeof processedNote.sections] = \"See transcript for details\" as any;\n        }\n\n        // Remove obvious transcript artifacts\n        let cleanedSection = section\n          .replace(/45 year old female with pashmikos to attack 2 diabetes nausea vomiting comes in blood sugar 400.*?hemoglobin A1C 9/gi, '')\n          .replace(/this is the transcript\\./gi, '')\n          .replace(/^- START:.*$/gm, '') // Remove malformed order entries\n          .trim();\n\n        if (cleanedSection !== section) {\n          logDebug('azureAI', 'Debug message', {});\n          processedNote.sections[sectionKey as keyof typeof processedNote.sections] = cleanedSection as any;\n        }\n      }\n    });\n\n    // Validate that key numeric values from transcript are captured\n    this.validateNumericExtraction(processedNote, originalTranscript);\n\n    // Update formatted note to reflect cleaned sections\n    processedNote.formatted = this.rebuildFormattedNote(processedNote);\n\n    logInfo('azureAI', 'Info message', {});\n    return processedNote;\n  }\n\n  /**\n   * Calculate text overlap between two strings\n   */\n  private calculateTextOverlap(text1: string, text2: string): number {\n    const words1 = text1.split(/\\s+/);\n    const words2 = text2.split(/\\s+/);\n\n    if (words1.length === 0) return 0;\n\n    let matchingWords = 0;\n    words1.forEach(word => {\n      if (words2.includes(word) && word.length > 3) { // Only count meaningful words\n        matchingWords++;\n      }\n    });\n\n    return matchingWords / words1.length;\n  }\n\n  /**\n   * Validate that important numeric values are captured\n   */\n  private validateNumericExtraction(processedNote: ProcessedNote, transcript: string): void {\n    const numericPatterns = [\n      { pattern: /blood sugar (\\d+)/i, description: 'blood sugar' },\n      { pattern: /a1c (\\d+(?:\\.\\d+)?)/i, description: 'A1C' },\n      { pattern: /(\\d+) year old/i, description: 'age' },\n      { pattern: /lantus (\\d+) units/i, description: 'Lantus dosage' }\n    ];\n\n    numericPatterns.forEach(({ pattern, description }) => {\n      const match = transcript.match(pattern);\n      if (match) {\n        const value = match[1];\n        const noteText = processedNote.formatted.toLowerCase();\n        if (!noteText.includes(value)) {\n          logDebug('azureAI', 'Debug message', {});\n          // Add to assessment if critical values are missing\n          if (description === 'blood sugar' || description === 'A1C') {\n            if (processedNote.sections.assessment) {\n              processedNote.sections.assessment += `\\n- ${description}: ${value}`;\n            }\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Rebuild formatted note from cleaned sections\n   */\n  private rebuildFormattedNote(processedNote: ProcessedNote): string {\n    const date = new Date().toLocaleDateString();\n    const sections = processedNote.sections;\n\n    let formatted = `CLINICAL NOTE\n════════════════════════════════════════════════════════\nDate: ${date}\n════════════════════════════════════════════════════════\n\n`;\n\n    if (sections.chiefComplaint) formatted += `CHIEF COMPLAINT:\\n${sections.chiefComplaint}\\n\\n`;\n    if (sections.historyOfPresentIllness) formatted += `HISTORY OF PRESENT ILLNESS:\\n${sections.historyOfPresentIllness}\\n\\n`;\n    if (sections.reviewOfSystems) formatted += `REVIEW OF SYSTEMS:\\n${sections.reviewOfSystems}\\n\\n`;\n    if (sections.pastMedicalHistory) formatted += `PAST MEDICAL HISTORY:\\n${sections.pastMedicalHistory}\\n\\n`;\n    if (sections.medications) formatted += `MEDICATIONS:\\n${sections.medications}\\n\\n`;\n    if (sections.allergies) formatted += `ALLERGIES:\\n${sections.allergies}\\n\\n`;\n    if (sections.socialHistory) formatted += `SOCIAL HISTORY:\\n${sections.socialHistory}\\n\\n`;\n    if (sections.familyHistory) formatted += `FAMILY HISTORY:\\n${sections.familyHistory}\\n\\n`;\n    if (sections.physicalExam) formatted += `PHYSICAL EXAMINATION:\\n${sections.physicalExam}\\n\\n`;\n    if (sections.assessment) formatted += `ASSESSMENT:\\n${sections.assessment}\\n\\n`;\n    if (sections.plan) formatted += `PLAN:\\n${sections.plan}\\n\\n`;\n    if (sections.ordersAndActions) formatted += `ORDERS & ACTIONS:\\n${sections.ordersAndActions}\\n\\n`;\n\n    return formatted;\n  }\n\n  private buildCustomPrompt(\n    transcript: string,\n    patient: PatientData,\n    template: DoctorTemplate,\n    settings: DoctorSettings,\n    additionalContext?: string\n  ): string {\n    logDebug('azureAI', 'Debug message', {});\n    \n    // Build section instructions from doctor's custom template\n    const sectionPrompts: string[] = [];\n    \n    Object.entries(template.sections).forEach(([key, section]) => {\n      const format = section.format || 'paragraph';\n      const formatInstruction = format === 'bullets' ? 'Use bullet points.' :\n                               format === 'numbered' ? 'Use numbered list.' :\n                               'Use paragraph format.';\n      \n      sectionPrompts.push(`\n### ${section.title}\nInstructions: ${section.aiInstructions}\nFormat: ${formatInstruction}\n${section.keywords ? `Keywords to look for: ${section.keywords.join(', ')}` : ''}\n${section.exampleText ? `Example format: ${section.exampleText}` : ''}\n${section.required ? 'This section is REQUIRED.' : 'This section is optional.'}\n`);\n    });\n    \n    logInfo('azureAI', 'Info message', {});\n\n    // Get AI style preferences\n    const styleGuide = {\n      formal: 'Use formal medical terminology and third-person perspective.',\n      conversational: 'Use a natural, conversational tone while maintaining professionalism.',\n      concise: 'Be extremely concise and to the point. Avoid unnecessary detail.',\n      detailed: 'Include comprehensive details and thorough documentation.'\n    };\n\n    return `You are a medical scribe AI configured for Dr. ${patient.name || 'Unknown'}'s specific preferences.\n\nPATIENT INFORMATION:\n- Name: ${patient.name}\n- MRN: ${patient.mrn}\n- DOB: ${patient.dob || 'Not provided'}\n${additionalContext ? `\\nADDITIONAL CONTEXT:\\n${additionalContext}\\n` : ''}\n\nMEDICAL DICTATION:\n\"${transcript}\"\n\n${template.generalInstructions ? `\\nGENERAL INSTRUCTIONS FROM DOCTOR:\\n${template.generalInstructions}\\n` : ''}\n\nWRITING STYLE: ${styleGuide[settings.aiStyle]}\n\nSECTION-SPECIFIC INSTRUCTIONS:\nProcess the dictation into the following sections, following each section's specific instructions:\n\n${sectionPrompts.join('\\n')}\n\nOUTPUT REQUIREMENTS:\n1. Generate a well-formatted clinical note following the template structure\n2. Follow the specified format for each section (bullets, numbered, or paragraph)\n3. Use the specified writing style throughout\n4. Include all required sections; optional sections only if relevant information is present\n5. Extract ACTUAL information from the dictation - do not use placeholder text\n6. Maintain medical accuracy and appropriate terminology\n7. CRITICAL: Only extract information that is explicitly present in the dictation transcript\n8. Do NOT add information that is not stated in the dictation (no hallucinations)\n9. If specific numeric values are mentioned (blood sugar, A1C, age, etc.), include them exactly as stated\n10. If patient demographics are mentioned (age, gender), include them in the assessment\n11. If no relevant information exists for a section, write \"Not provided\" or \"See transcript\"\n\nPlease process the dictation now.`;\n  }\n\n  private buildPrompt(\n    transcript: string,\n    patient: PatientData,\n    template: Template | null,\n    additionalContext?: string\n  ): string {\n    // Check if we should use specialty templates\n    const currentDoctor = specialtyService.getCurrentDoctor();\n    if (currentDoctor && !template) {\n      // Use specialty-specific prompt\n      return specialtyService.formatAIPrompt(transcript, patient);\n    }\n    // If we have a custom template, create sections based on it\n    if (template && template.sections) {\n      // Build section instructions with the ACTUAL AI instructions from the template\n      const templateSections = Object.entries(template.sections).map(([key, section]) => {\n        if (typeof section === 'object' && section.title && section.aiInstructions) {\n          // Use the ACTUAL AI instructions from the template\n          return `\"${key}\": \"${section.aiInstructions.replace(/\"/g, '\\\\\"')}\"`;\n        } else if (typeof section === 'object' && section.title) {\n          return `\"${key}\": \"Extract information for ${section.title}\"`;\n        }\n        return `\"${key}\": \"Extract relevant information\"`;\n      }).join(',\\n    ');\n      \n      // Get general AI instructions if available\n      const generalInstructions = template.generalInstructions || '';\n      \n      return `You are a medical scribe. Create a professional medical note from this dictation.\n\nPATIENT: ${patient.name} (MRN: ${patient.mrn})\n\nDICTATION:\n\"${transcript}\"\n\nGenerate a JSON response with these sections:\n{\n  \"sections\": {\n    ${templateSections}\n  }\n}\n\nCRITICAL EXTRACTION RULES:\n1. Only extract information explicitly present in the dictation\n2. Do NOT add information not stated in the dictation (no hallucinations)\n3. Include exact numeric values mentioned (blood sugar, A1C, age, vital signs)\n4. Capture patient demographics if mentioned (age, gender)\n5. If no information exists for a section, write \"Not provided\"\n\nIMPORTANT: Only return the medical note content. Do not include any instructions, explanations, or meta-commentary in your response.`;\n    }\n    \n    // Check if this is a conversation transcript\n    const isConversation = transcript.includes('CONVERSATION TRANSCRIPT:') || \n                           transcript.includes('[DOCTOR]:') || \n                           transcript.includes('[PATIENT]:');\n    \n    // Get specialty role if available\n    const specialtyRole = currentDoctor ? \n      specialtyService.getAIPrompt().role : \n      'an ENDOCRINOLOGIST';\n    \n    // Default prompt - adjusted for conversation or dictation\n    const prompt = isConversation \n      ? `You are an experienced medical scribe working for ${specialtyRole}. Extract medical information from this doctor-patient conversation and create a structured SOAP note.\n\nCONVERSATION:\n\"${transcript}\"\n\nIMPORTANT: This is a conversation between a doctor and patient. Extract the medical information from their dialogue.`\n      : `You are an experienced medical scribe working for ${specialtyRole}. Convert this medical dictation into a structured SOAP note with special attention to ${currentDoctor ? specialtyService.getAIPrompt().specialty : 'endocrine conditions'}.\n\nDICTATION:\n\"${transcript}\"`;\n    \n    return prompt + (additionalContext ? `\\n\\nCONTEXT: ${additionalContext}` : '') + `\n\nCreate a medical note in JSON format:\n{\n  \"sections\": {\n    \"chiefComplaint\": \"[reason for visit]\",\n    \"historyOfPresentIllness\": \"[story of current illness]\",\n    \"reviewOfSystems\": \"[review of symptoms]\",\n    \"pastMedicalHistory\": \"[chronic conditions]\",\n    \"medications\": \"[current medications with doses]\",\n    \"allergies\": \"[drug allergies]\",\n    \"socialHistory\": \"[smoking, alcohol, drug use]\",\n    \"familyHistory\": \"[family medical history]\",\n    \"physicalExam\": \"[exam findings, vitals]\",\n    \"assessment\": \"[today's problems]\",\n    \"plan\": \"[treatment plan, medications, labs, follow-up]\",\n    \"patientSummary\": \"[2-3 sentence summary]\"\n  }\n}\n\nCRITICAL EXTRACTION RULES:\n1. Only extract information explicitly present in the dictation\n2. Do NOT hallucinate or add information not stated\n3. Include exact numeric values (blood sugar 400, A1C 9, age 45)\n4. Capture demographics if mentioned (45 year old female)\n5. If no information exists for a section, write \"Not provided\"\n\nIMPORTANT: Only return the medical note content. Do not include instructions or explanations in your response.`;\n  }\n\n  private parseResponse(\n    responseText: string,\n    patient: PatientData,\n    template: Template | null,\n    originalTranscript?: string\n  ): ProcessedNote {\n    try {\n      // Clean the response text to handle control characters\n      const cleanedResponse = responseText\n        .replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]/g, '') // Remove control characters\n        .replace(/\\r\\n/g, '\\n') // Normalize line endings\n        .replace(/\\r/g, '\\n')\n        .trim();\n      \n      // Extract orders from the original transcript (not just the AI response)\n      // This ensures we catch orders that might be in the source material\n      let extractedOrders: OrderExtractionResult | undefined;\n      if (originalTranscript) {\n        logDebug('azureAI', 'Debug message', {});\n        const correctedOriginalTranscript = medicalCorrections.correctTranscription(originalTranscript);\n        extractedOrders = orderExtractionService.extractOrders(correctedOriginalTranscript);\n        logInfo('azureAI', 'Info message', {});\n      }\n      \n      let parsed: any;\n      \n      // Check if response is JSON or markdown\n      if (cleanedResponse.startsWith('{') || cleanedResponse.startsWith('[')) {\n        // Try to parse JSON response\n        try {\n          parsed = JSON.parse(cleanedResponse);\n        } catch (jsonError) {\n          logError('azureAI', 'Error message', {});\n          // If JSON parsing fails, treat as markdown\n          return this.parseMarkdownResponse(cleanedResponse, patient);\n        }\n      } else {\n        // Response is markdown, not JSON\n        logDebug('azureAI', 'Debug message', {});\n        return this.parseMarkdownResponse(cleanedResponse, patient);\n      }\n      \n      // Format based on template type\n      let formatted: string;\n      logDebug('azureAI', 'Debug message', {});\n      logDebug('azureAI', 'Debug message', {});\n      logDebug('azureAI', 'Debug message', {});\n      logDebug('azureAI', 'Debug message', {}); \n      \n      if (template && template.sections && parsed.sections) {\n        logDebug('azureAI', 'Debug message', {});\n        // Format using custom template sections\n        formatted = this.formatCustomTemplate(parsed.sections, patient, template);\n      } else {\n        logDebug('azureAI', 'Debug message', {});\n        // Use default formatting\n        formatted = this.formatNote(parsed.sections, patient);\n      }\n      \n      // Add Orders & Actions section if we have extracted orders\n      let ordersAndActions = '';\n      if (extractedOrders && (\n        extractedOrders.medications.length > 0 ||\n        extractedOrders.labs.length > 0 ||\n        extractedOrders.imaging.length > 0 ||\n        extractedOrders.priorAuths.length > 0 ||\n        extractedOrders.referrals.length > 0\n      )) {\n        ordersAndActions = orderExtractionService.formatOrdersForTemplate(extractedOrders);\n        \n        // Add to formatted output\n        formatted += `\\n\\n**ORDERS & ACTIONS:**\\n${ordersAndActions}`;\n        \n        // Add to sections\n        parsed.sections.ordersAndActions = ordersAndActions;\n        \n        logInfo('azureAI', 'Info message', {});\n      }\n      \n      // Generate patient summary if we don't have one\n      let patientSummary = parsed.sections.patientSummary || '';\n      if (!patientSummary && originalTranscript) {\n        // Extract key points for a 2-3 sentence summary\n        const sentences = originalTranscript.split(/[.!?]+/).slice(0, 3);\n        patientSummary = sentences.join('. ').trim() + '.';\n        parsed.sections.patientSummary = patientSummary;\n      }\n      \n      return {\n        formatted,\n        sections: parsed.sections,\n        extractedOrders,\n        metadata: {\n          processedAt: new Date().toISOString(),\n          model: this.modelId.includes('claude-opus-4') ? 'claude-opus-4.1' :\n                 this.modelId.includes('claude-3-5-sonnet') ? 'claude-3.5-sonnet' : \n                 this.modelId.includes('claude-3-sonnet') ? 'claude-3-sonnet' : 'claude-3-haiku',\n          confidence: 0.95\n        }\n      };\n    } catch (error) {\n      logError('azureAI', 'Error message', {});\n      logDebug('azureAI', 'Debug message', {}); \n      \n      // Don't return a fallback - throw an error instead\n      // We don't want mediocre results\n      throw new Error('Failed to parse AI response. The AI may have returned an invalid format.');\n    }\n  }\n  \n  private parseMarkdownResponse(\n    markdownText: string,\n    patient: PatientData\n  ): ProcessedNote {\n    // For markdown responses, just use the text as-is\n    // since it's already formatted nicely by the AI\n    return {\n      patient,\n      sections: {\n        fullNote: markdownText\n      },\n      formatted: markdownText,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  private formatCustomTemplate(sections: any, patient: PatientData, template: Template): string {\n    const date = new Date().toLocaleDateString();\n    const time = new Date().toLocaleTimeString();\n    \n    // Format custom template\n    \n    let formatted = `CLINICAL NOTE - ${template.name}\n════════════════════════════════════════════════════════\nPatient: ${patient.name}\nMRN: ${patient.mrn}\nDate: ${date}\nTime: ${time}\n════════════════════════════════════════════════════════\n\n`;\n    \n    // Add sections based on template\n    Object.entries(template.sections).forEach(([key, section]) => {\n      if (typeof section === 'object' && section.title) {\n        const title = section.title;\n        const content = sections[key];\n        formatted += `\\n${title}:\\n`;\n        \n        if (content && content.trim() !== '' && content !== 'See transcript for details') {\n          formatted += `${content}\\n\\n`;\n        } else {\n          formatted += `[No relevant information extracted from dictation]\\n\\n`;\n        }\n      }\n    });\n    \n    return formatted;\n  }\n\n  private highlightEndocrineTerms(text: string): string {\n    // Don't highlight if text is empty or undefined\n    if (!text) return text;\n    \n    // Get specialty-specific terms if available, otherwise use default endocrine terms\n    const highlightTerms = specialtyService.getCurrentDoctor() ? \n      specialtyService.getHighlightTerms() : \n      [\n        // Diabetes terms\n        'diabetes', 'glucose', 'insulin', 'A1C', 'HbA1c', 'hypoglycemia', 'hyperglycemia',\n        'Lantus', 'Humalog', 'NovoLog', 'Metformin', 'Ozempic', 'Mounjaro', 'Jardiance',\n        'blood sugar', 'diabetic', 'DKA', 'ketoacidosis',\n        // Thyroid terms\n        'thyroid', 'hypothyroid', 'hyperthyroid', 'TSH', 'T3', 'T4', 'Levothyroxine',\n        'Synthroid', 'goiter', 'thyroiditis',\n        // Lipid terms\n        'cholesterol', 'triglycerides', 'HDL', 'LDL', 'hyperlipidemia', 'statin',\n        'Lipitor', 'Crestor', 'Simvastatin',\n        // Hormonal terms\n        'testosterone', 'estrogen', 'cortisol', 'PCOS', 'adrenal', 'pituitary'\n      ];\n    \n    let highlightedText = text;\n    highlightTerms.forEach(term => {\n      const regex = new RegExp(`\\\\b(${term}s?)\\\\b`, 'gi');\n      highlightedText = highlightedText.replace(regex, '**$1**');\n    });\n    \n    // Highlight numeric values with medical units\n    highlightedText = highlightedText.replace(/\\b(\\d+(?:\\.\\d+)?)\\s*(mg\\/dL|mg|mcg|units?|mL|%)/gi, '**$1 $2**');\n    \n    return highlightedText;\n  }\n\n  private formatNote(sections: any, patient: PatientData): string {\n    const specialty = specialtyService.getCurrentDoctor()?.specialty?.toUpperCase() || 'ENDOCRINOLOGY';\n    return `CLINICAL NOTE - ${specialty}\n====================\nPatient: ${patient.name}\nMRN: ${patient.mrn}\nDate: ${new Date().toLocaleDateString()}\nProvider: ${sections.provider || specialtyService.getCurrentDoctor()?.name || 'Dr. Rakesh Patel, MD'}\n\nCHIEF COMPLAINT:\n${this.highlightEndocrineTerms(sections.chiefComplaint || 'Not specified')}\n\nHISTORY OF PRESENT ILLNESS:\n${this.highlightEndocrineTerms(sections.historyOfPresentIllness || 'See transcript')}\n\nREVIEW OF SYSTEMS:\n${this.highlightEndocrineTerms(sections.reviewOfSystems || 'Negative except as noted in HPI')}\n\nPAST MEDICAL HISTORY:\n${this.highlightEndocrineTerms(sections.pastMedicalHistory || patient.diagnosis.join(', '))}\n\nMEDICATIONS:\n${this.highlightEndocrineTerms(sections.medications || patient.medications.map(m => `- ${m.name} ${m.dosage} - ${m.frequency}`).join('\\n'))}\n\nALLERGIES:\n${sections.allergies || 'NKDA'}\n\nSOCIAL HISTORY:\n${sections.socialHistory || ''}\n\nFAMILY HISTORY:\n${this.highlightEndocrineTerms(sections.familyHistory || '')}\n\nPHYSICAL EXAMINATION:\n${this.highlightEndocrineTerms(sections.physicalExam || 'Deferred')}\n\n${sections.diagnosticResults ? `DIAGNOSTIC RESULTS:\n${this.highlightEndocrineTerms(sections.diagnosticResults)}\n\n` : ''}ASSESSMENT:\n${this.highlightEndocrineTerms(sections.assessment || 'See HPI')}\n\nPLAN:\n${this.highlightEndocrineTerms(sections.plan || 'Continue current management')}\n\n====================\nGenerated by AWS Bedrock ${this.modelId.includes('3-5-sonnet') ? 'Claude 3.5 Sonnet' : 'Claude 3 Sonnet'} (HIPAA Compliant)\nProcessed: ${new Date().toLocaleString()}`;\n  }\n\n  /**\n   * Test if Bedrock is configured and accessible\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      const command = new InvokeModelCommand({\n        modelId: this.modelId,\n        contentType: 'application/json',\n        accept: 'application/json',\n        body: JSON.stringify({\n          anthropic_version: 'bedrock-2023-05-31',\n          max_tokens: 10,\n          messages: [\n            {\n              role: 'user',\n              content: 'Say \"ok\"'\n            }\n          ]\n        })\n      });\n      \n      await this.client.send(command);\n      return true;\n    } catch (error) {\n      logError('azureAI', 'Error message', {});\n      return false;\n    }\n  }\n\n  /**\n   * Generate a simple text response for pump chat\n   */\n  async generateResponse(context: string, instruction: string): Promise<string> {\n    // Implement retry logic with exponential backoff for throttling\n    let retryCount = 0;\n    const maxRetries = 5; // Increased from 3 to 5\n    const baseDelay = 3000; // Increased from 2 to 3 second initial delay\n    \n    while (retryCount < maxRetries) {\n      try {\n        const prompt = `${context}\\n\\n${instruction}`;\n        \n        const command = new InvokeModelCommand({\n          modelId: this.modelId,\n          contentType: 'application/json',\n          accept: 'application/json',\n          body: JSON.stringify({\n            anthropic_version: \"bedrock-2023-05-31\",\n            max_tokens: 2000, // Increased for detailed JSON responses\n            temperature: 0.7,\n            messages: [\n              {\n                role: \"user\",\n                content: prompt\n              }\n            ]\n          })\n        });\n\n        const response = await this.client.send(command);\n        const responseBody = new TextDecoder().decode(response.body);\n        const parsed = JSON.parse(responseBody);\n        \n        // Extract the text content from Claude's response\n        const content = parsed.content?.[0]?.text || 'I can help you choose the right pump. What matters most to you?';\n        \n        return content.trim();\n      } catch (error: any) {\n        logError('azureAI', 'Error message', {});\n        \n        // Check if it's a throttling error\n        if (error.name === 'ThrottlingException' || \n            error.name === 'TooManyRequestsException' ||\n            error.$metadata?.httpStatusCode === 429 ||\n            error.message?.includes('Too many requests')) {\n          retryCount++;\n          if (retryCount < maxRetries) {\n            const delay = baseDelay * Math.pow(2, retryCount - 1); // Exponential backoff\n            logDebug('azureAI', 'Debug message', {});\n            await new Promise(resolve => setTimeout(resolve, delay));\n            continue;\n          } else {\n            // Max retries exceeded, return fallback instead of throwing\n            logWarn('azureAI', 'Warning message', {});\n            return 'I understand your needs. Let me analyze this information to find your best pump match.';\n          }\n        }\n        \n        // For non-throttling errors, return a generic fallback\n        logError('azureAI', 'Error message', {});\n        return 'I\\'m analyzing your preferences to find the best pump for you. Let\\'s continue with the next category.';\n      }\n    }\n    \n    // If we exhausted all retries, return a helpful fallback\n    logWarn('azureAI', 'Warning message', {});\n    return 'I understand your needs. Let me analyze this information to find your best pump match.';\n  }\n\n  /**\n   * Process simple prompt with Claude (for PumpDrive and other services)\n   * HIPAA COMPLIANT - Covered by AWS BAA\n   */\n  async processWithClaude(prompt: string, context?: string): Promise<string> {\n    // Check if this is a conversational request (pump follow-up questions, etc.)\n    const isConversational = context === 'followup_question' ||\n                            context === 'pump_recommendation' ||\n                            context === 'clarifying_question' ||\n                            prompt.includes('Great question!') ||\n                            prompt.includes('friendly diabetes educator') ||\n                            prompt.includes('conversational, easy-to-understand way');\n\n    // MIGRATION PHASE 1: Azure OpenAI is PRIMARY for all processing\n    if (this.migrationMode || this.primaryProvider === 'azure') {\n      try {\n        logDebug('azureAI', 'Processing prompt with Azure OpenAI', { context, isConversational });\n\n        if (isConversational) {\n          // Use conversational processing for pump-related questions\n          const response = await azureOpenAIService.processConversationalPrompt(prompt);\n          logInfo('azureAI', 'Successfully processed conversational prompt via Azure OpenAI', {});\n          return response;\n        } else {\n          // Use medical transcription processing for SOAP notes\n          const azureResult = await azureOpenAIService.processTranscription(\n            prompt,\n            'Standard Response',\n            { name: 'System' }\n          );\n          logInfo('azureAI', 'Successfully processed medical transcription via Azure OpenAI', {});\n          return azureResult.formattedNote;\n        }\n      } catch (azureError) {\n        logWarn('azureAI', 'Azure OpenAI processing failed, falling back to AWS Bedrock', { error: azureError });\n        // Continue to AWS Bedrock fallback below\n      }\n    }\n\n    try {\n      logDebug('azureAI', 'Debug message', {});\n      \n      const command = new InvokeModelCommand({\n        modelId: this.modelId,\n        contentType: 'application/json',\n        accept: 'application/json',\n        body: JSON.stringify({\n          anthropic_version: 'bedrock-2023-05-31',\n          max_tokens: 3000,\n          temperature: 0.7,\n          messages: [\n            {\n              role: 'user',\n              content: prompt\n            }\n          ]\n        })\n      });\n\n      const response = await this.client.send(command);\n      const responseBody = JSON.parse(new TextDecoder().decode(response.body));\n      \n      return responseBody.content[0].text;\n    } catch (error) {\n      logError('azureAI', 'Error message', {});\n      \n      // Try Azure OpenAI as fallback when Bedrock fails\n      logWarn('azureAI', 'Warning message', {});\n      \n      try {\n        const azureResult = await azureOpenAIService.processTranscription(\n          prompt,\n          'Standard Response',\n          { name: 'System' }\n        );\n        logInfo('azureAI', 'Info message', {});\n        return azureResult.formattedNote;\n      } catch (azureError) {\n        logError('azureAI', 'Error message', {});\n        throw new Error('AI processing failed. Please try again later.');\n      }\n    }\n  }\n\n\n  /**\n   * Create a basic formatted note when Bedrock is not available\n   */\n  private createBasicFormattedNote(transcript: string, patient: PatientData): ProcessedNote {\n    const timestamp = new Date().toISOString();\n    \n    // Basic formatting - just clean up the transcript\n    const lines = transcript.split(/[.!?]+/).filter(line => line.trim());\n    const formatted = `\n**PATIENT INFORMATION:**\nName: ${patient.name || 'Not provided'}\nMRN: ${patient.mrn || 'Not provided'}\nDOB: ${patient.dob || 'Not provided'}\nVisit Date: ${new Date().toLocaleDateString()}\n\n**CLINICAL NOTE:**\n${lines.map(line => line.trim()).join('. ')}.\n\n**NOTE:** This is a basic transcription without AI processing. \nTo enable AI-powered medical note formatting:\n1. Go to https://console.aws.amazon.com/bedrock/\n2. Enable Claude models\n3. Try processing again\n\n---\n*Transcribed at ${new Date().toLocaleString()}*\n    `.trim();\n\n    return {\n      formatted,\n      sections: {\n        chiefComplaint: '',\n        historyOfPresentIllness: transcript,\n        assessment: '',\n        plan: ''\n      },\n      metadata: {\n        processedAt: timestamp,\n        model: 'basic-formatter',\n        confidence: 0.5\n      }\n    };\n  }\n}\n\n// Export singleton instance\nexport const azureAIService = new AzureAIService();\n\n/**\n * Migration from OpenAI to Bedrock:\n * \n * OLD:\n * import { openAIService } from './openai.service';\n * const result = await openAIService.processMedicalTranscription(...);\n * \n * NEW:\n * import { bedrockService } from './bedrock.service';\n * const result = await bedrockService.processMedicalTranscription(...);\n */"],"names":["hostHeaderMiddleware","options","next","args","HttpRequest","request","handlerProtocol","host","hostHeaderMiddlewareOptions","getHostHeaderPlugin","clientStack","loggerMiddleware","context","response","clientName","commandName","logger","dynamoDbDocumentClientOptions","overrideInputFilterSensitiveLog","overrideOutputFilterSensitiveLog","inputFilterSensitiveLog","outputFilterSensitiveLog","$metadata","outputWithoutMetadata","error","loggerMiddlewareOptions","getLoggerPlugin","recursionDetectionMiddlewareOptions","recursionDetectionMiddleware","getRecursionDetectionPlugin","HttpBearerAuthSigner","httpRequest","identity","signingProperties","clonedRequest","DEFAULT_UA_APP_ID","isValidUserAgentAppId","appId","resolveUserAgentConfig","input","normalizedAppIdProvider","normalizeProvider","customUserAgent","isVirtualHostableS3Bucket","value","allowSubDomains","label","isValidHostLabel","isIpAddress","ARN_DELIMITER","RESOURCE_DELIMITER","parseArn","segments","arn","partition","service","region","accountId","resourcePath","resourceId","resource","selectedPartitionsInfo","partitionsInfo","partitions","regions","outputs","regionData","regionRegex","DEFAULT_PARTITION","awsEndpointFunctions","customEndpointFunctions","setCredentialFeature","credentials","feature","setFeature","getDateHeader","HttpResponse","getSkewCorrectedDate","systemClockOffset","isClockSkewed","clockTime","getUpdatedSystemClockOffset","currentSystemClockOffset","clockTimeInMs","throwSigningPropertyError","name","property","validateSigningProperties","config","authScheme","signer","signingRegion","signingRegionSet","signingName","AwsSdkSigV4Signer","validatedProps","handlerExecutionContext","first","second","serverTime","initialSystemClockOffset","httpResponse","dateHeader","resolveAwsSdkSigV4Config","inputCredentials","isUserSupplied","resolvedCredentials","memoizedProvider","normalizeCredentialProvider","boundProvider","bindCallerConfig","creds","signingEscapePath","sha256","regionInfo","signingService","params","SignerCtor","SignatureV4","credentialDefaultProvider","credentialsProvider","memoizeIdentityProvider","isIdentityExpired","doesIdentityRequireRefresh","fn","SENSITIVE_STRING","collectBodyString","streamBody","collectBody","body","toUtf8","parseJsonBody","encoded","e","parseJsonErrorBody","errorBody","loadRestJsonErrorCode","output","data","findKey","object","key","k","sanitizeErrorCode","rawValue","cleanValue","headerKey","codeKey","ACCOUNT_ID_ENDPOINT_REGEX","checkFeatures","retryStrategy","endpointV2","USER_AGENT","X_AMZ_USER_AGENT","SPACE","UA_NAME_SEPARATOR","UA_NAME_ESCAPE_REGEX","UA_VALUE_ESCAPE_REGEX","UA_ESCAPE_CHAR","BYTE_LIMIT","encodeFeatures","features","buffer","val","userAgentMiddleware","headers","userAgent","escapeUserAgent","defaultUserAgent","awsContext","sdkUserAgentValue","normalUAValue","section","userAgentPair","part","version","prefixSeparatorIndex","prefix","uaName","item","acc","index","getUserAgentMiddlewareOptions","getUserAgentPlugin","getEventSigningTransformStream","initialSignature","messageSigner","eventStreamCodec","systemClockOffsetProvider","priorSignature","transformer","chunk","controller","now","signedMessage","serializedSigned","fromHex","EventStreamPayloadHandler","EventStreamCodec","payload","query","placeHolderStream","result","signingStream","eventStreamPayloadHandlerProvider","defaultBedrockRuntimeHttpAuthSchemeParametersProvider","getSmithyContext","createAwsAuthSigv4HttpAuthOption","authParameters","createSmithyApiHttpBearerAuthHttpAuthOption","profile","filepath","configFilepath","ignoreCache","defaultBedrockRuntimeHttpAuthSchemeProvider","resolveHttpAuthSchemeConfig","token","config_0","resolveClientEndpointParameters","commonParams","createDefaultUserAgentProvider","serviceId","clientVersion","parsedUA","bowser","sections","s","t","u","v","a","b","c","d","f","g","h","i","j","l","m","n","o","p","q","r","_data","ruleSet","cache","EndpointCache","defaultEndpointResolver","endpointParams","resolveEndpoint","getRuntimeConfig","fromBase64","toBase64","ipc","NoOpLogger","parseUrl","fromUtf8","defaultsMode","resolveDefaultsModeConfig","defaultConfigProvider","loadConfigsForDefaultMode","clientSharedValues","getSharedRuntimeConfig","calculateBodyLength","_","packageInfo","eventStreamSerdeProvider","DEFAULT_MAX_ATTEMPTS","invalidProvider","WebSocketRequestHandler","HttpRequestHandler","DEFAULT_RETRY_MODE","Sha256","streamCollector","DEFAULT_USE_DUALSTACK_ENDPOINT","DEFAULT_USE_FIPS_ENDPOINT","getAwsRegionExtensionConfiguration","runtimeConfig","resolveAwsRegionExtensionConfiguration","awsRegionExtensionConfiguration","getHttpAuthExtensionConfiguration","_httpAuthSchemes","_httpAuthSchemeProvider","_credentials","_token","httpAuthScheme","scheme","httpAuthSchemeProvider","resolveHttpAuthRuntimeConfig","resolveRuntimeExtensions","extensions","extensionConfiguration","getDefaultExtensionConfiguration","getHttpHandlerExtensionConfiguration","extension","resolveDefaultRuntimeConfig","resolveHttpHandlerRuntimeConfig","BedrockRuntimeClient","__Client","configuration","_config_0","__getRuntimeConfig","_config_1","_config_2","_config_3","resolveRetryConfig","_config_4","resolveRegionConfig","_config_5","_config_6","resolveEndpointConfig","_config_7","resolveEventStreamSerdeConfig","_config_8","_config_9","resolveEventStreamConfig","_config_10","resolveWebSocketConfig","_config_11","getRetryPlugin","getContentLengthPlugin","getHttpAuthSchemeEndpointRuleSetPlugin","DefaultIdentityProviderConfig","getHttpSigningPlugin","BedrockRuntimeServiceException","__ServiceException","AccessDeniedException","__BaseException","opts","AsyncInvokeOutputDataConfig","visitor","InternalServerException","ThrottlingException","ValidationException","ConflictException","ResourceNotFoundException","ServiceQuotaExceededException","ServiceUnavailableException","GuardrailImageSource","GuardrailContentBlock","GuardrailAutomatedReasoningFinding","CitationLocation","CitationSourceContent","CitationGeneratedContent","DocumentContentBlock","DocumentSource","GuardrailConverseImageSource","GuardrailConverseContentBlock","ImageSource","ReasoningContentBlock","VideoSource","ToolResultContentBlock","ContentBlock","PromptVariableValues","SystemContentBlock","ToolChoice","ToolInputSchema","Tool","ConverseOutput","ModelErrorException","ModelNotReadyException","ModelTimeoutException","ReasoningContentBlockDelta","ContentBlockDelta","ContentBlockStart","ModelStreamErrorException","ConverseStreamOutput","InvokeModelWithBidirectionalStreamInput","InvokeModelWithBidirectionalStreamOutput","ResponseStream","CountTokensInput","InvokeModelRequestFilterSensitiveLog","obj","InvokeModelResponseFilterSensitiveLog","se_InvokeModelCommand","rb","map","isSerializableHeaderValue","_ct","_cT","_a","_xabt","_t","_xabg","_gI","_xabg_","_gV","_xabpl","_pCL","de_InvokeModelCommand","de_CommandError","contents","deserializeMetadata","parsedOutput","parseErrorBody","errorCode","de_AccessDeniedExceptionRes","de_InternalServerExceptionRes","de_ResourceNotFoundExceptionRes","de_ServiceQuotaExceededExceptionRes","de_ServiceUnavailableExceptionRes","de_ThrottlingExceptionRes","de_ValidationExceptionRes","de_ModelErrorExceptionRes","de_ModelNotReadyExceptionRes","de_ModelTimeoutExceptionRes","de_ModelStreamErrorExceptionRes","de_ConflictExceptionRes","parsedBody","throwDefaultError","withBaseException","doc","take","__expectString","exception","__decorateServiceException","__expectInt32","InvokeModelCommand","$Command","Command","cs","getSerdePlugin","getEndpointPlugin","OrderExtractionService","text","sentences","sentence","lowerSentence","medicationOrder","labOrder","actionKeywords","splitText","splitPositions","keyword","regex","match","splitSentences","lastPos","pos","action","keywords","med","hasLabOrder","isOnlyLabValue","orderWord","isDemographic","urgency","lowerText","orders","lab","img","auth","ref","ordersText","lines","currentType","line","trimmedLine","orderText","actionMatch","existing","extracted","merged","newOrder","order","orderExtractionService","AzureOpenAIService","logDebug","logError","transcription","patientData","template","patientContext","templateInstructions","prompt","customPrompt","startTime","url","formattedNote","systemPrompt","userPrompt","note","sectionHeaders","currentSection","currentContent","lowerLine","foundSection","header","errorText","processingTime","logInfo","maxRetries","initialDelay","lastError","attempt","delay","resolve","rateLimitError","apiError","azureOpenAIService","AzureAIService","logWarn","transcript","patient","additionalContext","customTemplate","azureResult","command","retryCount","baseDelay","jitter","fallbackModels","nextModelId","fallbackCommand","fallbackError","responseBody","parsedNote","templateString","convertedNote","basicNote","correctedTranscript","medicalCorrections","extractedOrders","ordersAndActions","processedNote","azureError","originalTranscript","transcriptText","sectionKey","sectionLower","cleanedSection","text1","text2","words1","words2","matchingWords","word","pattern","description","date","formatted","settings","sectionPrompts","format","formatInstruction","styleGuide","currentDoctor","specialtyService","templateSections","isConversation","specialtyRole","responseText","cleanedResponse","correctedOriginalTranscript","parsed","patientSummary","markdownText","time","title","content","highlightTerms","highlightedText","term","instruction","isConversational","timestamp","azureAIService"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]}