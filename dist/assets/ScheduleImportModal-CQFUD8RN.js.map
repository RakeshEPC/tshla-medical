{"version":3,"file":"ScheduleImportModal-CQFUD8RN.js","sources":["../../src/services/chart.service.ts","../../src/services/audit.service.ts","../../src/services/simpleAppointment.service.ts","../../src/lib/db/client.browser.ts","../../src/services/appointment.service.ts","../../src/services/aiScheduleParser.service.ts","../../src/services/scheduleImport.service.ts","../../src/components/ScheduleImportModal.tsx"],"sourcesContent":["/**\n * Chart Service - Manages patient charts with dual ID system\n * AVA ID: For patient portal (cross-clinic)\n * TSH ID: For EMR/doctor use (clinic-specific)\n */\n\nimport type {\n  Chart,\n  CreateChartRequest,\n  CreateChartResponse\n} from '../types/clinic.types';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nclass ChartService {\n  private readonly STORAGE_PREFIX = 'tshla_chart_';\n  \n  /**\n   * Generate TSH ID in format TSH-###-###\n   * For EMR/clinic use\n   */\n  private generateTshId(): string {\n    let tshId: string;\n    \n    do {\n      const firstPart = Math.floor(Math.random() * 900 + 100); // 100-999\n      const secondPart = Math.floor(Math.random() * 900 + 100); // 100-999\n      tshId = `TSH-${firstPart}-${secondPart}`;\n    } while (this.tshIdExists(tshId));\n    \n    return tshId;\n  }\n  \n  /**\n   * Generate AVA ID in format AVA-###-###\n   * For patient portal use\n   */\n  private generateAvaId(): string {\n    let avaId: string;\n    \n    do {\n      const firstPart = Math.floor(Math.random() * 900 + 100); // 100-999\n      const secondPart = Math.floor(Math.random() * 900 + 100); // 100-999\n      avaId = `AVA-${firstPart}-${secondPart}`;\n    } while (this.avaIdExists(avaId));\n    \n    return avaId;\n  }\n  \n  /**\n   * Check if TSH ID already exists\n   */\n  private tshIdExists(tshId: string): boolean {\n    const allCharts = this.getAllCharts();\n    return allCharts.some(c => c.tshId === tshId);\n  }\n  \n  /**\n   * Check if AVA ID already exists\n   */\n  private avaIdExists(avaId: string): boolean {\n    const allCharts = this.getAllCharts();\n    return allCharts.some(c => c.avaId === avaId);\n  }\n  \n  /**\n   * Get all charts from storage\n   */\n  private getAllCharts(): Chart[] {\n    const charts: Chart[] = [];\n    \n    if (typeof window === 'undefined') return charts;\n    \n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key?.startsWith(this.STORAGE_PREFIX)) {\n        const chartData = localStorage.getItem(key);\n        if (chartData) {\n          try {\n            charts.push(JSON.parse(chartData));\n          } catch (e) {\n            logError('chart', 'Error message', {});\n          }\n        }\n      }\n    }\n    \n    return charts;\n  }\n  \n  /**\n   * Save chart to storage\n   */\n  private saveChart(chart: Chart): void {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem(\n        `${this.STORAGE_PREFIX}${chart.id}`,\n        JSON.stringify(chart)\n      );\n    }\n  }\n  \n  /**\n   * Create a new chart with both AVA and TSH IDs\n   */\n  async createChart(request: CreateChartRequest): Promise<CreateChartResponse> {\n    // Generate unique IDs\n    const avaId = this.generateAvaId();\n    const tshId = this.generateTshId();\n    const chartId = `chart-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n    \n    // Get current user info\n    const userData = localStorage.getItem('user_data');\n    const currentUser = userData ? JSON.parse(userData) : { email: 'system' };\n    \n    // Create chart object\n    const chart: Chart = {\n      id: chartId,\n      patientId: request.patientId,\n      avaId,\n      tshId,\n      clinicId: request.clinicId,\n      oldNotes: request.oldNotes,\n      createdBy: currentUser.email,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    \n    // Save to storage\n    this.saveChart(chart);\n    \n    // Log the creation (will be picked up by audit service)\n    logDebug('chart', 'Debug message', {});\n    \n    return {\n      chart,\n      avaId,\n      tshId\n    };\n  }\n  \n  /**\n   * Get chart by ID\n   */\n  async getChartById(chartId: string): Promise<Chart | null> {\n    if (typeof window === 'undefined') return null;\n    \n    const chartData = localStorage.getItem(`${this.STORAGE_PREFIX}${chartId}`);\n    if (!chartData) return null;\n    \n    try {\n      return JSON.parse(chartData);\n    } catch (e) {\n      logError('chart', 'Error message', {});\n      return null;\n    }\n  }\n  \n  /**\n   * Get chart by AVA ID\n   */\n  async getChartByAvaId(avaId: string): Promise<Chart | null> {\n    const allCharts = this.getAllCharts();\n    return allCharts.find(c => c.avaId === avaId) || null;\n  }\n  \n  /**\n   * Get chart by TSH ID\n   */\n  async getChartByTshId(tshId: string): Promise<Chart | null> {\n    const allCharts = this.getAllCharts();\n    return allCharts.find(c => c.tshId === tshId) || null;\n  }\n  \n  /**\n   * Get all charts for a patient\n   */\n  async getChartsByPatientId(patientId: string): Promise<Chart[]> {\n    const allCharts = this.getAllCharts();\n    return allCharts.filter(c => c.patientId === patientId);\n  }\n  \n  /**\n   * Update chart (e.g., add old notes)\n   */\n  async updateChart(chartId: string, updates: Partial<Chart>): Promise<Chart | null> {\n    const chart = await this.getChartById(chartId);\n    if (!chart) return null;\n    \n    const updatedChart: Chart = {\n      ...chart,\n      ...updates,\n      updatedAt: new Date()\n    };\n    \n    this.saveChart(updatedChart);\n    \n    logDebug('chart', 'Debug message', {});\n    \n    return updatedChart;\n  }\n  \n  /**\n   * Add old notes to a chart\n   */\n  async addOldNotes(chartId: string, oldNotes: string): Promise<Chart | null> {\n    const chart = await this.getChartById(chartId);\n    if (!chart) return null;\n    \n    const existingNotes = chart.oldNotes || '';\n    const separator = existingNotes ? '\\n\\n---\\n\\n' : '';\n    \n    return this.updateChart(chartId, {\n      oldNotes: existingNotes + separator + oldNotes\n    });\n  }\n  \n  /**\n   * Search charts by AVA or TSH ID\n   */\n  async searchCharts(query: string): Promise<Chart[]> {\n    const allCharts = this.getAllCharts();\n    const queryLower = query.toLowerCase();\n    \n    return allCharts.filter(chart => \n      chart.avaId.toLowerCase().includes(queryLower) ||\n      chart.tshId.toLowerCase().includes(queryLower)\n    );\n  }\n  \n  /**\n   * Get charts by clinic ID\n   */\n  async getChartsByClinicId(clinicId: string): Promise<Chart[]> {\n    const allCharts = this.getAllCharts();\n    return allCharts.filter(c => c.clinicId === clinicId);\n  }\n  \n  /**\n   * Validate chart ownership (for multi-clinic support)\n   */\n  async validateChartAccess(chartId: string, clinicId: string): Promise<boolean> {\n    const chart = await this.getChartById(chartId);\n    if (!chart) return false;\n    \n    // If no clinic ID set, allow access (backward compatibility)\n    if (!chart.clinicId) return true;\n    \n    return chart.clinicId === clinicId;\n  }\n}\n\n// Export singleton instance\nexport const chartService = new ChartService();\n\n// Also export for backward compatibility\nexport default chartService;","/**\n * Audit Service - Tracks all system actions for HIPAA compliance\n * Logs user actions, data changes, and access patterns\n */\n\nimport type { AuditLog, AuditAction } from '../types/clinic.types';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\ninterface AuditContext {\n  userId?: string;\n  userName?: string;\n  userRole?: string;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\nclass AuditService {\n  private readonly STORAGE_PREFIX = 'tshla_audit_';\n  private readonly MAX_LOGS = 10000; // Maximum logs to keep in localStorage\n  private context: AuditContext = {};\n\n  constructor() {\n    // Initialize context from current session\n    this.initializeContext();\n  }\n\n  /**\n   * Initialize audit context from current session\n   */\n  private initializeContext(): void {\n    if (typeof window === 'undefined') return;\n\n    // Get user info from session\n    const userData = localStorage.getItem('user_data');\n    if (userData) {\n      try {\n        const user = JSON.parse(userData);\n        this.context.userId = user.id || user.email;\n        this.context.userName = user.name;\n        this.context.userRole = user.role;\n      } catch (e) {\n        logError('audit', 'Error message', {});\n      }\n    }\n\n    // Get browser info\n    if (typeof navigator !== 'undefined') {\n      this.context.userAgent = navigator.userAgent;\n    }\n  }\n\n  /**\n   * Update audit context (e.g., after login)\n   */\n  updateContext(context: Partial<AuditContext>): void {\n    this.context = { ...this.context, ...context };\n  }\n\n  /**\n   * Log an audit event\n   */\n  async log(\n    action: AuditAction,\n    entityType: AuditLog['entityType'],\n    entityId?: string,\n    details?: Record<string, any>,\n    changes?: AuditLog['changes']\n  ): Promise<void> {\n    const auditLog: AuditLog = {\n      id: this.generateId(),\n      actorId: this.context.userId || 'anonymous',\n      actorName: this.context.userName,\n      actorRole: this.context.userRole,\n      action,\n      entityType,\n      entityId,\n      entityDetails: details,\n      changes,\n      ipAddress: this.context.ipAddress,\n      userAgent: this.context.userAgent,\n      createdAt: new Date(),\n    };\n\n    // Save to storage\n    this.saveLog(auditLog);\n\n    // Also log to console in development\n    if (import.meta.env.DEV) {\n      logDebug('audit', 'Debug message', {});\n    }\n\n    // Clean up old logs if needed\n    this.cleanupOldLogs();\n  }\n\n  /**\n   * Log a create action\n   */\n  async logCreate(\n    entityType: AuditLog['entityType'],\n    entityId: string,\n    entityData: Record<string, any>\n  ): Promise<void> {\n    await this.log('create', entityType, entityId, entityData);\n  }\n\n  /**\n   * Log an update action\n   */\n  async logUpdate(\n    entityType: AuditLog['entityType'],\n    entityId: string,\n    before: Record<string, any>,\n    after: Record<string, any>\n  ): Promise<void> {\n    // Calculate what changed\n    const changes = this.calculateChanges(before, after);\n\n    await this.log(\n      'update',\n      entityType,\n      entityId,\n      { updated: Object.keys(changes) },\n      {\n        before: changes.before,\n        after: changes.after,\n      }\n    );\n  }\n\n  /**\n   * Log a delete action\n   */\n  async logDelete(\n    entityType: AuditLog['entityType'],\n    entityId: string,\n    entityData?: Record<string, any>\n  ): Promise<void> {\n    await this.log('delete', entityType, entityId, entityData);\n  }\n\n  /**\n   * Log a view/access action\n   */\n  async logView(\n    entityType: AuditLog['entityType'],\n    entityId: string,\n    details?: Record<string, any>\n  ): Promise<void> {\n    await this.log('view', entityType, entityId, details);\n  }\n\n  /**\n   * Log a login action\n   */\n  async logLogin(userId: string, userName?: string, role?: string): Promise<void> {\n    // Update context with new user info\n    this.updateContext({\n      userId,\n      userName,\n      userRole: role,\n    });\n\n    await this.log('login', 'patient', userId, {\n      userName,\n      role,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Log a logout action\n   */\n  async logLogout(): Promise<void> {\n    const userId = this.context.userId;\n\n    await this.log('logout', 'patient', userId, {\n      timestamp: new Date().toISOString(),\n    });\n\n    // Clear context\n    this.context = {};\n  }\n\n  /**\n   * Log note signing\n   */\n  async logNoteSigned(noteId: string, patientId: string): Promise<void> {\n    await this.log('sign', 'note', noteId, {\n      patientId,\n      signedBy: this.context.userId,\n      signedAt: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Log action item processing\n   */\n  async logActionItemProcessed(\n    itemId: string,\n    itemType: 'medication' | 'lab',\n    action: string,\n    patientId: string\n  ): Promise<void> {\n    await this.log('process', 'action_item', itemId, {\n      itemType,\n      action,\n      patientId,\n      processedBy: this.context.userId,\n      processedAt: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Get audit logs with filtering\n   */\n  async getAuditLogs(filters?: {\n    actorId?: string;\n    entityType?: AuditLog['entityType'];\n    entityId?: string;\n    action?: AuditAction;\n    startDate?: Date;\n    endDate?: Date;\n    limit?: number;\n  }): Promise<AuditLog[]> {\n    const allLogs = this.getAllLogs();\n\n    let filtered = allLogs;\n\n    // Apply filters\n    if (filters) {\n      if (filters.actorId) {\n        filtered = filtered.filter(log => log.actorId === filters.actorId);\n      }\n      if (filters.entityType) {\n        filtered = filtered.filter(log => log.entityType === filters.entityType);\n      }\n      if (filters.entityId) {\n        filtered = filtered.filter(log => log.entityId === filters.entityId);\n      }\n      if (filters.action) {\n        filtered = filtered.filter(log => log.action === filters.action);\n      }\n      if (filters.startDate) {\n        filtered = filtered.filter(log => new Date(log.createdAt) >= filters.startDate!);\n      }\n      if (filters.endDate) {\n        filtered = filtered.filter(log => new Date(log.createdAt) <= filters.endDate!);\n      }\n    }\n\n    // Sort by date (newest first)\n    filtered.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n\n    // Apply limit\n    if (filters?.limit) {\n      filtered = filtered.slice(0, filters.limit);\n    }\n\n    return filtered;\n  }\n\n  /**\n   * Get audit logs for a specific entity\n   */\n  async getEntityAuditTrail(\n    entityType: AuditLog['entityType'],\n    entityId: string\n  ): Promise<AuditLog[]> {\n    return this.getAuditLogs({\n      entityType,\n      entityId,\n    });\n  }\n\n  /**\n   * Get audit logs for a specific user\n   */\n  async getUserAuditTrail(userId: string): Promise<AuditLog[]> {\n    return this.getAuditLogs({\n      actorId: userId,\n    });\n  }\n\n  /**\n   * Generate unique ID for audit log\n   */\n  private generateId(): number {\n    return Date.now() + Math.floor(Math.random() * 1000);\n  }\n\n  /**\n   * Save log to storage\n   */\n  private saveLog(log: AuditLog): void {\n    if (typeof window === 'undefined') return;\n\n    const key = `${this.STORAGE_PREFIX}${log.id}`;\n    localStorage.setItem(key, JSON.stringify(log));\n  }\n\n  /**\n   * Get all logs from storage\n   */\n  private getAllLogs(): AuditLog[] {\n    const logs: AuditLog[] = [];\n\n    if (typeof window === 'undefined') return logs;\n\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key?.startsWith(this.STORAGE_PREFIX)) {\n        const logData = localStorage.getItem(key);\n        if (logData) {\n          try {\n            logs.push(JSON.parse(logData));\n          } catch (e) {\n            logError('audit', 'Error message', {});\n          }\n        }\n      }\n    }\n\n    return logs;\n  }\n\n  /**\n   * Clean up old logs to prevent storage overflow\n   */\n  private cleanupOldLogs(): void {\n    const logs = this.getAllLogs();\n\n    if (logs.length > this.MAX_LOGS) {\n      // Sort by date (oldest first)\n      logs.sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n\n      // Remove oldest logs\n      const toRemove = logs.slice(0, logs.length - this.MAX_LOGS);\n\n      for (const log of toRemove) {\n        const key = `${this.STORAGE_PREFIX}${log.id}`;\n        localStorage.removeItem(key);\n      }\n\n      logDebug('audit', 'Debug message', {});\n    }\n  }\n\n  /**\n   * Calculate changes between two objects\n   */\n  private calculateChanges(\n    before: Record<string, any>,\n    after: Record<string, any>\n  ): {\n    before: Record<string, any>;\n    after: Record<string, any>;\n  } {\n    const changes = {\n      before: {} as Record<string, any>,\n      after: {} as Record<string, any>,\n    };\n\n    // Find changed fields\n    const allKeys = new Set([...Object.keys(before), ...Object.keys(after)]);\n\n    for (const key of allKeys) {\n      const beforeValue = before[key];\n      const afterValue = after[key];\n\n      if (JSON.stringify(beforeValue) !== JSON.stringify(afterValue)) {\n        changes.before[key] = beforeValue;\n        changes.after[key] = afterValue;\n      }\n    }\n\n    return changes;\n  }\n\n  /**\n   * Export audit logs (for compliance reporting)\n   */\n  async exportAuditLogs(filters?: Parameters<typeof this.getAuditLogs>[0]): Promise<string> {\n    const logs = await this.getAuditLogs(filters);\n\n    // Convert to CSV format\n    const headers = [\n      'Timestamp',\n      'Actor ID',\n      'Actor Name',\n      'Actor Role',\n      'Action',\n      'Entity Type',\n      'Entity ID',\n      'Details',\n    ];\n\n    const rows = logs.map(log => [\n      new Date(log.createdAt).toISOString(),\n      log.actorId,\n      log.actorName || '',\n      log.actorRole || '',\n      log.action,\n      log.entityType,\n      log.entityId || '',\n      JSON.stringify(log.entityDetails || {}),\n    ]);\n\n    const csv = [\n      headers.join(','),\n      ...rows.map(row => row.map(cell => `\"${cell}\"`).join(',')),\n    ].join('\\n');\n\n    return csv;\n  }\n}\n\n// Export singleton instance\nexport const auditService = new AuditService();\n\n// Also export for backward compatibility\nexport default auditService;\n","/**\n * Simple Appointment Service\n * Manages appointments in memory with localStorage persistence\n * Syncs with patient charts\n */\n\nimport { chartService } from './chart.service';\nimport { auditService } from './audit.service';\nimport type { Chart } from '../types/clinic.types';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface SimpleAppointment {\n  id: string;\n  patientId: string;\n  patientName: string;\n  patientPhone?: string;\n  patientEmail?: string;\n  chartId?: string;\n  doctorId: string;\n  doctorName: string;\n  date: string; // YYYY-MM-DD\n  time: string; // \"9:00 AM\"\n  duration: number; // minutes\n  status: 'scheduled' | 'completed' | 'cancelled' | 'no-show';\n  visitType: 'new-patient' | 'follow-up' | 'urgent' | 'procedure' | 'lab-review';\n  visitReason: string;\n  notes?: string;\n  createdAt: Date;\n}\n\nclass SimpleAppointmentService {\n  private appointments: SimpleAppointment[] = [];\n\n  constructor() {\n    this.loadAppointments();\n    if (this.appointments.length === 0) {\n      this.initializeSampleData();\n    }\n  }\n\n  /**\n   * Initialize with sample appointments and charts for this week\n   */\n  private async initializeSampleData() {\n    const today = new Date();\n    const weekDates = this.getWeekDates(today);\n\n    // Sample patients distributed across real doctors\n    const patients = [\n      { id: 'p001', name: 'John Smith', phone: '555-0101', email: 'john@email.com' },\n      { id: 'p002', name: 'Sarah Johnson', phone: '555-0102', email: 'sarah@email.com' },\n      { id: 'p003', name: 'Michael Brown', phone: '555-0103' },\n      { id: 'p004', name: 'Emily Davis', phone: '555-0104', email: 'emily@email.com' },\n      { id: 'p005', name: 'Robert Wilson', phone: '555-0105' },\n      { id: 'p006', name: 'Lisa Anderson', phone: '555-0106' },\n      { id: 'p007', name: 'David Martinez', phone: '555-0107' },\n      { id: 'p008', name: 'Jennifer Taylor', email: 'jen@email.com' },\n      { id: 'p009', name: 'Christopher Lee', phone: '555-0109' },\n      { id: 'p010', name: 'Amanda White', phone: '555-0110' },\n      { id: 'p011', name: 'Thomas Garcia', phone: '555-0111' },\n      { id: 'p012', name: 'Patricia Rodriguez', phone: '555-0112', email: 'patricia@email.com' },\n      { id: 'p013', name: 'Daniel Thompson', phone: '555-0113' },\n      { id: 'p014', name: 'Mary Johnson', phone: '555-0114' },\n      { id: 'p015', name: 'James Williams', phone: '555-0115', email: 'james@email.com' },\n      { id: 'p016', name: 'Emma Chen', phone: '555-0116', email: 'emma@email.com' },\n      { id: 'p017', name: 'William Davis', phone: '555-0117' },\n      { id: 'p018', name: 'Sophia Martinez', phone: '555-0118', email: 'sophia@email.com' },\n      { id: 'p019', name: 'Oliver Harris', phone: '555-0119' },\n      { id: 'p020', name: 'Isabella White', phone: '555-0120', email: 'isabella@email.com' },\n    ];\n\n    // Create charts for each patient, distributed across real doctors\n    const charts: Map<string, Chart> = new Map();\n    const doctorAssignments = [\n      { id: 'doc1', name: 'Dr. Rakesh Patel' },\n      { id: 'doc2', name: 'Dr. Veena Watwe' },\n      { id: 'doc3', name: 'Dr. Tess Chamakkala' },\n      { id: 'doc4', name: 'Dr. Radha Bernander' },\n      { id: 'doc5', name: 'Dr. Shannon Gregroek' },\n      { id: 'doc6', name: 'Dr. Elinia Shakya' },\n    ];\n\n    for (let i = 0; i < patients.length; i++) {\n      const patient = patients[i];\n      const doctor = doctorAssignments[i % doctorAssignments.length];\n      const chart = await chartService.createChart(\n        patient.id,\n        patient.name,\n        doctor.id,\n        doctor.name\n      );\n      charts.set(patient.id, chart);\n    }\n\n    // Sample appointments spread across the week\n    const sampleAppointments: SimpleAppointment[] = [\n      // Monday\n      {\n        id: 'apt001',\n        patientId: 'p001',\n        patientName: 'John Smith',\n        patientPhone: '555-0101',\n        patientEmail: 'john@email.com',\n        chartId: charts.get('p001')?.id,\n        doctorId: 'doc1',\n        doctorName: 'Dr. Rakesh Patel',\n        date: this.formatDate(weekDates[0]),\n        time: '9:00 AM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'Diabetes follow-up - A1C review',\n        notes: 'Patient on metformin 500mg BID for 3 months',\n        createdAt: new Date(Date.now() - 86400000 * 7),\n      },\n      {\n        id: 'apt002',\n        patientId: 'p002',\n        patientName: 'Sarah Johnson',\n        patientPhone: '555-0102',\n        chartId: charts.get('p002')?.id,\n        doctorId: 'doc2',\n        doctorName: 'Dr. Veena Watwe',\n        date: this.formatDate(weekDates[0]),\n        time: '10:00 AM',\n        duration: 45,\n        status: 'scheduled',\n        visitType: 'new-patient',\n        visitReason: 'Initial consultation - Hypertension',\n        createdAt: new Date(Date.now() - 86400000 * 5),\n      },\n      {\n        id: 'apt003',\n        patientId: 'p003',\n        patientName: 'Michael Brown',\n        chartId: charts.get('p003')?.id,\n        doctorId: 'doc1',\n        doctorName: 'Dr. Rakesh Patel',\n        date: this.formatDate(weekDates[0]),\n        time: '11:00 AM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'Blood pressure check',\n        createdAt: new Date(Date.now() - 86400000 * 3),\n      },\n      {\n        id: 'apt004',\n        patientId: 'p004',\n        patientName: 'Emily Davis',\n        chartId: charts.get('p004')?.id,\n        doctorId: 'doc3',\n        doctorName: 'Dr. Tess Chamakkala',\n        date: this.formatDate(weekDates[0]),\n        time: '2:00 PM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'Thyroid medication adjustment',\n        notes: 'Review TSH levels',\n        createdAt: new Date(Date.now() - 86400000 * 10),\n      },\n\n      // Tuesday\n      {\n        id: 'apt005',\n        patientId: 'p005',\n        patientName: 'Robert Wilson',\n        chartId: charts.get('p005')?.id,\n        doctorId: 'doc2',\n        doctorName: 'Dr. Veena Watwe',\n        date: this.formatDate(weekDates[1]),\n        time: '9:30 AM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'Cholesterol management',\n        notes: 'Review lipid panel, consider statin adjustment',\n        createdAt: new Date(Date.now() - 86400000 * 8),\n      },\n      {\n        id: 'apt006',\n        patientId: 'p006',\n        patientName: 'Lisa Anderson',\n        chartId: charts.get('p006')?.id,\n        doctorId: 'doc1',\n        doctorName: 'Dr. Rakesh Patel',\n        date: this.formatDate(weekDates[1]),\n        time: '10:30 AM',\n        duration: 60,\n        status: 'scheduled',\n        visitType: 'procedure',\n        visitReason: 'Annual physical exam',\n        createdAt: new Date(Date.now() - 86400000 * 14),\n      },\n      {\n        id: 'apt007',\n        patientId: 'p007',\n        patientName: 'David Martinez',\n        chartId: charts.get('p007')?.id,\n        doctorId: 'doc4',\n        doctorName: 'Dr. Radha Bernander',\n        date: this.formatDate(weekDates[1]),\n        time: '2:30 PM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'Weight management consultation',\n        createdAt: new Date(Date.now() - 86400000 * 6),\n      },\n      {\n        id: 'apt008',\n        patientId: 'p008',\n        patientName: 'Jennifer Taylor',\n        chartId: charts.get('p008')?.id,\n        doctorId: 'doc3',\n        doctorName: 'Dr. Tess Chamakkala',\n        date: this.formatDate(weekDates[1]),\n        time: '4:00 PM',\n        duration: 45,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'Migraine management',\n        notes: 'Consider preventive medication',\n        createdAt: new Date(Date.now() - 86400000 * 4),\n      },\n\n      // Wednesday\n      {\n        id: 'apt009',\n        patientId: 'p009',\n        patientName: 'Christopher Lee',\n        chartId: charts.get('p009')?.id,\n        doctorId: 'doc2',\n        doctorName: 'Dr. Veena Watwe',\n        date: this.formatDate(weekDates[2]),\n        time: '8:00 AM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'Asthma control',\n        notes: 'Check inhaler technique, spirometry if needed',\n        createdAt: new Date(Date.now() - 86400000 * 12),\n      },\n      {\n        id: 'apt010',\n        patientId: 'p010',\n        patientName: 'Amanda White',\n        chartId: charts.get('p010')?.id,\n        doctorId: 'doc5',\n        doctorName: 'Dr. Shannon Gregroek',\n        date: this.formatDate(weekDates[2]),\n        time: '10:00 AM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'Anxiety medication review',\n        createdAt: new Date(Date.now() - 86400000 * 9),\n      },\n      {\n        id: 'apt011',\n        patientId: 'p011',\n        patientName: 'Thomas Garcia',\n        chartId: charts.get('p011')?.id,\n        doctorId: 'doc1',\n        doctorName: 'Dr. Rakesh Patel',\n        date: this.formatDate(weekDates[2]),\n        time: '11:30 AM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'Post-surgery follow-up',\n        notes: 'Check surgical site, remove sutures if healed',\n        createdAt: new Date(Date.now() - 86400000 * 2),\n      },\n      {\n        id: 'apt012',\n        patientId: 'p001',\n        patientName: 'John Smith',\n        chartId: charts.get('p001')?.id,\n        doctorId: 'doc3',\n        doctorName: 'Dr. Tess Chamakkala',\n        date: this.formatDate(weekDates[2]),\n        time: '3:00 PM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'lab-review',\n        visitReason: 'Review recent lab results',\n        createdAt: new Date(Date.now() - 86400000 * 1),\n      },\n\n      // Thursday\n      {\n        id: 'apt013',\n        patientId: 'p012',\n        patientName: 'Patricia Rodriguez',\n        chartId: charts.get('p012')?.id,\n        doctorId: 'doc3',\n        doctorName: 'Dr. Tess Chamakkala',\n        date: this.formatDate(weekDates[3]),\n        time: '9:00 AM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'lab-review',\n        visitReason: 'Discuss A1C and lipid panel results',\n        notes: 'A1C trending up, may need medication adjustment',\n        createdAt: new Date(Date.now() - 86400000 * 11),\n      },\n      {\n        id: 'apt014',\n        patientId: 'p013',\n        patientName: 'Daniel Thompson',\n        chartId: charts.get('p013')?.id,\n        doctorId: 'doc4',\n        doctorName: 'Dr. Radha Bernander',\n        date: this.formatDate(weekDates[3]),\n        time: '10:00 AM',\n        duration: 45,\n        status: 'scheduled',\n        visitType: 'new-patient',\n        visitReason: 'Sleep apnea evaluation',\n        createdAt: new Date(Date.now() - 86400000 * 7),\n      },\n      {\n        id: 'apt015',\n        patientId: 'p014',\n        patientName: 'Mary Johnson',\n        chartId: charts.get('p014')?.id,\n        doctorId: 'doc1',\n        doctorName: 'Dr. Rakesh Patel',\n        date: this.formatDate(weekDates[3]),\n        time: '2:00 PM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'Osteoporosis management',\n        notes: 'Discuss bone density results',\n        createdAt: new Date(Date.now() - 86400000 * 5),\n      },\n      {\n        id: 'apt016',\n        patientId: 'p015',\n        patientName: 'James Williams',\n        chartId: charts.get('p015')?.id,\n        doctorId: 'doc2',\n        doctorName: 'Dr. Veena Watwe',\n        date: this.formatDate(weekDates[3]),\n        time: '3:30 PM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'urgent',\n        visitReason: 'Acute back pain',\n        createdAt: new Date(),\n      },\n\n      // Friday\n      {\n        id: 'apt017',\n        patientId: 'p002',\n        patientName: 'Sarah Johnson',\n        chartId: charts.get('p002')?.id,\n        doctorId: 'doc5',\n        doctorName: 'Dr. Shannon Gregroek',\n        date: this.formatDate(weekDates[4]),\n        time: '8:30 AM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'Depression screening',\n        createdAt: new Date(Date.now() - 86400000 * 3),\n      },\n      {\n        id: 'apt018',\n        patientId: 'p006',\n        patientName: 'Lisa Anderson',\n        chartId: charts.get('p006')?.id,\n        doctorId: 'doc1',\n        doctorName: 'Dr. Rakesh Patel',\n        date: this.formatDate(weekDates[4]),\n        time: '10:00 AM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'Vaccine administration',\n        notes: 'Flu shot and COVID booster',\n        createdAt: new Date(Date.now() - 86400000 * 2),\n      },\n      {\n        id: 'apt019',\n        patientId: 'p009',\n        patientName: 'Christopher Lee',\n        chartId: charts.get('p009')?.id,\n        doctorId: 'doc4',\n        doctorName: 'Dr. Radha Bernander',\n        date: this.formatDate(weekDates[4]),\n        time: '1:00 PM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'COPD management',\n        createdAt: new Date(Date.now() - 86400000 * 8),\n      },\n      {\n        id: 'apt020',\n        patientId: 'p011',\n        patientName: 'Thomas Garcia',\n        chartId: charts.get('p011')?.id,\n        doctorId: 'doc2',\n        doctorName: 'Dr. Veena Watwe',\n        date: this.formatDate(weekDates[4]),\n        time: '3:00 PM',\n        duration: 45,\n        status: 'scheduled',\n        visitType: 'procedure',\n        visitReason: 'Skin biopsy',\n        notes: 'Suspicious mole on back',\n        createdAt: new Date(Date.now() - 86400000 * 4),\n      },\n\n      // Additional appointments for Dr. Elinia Shakya\n      {\n        id: 'apt021',\n        patientId: 'p016',\n        patientName: 'Emma Chen',\n        chartId: charts.get('p016')?.id,\n        doctorId: 'doc6',\n        doctorName: 'Dr. Elinia Shakya',\n        date: this.formatDate(weekDates[0]),\n        time: '3:30 PM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'new-patient',\n        visitReason: 'Initial endocrinology consultation',\n        notes: 'Referred for possible thyroid disorder',\n        createdAt: new Date(Date.now() - 86400000 * 5),\n      },\n      {\n        id: 'apt022',\n        patientId: 'p017',\n        patientName: 'William Davis',\n        chartId: charts.get('p017')?.id,\n        doctorId: 'doc6',\n        doctorName: 'Dr. Elinia Shakya',\n        date: this.formatDate(weekDates[1]),\n        time: '4:00 PM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'Diabetes management - insulin adjustment',\n        notes: 'Review continuous glucose monitor data',\n        createdAt: new Date(Date.now() - 86400000 * 7),\n      },\n      {\n        id: 'apt023',\n        patientId: 'p018',\n        patientName: 'Sophia Martinez',\n        chartId: charts.get('p018')?.id,\n        doctorId: 'doc6',\n        doctorName: 'Dr. Elinia Shakya',\n        date: this.formatDate(weekDates[2]),\n        time: '9:00 AM',\n        duration: 45,\n        status: 'scheduled',\n        visitType: 'procedure',\n        visitReason: 'Thyroid ultrasound and FNA',\n        notes: 'Nodule found on previous exam',\n        createdAt: new Date(Date.now() - 86400000 * 10),\n      },\n      {\n        id: 'apt024',\n        patientId: 'p019',\n        patientName: 'Oliver Harris',\n        chartId: charts.get('p019')?.id,\n        doctorId: 'doc6',\n        doctorName: 'Dr. Elinia Shakya',\n        date: this.formatDate(weekDates[3]),\n        time: '2:00 PM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'Growth hormone therapy review',\n        notes: 'Pediatric patient - check growth charts',\n        createdAt: new Date(Date.now() - 86400000 * 3),\n      },\n      {\n        id: 'apt025',\n        patientId: 'p020',\n        patientName: 'Isabella White',\n        chartId: charts.get('p020')?.id,\n        doctorId: 'doc6',\n        doctorName: 'Dr. Elinia Shakya',\n        date: this.formatDate(weekDates[4]),\n        time: '11:00 AM',\n        duration: 30,\n        status: 'scheduled',\n        visitType: 'follow-up',\n        visitReason: 'PCOS management',\n        notes: 'Review hormone levels and medication compliance',\n        createdAt: new Date(Date.now() - 86400000 * 6),\n      },\n    ];\n\n    this.appointments = sampleAppointments;\n    this.saveAppointments();\n  }\n\n  /**\n   * Get appointments filtered by doctor and/or date\n   */\n  getAppointments(filters?: {\n    doctorId?: string;\n    date?: string;\n    weekOf?: Date;\n  }): SimpleAppointment[] {\n    let filtered = [...this.appointments];\n\n    if (filters?.doctorId && filters.doctorId !== 'all') {\n      filtered = filtered.filter(a => a.doctorId === filters.doctorId);\n    }\n\n    if (filters?.date) {\n      filtered = filtered.filter(a => a.date === filters.date);\n    }\n\n    if (filters?.weekOf) {\n      const weekDates = this.getWeekDates(filters.weekOf);\n      const weekStrings = weekDates.map(d => this.formatDate(d));\n      filtered = filtered.filter(a => weekStrings.includes(a.date));\n    }\n\n    return filtered.sort((a, b) => {\n      // Sort by date first, then by time\n      if (a.date !== b.date) {\n        return a.date.localeCompare(b.date);\n      }\n      return this.timeToMinutes(a.time) - this.timeToMinutes(b.time);\n    });\n  }\n\n  /**\n   * Get appointments for calendar grid view\n   */\n  getCalendarData(weekOf: Date, doctorId?: string): Map<string, Map<string, SimpleAppointment[]>> {\n    const weekDates = this.getWeekDates(weekOf);\n    const calendarData = new Map<string, Map<string, SimpleAppointment[]>>();\n\n    // Initialize time slots\n    const timeSlots = [\n      '8:00 AM',\n      '9:00 AM',\n      '10:00 AM',\n      '11:00 AM',\n      '12:00 PM',\n      '1:00 PM',\n      '2:00 PM',\n      '3:00 PM',\n      '4:00 PM',\n      '5:00 PM',\n    ];\n\n    timeSlots.forEach(time => {\n      const dayMap = new Map<string, SimpleAppointment[]>();\n      weekDates.forEach(date => {\n        const dateStr = this.formatDate(date);\n        const appointments = this.getAppointments({ doctorId, date: dateStr }).filter(\n          a => this.getTimeSlot(a.time) === time\n        );\n        dayMap.set(dateStr, appointments);\n      });\n      calendarData.set(time, dayMap);\n    });\n\n    return calendarData;\n  }\n\n  /**\n   * Helper: Get the hour slot for an appointment time\n   */\n  private getTimeSlot(time: string): string {\n    const [timePart, period] = time.split(' ');\n    const [hours] = timePart.split(':');\n    return `${hours}:00 ${period}`;\n  }\n\n  /**\n   * Helper: Convert time string to minutes for sorting\n   */\n  private timeToMinutes(time: string): number {\n    const [timePart, period] = time.split(' ');\n    let [hours, minutes] = timePart.split(':').map(Number);\n\n    if (period === 'PM' && hours !== 12) hours += 12;\n    if (period === 'AM' && hours === 12) hours = 0;\n\n    return hours * 60 + minutes;\n  }\n\n  /**\n   * Helper: Get week dates starting from Monday\n   */\n  private getWeekDates(startDate: Date): Date[] {\n    const dates: Date[] = [];\n    const start = new Date(startDate);\n    const day = start.getDay();\n    const diff = start.getDate() - day + (day === 0 ? -6 : 1);\n\n    start.setDate(diff);\n\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(start);\n      date.setDate(start.getDate() + i);\n      dates.push(date);\n    }\n\n    return dates;\n  }\n\n  /**\n   * Helper: Format date as YYYY-MM-DD\n   */\n  private formatDate(date: Date): string {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n\n  /**\n   * Save appointments to localStorage\n   */\n  private saveAppointments() {\n    try {\n      localStorage.setItem('tshla_simple_appointments', JSON.stringify(this.appointments));\n    } catch (error) {\n      logError('simpleAppointment', 'Error message', {});\n    }\n  }\n\n  /**\n   * Load appointments from localStorage\n   */\n  private loadAppointments() {\n    try {\n      const saved = localStorage.getItem('tshla_simple_appointments');\n      if (saved) {\n        this.appointments = JSON.parse(saved);\n      }\n    } catch (error) {\n      logError('simpleAppointment', 'Error message', {});\n    }\n  }\n\n  /**\n   * Clear all appointments\n   */\n  clearAllAppointments() {\n    this.appointments = [];\n    this.saveAppointments();\n    logDebug('simpleAppointment', 'Debug message', {});\n  }\n\n  /**\n   * Create a new appointment\n   */\n  async createAppointment(appointmentData: {\n    patientId: string;\n    patientName: string;\n    patientPhone?: string;\n    patientEmail?: string;\n    doctorId: string;\n    doctorName: string;\n    date: string;\n    time: string;\n    duration: number;\n    visitType: 'new-patient' | 'follow-up' | 'urgent' | 'procedure' | 'lab-review' | 'telemedicine';\n    visitReason: string;\n    notes?: string;\n  }): Promise<SimpleAppointment> {\n    const newAppointment: SimpleAppointment = {\n      id: `apt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      ...appointmentData,\n      status: 'scheduled',\n      createdAt: new Date(),\n    };\n\n    // Create chart if needed\n    if (!newAppointment.chartId) {\n      const chart = await chartService.createChart(\n        appointmentData.patientId,\n        appointmentData.patientName,\n        appointmentData.doctorId,\n        appointmentData.doctorName\n      );\n      newAppointment.chartId = chart.id;\n    }\n\n    this.appointments.push(newAppointment);\n    this.saveAppointments();\n\n    // Log audit\n    await auditService.log('create', 'appointment', newAppointment.id, {\n      patientName: appointmentData.patientName,\n      doctorName: appointmentData.doctorName,\n      date: appointmentData.date,\n      time: appointmentData.time,\n    });\n\n    return newAppointment;\n  }\n\n  /**\n   * Get appointment count for a doctor\n   */\n  getAppointmentCount(doctorId?: string): number {\n    if (!doctorId || doctorId === 'all') {\n      return this.appointments.length;\n    }\n    return this.appointments.filter(a => a.doctorId === doctorId).length;\n  }\n\n  /**\n   * Get color for doctor (for calendar display)\n   */\n  getDoctorColor(doctorId: string): string {\n    const colors: { [key: string]: string } = {\n      doc1: 'bg-blue-100 text-blue-800 border-blue-200',\n      doc2: 'bg-purple-100 text-purple-800 border-purple-200',\n      doc3: 'bg-green-100 text-green-800 border-green-200',\n      doc4: 'bg-yellow-100 text-yellow-800 border-yellow-200',\n      doc5: 'bg-red-100 text-red-800 border-red-200',\n      doc6: 'bg-orange-100 text-orange-800 border-orange-200',\n    };\n    return colors[doctorId] || 'bg-gray-100 text-gray-800 border-gray-200';\n  }\n}\n\nexport const simpleAppointmentService = new SimpleAppointmentService();\n","import { logError, logWarn, logInfo, logDebug } from '../../services/logger.service';\n// Browser-safe stub for database client\n// Real database operations should happen on the server side only\n\n// Generate a unique ID\nexport const generateId = (): string => {\n  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n};\n\n// Stub for getDb function\nexport const getDb = () => db;\n\nexport const db = {\n  query: async () => {\n    logWarn('App', 'Warning message', {});\n    return { rows: [] };\n  },\n  execute: async () => {\n    logWarn('App', 'Warning message', {});\n    return { rows: [] };\n  },\n  all: async () => {\n    logWarn('App', 'Warning message', {});\n    return [];\n  },\n  get: async () => {\n    logWarn('App', 'Warning message', {});\n    return null;\n  },\n  run: async () => {\n    logWarn('App', 'Warning message', {});\n    return { changes: 0, lastInsertRowid: 0 };\n  },\n  prepare: () => ({\n    all: () => [],\n    get: () => null,\n    run: () => ({ changes: 0, lastInsertRowid: 0 }),\n  }),\n  transaction: (fn: Function) => fn,\n};\n\nexport const hashPassword = async (password: string): Promise<string> => {\n  // Use a browser-compatible hashing method\n  const encoder = new TextEncoder();\n  const data = encoder.encode(password);\n  const hash = await crypto.subtle.digest('SHA-256', data);\n  return Array.from(new Uint8Array(hash))\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('');\n};\n\nexport const verifyPassword = async (password: string, hash: string): Promise<boolean> => {\n  const passwordHash = await hashPassword(password);\n  return passwordHash === hash;\n};\n\nexport const closeDatabase = () => {\n  logDebug('App', 'Debug message', {});\n};\n\nexport default db;\n","/**\n * Appointment Service\n * Handles all appointment scheduling operations with database persistence\n * Multi-doctor support with conflict prevention\n */\n\nimport { getDb, generateId } from '../lib/db/client';\nimport { auditLogService } from './auditLog.service';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface Appointment {\n  id: string;\n  doctor_id: string;\n  patient_id: string;\n  patient_name: string;\n  patient_mrn: string;\n  patient_phone?: string;\n  patient_email?: string;\n  patient_dob?: string;\n  appointment_date: string; // YYYY-MM-DD\n  appointment_time: string; // \"9:00 AM\"\n  appointment_slot: string; // \"2024-01-15 09:00\" for sorting\n  duration_minutes: number;\n  status: 'scheduled' | 'confirmed' | 'in-progress' | 'completed' | 'cancelled' | 'no-show';\n  visit_type: 'new-patient' | 'follow-up' | 'urgent' | 'telehealth' | 'procedure';\n  chief_complaint?: string;\n  notes?: string;\n  practice_id?: string;\n  location?: string;\n  room_number?: string;\n  created_at: string;\n  updated_at: string;\n  created_by: string;\n  updated_by?: string;\n  is_deleted?: number;\n  deleted_at?: string;\n  deleted_by?: string;\n\n  // Virtual fields (from joins)\n  doctor_name?: string;\n  doctor_specialty?: string;\n}\n\nexport interface AppointmentCreateData {\n  patient_name: string;\n  patient_mrn: string;\n  patient_id?: string;\n  patient_phone?: string;\n  patient_email?: string;\n  patient_dob?: string;\n  appointment_date: string;\n  appointment_time: string;\n  duration_minutes?: number;\n  visit_type?: 'new-patient' | 'follow-up' | 'urgent' | 'telehealth' | 'procedure';\n  chief_complaint?: string;\n  notes?: string;\n  location?: string;\n  room_number?: string;\n}\n\nclass AppointmentService {\n  /**\n   * Convert time to 24-hour format for consistent sorting\n   */\n  private convertTo24HourSlot(date: string, time: string): string {\n    const [timePart, modifier] = time.split(' ');\n    let [hours, minutes] = timePart.split(':');\n\n    if (hours === '12') {\n      hours = modifier === 'AM' ? '00' : '12';\n    } else if (modifier === 'PM') {\n      hours = String(parseInt(hours, 10) + 12);\n    }\n\n    return `${date} ${hours.padStart(2, '0')}:${minutes}`;\n  }\n\n  /**\n   * Get all appointments for a specific doctor on a date\n   */\n  async getDoctorAppointments(doctorId: string, date?: string): Promise<Appointment[]> {\n    const db = getDb();\n    const targetDate = date || new Date().toISOString().split('T')[0];\n\n    try {\n      const appointments = await db.query(\n        `SELECT \n          a.*,\n          d.first_name || ' ' || d.last_name as doctor_name,\n          d.specialty as doctor_specialty\n        FROM appointments a\n        JOIN doctors d ON a.doctor_id = d.id\n        WHERE a.doctor_id = $1 \n          AND a.appointment_date = $2\n          AND a.is_deleted = 0\n        ORDER BY a.appointment_slot`,\n        [doctorId, targetDate]\n      );\n\n      return appointments as Appointment[];\n    } catch (error) {\n      logError('appointment', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Get all appointments for a practice (multi-doctor view)\n   */\n  async getPracticeAppointments(practiceId: string, date?: string): Promise<Appointment[]> {\n    const db = getDb();\n    const targetDate = date || new Date().toISOString().split('T')[0];\n\n    try {\n      const appointments = await db.query(\n        `SELECT \n          a.*,\n          d.first_name || ' ' || d.last_name as doctor_name,\n          d.specialty as doctor_specialty\n        FROM appointments a\n        JOIN doctors d ON a.doctor_id = d.id\n        WHERE a.practice_id = $1 \n          AND a.appointment_date = $2\n          AND a.is_deleted = 0\n        ORDER BY a.doctor_id, a.appointment_slot`,\n        [practiceId, targetDate]\n      );\n\n      return appointments as Appointment[];\n    } catch (error) {\n      logError('appointment', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Get upcoming appointments for a patient\n   */\n  async getPatientAppointments(patientId: string): Promise<Appointment[]> {\n    const db = getDb();\n\n    try {\n      const appointments = await db.query(\n        `SELECT \n          a.*,\n          d.first_name || ' ' || d.last_name as doctor_name,\n          d.specialty as doctor_specialty\n        FROM appointments a\n        JOIN doctors d ON a.doctor_id = d.id\n        WHERE a.patient_id = $1 \n          AND a.appointment_date >= DATE('now')\n          AND a.is_deleted = 0\n        ORDER BY a.appointment_slot\n        LIMIT 10`,\n        [patientId]\n      );\n\n      return appointments as Appointment[];\n    } catch (error) {\n      logError('appointment', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new appointment with conflict checking\n   */\n  async createAppointment(\n    doctorId: string,\n    appointmentData: AppointmentCreateData,\n    createdBy?: string\n  ): Promise<Appointment> {\n    const db = getDb();\n    const appointmentId = generateId();\n    const appointmentSlot = this.convertTo24HourSlot(\n      appointmentData.appointment_date,\n      appointmentData.appointment_time\n    );\n\n    try {\n      // Check for conflicts\n      const conflicts = await db.query(\n        `SELECT id FROM appointments \n        WHERE doctor_id = $1 \n          AND appointment_slot = $2 \n          AND is_deleted = 0`,\n        [doctorId, appointmentSlot]\n      );\n\n      if (conflicts.length > 0) {\n        throw new Error(`Time slot ${appointmentData.appointment_time} is already booked`);\n      }\n\n      // Get doctor's practice_id\n      const doctor = await db.queryOne('SELECT practice_name FROM doctors WHERE id = $1', [\n        doctorId,\n      ]);\n\n      // Create appointment\n      const appointment: Appointment = {\n        id: appointmentId,\n        doctor_id: doctorId,\n        patient_id: appointmentData.patient_id || `patient-${generateId()}`,\n        patient_name: appointmentData.patient_name,\n        patient_mrn: appointmentData.patient_mrn,\n        patient_phone: appointmentData.patient_phone,\n        patient_email: appointmentData.patient_email,\n        patient_dob: appointmentData.patient_dob,\n        appointment_date: appointmentData.appointment_date,\n        appointment_time: appointmentData.appointment_time,\n        appointment_slot: appointmentSlot,\n        duration_minutes: appointmentData.duration_minutes || 30,\n        status: 'scheduled',\n        visit_type: appointmentData.visit_type || 'follow-up',\n        chief_complaint: appointmentData.chief_complaint,\n        notes: appointmentData.notes,\n        practice_id: doctor?.practice_name,\n        location: appointmentData.location,\n        room_number: appointmentData.room_number,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        created_by: doctorId,\n      };\n\n      await db.execute(\n        `INSERT INTO appointments (\n          id, doctor_id, patient_id, patient_name, patient_mrn,\n          patient_phone, patient_email, patient_dob,\n          appointment_date, appointment_time, appointment_slot,\n          duration_minutes, status, visit_type, chief_complaint,\n          notes, practice_id, location, room_number,\n          created_by\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20)`,\n        [\n          appointment.id,\n          appointment.doctor_id,\n          appointment.patient_id,\n          appointment.patient_name,\n          appointment.patient_mrn,\n          appointment.patient_phone,\n          appointment.patient_email,\n          appointment.patient_dob,\n          appointment.appointment_date,\n          appointment.appointment_time,\n          appointment.appointment_slot,\n          appointment.duration_minutes,\n          appointment.status,\n          appointment.visit_type,\n          appointment.chief_complaint,\n          appointment.notes,\n          appointment.practice_id,\n          appointment.location,\n          appointment.room_number,\n          appointment.created_by,\n        ]\n      );\n\n      // Log audit\n      await auditLogService.log({\n        action: 'CREATE_APPOINTMENT',\n        userId: doctorId,\n        resourceType: 'appointment',\n        resourceId: appointmentId,\n        details: {\n          patient_name: appointmentData.patient_name,\n          appointment_time: appointmentData.appointment_time,\n          appointment_date: appointmentData.appointment_date,\n        },\n      });\n\n      return appointment;\n    } catch (error) {\n      logError('appointment', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Update an existing appointment\n   */\n  async updateAppointment(\n    appointmentId: string,\n    doctorId: string,\n    updates: Partial<AppointmentCreateData>\n  ): Promise<Appointment> {\n    const db = getDb();\n\n    try {\n      // Get existing appointment\n      const existing = await db.queryOne(\n        'SELECT * FROM appointments WHERE id = $1 AND is_deleted = 0',\n        [appointmentId]\n      );\n\n      if (!existing) {\n        throw new Error('Appointment not found');\n      }\n\n      // Check authorization\n      if (existing.doctor_id !== doctorId) {\n        throw new Error('Unauthorized to update this appointment');\n      }\n\n      // Build update query\n      const updateFields: string[] = [];\n      const updateValues: any[] = [];\n      let paramCount = 1;\n\n      if (updates.patient_name !== undefined) {\n        updateFields.push(`patient_name = $${paramCount++}`);\n        updateValues.push(updates.patient_name);\n      }\n\n      if (updates.patient_mrn !== undefined) {\n        updateFields.push(`patient_mrn = $${paramCount++}`);\n        updateValues.push(updates.patient_mrn);\n      }\n\n      if (updates.patient_phone !== undefined) {\n        updateFields.push(`patient_phone = $${paramCount++}`);\n        updateValues.push(updates.patient_phone);\n      }\n\n      if (updates.patient_email !== undefined) {\n        updateFields.push(`patient_email = $${paramCount++}`);\n        updateValues.push(updates.patient_email);\n      }\n\n      if (updates.patient_dob !== undefined) {\n        updateFields.push(`patient_dob = $${paramCount++}`);\n        updateValues.push(updates.patient_dob);\n      }\n\n      if (updates.appointment_time !== undefined && updates.appointment_date) {\n        const newSlot = this.convertTo24HourSlot(\n          updates.appointment_date,\n          updates.appointment_time\n        );\n\n        // Check for conflicts if time is changing\n        if (newSlot !== existing.appointment_slot) {\n          const conflicts = await db.query(\n            `SELECT id FROM appointments \n            WHERE doctor_id = $1 \n              AND appointment_slot = $2 \n              AND id != $3\n              AND is_deleted = 0`,\n            [doctorId, newSlot, appointmentId]\n          );\n\n          if (conflicts.length > 0) {\n            throw new Error(`Time slot ${updates.appointment_time} is already booked`);\n          }\n        }\n\n        updateFields.push(`appointment_time = $${paramCount++}`);\n        updateValues.push(updates.appointment_time);\n        updateFields.push(`appointment_slot = $${paramCount++}`);\n        updateValues.push(newSlot);\n      }\n\n      if (updates.appointment_date !== undefined) {\n        updateFields.push(`appointment_date = $${paramCount++}`);\n        updateValues.push(updates.appointment_date);\n      }\n\n      if (updates.chief_complaint !== undefined) {\n        updateFields.push(`chief_complaint = $${paramCount++}`);\n        updateValues.push(updates.chief_complaint);\n      }\n\n      if (updates.visit_type !== undefined) {\n        updateFields.push(`visit_type = $${paramCount++}`);\n        updateValues.push(updates.visit_type);\n      }\n\n      if (updates.notes !== undefined) {\n        updateFields.push(`notes = $${paramCount++}`);\n        updateValues.push(updates.notes);\n      }\n\n      // Add metadata\n      updateFields.push(`updated_by = $${paramCount++}`);\n      updateValues.push(doctorId);\n      updateFields.push(`updated_at = CURRENT_TIMESTAMP`);\n\n      // Add appointment ID for WHERE clause\n      updateValues.push(appointmentId);\n\n      // Execute update\n      await db.execute(\n        `UPDATE appointments \n        SET ${updateFields.join(', ')}\n        WHERE id = $${paramCount}`,\n        updateValues\n      );\n\n      // Fetch updated appointment\n      const updated = await db.queryOne('SELECT * FROM appointments WHERE id = $1', [\n        appointmentId,\n      ]);\n\n      // Log audit\n      await auditLogService.log({\n        action: 'UPDATE_APPOINTMENT',\n        userId: doctorId,\n        resourceType: 'appointment',\n        resourceId: appointmentId,\n        details: { updates },\n      });\n\n      return updated as Appointment;\n    } catch (error) {\n      logError('appointment', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Update appointment status\n   */\n  async updateStatus(\n    appointmentId: string,\n    doctorId: string,\n    status: Appointment['status']\n  ): Promise<void> {\n    const db = getDb();\n\n    try {\n      await db.execute(\n        `UPDATE appointments \n        SET status = $1, updated_by = $2, updated_at = CURRENT_TIMESTAMP\n        WHERE id = $3 AND doctor_id = $4`,\n        [status, doctorId, appointmentId, doctorId]\n      );\n\n      await auditLogService.log({\n        action: 'UPDATE_APPOINTMENT_STATUS',\n        userId: doctorId,\n        resourceType: 'appointment',\n        resourceId: appointmentId,\n        details: { status },\n      });\n    } catch (error) {\n      logError('appointment', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel an appointment (soft delete)\n   */\n  async cancelAppointment(appointmentId: string, doctorId: string, reason?: string): Promise<void> {\n    const db = getDb();\n\n    try {\n      await db.execute(\n        `UPDATE appointments \n        SET status = 'cancelled', \n            is_deleted = 1, \n            deleted_at = CURRENT_TIMESTAMP,\n            deleted_by = $1,\n            notes = COALESCE(notes || ' | Cancellation: ' || $2, $2)\n        WHERE id = $3 AND doctor_id = $4`,\n        [doctorId, reason || 'Cancelled by doctor', appointmentId, doctorId]\n      );\n\n      await auditLogService.log({\n        action: 'CANCEL_APPOINTMENT',\n        userId: doctorId,\n        resourceType: 'appointment',\n        resourceId: appointmentId,\n        details: { reason },\n      });\n    } catch (error) {\n      logError('appointment', 'Error message', {});\n      throw error;\n    }\n  }\n\n  /**\n   * Get available time slots for a doctor on a date\n   */\n  async getAvailableSlots(doctorId: string, date: string): Promise<string[]> {\n    const db = getDb();\n\n    // Generate all possible slots (9 AM to 5 PM, 30-minute intervals)\n    const allSlots: string[] = [];\n    for (let hour = 9; hour < 12; hour++) {\n      allSlots.push(`${hour}:00 AM`);\n      allSlots.push(`${hour}:30 AM`);\n    }\n    allSlots.push('12:00 PM', '12:30 PM');\n    for (let hour = 1; hour <= 5; hour++) {\n      allSlots.push(`${hour}:00 PM`);\n      allSlots.push(`${hour}:30 PM`);\n    }\n\n    try {\n      // Get booked slots\n      const booked = await db.query(\n        `SELECT appointment_time FROM appointments \n        WHERE doctor_id = $1 \n          AND appointment_date = $2 \n          AND is_deleted = 0`,\n        [doctorId, date]\n      );\n\n      const bookedTimes = booked.map((a: any) => a.appointment_time);\n\n      // Return available slots\n      return allSlots.filter(slot => !bookedTimes.includes(slot));\n    } catch (error) {\n      logError('appointment', 'Error message', {});\n      return allSlots; // Return all slots if error\n    }\n  }\n\n  /**\n   * Quick add placeholder appointment\n   */\n  async quickAddAppointment(doctorId: string, date: string, time: string): Promise<Appointment> {\n    return this.createAppointment(doctorId, {\n      patient_name: `Patient @ ${time}`,\n      patient_mrn: `TBD-${Date.now().toString().slice(-6)}`,\n      appointment_date: date,\n      appointment_time: time,\n      notes: 'Placeholder - update patient details',\n    });\n  }\n\n  /**\n   * Get appointment statistics for dashboard\n   */\n  async getDoctorStats(\n    doctorId: string,\n    date?: string\n  ): Promise<{\n    total: number;\n    completed: number;\n    scheduled: number;\n    cancelled: number;\n    noShow: number;\n  }> {\n    const db = getDb();\n    const targetDate = date || new Date().toISOString().split('T')[0];\n\n    try {\n      const stats = await db.queryOne(\n        `SELECT \n          COUNT(*) as total,\n          SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,\n          SUM(CASE WHEN status = 'scheduled' THEN 1 ELSE 0 END) as scheduled,\n          SUM(CASE WHEN status = 'cancelled' THEN 1 ELSE 0 END) as cancelled,\n          SUM(CASE WHEN status = 'no-show' THEN 1 ELSE 0 END) as no_show\n        FROM appointments\n        WHERE doctor_id = $1 \n          AND appointment_date = $2\n          AND is_deleted = 0`,\n        [doctorId, targetDate]\n      );\n\n      return {\n        total: stats.total || 0,\n        completed: stats.completed || 0,\n        scheduled: stats.scheduled || 0,\n        cancelled: stats.cancelled || 0,\n        noShow: stats.no_show || 0,\n      };\n    } catch (error) {\n      logError('appointment', 'Error message', {});\n      return { total: 0, completed: 0, scheduled: 0, cancelled: 0, noShow: 0 };\n    }\n  }\n}\n\nexport const appointmentService = new AppointmentService();\n","/**\n * AI-Powered Schedule Parser Service\n * Uses intelligent field detection to parse appointment data flexibly\n */\n\nimport { azureAIService } from './azureAI.service';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface ParsedAppointment {\n  date?: string;\n  time?: string;\n  patientFirstName?: string;\n  patientLastName?: string;\n  patientId?: string;\n  patientDob?: string;\n  patientEmail?: string;\n  patientPhone?: string;\n  patientMobile?: string;\n  providerName?: string;\n  providerCode?: string;\n  visitType?: string;\n  notes?: string;\n  confidence: number;\n}\n\nexport interface AIParseResult {\n  appointments: ParsedAppointment[];\n  columnMapping?: Record<string, number>;\n  detectedFormat?: string;\n  parseErrors: string[];\n  suggestions: string[];\n}\n\nclass AIScheduleParserService {\n  /**\n   * Use AI to intelligently parse schedule data\n   */\n  async parseScheduleWithAI(content: string): Promise<AIParseResult> {\n    try {\n      // First, get a sample of the data for AI analysis\n      const lines = content.trim().split('\\n');\n      const sampleSize = Math.min(10, lines.length);\n      const sampleData = lines.slice(0, sampleSize).join('\\n');\n\n      // Check if AI service is available\n      const useAI = azureAIService && typeof azureAIService.processWithAI === 'function';\n\n      if (!useAI) {\n        logDebug('aiScheduleParser', 'Debug message', {});\n        return this.fallbackParse(content);\n      }\n\n      // Ask AI to analyze the structure\n      const structurePrompt = `Analyze this CSV/TSV data and identify what each column represents. Be flexible with variations and missing data.\n\nData sample:\n${sampleData}\n\nPlease respond in JSON format with:\n{\n  \"columnMapping\": {\n    \"0\": \"field_name\",\n    \"1\": \"field_name\",\n    ...\n  },\n  \"dateFormat\": \"MM/DD/YYYY or similar\",\n  \"hasHeader\": true/false,\n  \"delimiter\": \"tab\" or \"comma\",\n  \"detectedFields\": [\"list\", \"of\", \"detected\", \"fields\"],\n  \"confidence\": 0.0-1.0\n}\n\nCommon field types to look for:\n- Appointment date (could be labeled as date, apptdate, appointment date, etc.)\n- Appointment time (time, schedule time, appt time, apptstarttime, apptscheduletime, start time, etc.)\n- Patient first name (first, firstname, patient firstname, fname, etc.)\n- Patient last name (last, lastname, patient lastname, lname, etc.)\n- Patient ID (id, mrn, patient id, patient number, medical record number, patientid)\n- Date of birth (dob, birthdate, patient dob, birth date, patientdob)\n- Email (email, patient email, e-mail, patient_email)\n- Phone (phone, home phone, telephone, contact, patient homephone, patient_homephone)\n- Mobile (mobile, cell, cell phone, patient mobile no, patient_mobile)\n- Provider/Doctor name (provider, doctor, physician, prvdr, rendering provider, appt schdlng prvdrfullnme, prvdrfullnme)\n- Provider code (provider code, prvdr code, doctor id)\n\nBe intelligent about detecting:\n- Names (typically contain letters, may have spaces/hyphens)\n- Dates (formats like MM/DD/YYYY, DD-MM-YYYY, YYYY-MM-DD)\n- IDs (typically numeric or alphanumeric codes)\n- Phone numbers (various formats with parentheses, dashes, spaces)\n- Emails (contains @ symbol)`;\n\n      const structureAnalysis = await azureAIService.processWithAI(structurePrompt);\n\n      let columnMapping: Record<string, number> = {};\n      let hasHeader = true;\n      let delimiter = '\\t';\n      let confidence = 0.8;\n\n      try {\n        const analysis = JSON.parse(structureAnalysis);\n        columnMapping = analysis.columnMapping || {};\n        hasHeader = analysis.hasHeader !== false;\n        delimiter = analysis.delimiter === 'comma' ? ',' : '\\t';\n        confidence = analysis.confidence || 0.8;\n      } catch (e) {\n        logDebug('aiScheduleParser', 'Debug message', {});\n        // Use intelligent detection that examines actual data\n        columnMapping = this.detectColumnsIntelligently(lines, delimiter);\n      }\n\n      // Now parse each row using the detected structure\n      const startRow = hasHeader ? 1 : 0;\n      const appointments: ParsedAppointment[] = [];\n      const parseErrors: string[] = [];\n\n      logDebug('aiScheduleParser', 'Debug message', {});\n\n      for (let i = startRow; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (!line) continue;\n\n        const parts = line.split(delimiter).map(p => p.trim());\n\n        // Use AI to extract appointment data from this row\n        const appointment = await this.parseRowWithAI(parts, columnMapping, i);\n\n        if (appointment) {\n          appointments.push(appointment);\n        } else {\n          parseErrors.push(`Could not parse row ${i + 1}`);\n        }\n\n        // Limit AI calls for large files - use pattern matching after 100 rows\n        if (i >= startRow + 100) {\n          logDebug('aiScheduleParser', 'Debug message', {});\n          const remainingLines = lines.slice(i + 1);\n          logDebug('aiScheduleParser', 'Debug message', {});\n\n          const remainingAppts = this.parseRemainingRowsWithPattern(\n            remainingLines,\n            columnMapping,\n            delimiter\n          );\n          appointments.push(...remainingAppts);\n          logInfo('aiScheduleParser', 'Info message', {});\n          break;\n        }\n      }\n\n      // Generate suggestions for improving data quality\n      const suggestions = this.generateSuggestions(appointments, parseErrors);\n\n      return {\n        appointments,\n        columnMapping,\n        detectedFormat: `${hasHeader ? 'With header' : 'No header'}, ${delimiter === ',' ? 'Comma' : 'Tab'} delimited`,\n        parseErrors,\n        suggestions,\n      };\n    } catch (error) {\n      logError('aiScheduleParser', 'Error message', {});\n      logDebug('aiScheduleParser', 'Debug message', {});\n      return this.fallbackParse(content);\n    }\n  }\n\n  /**\n   * Parse a single row with AI assistance\n   */\n  private async parseRowWithAI(\n    parts: string[],\n    columnMapping: Record<string, number>,\n    rowIndex: number\n  ): Promise<ParsedAppointment | null> {\n    try {\n      // Build a context string for AI\n      const rowData = parts\n        .map((part, idx) => {\n          const fieldName = Object.entries(columnMapping).find(\n            ([_, colIdx]) => colIdx === idx\n          )?.[0];\n          return `Column ${idx} (${fieldName || 'unknown'}): \"${part}\"`;\n        })\n        .join('\\n');\n\n      const prompt = `Extract appointment information from this row of data. Be flexible with formats and handle missing data gracefully.\n\n${rowData}\n\nReturn JSON with these fields (use null for missing data):\n{\n  \"date\": \"appointment date in MM/DD/YYYY format\",\n  \"time\": \"appointment time - CRITICAL: Extract the actual appointment time value (e.g., '09:00 AM', '05:00 PM'). Look for columns labeled: apptstarttime, apptscheduletime, time, appointment_time, start_time, etc. The time should be in format like '09:00 AM' or '2:30 PM'\",\n  \"patientFirstName\": \"patient's first name\",\n  \"patientLastName\": \"patient's last name\",\n  \"patientId\": \"patient ID or MRN\",\n  \"patientDob\": \"patient date of birth\",\n  \"patientEmail\": \"email address\",\n  \"patientPhone\": \"phone number\",\n  \"patientMobile\": \"mobile number\",\n  \"providerName\": \"doctor/provider FULL name exactly as shown\",\n  \"providerCode\": \"provider code if available\",\n  \"confidence\": 0.0-1.0\n}\n\nCRITICAL for provider identification:\n- Look for columns with names like: rndrng_prvdr, appt_schdlng_prvdrfullnme, provider, doctor\n- Provider names may be in formats like:\n  * \"LASTNAME, FIRSTNAME\" (e.g., \"CHAMAKKALA, TESS\")\n  * \"GC_EPC_Lastname_F\" (e.g., \"GC_EPC_Chamakkala_T\")\n  * \"FIRSTNAME LASTNAME\" (e.g., \"Tess Chamakkala\")\n  * Specialty names like \"IDEAL PROTEIN COACH,\" or \"CGMS KATY,\"\n- ALWAYS extract the FULL provider name/code exactly as shown\n- If you see names like ADELEKE, BERNANDER, CHAMAKKALA, GREGOREK, LAVERDE, PATEL, SHAKYA, TONYE, WATWE, YOUNUS - these are provider last names\n- Patient names are usually in separate first/last name columns\n- Provider is the DOCTOR, not the patient`;\n\n      const result = await azureAIService.processWithAI(prompt);\n\n      try {\n        const parsed = JSON.parse(result);\n        return {\n          ...parsed,\n          confidence: parsed.confidence || 0.7,\n        };\n      } catch (e) {\n        // If AI response isn't valid JSON, use pattern matching\n        return this.parseRowWithPatterns(parts, columnMapping);\n      }\n    } catch (error) {\n      logError('aiScheduleParser', 'Error message', {});\n      return this.parseRowWithPatterns(parts, columnMapping);\n    }\n  }\n\n  /**\n   * Fallback pattern-based parsing for a row\n   */\n  private parseRowWithPatterns(\n    parts: string[],\n    columnMapping: Record<string, number>\n  ): ParsedAppointment {\n    const appointment: ParsedAppointment = {\n      confidence: 0.5,\n    };\n\n    // Use patterns to identify fields\n    parts.forEach((part, idx) => {\n      // Date pattern (MM/DD/YYYY or similar)\n      if (part.match(/^\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}$/)) {\n        if (!appointment.date && part.includes('/')) {\n          appointment.date = part;\n        } else if (!appointment.patientDob) {\n          appointment.patientDob = part;\n        }\n      }\n\n      // Time pattern\n      if (part.match(/^\\d{1,2}:\\d{2}\\s*(AM|PM|am|pm)?$/i)) {\n        appointment.time = part;\n      }\n\n      // Email pattern\n      if (part.includes('@') && part.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/)) {\n        appointment.patientEmail = part;\n      }\n\n      // Phone pattern\n      if (part.match(/^[\\d\\s\\-\\(\\)\\.]+$/) && part.replace(/\\D/g, '').length >= 10) {\n        if (!appointment.patientPhone) {\n          appointment.patientPhone = part;\n        } else {\n          appointment.patientMobile = part;\n        }\n      }\n\n      // ID pattern (numeric or alphanumeric)\n      if (part.match(/^[A-Z0-9]{6,}$/i) && !part.includes('@')) {\n        appointment.patientId = part;\n      }\n\n      // Provider code pattern\n      if (part.match(/^GC_EPC_/i) || part.match(/^[A-Z]{2,}_[A-Z]{2,}/)) {\n        appointment.providerCode = part;\n      }\n    });\n\n    // Try to extract names from remaining fields\n    const possibleNames = parts.filter(\n      p => p.match(/^[A-Za-z\\s\\-']+$/) && p.length > 1 && !p.match(/^(AM|PM|Dr|MD|DO|NP|PA)$/i)\n    );\n\n    if (possibleNames.length >= 2) {\n      appointment.patientFirstName = possibleNames[0];\n      appointment.patientLastName = possibleNames[1];\n    }\n\n    return appointment;\n  }\n\n  /**\n   * Parse remaining rows using detected pattern (for performance)\n   */\n  private parseRemainingRowsWithPattern(\n    lines: string[],\n    columnMapping: Record<string, number>,\n    delimiter: string\n  ): ParsedAppointment[] {\n    const appointments: ParsedAppointment[] = [];\n\n    for (const line of lines) {\n      if (!line.trim()) continue;\n\n      const parts = line.split(delimiter).map(p => p.trim());\n      const appointment = this.parseRowWithPatterns(parts, columnMapping);\n\n      // Include appointments with valid date/time even if patient info is placeholder\n      const hasValidSchedule = appointment && appointment.date && appointment.time;\n\n      if (hasValidSchedule) {\n        // Handle placeholder patient data\n        if (!appointment.patientFirstName || appointment.patientFirstName === '-') {\n          appointment.patientFirstName = 'Available';\n        }\n        if (!appointment.patientLastName || appointment.patientLastName === '-') {\n          appointment.patientLastName = 'Slot';\n        }\n        if (!appointment.patientId || appointment.patientId === '-') {\n          appointment.patientId = `slot-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        }\n\n        appointments.push(appointment);\n      }\n    }\n\n    return appointments;\n  }\n\n  /**\n   * Intelligent column detection by examining actual data patterns\n   */\n  private detectColumnsIntelligently(lines: string[], delimiter: string): Record<string, number> {\n    const sampleRows = lines.slice(1, Math.min(6, lines.length));\n    const mapping: Record<string, number> = {};\n\n    if (sampleRows.length === 0) {\n      // Fall back to header-based detection if no data rows\n      return this.detectColumnsHeuristically(lines[0], delimiter);\n    }\n\n    const firstRow = sampleRows[0].split(delimiter);\n\n    firstRow.forEach((value, idx) => {\n      const columnValues = sampleRows\n        .map(row => {\n          const parts = row.split(delimiter);\n          return parts[idx] ? parts[idx].trim() : '';\n        })\n        .filter(v => v);\n\n      // Skip empty columns or row numbers\n      if (!columnValues.length || (idx === 0 && columnValues.every(v => v.match(/^\\d{1,3}$/)))) {\n        return;\n      }\n\n      // Date detection (MM/DD/YYYY format)\n      if (columnValues.every(v => v && v.match(/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/))) {\n        const year = parseInt(columnValues[0].split('/')[2]);\n        if (year >= 2024) {\n          mapping['appointment_date'] = idx;\n        } else {\n          mapping['dob'] = idx;\n        }\n      }\n      // Time detection (HH:MM AM/PM)\n      else if (columnValues.every(v => v && v.match(/^\\d{1,2}:\\d{2}\\s*(AM|PM)$/i))) {\n        mapping['appointment_time'] = idx;\n      }\n      // Provider detection (LASTNAME, FIRSTNAME format)\n      else if (columnValues.every(v => v && v.includes(',') && v.match(/^[A-Z]+,\\s*[A-Z]/))) {\n        mapping['provider'] = idx;\n      }\n      // Patient ID detection (7-9 digit numbers)\n      else if (columnValues.every(v => v.match(/^\\d{7,9}$/))) {\n        mapping['patient_id'] = idx;\n      }\n      // Email detection\n      else if (columnValues.some(v => v.includes('@') && v.includes('.'))) {\n        mapping['email'] = idx;\n      }\n      // Phone number detection\n      else if (\n        columnValues.some(v => {\n          const cleaned = v.replace(/\\D/g, '');\n          return cleaned.length === 10 || (cleaned.length >= 10 && v.includes('('));\n        })\n      ) {\n        if (!mapping['phone']) {\n          mapping['phone'] = idx;\n        } else if (!mapping['mobile']) {\n          mapping['mobile'] = idx;\n        }\n      }\n      // Name detection (text without special chars)\n      else if (columnValues.every(v => v.match(/^[A-Za-z\\s\\-'\\.]+$/))) {\n        const hasCommas = columnValues.some(v => v.includes(','));\n        if (!hasCommas) {\n          if (!mapping['first_name']) {\n            mapping['first_name'] = idx;\n          } else if (!mapping['last_name']) {\n            mapping['last_name'] = idx;\n          }\n        }\n      }\n    });\n\n    return mapping;\n  }\n\n  /**\n   * Heuristic column detection as fallback\n   */\n  private detectColumnsHeuristically(\n    headerLine: string,\n    delimiter: string\n  ): Record<string, number> {\n    const headers = headerLine.split(delimiter).map(h => h.trim().toLowerCase());\n    const mapping: Record<string, number> = {};\n\n    headers.forEach((header, idx) => {\n      if (header.includes('date') && !header.includes('birth')) {\n        mapping['appointment_date'] = idx;\n      } else if (\n        header.includes('time') ||\n        header.includes('apptstarttime') ||\n        header.includes('apptscheduletime')\n      ) {\n        mapping['appointment_time'] = idx;\n      } else if (header.includes('first')) {\n        mapping['first_name'] = idx;\n      } else if (header.includes('last')) {\n        mapping['last_name'] = idx;\n      } else if (header.includes('id') || header.includes('mrn') || header.includes('patientid')) {\n        mapping['patient_id'] = idx;\n      } else if (header.includes('dob') || header.includes('birth')) {\n        mapping['dob'] = idx;\n      } else if (header.includes('email')) {\n        mapping['email'] = idx;\n      } else if (\n        (header.includes('phone') || header.includes('homephone')) &&\n        !header.includes('mobile')\n      ) {\n        mapping['phone'] = idx;\n      } else if (\n        header.includes('mobile') ||\n        header.includes('cell') ||\n        header.includes('mobileno')\n      ) {\n        mapping['mobile'] = idx;\n      } else if (\n        header.includes('prvdr') ||\n        header.includes('provider') ||\n        header.includes('doctor') ||\n        header.includes('prvdrfullnme')\n      ) {\n        mapping['provider'] = idx;\n      }\n    });\n\n    return mapping;\n  }\n\n  /**\n   * Complete fallback parsing without AI\n   */\n  private fallbackParse(content: string): AIParseResult {\n    const lines = content.trim().split('\\n');\n    const delimiter = lines[0].includes('\\t') ? '\\t' : ',';\n    // Try intelligent detection first, fall back to header-based if needed\n    const columnMapping =\n      lines.length > 1\n        ? this.detectColumnsIntelligently(lines, delimiter)\n        : this.detectColumnsHeuristically(lines[0], delimiter);\n\n    logDebug('aiScheduleParser', 'Debug message', {});\n\n    const appointments: ParsedAppointment[] = [];\n    const parseErrors: string[] = [];\n\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (!line) continue;\n\n      const parts = line.split(delimiter).map(p => p.trim());\n      const appointment = this.parseRowWithPatterns(parts, columnMapping);\n\n      // Include appointments with valid date/time even if patient info is placeholder\n      const hasValidSchedule = appointment && appointment.date && appointment.time;\n\n      if (hasValidSchedule) {\n        // Handle placeholder patient data\n        if (!appointment.patientFirstName || appointment.patientFirstName === '-') {\n          appointment.patientFirstName = 'Available';\n        }\n        if (!appointment.patientLastName || appointment.patientLastName === '-') {\n          appointment.patientLastName = 'Slot';\n        }\n        if (!appointment.patientId || appointment.patientId === '-') {\n          appointment.patientId = `slot-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        }\n\n        appointments.push(appointment);\n      } else {\n        parseErrors.push(`Could not parse row ${i + 1}`);\n      }\n    }\n\n    return {\n      appointments,\n      columnMapping,\n      detectedFormat: 'Fallback parsing',\n      parseErrors,\n      suggestions: ['Consider using a more standard CSV format for better results'],\n    };\n  }\n\n  /**\n   * Generate suggestions for data improvement\n   */\n  private generateSuggestions(appointments: ParsedAppointment[], errors: string[]): string[] {\n    const suggestions: string[] = [];\n\n    // Check for missing critical fields\n    const missingDates = appointments.filter(a => !a.date).length;\n    const missingNames = appointments.filter(a => !a.patientLastName).length;\n    const missingIds = appointments.filter(a => !a.patientId).length;\n\n    if (missingDates > 0) {\n      suggestions.push(`${missingDates} appointments are missing dates`);\n    }\n    if (missingNames > 0) {\n      suggestions.push(`${missingNames} appointments are missing patient names`);\n    }\n    if (missingIds > 0) {\n      suggestions.push(`${missingIds} appointments are missing patient IDs`);\n    }\n\n    if (errors.length > 10) {\n      suggestions.push('Many parsing errors detected - consider checking data format');\n    }\n\n    // Check confidence levels\n    const lowConfidence = appointments.filter(a => a.confidence < 0.6).length;\n    if (lowConfidence > appointments.length * 0.3) {\n      suggestions.push('Low confidence in parsing - data may need manual review');\n    }\n\n    return suggestions;\n  }\n}\n\nexport const aiScheduleParserService = new AIScheduleParserService();\n","/**\n * Schedule Import Service\n * Handles bulk import of appointment schedules from CSV/TSV files\n */\n\nimport { appointmentService, type AppointmentCreateData } from './appointment.service';\nimport { unifiedAuthService } from './unifiedAuth.service';\nimport { simpleAppointmentService } from './simpleAppointment.service';\nimport { aiScheduleParserService } from './aiScheduleParser.service';\nimport { logError, logWarn, logInfo, logDebug } from './logger.service';\n\nexport interface ImportedAppointment {\n  apptdate: string;\n  patient_firstname: string;\n  patientid: string;\n  patient_lastname: string;\n  patientdob: string;\n  patient_email: string;\n  patient_homephone: string;\n  patient_mobile?: string;\n  rndrng_prvdr: string;\n  apptscheduletime?: string;\n  appt_schdlng_prvdrfullnme?: string; // Provider full name\n}\n\nexport interface ImportResult {\n  success: boolean;\n  imported: number;\n  failed: number;\n  errors: string[];\n  appointments?: any[];\n}\n\n// Provider mapping - handles both codes and full names\nconst PROVIDER_MAPPING: Record<string, { email: string; name: string; id: string }> = {\n  // Provider codes\n  'GC_EPC_Adeleke_A': { email: 'adeleke@tshla.ai', name: 'Dr. Adenike Adeleke', id: 'doc_adeleke' },\n  'GC_EPC_Chamakkala_T': { email: 'tess@tshla.ai', name: 'Dr. Tess Chamakkala', id: 'doc_tess' },\n  'GC_EPC_Shakya_E': { email: 'elina@tshla.ai', name: 'Dr. Elina Shakya', id: 'doc_elina' },\n  'GC_EPC_Watwe_V': { email: 'veena@tshla.ai', name: 'Dr. Veena Watwe', id: 'doc_veena' },\n  'GC_EPC_Bernander_R': { email: 'radha@tshla.ai', name: 'Dr. Radha Bernander', id: 'doc_radha' },\n  'GC_EPC_Laverde_V': { email: 'vanessa@tshla.ai', name: 'Dr. Cindy Laverde', id: 'doc_vanessa' },\n  'GC_EPC_Laverde_C': { email: 'vanessa@tshla.ai', name: 'Dr. Cindy Laverde', id: 'doc_vanessa' },\n  'GC_EPC_Tonye_G': { email: 'ghislaine@tshla.ai', name: 'Dr. Ghislaine Tonye', id: 'doc_ghislaine' },\n  'GC_EPC_Gregorek_S': { email: 'shannon@tshla.ai', name: 'Dr. Shannon Gregorek', id: 'doc_shannon' },\n  'GC_EPC_Gregroek_S': { email: 'shannon@tshla.ai', name: 'Dr. Shannon Gregorek', id: 'doc_shannon' },\n  \n  // Full names - LASTNAME, FIRSTNAME format\n  'ADELEKE, ADENIKE': { email: 'adeleke@tshla.ai', name: 'Dr. Adenike Adeleke', id: 'doc_adeleke' },\n  'BERNANDER, RADHA': { email: 'radha@tshla.ai', name: 'Dr. Radha Bernander', id: 'doc_radha' },\n  'CHAMAKKALA, TESS': { email: 'tess@tshla.ai', name: 'Dr. Tess Chamakkala', id: 'doc_tess' },\n  'GREGOREK, SHANNON': { email: 'shannon@tshla.ai', name: 'Dr. Shannon Gregorek', id: 'doc_shannon' },\n  'LAVERDE, CINDY': { email: 'vanessa@tshla.ai', name: 'Dr. Cindy Laverde', id: 'doc_vanessa' },\n  'PATEL, NEHA': { email: 'neha@tshla.ai', name: 'Dr. Neha Patel', id: 'doc_neha' },\n  'PATEL, RAKESH': { email: 'rakesh.patel@tshla.ai', name: 'Dr. Rakesh Patel', id: 'doc_rakesh_patel' },\n  'PATEL-KONASAGAR, KRUTI': { email: 'kruti@tshla.ai', name: 'Dr. Kruti Patel-Konasagar', id: 'doc_kruti' },\n  'RAGHU, PREEYA': { email: 'preeya@tshla.ai', name: 'Dr. Preeya Raghu', id: 'doc_preeya' },\n  'SHAKYA, ELINA': { email: 'elina@tshla.ai', name: 'Dr. Elina Shakya', id: 'doc_elina' },\n  'SUBAWALLA, DILNAVAZ': { email: 'dilnavaz@tshla.ai', name: 'Dr. Dilnavaz Subawalla', id: 'doc_dilnavaz' },\n  'TONYE, GHISLAINE': { email: 'ghislaine@tshla.ai', name: 'Dr. Ghislaine Tonye', id: 'doc_ghislaine' },\n  'WADE-REESCANO, KAMILI': { email: 'kamili@tshla.ai', name: 'Dr. Kamili Wade-Reescano', id: 'doc_kamili' },\n  'WATWE, VEENA': { email: 'veena@tshla.ai', name: 'Dr. Veena Watwe', id: 'doc_veena' },\n  'YOUNUS, NADIA': { email: 'nadia@tshla.ai', name: 'Dr. Nadia Younus', id: 'doc_nadia' },\n  'LEAL, ELIZABETH': { email: 'elizabeth@tshla.ai', name: 'Dr. Elizabeth Leal', id: 'doc_elizabeth' },\n  'NEBEOLISA, OGECHI': { email: 'ogechi@tshla.ai', name: 'Dr. Ogechi Nebeolisa', id: 'doc_ogechi' },\n  \n  // Just last names (common in some formats)\n  'ADELEKE': { email: 'adeleke@tshla.ai', name: 'Dr. Adenike Adeleke', id: 'doc_adeleke' },\n  'ADENIKE': { email: 'adeleke@tshla.ai', name: 'Dr. Adenike Adeleke', id: 'doc_adeleke' },\n  'BERNANDER': { email: 'radha@tshla.ai', name: 'Dr. Radha Bernander', id: 'doc_radha' },\n  'CHAMAKKALA': { email: 'tess@tshla.ai', name: 'Dr. Tess Chamakkala', id: 'doc_tess' },\n  'GREGOREK': { email: 'shannon@tshla.ai', name: 'Dr. Shannon Gregorek', id: 'doc_shannon' },\n  'SHANNON': { email: 'shannon@tshla.ai', name: 'Dr. Shannon Gregorek', id: 'doc_shannon' },\n  'LAVERDE': { email: 'vanessa@tshla.ai', name: 'Dr. Cindy Laverde', id: 'doc_vanessa' },\n  'PATEL': { email: 'neha@tshla.ai', name: 'Dr. Neha Patel', id: 'doc_neha' },\n  'RAKESH': { email: 'rakesh.patel@tshla.ai', name: 'Dr. Rakesh Patel', id: 'doc_rakesh_patel' },\n  'RAKESH PATEL': { email: 'rakesh.patel@tshla.ai', name: 'Dr. Rakesh Patel', id: 'doc_rakesh_patel' },\n  'DR RAKESH PATEL': { email: 'rakesh.patel@tshla.ai', name: 'Dr. Rakesh Patel', id: 'doc_rakesh_patel' },\n  'SHAKYA': { email: 'elina@tshla.ai', name: 'Dr. Elina Shakya', id: 'doc_elina' },\n  'TONYE': { email: 'ghislaine@tshla.ai', name: 'Dr. Ghislaine Tonye', id: 'doc_ghislaine' },\n  'WATWE': { email: 'veena@tshla.ai', name: 'Dr. Veena Watwe', id: 'doc_veena' },\n  'YOUNUS': { email: 'nadia@tshla.ai', name: 'Dr. Nadia Younus', id: 'doc_nadia' },\n  'LEAL': { email: 'elizabeth@tshla.ai', name: 'Dr. Elizabeth Leal', id: 'doc_elizabeth' },\n  'NEBEOLISA': { email: 'ogechi@tshla.ai', name: 'Dr. Ogechi Nebeolisa', id: 'doc_ogechi' },\n  'SUBAWALLA': { email: 'dilnavaz@tshla.ai', name: 'Dr. Dilnavaz Subawalla', id: 'doc_dilnavaz' },\n  'RAGHU': { email: 'preeya@tshla.ai', name: 'Dr. Preeya Raghu', id: 'doc_preeya' },\n  'WADE-REESCANO': { email: 'kamili@tshla.ai', name: 'Dr. Kamili Wade-Reescano', id: 'doc_kamili' },\n  'KAMILI': { email: 'kamili@tshla.ai', name: 'Dr. Kamili Wade-Reescano', id: 'doc_kamili' },\n  \n  // Special cases\n  'IDEAL PROTEIN COACH,': { email: 'coach@tshla.ai', name: 'Ideal Protein Coach', id: 'doc_coach' },\n  'IDEAL PROTEIN COACH': { email: 'coach@tshla.ai', name: 'Ideal Protein Coach', id: 'doc_coach' },\n  'EPCTHRIVE,': { email: 'epcthrive@tshla.ai', name: 'EPCThrive', id: 'doc_epcthrive' },\n  'EPCTHRIVE': { email: 'epcthrive@tshla.ai', name: 'EPCThrive', id: 'doc_epcthrive' },\n  'CGMS KATY,': { email: 'cgms@tshla.ai', name: 'CGMS Katy', id: 'doc_cgms' },\n  'CGMS KATY': { email: 'cgms@tshla.ai', name: 'CGMS Katy', id: 'doc_cgms' }\n};\n\nclass ScheduleImportService {\n  /**\n   * Parse CSV/TSV content into appointment objects\n   */\n  parseScheduleFile(content: string): ImportedAppointment[] {\n    const lines = content.trim().split('\\n');\n    const appointments: ImportedAppointment[] = [];\n    \n    if (lines.length < 2) return appointments;\n    \n    // Parse header to determine column positions\n    const headerLine = lines[0];\n    const delimiter = headerLine.includes('\\t') ? '\\t' : ',';\n    const headers = headerLine.split(delimiter).map(h => h.trim().toLowerCase().replace(/\\s+/g, ''));\n    \n    // Map header positions\n    const columnMap: Record<string, number> = {};\n    headers.forEach((header, index) => {\n      // Normalize header names to match expected fields\n      if (header.includes('apptdate') || header.includes('appointmentdate') || (header === 'date' && !header.includes('birth'))) {\n        columnMap['apptdate'] = index;\n      }\n      if (header.includes('firstname') || header === 'patientfirstname' || header === 'first') {\n        columnMap['firstname'] = index;\n      }\n      if (header.includes('lastname') || header === 'patientlastname' || header === 'last') {\n        columnMap['lastname'] = index;\n      }\n      if (header.includes('patientid') || header === 'id' || header === 'mrn' || header === 'patientnumber') {\n        columnMap['patientid'] = index;\n      }\n      if (header.includes('dob') || header.includes('dateofbirth') || header.includes('patientdob') || header.includes('birthdate')) {\n        columnMap['dob'] = index;\n      }\n      if (header.includes('email') || header.includes('patientemail')) {\n        columnMap['email'] = index;\n      }\n      if (header.includes('phone') || header.includes('homephone') || header.includes('patienthomephone')) {\n        columnMap['phone'] = index;\n      }\n      if (header.includes('mobile') || header.includes('cell') || header.includes('patientmobile')) {\n        columnMap['mobile'] = index;\n      }\n      // Provider should be more specific to avoid matching date columns\n      if (header.includes('prvdr') || header.includes('provider') || header.includes('rndrng') || \n          header.includes('schdlng') || header.includes('doctor') || header.includes('physician')) {\n        columnMap['provider'] = index;\n      }\n      if (header.includes('time') || header.includes('apptscheduletime') || header.includes('appointmenttime') || header.includes('scheduletime')) {\n        columnMap['time'] = index;\n      }\n    });\n    \n    // Debug log the column mapping\n    logDebug('scheduleImport', 'Debug message', {});\n    logDebug('scheduleImport', 'Debug message', {});\n    \n    // Process data rows\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (!line) continue;\n      \n      const parts = line.split(delimiter).map(p => p.trim());\n      \n      // Skip if row doesn't have enough data\n      if (parts.length < 5) continue;\n      \n      // Build appointment object using mapped columns\n      const appointment: ImportedAppointment = {\n        apptdate: columnMap['apptdate'] !== undefined ? parts[columnMap['apptdate']] : '',\n        patient_firstname: columnMap['firstname'] !== undefined ? parts[columnMap['firstname']] : '',\n        patient_lastname: columnMap['lastname'] !== undefined ? parts[columnMap['lastname']] : '',\n        patientid: columnMap['patientid'] !== undefined ? parts[columnMap['patientid']] : '',\n        patientdob: columnMap['dob'] !== undefined ? parts[columnMap['dob']] : '',\n        patient_email: columnMap['email'] !== undefined ? \n          (parts[columnMap['email']] === 'No Email' ? '' : parts[columnMap['email']]) : '',\n        patient_homephone: columnMap['phone'] !== undefined ? parts[columnMap['phone']] : '',\n        patient_mobile: columnMap['mobile'] !== undefined ? parts[columnMap['mobile']] : '',\n        rndrng_prvdr: columnMap['provider'] !== undefined ? parts[columnMap['provider']] : '',\n        appt_schdlng_prvdrfullnme: columnMap['provider'] !== undefined ? parts[columnMap['provider']] : '',\n        apptscheduletime: columnMap['time'] !== undefined ? parts[columnMap['time']] : ''\n      };\n      \n      // Debug first few rows\n      if (i <= 3) {\n        logDebug('scheduleImport', 'Debug message', {});\n        logDebug('scheduleImport', 'Debug message', {});\n      }\n      \n      // Only add if we have minimum required fields\n      // Include rows with dates and provider info even if patient data is placeholder\n      const hasValidDate = appointment.apptdate && appointment.apptdate !== '-';\n      const hasValidProvider = (appointment.rndrng_prvdr && appointment.rndrng_prvdr !== '-') ||\n                               (appointment.appt_schdlng_prvdrfullnme && appointment.appt_schdlng_prvdrfullnme !== '-');\n      \n      // Row is valid if it has date and provider (even if patient info is placeholder)\n      if (hasValidDate && hasValidProvider) {\n        // If patient info is placeholder, generate temporary values\n        if (appointment.patient_firstname === '-' || !appointment.patient_firstname) {\n          appointment.patient_firstname = 'Available';\n        }\n        if (appointment.patient_lastname === '-' || !appointment.patient_lastname) {\n          appointment.patient_lastname = 'Slot';\n        }\n        if (appointment.patientid === '-' || !appointment.patientid) {\n          appointment.patientid = `slot-${i}-${Date.now()}`;\n        }\n        \n        appointments.push(appointment);\n      }\n    }\n    \n    return appointments;\n  }\n  \n  /**\n   * Convert date from MM/DD/YYYY to YYYY-MM-DD\n   */\n  private formatDate(dateStr: string): string {\n    const parts = dateStr.split('/');\n    if (parts.length !== 3) return dateStr;\n    \n    const [month, day, year] = parts;\n    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n  }\n  \n  /**\n   * Convert time from HH:MM AM/PM format or generate if not provided\n   */\n  private formatTimeSlot(timeStr: string | undefined, index: number, totalForDay: number): string {\n    // If time is provided in the data, use it\n    if (timeStr && timeStr.includes(':')) {\n      // Handle formats like \"07:10 PM\" or \"7:10 PM\"\n      const cleanTime = timeStr.trim();\n      if (cleanTime.match(/^\\d{1,2}:\\d{2}\\s*(AM|PM)$/i)) {\n        return cleanTime.toUpperCase();\n      }\n    }\n    \n    // Otherwise generate time slot\n    const startHour = 9; // Start at 9 AM\n    const endHour = 17; // End at 5 PM\n    const totalSlots = endHour - startHour;\n    \n    // Calculate time based on index\n    const minutesPerAppointment = (totalSlots * 60) / totalForDay;\n    const totalMinutes = index * minutesPerAppointment;\n    const hours = Math.floor(totalMinutes / 60) + startHour;\n    const minutes = Math.floor(totalMinutes % 60);\n    \n    // Format as 12-hour time\n    const period = hours >= 12 ? 'PM' : 'AM';\n    const displayHour = hours > 12 ? hours - 12 : hours;\n    const displayMinutes = minutes === 0 ? '00' : minutes < 10 ? `0${minutes}` : minutes;\n    \n    return `${displayHour}:${displayMinutes} ${period}`;\n  }\n  \n  /**\n   * Import appointments into the system with AI assistance\n   */\n  async importAppointmentsWithAI(\n    fileContent: string,\n    createdBy: string,\n    clearExisting: boolean = false\n  ): Promise<ImportResult> {\n    const errors: string[] = [];\n    const imported: any[] = [];\n    let failedCount = 0;\n    \n    try {\n      logDebug('scheduleImport', 'Debug message', {});\n      \n      // Debug: Check input file\n      const inputLines = fileContent.trim().split('\\n');\n      logDebug('scheduleImport', 'Debug message', {});\n      logDebug('scheduleImport', 'Debug message', {});\n      \n      // Clear existing appointments if requested\n      if (clearExisting) {\n        simpleAppointmentService.clearAllAppointments();\n        logInfo('scheduleImport', 'Info message', {});\n      } else {\n        logDebug('scheduleImport', 'Debug message', {});\n      }\n      \n      // Use AI to parse the schedule\n      const aiResult = await aiScheduleParserService.parseScheduleWithAI(fileContent);\n      \n      if (aiResult.appointments.length === 0) {\n        return {\n          success: false,\n          imported: 0,\n          failed: 0,\n          errors: ['No valid appointments found in file. ' + aiResult.suggestions.join('; ')]\n        };\n      }\n      \n      logDebug('scheduleImport', 'Debug message', {});\n      logDebug('scheduleImport', 'Debug message', {});\n      \n      // Track duplicates\n      const seenAppointments = new Set<string>();\n      const duplicateCount = { count: 0 };\n      let processedCount = 0;\n      \n      logDebug('scheduleImport', 'Debug message', {});\n      logDebug('scheduleImport', 'Debug message', {});\n      logDebug('scheduleImport', 'Debug message', {});\n      \n      // Process each AI-parsed appointment\n      for (const aiAppt of aiResult.appointments) {\n        processedCount++;\n        \n        // Create unique key for duplicate detection\n        // Only consider it a duplicate if it's the SAME patient with SAME doctor at SAME date/time\n        const date = aiAppt.date || 'no-date';\n        const rawTime = aiAppt.time || 'no-time';\n        \n        // Normalize time for better duplicate detection\n        const normalizedTime = this.normalizeTime(rawTime) || rawTime;\n        \n        const patientFirst = aiAppt.patientFirstName || '';\n        const patientLast = aiAppt.patientLastName || '';\n        const patientId = aiAppt.patientId || '';\n        const provider = aiAppt.providerName || aiAppt.providerCode || 'unknown';\n        \n        // Create unique key: patient+provider+date+normalized_time\n        // This allows same patient to have appointments with different doctors or at different times\n        const apptKey = `${patientId || (patientFirst + patientLast)}|${provider}|${date}|${normalizedTime}`.toLowerCase().trim();\n        \n        // Debug logging for first few appointments\n        if (processedCount <= 5) {\n          logDebug('scheduleImport', 'Debug message', {});\n          logDebug('scheduleImport', 'Debug message', {});\n        }\n        \n        if (seenAppointments.has(apptKey)) {\n          duplicateCount.count++;\n          if (duplicateCount.count <= 5) { // Only log first 5 duplicates\n            logDebug('scheduleImport', 'Debug message', {});\n          }\n          continue;\n        }\n        seenAppointments.add(apptKey);\n        \n        if (processedCount % 100 === 0) {\n          logDebug('scheduleImport', 'Debug message', {});\n        }\n        try {\n          // Map provider name to our system\n          let doctorInfo = null;\n          \n          if (aiAppt.providerName || aiAppt.providerCode) {\n            const providerKey = aiAppt.providerCode || aiAppt.providerName || '';\n            \n            // Debug logging (only for first few to reduce noise)\n            if (processedCount <= 3) {\n              logDebug('scheduleImport', 'Debug message', {});\n              logDebug('scheduleImport', 'Debug message', {});\n              logDebug('scheduleImport', 'Debug message', {});\n            }\n            \n            // Try exact match first (case-insensitive)\n            const exactMatch = Object.entries(PROVIDER_MAPPING).find(([key]) => \n              key.toUpperCase() === providerKey.toUpperCase()\n            );\n            \n            if (exactMatch) {\n              doctorInfo = exactMatch[1];\n              if (processedCount <= 3) {\n                logInfo('scheduleImport', 'Info message', {});\n              }\n            }\n            \n            // Try without trailing comma/spaces\n            if (!doctorInfo && providerKey) {\n              const cleanKey = providerKey.replace(/[,\\s]+$/, '').trim();\n              const cleanMatch = Object.entries(PROVIDER_MAPPING).find(([key]) => \n                key.toUpperCase() === cleanKey.toUpperCase()\n              );\n              \n              if (cleanMatch) {\n                doctorInfo = cleanMatch[1];\n                logInfo('scheduleImport', 'Info message', {});\n              }\n            }\n            \n            // Try last name only match\n            if (!doctorInfo && providerKey) {\n              const lastName = providerKey.split(',')[0].trim().toUpperCase();\n              const lastNameMatch = Object.entries(PROVIDER_MAPPING).find(([key]) => {\n                const keyLastName = key.split(',')[0].trim().toUpperCase();\n                return keyLastName === lastName || key.toUpperCase() === lastName;\n              });\n              \n              if (lastNameMatch) {\n                doctorInfo = lastNameMatch[1];\n                logInfo('scheduleImport', 'Info message', {});\n              }\n            }\n            \n            // Try partial match\n            if (!doctorInfo && providerKey) {\n              const partialMatch = Object.entries(PROVIDER_MAPPING).find(([key]) => {\n                const upperKey = key.toUpperCase();\n                const upperProvider = providerKey.toUpperCase();\n                return upperKey.includes(upperProvider) || upperProvider.includes(upperKey);\n              });\n              \n              if (partialMatch) {\n                doctorInfo = partialMatch[1];\n                logInfo('scheduleImport', 'Info message', {});\n              }\n            }\n          }\n          \n          // Use rotating default doctors if no match (to distribute load)\n          if (!doctorInfo) {\n            const defaultDoctors = [\n              { email: 'tess@tshla.ai', name: 'Dr. Tess Chamakkala', id: 'doc_tess' },\n              { email: 'elina@tshla.ai', name: 'Dr. Elina Shakya', id: 'doc_elina' },\n              { email: 'veena@tshla.ai', name: 'Dr. Veena Watwe', id: 'doc_veena' },\n              { email: 'radha@tshla.ai', name: 'Dr. Radha Bernander', id: 'doc_radha' },\n              { email: 'shannon@tshla.ai', name: 'Dr. Shannon Gregorek', id: 'doc_shannon' },\n              { email: 'adeleke@tshla.ai', name: 'Dr. Adenike Adeleke', id: 'doc_adeleke' },\n              { email: 'rakesh.patel@tshla.ai', name: 'Dr. Rakesh Patel', id: 'doc_rakesh_patel' }\n            ];\n            const defaultIndex = imported.length % defaultDoctors.length;\n            doctorInfo = defaultDoctors[defaultIndex];\n            \n            logDebug('scheduleImport', 'Debug message', {});\n            logDebug('scheduleImport', 'Debug message', {});\n            \n            // Track unmatched providers for analysis\n            if (!errors.find(e => e.includes(`Unmatched provider: ${aiAppt.providerName || aiAppt.providerCode}`))) {\n              errors.push(`Info: Unmatched provider: \"${aiAppt.providerName || aiAppt.providerCode}\" - please add to mapping`);\n            }\n          }\n          \n          // Format dates\n          const appointmentDate = aiAppt.date ? this.formatDate(aiAppt.date) : '';\n          const patientDob = aiAppt.patientDob ? this.formatDate(aiAppt.patientDob) : '';\n          \n          // Create appointment in simple service (always works)\n          await simpleAppointmentService.createAppointment({\n            patientId: aiAppt.patientId || `auto-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n            patientName: `${aiAppt.patientFirstName || ''} ${aiAppt.patientLastName || ''}`.trim() || 'Unknown Patient',\n            patientPhone: aiAppt.patientPhone || aiAppt.patientMobile || '',\n            patientEmail: aiAppt.patientEmail || '',\n            doctorId: doctorInfo.id,\n            doctorName: doctorInfo.name,\n            date: appointmentDate,\n            time: this.normalizeTime(aiAppt.time) || this.generateTimeSlot(imported.length),\n            duration: 30,\n            visitType: aiAppt.visitType || 'follow-up',\n            visitReason: 'Scheduled Visit',\n            notes: `Imported with ${Math.round(aiAppt.confidence * 100)}% confidence. Provider: ${aiAppt.providerName || aiAppt.providerCode || 'Unknown'}`\n          });\n          \n          imported.push({\n            id: `import-${Date.now()}-${imported.length}`,\n            patient_name: `${aiAppt.patientFirstName || ''} ${aiAppt.patientLastName || ''}`.trim(),\n            doctor_name: doctorInfo.name,\n            appointment_date: appointmentDate,\n            appointment_time: aiAppt.time || 'TBD',\n            confidence: aiAppt.confidence\n          });\n          \n        } catch (error) {\n          const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n          errors.push(`Failed to import appointment: ${errorMsg}`);\n          failedCount++;\n        }\n      }\n      \n      // Add AI suggestions to errors if helpful\n      if (aiResult.suggestions.length > 0) {\n        errors.push(...aiResult.suggestions.map(s => `Suggestion: ${s}`));\n      }\n      \n      // Final import summary\n      logDebug('scheduleImport', 'Debug message', {});\n      logDebug('scheduleImport', 'Debug message', {});\n      logDebug('scheduleImport', 'Debug message', {});\n      logDebug('scheduleImport', 'Debug message', {});\n      logDebug('scheduleImport', 'Debug message', {});\n      \n      // Log duplicate information\n      if (duplicateCount.count > 0) {\n        errors.push(`Info: Skipped ${duplicateCount.count} duplicate appointments`);\n      }\n      \n      return {\n        success: imported.length > 0,\n        imported: imported.length,\n        failed: failedCount,\n        duplicates: duplicateCount.count,\n        errors,\n        appointments: imported\n      };\n      \n    } catch (error) {\n      logError('scheduleImport', 'Error message', {});\n      // Fall back to the original import method\n      return this.importAppointments(fileContent, createdBy);\n    }\n  }\n  \n  /**\n   * Normalize time format to handle various input formats\n   */\n  private normalizeTime(timeStr: string | undefined): string | null {\n    if (!timeStr) return null;\n    \n    // Remove any invalid characters\n    const cleanTime = timeStr.trim();\n    \n    // Check for standard time format\n    if (cleanTime.match(/^\\d{1,2}:\\d{2}\\s*(AM|PM)$/i)) {\n      return cleanTime.toUpperCase();\n    }\n    \n    // Handle times like \"380:00\" by converting to valid times\n    if (cleanTime.match(/^\\d+:\\d{2}$/)) {\n      const [hoursStr, minutesStr] = cleanTime.split(':');\n      let hours = parseInt(hoursStr);\n      const minutes = parseInt(minutesStr);\n      \n      // If hours > 24, wrap around\n      if (hours >= 24) {\n        hours = 9 + (hours % 8); // Map to 9 AM - 5 PM range\n      }\n      \n      const period = hours >= 12 ? 'PM' : 'AM';\n      const displayHour = hours > 12 ? hours - 12 : hours === 0 ? 12 : hours;\n      \n      return `${displayHour}:${minutes.toString().padStart(2, '0')} ${period}`;\n    }\n    \n    // Try to parse as 24-hour format\n    if (cleanTime.match(/^\\d{1,2}:\\d{2}$/)) {\n      const [hoursStr, minutesStr] = cleanTime.split(':');\n      const hours = parseInt(hoursStr);\n      const minutes = parseInt(minutesStr);\n      \n      if (hours >= 0 && hours < 24 && minutes >= 0 && minutes < 60) {\n        const period = hours >= 12 ? 'PM' : 'AM';\n        const displayHour = hours > 12 ? hours - 12 : hours === 0 ? 12 : hours;\n        return `${displayHour}:${minutes.toString().padStart(2, '0')} ${period}`;\n      }\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Generate a time slot for appointments without times\n   */\n  private generateTimeSlot(index: number): string {\n    const startHour = 9;\n    const endHour = 17; // 5 PM\n    const slotsPerDay = (endHour - startHour) * 2; // 30-minute slots\n    \n    // Wrap around to distribute across working hours\n    const slotInDay = index % slotsPerDay;\n    const totalMinutes = slotInDay * 30;\n    const hours = Math.floor(totalMinutes / 60) + startHour;\n    const minutes = totalMinutes % 60;\n    \n    const period = hours >= 12 ? 'PM' : 'AM';\n    const displayHour = hours > 12 ? hours - 12 : hours === 0 ? 12 : hours;\n    \n    return `${displayHour}:${minutes.toString().padStart(2, '0')} ${period}`;\n  }\n  \n  /**\n   * Import appointments into the system (original method as fallback)\n   */\n  async importAppointments(\n    fileContent: string,\n    createdBy: string\n  ): Promise<ImportResult> {\n    const errors: string[] = [];\n    const imported: any[] = [];\n    let failedCount = 0;\n    \n    try {\n      // Parse the file\n      const appointments = this.parseScheduleFile(fileContent);\n      \n      if (appointments.length === 0) {\n        return {\n          success: false,\n          imported: 0,\n          failed: 0,\n          errors: ['No valid appointments found in file']\n        };\n      }\n      \n      // Debug first appointment to see what we got\n      logDebug('scheduleImport', 'Debug message', {});\n      logDebug('scheduleImport', 'Debug message', {});\n      \n      // Group appointments by date and doctor\n      const groupedAppointments = new Map<string, ImportedAppointment[]>();\n      \n      for (const appt of appointments) {\n        // Use provider or default to 'unknown'\n        const providerKey = appt.rndrng_prvdr || appt.appt_schdlng_prvdrfullnme || 'unknown';\n        const key = `${appt.apptdate}_${providerKey}`;\n        if (!groupedAppointments.has(key)) {\n          groupedAppointments.set(key, []);\n        }\n        groupedAppointments.get(key)!.push(appt);\n      }\n      \n      // Process each group\n      for (const [key, appts] of groupedAppointments) {\n        const parts = key.split('_');\n        const date = parts[0];\n        const provider = parts.slice(1).join('_'); // Handle provider names with underscores\n        \n        // Try to find doctor info - check both provider code and full name\n        let doctorInfo = PROVIDER_MAPPING[provider];\n        \n        // If not found by code, try by full name (handle variations)\n        if (!doctorInfo && appts[0]?.appt_schdlng_prvdrfullnme) {\n          const fullName = appts[0].appt_schdlng_prvdrfullnme.trim();\n          doctorInfo = PROVIDER_MAPPING[fullName];\n        }\n        \n        // Try to match by partial name\n        if (!doctorInfo && provider && provider !== 'unknown') {\n          // Try to find a match in our mapping\n          for (const [mapKey, mapValue] of Object.entries(PROVIDER_MAPPING)) {\n            if (mapKey.toLowerCase().includes(provider.toLowerCase()) || \n                provider.toLowerCase().includes(mapKey.toLowerCase())) {\n              doctorInfo = mapValue;\n              break;\n            }\n          }\n        }\n        \n        if (!doctorInfo) {\n          // Use a default doctor or skip\n          if (provider && provider.trim() && provider !== 'unknown') {\n            errors.push(`Unknown provider: ${provider} (first patient: ${appts[0]?.patient_firstname} ${appts[0]?.patient_lastname})`);\n            failedCount += appts.length;\n          } else {\n            // If no provider specified, use a default\n            doctorInfo = { email: 'tess@tshla.ai', name: 'Dr. Tess Chamakkala', id: 'doc_tess' };\n            logDebug('scheduleImport', 'Debug message', {});\n          }\n          if (!doctorInfo) continue;\n        }\n        \n        // Process appointments for this doctor on this date\n        for (let i = 0; i < appts.length; i++) {\n          const appt = appts[i];\n          \n          try {\n            const appointmentData: AppointmentCreateData = {\n              patient_name: `${appt.patient_firstname} ${appt.patient_lastname}`.trim(),\n              patient_mrn: appt.patientid,\n              patient_id: appt.patientid,\n              patient_phone: appt.patient_homephone,\n              patient_email: appt.patient_email,\n              patient_dob: this.formatDate(appt.patientdob),\n              appointment_date: this.formatDate(appt.apptdate),\n              appointment_time: this.formatTimeSlot(appt.apptscheduletime, i, appts.length),\n              duration_minutes: 30,\n              visit_type: 'follow-up',\n              location: 'Main Clinic'\n            };\n            \n            // Create appointment in database if available\n            let result: any;\n            try {\n              result = await appointmentService.createAppointment(\n                doctorInfo.id,\n                appointmentData,\n                createdBy\n              );\n            } catch (dbError) {\n              // If database fails, use in-memory service\n              logDebug('scheduleImport', 'Debug message', {});\n            }\n            \n            // Also create in the simple appointment service for calendar display\n            await simpleAppointmentService.createAppointment({\n              patientId: appt.patientid,\n              patientName: `${appt.patient_firstname} ${appt.patient_lastname}`.trim(),\n              patientPhone: appt.patient_homephone,\n              patientEmail: appt.patient_email,\n              doctorId: doctorInfo.id,\n              doctorName: doctorInfo.name,\n              date: this.formatDate(appt.apptdate),\n              time: this.formatTimeSlot(appt.apptscheduletime, i, appts.length),\n              duration: 30,\n              visitType: 'follow-up',\n              visitReason: 'Scheduled Visit',\n              notes: `Imported from schedule - Provider: ${provider}`\n            });\n            \n            imported.push({\n              id: `import-${Date.now()}-${i}`,\n              patient_name: `${appt.patient_firstname} ${appt.patient_lastname}`.trim(),\n              doctor_name: doctorInfo.name,\n              appointment_date: this.formatDate(appt.apptdate),\n              appointment_time: this.formatTimeSlot(appt.apptscheduletime, i, appts.length)\n            });\n            \n          } catch (error) {\n            const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n            errors.push(`Failed to import ${appt.patient_firstname} ${appt.patient_lastname}: ${errorMsg}`);\n            failedCount++;\n          }\n        }\n      }\n      \n      return {\n        success: imported.length > 0,\n        imported: imported.length,\n        failed: failedCount,\n        duplicates: duplicateCount.count,\n        errors,\n        appointments: imported\n      };\n      \n    } catch (error) {\n      return {\n        success: false,\n        imported: 0,\n        failed: appointments.length,\n        errors: [error instanceof Error ? error.message : 'Failed to import appointments']\n      };\n    }\n  }\n  \n  /**\n   * Validate file format\n   */\n  validateFile(content: string): { valid: boolean; error?: string } {\n    if (!content || content.trim().length === 0) {\n      return { valid: false, error: 'File is empty' };\n    }\n    \n    const lines = content.trim().split('\\n');\n    if (lines.length < 2) {\n      return { valid: false, error: 'File must contain header and at least one appointment' };\n    }\n    \n    // Check header - normalize spaces and special characters\n    const header = lines[0].toLowerCase()\n      .replace(/\\s+/g, '') // Remove all spaces\n      .replace(/_/g, ''); // Remove underscores\n    \n    logDebug('scheduleImport', 'Debug message', {}); // Debug log\n    \n    // Check for date field variations\n    const hasDateField = header.includes('apptdate') || \n                        header.includes('appointmentdate') ||\n                        header.includes('date');\n    \n    // Check for name field variations (more flexible)\n    const hasFirstName = header.includes('firstname') || \n                        header.includes('first') ||\n                        header.includes('fname') ||\n                        header.includes('patientfirstname');\n                        \n    const hasLastName = header.includes('lastname') || \n                       header.includes('last') ||\n                       header.includes('lname') ||\n                       header.includes('patientlastname');\n    \n    const hasNameFields = hasFirstName && hasLastName;\n    \n    // Check for ID field variations\n    const hasIdField = header.includes('patientid') || \n                      header.includes('id') || \n                      header.includes('mrn') ||\n                      header.includes('patientnumber') ||\n                      header.includes('patientno');\n    \n    // Debug logging\n    logDebug('scheduleImport', 'Debug message', {});\n    \n    if (!hasDateField || !hasNameFields || !hasIdField) {\n      return { \n        valid: false, \n        error: `Missing required fields. File must contain: appointment date (found: ${hasDateField}), patient name first/last (found: ${hasNameFields}), and patient ID (found: ${hasIdField}). Header detected: \"${lines[0].substring(0, 100)}...\"` \n      };\n    }\n    \n    return { valid: true };\n  }\n  \n  /**\n   * Get provider mapping for display\n   */\n  getProviderMapping() {\n    return PROVIDER_MAPPING;\n  }\n  \n  /**\n   * Get sample file format\n   */\n  getSampleFormat(): string {\n    return `SUPPORTED FORMATS:\n\nFORMAT 1 (Tab or Comma Separated):\napptdate,patient firstname,patientid,patient lastname,patientdob,patient email,patient homephone,rndrng prvdr,apptscheduletime\n09/09/2025,JOHN,12345678,DOE,01/15/1980,john.doe@email.com,(713) 555-0100,GC_EPC_Chamakkala_T,10:30 AM\n09/09/2025,JANE,87654321,SMITH,05/20/1975,jane.smith@email.com,(713) 555-0200,GC_EPC_Watwe_V,11:00 AM\n\nFORMAT 2 (Tab or Comma Separated):\napptdate,appt schdlng prvdrfullnme,patientdob,patient firstname,patient lastname,patientid,patient email,patient homephone,patient mobile no\n09/09/2025,CHAMAKKALA TESS,01/15/1980,JOHN,DOE,12345678,john.doe@email.com,(713) 555-0100,(713) 555-0101\n09/09/2025,WATWE VEENA,05/20/1975,JANE,SMITH,87654321,jane.smith@email.com,(713) 555-0200,(713) 555-0201\n\nNOTES:\n- Headers can have spaces (e.g., \"patient firstname\" or \"patientfirstname\")\n- Tab or comma delimited both work\n- Provider can be code (GC_EPC_xxx) or name (LASTNAME, FIRSTNAME)\n- Required fields: date, patient name (first & last), patient ID`;\n  }\n}\n\nexport const scheduleImportService = new ScheduleImportService();","import React, { useState } from 'react';\nimport { scheduleImportService } from '../services/scheduleImport.service';\nimport { unifiedAuthService } from '../services/unifiedAuth.service';\nimport { logError, logWarn, logInfo, logDebug } from '../services/logger.service';\n\ninterface ScheduleImportModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onImportComplete: () => void;\n}\n\nexport default function ScheduleImportModal({ \n  isOpen, \n  onClose, \n  onImportComplete \n}: ScheduleImportModalProps) {\n  const [fileContent, setFileContent] = useState('');\n  const [isDragging, setIsDragging] = useState(false);\n  const [isImporting, setIsImporting] = useState(false);\n  const [importResult, setImportResult] = useState<any>(null);\n  const [showSample, setShowSample] = useState(false);\n  const [clearExisting, setClearExisting] = useState(false);\n  \n  if (!isOpen) return null;\n  \n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const content = e.target?.result as string;\n        setFileContent(content);\n      };\n      reader.readAsText(file);\n    }\n  };\n  \n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n  \n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n  \n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    const file = e.dataTransfer.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const content = event.target?.result as string;\n        setFileContent(content);\n      };\n      reader.readAsText(file);\n    }\n  };\n  \n  const handlePaste = (e: React.ClipboardEvent<HTMLTextAreaElement>) => {\n    // Prevent default to avoid double handling\n    e.preventDefault();\n    const pastedText = e.clipboardData.getData('text');\n    logInfo('ScheduleImportModal', `Pasted ${pastedText.split('\\n').length} lines of data`);\n    setFileContent(pastedText);\n  };\n  \n  const handleImport = async () => {\n    if (!fileContent) {\n      alert('Please upload or paste schedule data');\n      return;\n    }\n    \n    setIsImporting(true);\n    setImportResult(null);\n    \n    try {\n      const currentUser = unifiedAuthService.getCurrentUser();\n      \n      // Use AI-powered import for flexible parsing\n      logDebug('ScheduleImportModal', 'Debug message', {});\n      const result = await scheduleImportService.importAppointmentsWithAI(\n        fileContent,\n        currentUser?.email || 'system',\n        clearExisting\n      );\n      \n      setImportResult(result);\n      \n      if (result.success) {\n        setTimeout(() => {\n          onImportComplete();\n          handleClose();\n        }, 3000);\n      }\n    } catch (error) {\n      logError('ScheduleImportModal', 'Error message', {});\n      \n      // Fall back to regular import if AI fails\n      try {\n        logDebug('ScheduleImportModal', 'Debug message', {});\n        const result = await scheduleImportService.importAppointments(\n          fileContent,\n          unifiedAuthService.getCurrentUser()?.email || 'system'\n        );\n        setImportResult(result);\n        \n        if (result.success) {\n          setTimeout(() => {\n            onImportComplete();\n            handleClose();\n          }, 3000);\n        }\n      } catch (fallbackError) {\n        setImportResult({\n          success: false,\n          imported: 0,\n          failed: 0,\n          errors: [error instanceof Error ? error.message : 'Import failed' ]\n        });\n      }\n    } finally {\n      setIsImporting(false);\n    }\n  };\n  \n  const handleClose = () => {\n    setFileContent('');\n    setImportResult(null);\n    setShowSample(false);\n    onClose();\n  };\n  \n  const providerMapping = scheduleImportService.getProviderMapping();\n  \n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-2xl font-bold\">Import Schedule</h2>\n          <button\n            onClick={handleClose}\n            className=\"text-gray-500 hover:text-gray-700\"\n          >\n            ✕\n          </button>\n        </div>\n        \n        {/* Import Results */}\n        {importResult && (\n          <div className={`mb-4 p-4 rounded-lg ${\n            importResult.success ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'\n          }`}>\n            <h3 className={`font-semibold mb-2 ${\n              importResult.success ? 'text-green-800' : 'text-red-800'\n            }`}>\n              {importResult.success ? '✓ Import Successful' : '✗ Import Failed'}\n            </h3>\n            <div className=\"text-sm\">\n              <p className=\"font-medium text-green-700 mb-2\">\n                Imported: {importResult.imported} appointments\n              </p>\n              \n              {/* Show preview of imported appointments */}\n              {importResult.appointments && importResult.appointments.length > 0 && (\n                <div className=\"bg-white rounded border border-green-200 p-3 mb-2\">\n                  <h4 className=\"font-semibold text-gray-700 mb-2\">✅ Successfully Imported:</h4>\n                  <div className=\"max-h-64 overflow-y-auto\">\n                    <table className=\"w-full text-xs\">\n                      <thead className=\"bg-gray-50 sticky top-0\">\n                        <tr>\n                          <th className=\"px-2 py-1 text-left border-b\">Date</th>\n                          <th className=\"px-2 py-1 text-left border-b\">Time</th>\n                          <th className=\"px-2 py-1 text-left border-b\">Patient</th>\n                          <th className=\"px-2 py-1 text-left border-b\">ID</th>\n                          <th className=\"px-2 py-1 text-left border-b\">Provider</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {importResult.appointments.slice(0, 20).map((appt: any, idx: number) => (\n                          <tr key={idx} className=\"border-t hover:bg-gray-50\">\n                            <td className=\"px-2 py-1\">{appt.date}</td>\n                            <td className=\"px-2 py-1 font-medium\">{appt.time}</td>\n                            <td className=\"px-2 py-1\">{appt.patientName}</td>\n                            <td className=\"px-2 py-1 text-gray-500\">{appt.patientId}</td>\n                            <td className=\"px-2 py-1\">{appt.doctorName || appt.provider}</td>\n                          </tr>\n                        ))}\n                        {importResult.appointments.length > 20 && (\n                          <tr>\n                            <td colSpan={5} className=\"px-2 py-2 text-center text-gray-500 font-medium\">\n                              ✅ Plus {importResult.appointments.length - 20} more appointments imported successfully\n                            </td>\n                          </tr>\n                        )}\n                      </tbody>\n                    </table>\n                  </div>\n                  \n                  {/* Summary by provider */}\n                  <div className=\"mt-3 pt-3 border-t\">\n                    <h5 className=\"font-medium text-gray-600 mb-1\">Summary by Provider:</h5>\n                    <div className=\"text-xs space-y-1\">\n                      {Object.entries(\n                        importResult.appointments.reduce((acc: any, appt: any) => {\n                          const provider = appt.doctorName || appt.provider || 'Unknown';\n                          acc[provider] = (acc[provider] || 0) + 1;\n                          return acc;\n                        }, {})\n                      ).map(([provider, count]) => (\n                        <div key={provider} className=\"flex justify-between\">\n                          <span>{provider}:</span>\n                          <span className=\"font-medium\">{count as number} appointments</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              {importResult.failed > 0 && (\n                <p className=\"text-red-600\">Failed: {importResult.failed} appointments</p>\n              )}\n              \n              {importResult.duplicates > 0 && (\n                <p className=\"text-yellow-600\">⚠️ Skipped {importResult.duplicates} duplicate appointments</p>\n              )}\n              \n              {importResult.errors?.length > 0 && (\n                <div className=\"mt-2\">\n                  <p className=\"font-medium\">Errors:</p>\n                  <ul className=\"list-disc list-inside text-red-600\">\n                    {importResult.errors.slice(0, 5).map((error: string, idx: number) => (\n                      <li key={idx}>{error}</li>\n                    ))}\n                    {importResult.errors.length > 5 && (\n                      <li>... and {importResult.errors.length - 5} more</li>\n                    )}\n                  </ul>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n        \n        {/* File Upload and Paste Section */}\n        <div className=\"mb-4\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Import schedule data:\n          </label>\n          \n          {/* Two-column layout for upload and paste */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {/* File Upload Section */}\n            <div\n              className={`border-2 border-dashed rounded-lg p-4 ${\n                isDragging ? 'border-blue-500 bg-blue-50' : 'border-gray-300'\n              }`}\n              onDragOver={handleDragOver}\n              onDragLeave={handleDragLeave}\n              onDrop={handleDrop}\n            >\n              <div className=\"text-center\">\n                <svg className=\"mx-auto h-10 w-10 text-gray-400 mb-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\" />\n                </svg>\n                <p className=\"mb-1 text-sm text-gray-600\">\n                  <span className=\"font-semibold\">Upload file</span>\n                </p>\n                <p className=\"text-xs text-gray-500 mb-3\">or drag and drop</p>\n                <input\n                  type=\"file\"\n                  accept=\".csv,.tsv,.txt\"\n                  onChange={handleFileUpload}\n                  className=\"hidden\"\n                  id=\"file-upload\"\n                />\n                <label\n                  htmlFor=\"file-upload\"\n                  className=\"inline-block px-4 py-2 bg-blue-600 text-white rounded-lg cursor-pointer hover:bg-blue-700 text-sm\"\n                >\n                  Choose File\n                </label>\n                <p className=\"text-xs text-gray-500 mt-2\">CSV, TSV, or TXT</p>\n              </div>\n            </div>\n            \n            {/* Paste Section */}\n            <div>\n              <textarea\n                value={fileContent}\n                onChange={(e) => setFileContent(e.target.value)}\n                onPaste={handlePaste}\n                className=\"w-full h-full min-h-[160px] p-3 border border-gray-300 rounded-lg font-mono text-xs\"\n                placeholder=\"Or paste your schedule data here...\"\n              />\n            </div>\n          </div>\n        </div>\n        \n        {/* Import Options */}\n        <div className=\"mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded\">\n          <label className=\"flex items-center text-sm\">\n            <input\n              type=\"checkbox\"\n              checked={clearExisting}\n              onChange={(e) => setClearExisting(e.target.checked)}\n              className=\"mr-2\"\n            />\n            <span className=\"font-medium\">Clear existing appointments before import</span>\n          </label>\n          <p className=\"text-xs text-gray-600 mt-1 ml-6\">\n            {clearExisting \n              ? '⚠️ All existing appointments will be replaced with the imported data'\n              : '✓ New appointments will be added to existing ones'}\n          </p>\n        </div>\n        \n        {/* Sample Format */}\n        <div className=\"mb-4\">\n          <button\n            onClick={() => setShowSample(!showSample)}\n            className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\"\n          >\n            {showSample ? 'Hide' : 'Show'} Sample Format\n          </button>\n          {showSample && (\n            <pre className=\"mt-2 p-3 bg-gray-100 rounded text-xs overflow-x-auto\">\n              {scheduleImportService.getSampleFormat()}\n            </pre>\n          )}\n        </div>\n        \n        {/* Provider Mapping */}\n        <div className=\"mb-4\">\n          <h3 className=\"text-sm font-medium text-gray-700 mb-2\">Provider Code Mapping:</h3>\n          <div className=\"grid grid-cols-2 gap-2 text-xs bg-gray-50 p-3 rounded\">\n            {Object.entries(providerMapping).map(([code, info]) => (\n              <div key={code} className=\"flex justify-between\">\n                <span className=\"font-mono text-gray-600\">{code}</span>\n                <span className=\"text-gray-800\">→ {info.name}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Preview */}\n        {fileContent && !importResult && (\n          <div className=\"mb-4\">\n            <h3 className=\"text-sm font-medium text-gray-700 mb-2\">Preview:</h3>\n            <div className=\"bg-gray-50 p-3 rounded overflow-x-auto\">\n              <pre className=\"text-xs\">\n                {fileContent.split('\\n').slice(0, 5).join('\\n')}\n                {fileContent.split('\\n').length > 5 && '\\n...'}\n              </pre>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-1\">\n              {(() => {\n                const lines = fileContent.split('\\n').filter(line => line.trim());\n                const delimiter = fileContent.includes('\\t') ? '\\t' : ',';\n                let appointmentCount = 0;\n                let hasHeader = false;\n                \n                // Check if first line looks like a header\n                if (lines.length > 0) {\n                  const firstLine = lines[0].toLowerCase();\n                  hasHeader = firstLine.includes('date') || firstLine.includes('patient') || \n                             firstLine.includes('appt') || firstLine.includes('provider');\n                }\n                \n                // Count valid appointment rows (with date and provider)\n                const startIdx = hasHeader ? 1 : 0;\n                for (let i = startIdx; i < lines.length; i++) {\n                  const parts = lines[i].split(delimiter).map(p => p.trim());\n                  // Check if row has a date (usually first column) and provider info\n                  if (parts.length >= 3 && parts[0] && parts[0] !== '-') {\n                    // Simple date check - contains forward slash\n                    if (parts[0].includes('/')) {\n                      appointmentCount++;\n                    }\n                  }\n                }\n                \n                return `${appointmentCount} appointments detected (${lines.length} total lines)`;\n              })()}\n            </p>\n          </div>\n        )}\n        \n        {/* Action Buttons */}\n        <div className=\"flex justify-end space-x-3\">\n          <button\n            onClick={handleClose}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50\"\n            disabled={isImporting}\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleImport}\n            disabled={!fileContent || isImporting}\n            className={`px-4 py-2 rounded-lg text-white ${\n              !fileContent || isImporting\n                ? 'bg-gray-400 cursor-not-allowed'\n                : 'bg-blue-600 hover:bg-blue-700'\n            }`}\n          >\n            {isImporting ? 'Importing...' : 'Import Schedule'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["ChartService","tshId","firstPart","secondPart","avaId","c","charts","i","key","chartData","logError","chart","request","chartId","userData","currentUser","logDebug","patientId","updates","updatedChart","oldNotes","existingNotes","separator","query","allCharts","queryLower","clinicId","chartService","AuditService","user","context","action","entityType","entityId","details","changes","auditLog","entityData","before","after","userId","userName","role","noteId","itemId","itemType","filters","filtered","log","a","b","logs","logData","toRemove","allKeys","beforeValue","afterValue","headers","rows","row","cell","auditService","SimpleAppointmentService","today","weekDates","patients","doctorAssignments","patient","doctor","sampleAppointments","weekStrings","d","weekOf","doctorId","calendarData","time","dayMap","date","dateStr","appointments","timePart","period","hours","minutes","startDate","dates","start","day","diff","year","month","saved","appointmentData","newAppointment","simpleAppointmentService","generateId","getDb","db","logWarn","fn","AppointmentService","modifier","targetDate","error","practiceId","createdBy","appointmentId","appointmentSlot","appointment","auditLogService","existing","updateFields","updateValues","paramCount","newSlot","updated","status","reason","allSlots","hour","bookedTimes","slot","stats","appointmentService","AIScheduleParserService","content","lines","sampleSize","sampleData","azureAIService","structurePrompt","structureAnalysis","columnMapping","hasHeader","delimiter","confidence","analysis","startRow","parseErrors","line","parts","p","remainingLines","remainingAppts","logInfo","suggestions","rowIndex","prompt","part","idx","fieldName","_","colIdx","result","parsed","possibleNames","sampleRows","mapping","value","columnValues","v","cleaned","headerLine","h","header","errors","missingDates","missingNames","missingIds","aiScheduleParserService","PROVIDER_MAPPING","ScheduleImportService","columnMap","index","hasValidDate","hasValidProvider","timeStr","totalForDay","cleanTime","startHour","minutesPerAppointment","totalMinutes","displayHour","displayMinutes","fileContent","clearExisting","imported","failedCount","inputLines","aiResult","seenAppointments","duplicateCount","processedCount","aiAppt","rawTime","normalizedTime","patientFirst","patientLast","provider","apptKey","doctorInfo","providerKey","exactMatch","cleanKey","cleanMatch","lastName","lastNameMatch","partialMatch","upperKey","upperProvider","defaultDoctors","defaultIndex","e","appointmentDate","patientDob","errorMsg","s","hoursStr","minutesStr","groupedAppointments","appt","appts","fullName","mapKey","mapValue","hasDateField","hasFirstName","hasLastName","hasNameFields","hasIdField","scheduleImportService","ScheduleImportModal","isOpen","onClose","onImportComplete","setFileContent","useState","isDragging","setIsDragging","isImporting","setIsImporting","importResult","setImportResult","showSample","setShowSample","setClearExisting","handleFileUpload","event","file","reader","handleDragOver","handleDragLeave","handleDrop","handlePaste","pastedText","handleImport","unifiedAuthService","handleClose","providerMapping","jsxs","jsx","acc","count","code","info","appointmentCount","firstLine","startIdx"],"mappings":"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"}