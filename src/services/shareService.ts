/**
 * Share Service - Handles different sharing methods for pump drive results
 * Provides Web Share API support with fallbacks for copy-to-clipboard and email
 */

interface ShareData {
  title: string;
  text: string;
  url?: string;
}

interface PumpRecommendation {
  topRecommendation: {
    name: string;
    score: number;
    explanation: string;
    keyFeatures: string[];
    pros: string[];
    cons: string[];
  };
  alternatives: Array<{
    name: string;
    score: number;
    explanation: string;
    keyFeatures: string[];
  }>;
  decisionSummary: {
    userPriorities: string[];
    keyFactors: string[];
    confidence: number;
  };
  detailedAnalysis: string;
}

class ShareService {
  /**
   * Check if Web Share API is supported
   */
  isWebShareSupported(): boolean {
    return 'share' in navigator;
  }

  /**
   * Generate shareable text summary from pump recommendation
   */
  generateShareText(recommendation: PumpRecommendation, patientName?: string): string {
    const { topRecommendation, decisionSummary } = recommendation;

    const header = patientName
      ? `Insulin Pump Recommendation for ${patientName}`
      : 'My Insulin Pump Recommendation';

    const text = `${header}

🏆 Best Match: ${topRecommendation.name}
📊 Match Score: ${topRecommendation.score}%
🎯 Confidence: ${decisionSummary.confidence}%

Key Reasons:
${topRecommendation.pros.slice(0, 3).map(pro => `• ${pro}`).join('\n')}

Your Priorities:
${decisionSummary.userPriorities.slice(0, 3).map(priority => `• ${priority}`).join('\n')}

Generated by TSHLA Medical PumpDrive Assessment
`;

    return text;
  }

  /**
   * Generate shareable URL for assessment
   */
  generateShareUrl(assessmentId?: number | null): string {
    const baseUrl = window.location.origin;
    if (assessmentId) {
      return `${baseUrl}/pumpdrive/report/${assessmentId}`;
    }
    return `${baseUrl}/pumpdrive/results`;
  }

  /**
   * Share using Web Share API (native mobile sharing)
   */
  async shareNative(recommendation: PumpRecommendation, assessmentId?: number | null, patientName?: string): Promise<boolean> {
    if (!this.isWebShareSupported()) {
      return false;
    }

    try {
      const shareData: ShareData = {
        title: 'My Insulin Pump Recommendation',
        text: this.generateShareText(recommendation, patientName),
        url: this.generateShareUrl(assessmentId)
      };

      await navigator.share(shareData);
      return true;
    } catch (error) {
      // User cancelled share or error occurred
      return false;
    }
  }

  /**
   * Copy text to clipboard
   */
  async copyToClipboard(text: string): Promise<boolean> {
    try {
      if (navigator.clipboard && window.isSecureContext) {
        await navigator.clipboard.writeText(text);
        return true;
      } else {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        const result = document.execCommand('copy');
        document.body.removeChild(textArea);
        return result;
      }
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
      return false;
    }
  }

  /**
   * Copy recommendation summary to clipboard
   */
  async copyRecommendation(recommendation: PumpRecommendation, assessmentId?: number | null, patientName?: string): Promise<boolean> {
    const text = this.generateShareText(recommendation, patientName);
    const url = this.generateShareUrl(assessmentId);
    const fullText = `${text}\n\nView full report: ${url}`;

    return await this.copyToClipboard(fullText);
  }

  /**
   * Copy just the shareable URL to clipboard
   */
  async copyUrl(assessmentId?: number | null): Promise<boolean> {
    const url = this.generateShareUrl(assessmentId);
    return await this.copyToClipboard(url);
  }

  /**
   * Generate email subject and body for sharing
   */
  generateEmailContent(recommendation: PumpRecommendation, assessmentId?: number | null, patientName?: string): { subject: string; body: string } {
    const subject = patientName
      ? `Insulin Pump Recommendation for ${patientName}`
      : 'My Insulin Pump Assessment Results';

    const body = encodeURIComponent(
      `${this.generateShareText(recommendation, patientName)}\n\nView the complete report: ${this.generateShareUrl(assessmentId)}`
    );

    return { subject, body };
  }

  /**
   * Open email client with pre-filled content
   */
  shareViaEmail(recommendation: PumpRecommendation, assessmentId?: number | null, patientName?: string): void {
    const { subject, body } = this.generateEmailContent(recommendation, assessmentId, patientName);
    const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}&body=${body}`;
    window.open(mailtoUrl);
  }

  /**
   * Share on social media platforms
   */
  shareOnSocial(platform: 'twitter' | 'facebook', recommendation: PumpRecommendation, assessmentId?: number | null): void {
    const url = this.generateShareUrl(assessmentId);
    const text = `I found my perfect insulin pump match: ${recommendation.topRecommendation.name} (${recommendation.topRecommendation.score}% match)! Get your personalized recommendation at`;

    let shareUrl = '';

    switch (platform) {
      case 'twitter':
        shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`;
        break;
      case 'facebook':
        shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
        break;
    }

    if (shareUrl) {
      window.open(shareUrl, '_blank', 'width=600,height=400');
    }
  }

  /**
   * Download results as text file
   */
  downloadAsText(recommendation: PumpRecommendation, assessmentId?: number | null, patientName?: string): void {
    const text = this.generateShareText(recommendation, patientName);
    const fullContent = `${text}\n\nDetailed Analysis:\n${recommendation.detailedAnalysis}\n\nView online: ${this.generateShareUrl(assessmentId)}`;

    const blob = new Blob([fullContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `pump-recommendation-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }
}

export const shareService = new ShareService();