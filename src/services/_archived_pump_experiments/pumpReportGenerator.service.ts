import { jsPDF } from 'jspdf';
import QRCode from 'qrcode';
import { logError, logWarn, logInfo, logDebug } from './logger.service';

interface PumpRecommendation {
  topChoice: {
    name: string;
    score: number;
    reasons: string[];
  };
  alternatives: Array<{
    name: string;
    score: number;
    reasons: string[];
  }>;
  keyFactors: string[];
  personalizedInsights: string;
}

interface PatientProfile {
  answers: Record<string, string | string[]>;
  confidenceScore: number;
  timeSpent: number;
  mode: 'express' | 'balanced' | 'advanced';
}

class PumpReportGeneratorService {
  private pageCount = 1;

  /**
   * Safely handle text for jsPDF to prevent invalid arguments
   */
  private safeText(text: any): string {
    if (text === null || text === undefined) {
      return '';
    }
    return String(text);
  }

  /**
   * Add page numbers and professional footer
   */
  private addPageFooter(doc: any, pageWidth: number): void {
    const pageHeight = doc.internal.pageSize.getHeight();

    // Page number
    doc.setTextColor(100, 116, 139);
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(8);
    doc.text(`Page ${this.pageCount}`, pageWidth - 20, pageHeight - 10, { align: 'right' });

    // Professional footer
    doc.text('Generated by TSHLA Medical AI', 20, pageHeight - 10);

    this.pageCount++;
  }

  /**
   * Generate a professional multi-page PDF report for patients
   */
  async generatePatientReport(
    recommendation: PumpRecommendation,
    profile: PatientProfile,
    patientName?: string
  ): Promise<Blob> {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();

    // Reset page count
    this.pageCount = 1;

    // Two-color scheme: Blue (#2563EB) and Green (#059669)
    const primaryBlue = '#2563EB';
    const accentGreen = '#059669';

    let yPosition = 15;

    // HEADER - Clean and simple
    doc.setFillColor(37, 99, 235); // Blue
    doc.rect(0, 0, pageWidth, 35, 'F');

    doc.setTextColor(255, 255, 255);
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(20);
    doc.text('Your Perfect Pump Match', pageWidth / 2, 15, { align: 'center' });

    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    if (patientName && this.safeText(patientName)) {
      doc.text(`For: ${this.safeText(patientName)}`, pageWidth / 2, 25, { align: 'center' });
    }

    yPosition = 45;

    // TOP THIRD: Your Preferences (45-85)
    yPosition = this.addPreferencesSection(doc, profile, yPosition, pageWidth, primaryBlue);

    // MIDDLE THIRD: Your Pump Recommendation (85-175)
    yPosition = this.addRecommendationSection(doc, recommendation, yPosition, pageWidth, primaryBlue, accentGreen);

    // BOTTOM THIRD: Amazing Benefits
    this.addExcitingBenefitsSection(doc, recommendation.topChoice, yPosition, pageWidth, accentGreen);

    // Add page footers to all pages
    const totalPages = doc.internal.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      this.pageCount = i;
      this.addPageFooter(doc, pageWidth);
    }

    return new Blob([doc.output('arraybuffer')], { type: 'application/pdf' });
  }

  private addPreferencesSection(doc: any, profile: PatientProfile, yPos: number, pageWidth: number, primaryBlue: string): number {
    // Left margin for professional appearance
    const leftMargin = 20;

    doc.setTextColor(37, 99, 235); // Blue
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(14);
    doc.text('What You Told Us', leftMargin, yPos);

    yPos += 12; // Increased spacing after header
    doc.setTextColor(0, 0, 0);
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(10);

    // Get user data from session storage
    const sliderData = JSON.parse(sessionStorage.getItem('pumpDriveSliders') || '{}');
    const featureData = JSON.parse(sessionStorage.getItem('selectedPumpFeatures') || '[]');
    const textData = JSON.parse(sessionStorage.getItem('pumpDriveFreeText') || '{}');

    // Add preferences in simple format
    if (Object.keys(sliderData).length > 0) {
      const topPrefs = Object.entries(sliderData)
        .filter(([_, value]) => (value as number) >= 7)
        .map(([key, value]) => `${key.replace(/([A-Z])/g, ' $1').trim()}: ${value}/10`);

      if (topPrefs.length > 0) {
        doc.setFont('helvetica', 'bold');
        doc.text('Your Top Priorities:', leftMargin, yPos);
        yPos += 8; // Increased spacing
        doc.setFont('helvetica', 'normal');

        topPrefs.forEach(pref => {
          doc.text(`• ${pref}`, leftMargin + 10, yPos);
          yPos += 6; // Increased line spacing
        });
        yPos += 8; // Section spacing
      }
    }

    if (featureData.length > 0) {
      doc.setFont('helvetica', 'bold');
      doc.text('Features You Wanted:', leftMargin, yPos);
      yPos += 8; // Increased spacing
      doc.setFont('helvetica', 'normal');

      featureData.slice(0, 5).forEach((feature: any) => {
        const featureName = this.safeText(feature.name || feature.title || feature || 'Unknown feature');
        if (featureName) {
          doc.text(`• ${featureName}`, leftMargin + 10, yPos);
          yPos += 6; // Increased line spacing
        }
      });
      yPos += 8; // Section spacing
    }

    return yPos + 10; // Return with extra spacing
  }

  private addRecommendationSection(doc: any, recommendation: PumpRecommendation, yPos: number, pageWidth: number, primaryBlue: string, accentGreen: string): number {
    const leftMargin = 20;

    // Recommendation header
    doc.setTextColor(37, 99, 235); // Blue
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(16);
    doc.text('Your Perfect Match', leftMargin, yPos);

    yPos += 15; // Increased spacing

    // Pump name - large and prominent
    doc.setTextColor(5, 150, 105); // Green
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text(this.safeText(recommendation.topChoice.name || 'Unknown Pump'), leftMargin, yPos);

    yPos += 12; // Increased spacing

    // Score
    doc.setTextColor(0, 0, 0);
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(12);
    const score = recommendation.topChoice.score || 0;
    doc.text(`Match Score: ${score}/100`, leftMargin, yPos);

    yPos += 15; // Increased spacing

    // Why this pump - simple reasons
    doc.setTextColor(37, 99, 235); // Blue
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(12);
    doc.text('Why This Pump is Perfect for You:', leftMargin, yPos);

    yPos += 10; // Increased spacing
    doc.setTextColor(0, 0, 0);
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(10);

    const reasons = recommendation.topChoice.reasons || [];
    reasons.slice(0, 4).forEach(reason => {
      if (reason && this.safeText(reason)) {
        // Wrap long reasons to prevent overflow
        const reasonLines = doc.splitTextToSize(`• ${this.safeText(reason)}`, 160);
        reasonLines.forEach((line: string) => {
          if (line && this.safeText(line)) {
            doc.text(this.safeText(line), leftMargin + 10, yPos);
            yPos += 6; // Increased line spacing
          }
        });
      }
    });

    yPos += 12; // Section spacing

    // Add clarifying questions first
    const clarifyingData = sessionStorage.getItem('pumpDriveClarifyingResponses');
    if (clarifyingData) {
      const clarifyingResponses = JSON.parse(clarifyingData);
      if (Object.keys(clarifyingResponses).length > 0) {
        // Check if we need a new page for this section
        if (yPos > 200) {
          doc.addPage();
          yPos = 30;
        }

        doc.setTextColor(37, 99, 235); // Blue
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(12);
        doc.text('Clarifying Questions We Asked:', leftMargin, yPos);

        yPos += 12; // Increased spacing
        doc.setTextColor(0, 0, 0);
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(9);

        Object.entries(clarifyingResponses).forEach(([question, answer]) => {
          // Check if Q&A pair will fit on current page
          const estimatedLines = Math.ceil(question.length / 80) + Math.ceil((answer as string).length / 80);
          if (yPos + (estimatedLines * 6) > 270) {
            doc.addPage();
            yPos = 30;
            doc.setTextColor(37, 99, 235);
            doc.setFont('helvetica', 'bold');
            doc.setFontSize(12);
            doc.text('Clarifying Questions (Continued):', leftMargin, yPos);
            yPos += 12;
            doc.setTextColor(0, 0, 0);
            doc.setFont('helvetica', 'normal');
            doc.setFontSize(9);
          }

          // Question
          doc.setFont('helvetica', 'bold');
          const questionLines = doc.splitTextToSize(`Q: ${question}`, 160);
          questionLines.forEach((line: string) => {
            doc.text(line, leftMargin + 10, yPos);
            yPos += 6; // Better line spacing
          });

          yPos += 3; // Space between Q and A

          // Answer
          doc.setFont('helvetica', 'normal');
          const answerLines = doc.splitTextToSize(`A: ${answer}`, 160);
          answerLines.forEach((line: string) => {
            doc.text(line, leftMargin + 10, yPos);
            yPos += 6; // Better line spacing
          });
          yPos += 8; // Space between Q&A pairs
        });
        yPos += 8; // Section spacing
      }
    }

    // Add conversation Q&A if available
    const conversationData = sessionStorage.getItem('pumpDriveConversation');
    if (conversationData) {
      const questions = JSON.parse(conversationData);
      if (questions.length > 0) {
        // Check if we need a new page for this section
        if (yPos > 200) {
          doc.addPage();
          yPos = 30;
        }

        doc.setTextColor(37, 99, 235); // Blue
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(12);
        doc.text('Your Follow-up Questions & Our Full Answers:', leftMargin, yPos);

        yPos += 12; // Increased spacing
        doc.setTextColor(0, 0, 0);
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(9);

        questions.forEach((qa: any) => {
          // Check if Q&A pair will fit on current page
          const estimatedLines = Math.ceil(qa.question.length / 80) + Math.ceil(qa.answer.length / 80);
          if (yPos + (estimatedLines * 6) > 270) {
            doc.addPage();
            yPos = 30;
            doc.setTextColor(37, 99, 235);
            doc.setFont('helvetica', 'bold');
            doc.setFontSize(12);
            doc.text('Follow-up Questions (Continued):', leftMargin, yPos);
            yPos += 12;
            doc.setTextColor(0, 0, 0);
            doc.setFont('helvetica', 'normal');
            doc.setFontSize(9);
          }

          // Question
          doc.setFont('helvetica', 'bold');
          const questionLines = doc.splitTextToSize(`Q: ${qa.question}`, 160);
          questionLines.forEach((line: string) => {
            doc.text(line, leftMargin + 10, yPos);
            yPos += 6; // Better line spacing
          });

          yPos += 3; // Space between Q and A

          // Answer
          doc.setFont('helvetica', 'normal');
          const answerLines = doc.splitTextToSize(`A: ${qa.answer}`, 160);
          answerLines.forEach((line: string) => {
            doc.text(line, leftMargin + 10, yPos);
            yPos += 6; // Better line spacing
          });
          yPos += 8; // Space between Q&A pairs
        });
        yPos += 8; // Section spacing
      }
    }

    // Allow content to flow to next page if needed
    if (yPos > 250) {
      doc.addPage();
      yPos = 20;

      // Continue with remaining content on new page
      doc.setTextColor(37, 99, 235); // Blue
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(14);
      doc.text('Continued from Previous Page', 15, yPos);
      yPos += 10;
    }

    return yPos;
  }

  private addExcitingBenefitsSection(doc: any, topChoice: any, yPos: number, pageWidth: number, accentGreen: string): void {
    const leftMargin = 20;

    // Check if we need a new page for benefits section
    if (yPos > 200) {
      doc.addPage();
      yPos = 30;
    }

    // Professional header with background
    doc.setFillColor(5, 150, 105); // Green background
    doc.rect(0, yPos - 5, pageWidth, 25, 'F');

    doc.setTextColor(255, 255, 255);
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(16);
    doc.text('Amazing Benefits Waiting for You', pageWidth / 2, yPos + 8, { align: 'center' });

    yPos += 30; // Increased spacing

    // Benefits - make them compelling!
    const excitingBenefits = this.getExcitingBenefits(topChoice.name);

    doc.setTextColor(0, 0, 0);
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(11);

    excitingBenefits.forEach(benefit => {
      // Check if we need a new page
      if (yPos > 260) {
        doc.addPage();
        yPos = 30;
        // Add continuation header
        doc.setTextColor(37, 99, 235);
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(14);
        doc.text('Benefits (Continued):', leftMargin, yPos);
        yPos += 15;
        doc.setTextColor(0, 0, 0);
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(11);
      }

      doc.setTextColor(5, 150, 105); // Green bullet
      doc.text('•', leftMargin, yPos);
      doc.setTextColor(0, 0, 0);

      // Wrap benefit text if too long
      const benefitLines = doc.splitTextToSize(benefit, 160);
      benefitLines.forEach((line: string, index: number) => {
        if (yPos > 260) {
          doc.addPage();
          yPos = 30;
        }
        doc.text(line, leftMargin + (index === 0 ? 10 : 15), yPos);
        yPos += 7; // Better line spacing
      });
      yPos += 3; // Space between benefits
    });

    // Footer encouragement
    yPos += 15;
    if (yPos > 250) {
      doc.addPage();
      yPos = 30;
    }

    doc.setTextColor(37, 99, 235); // Blue
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(12);
    doc.text('Ready to transform your diabetes management?', pageWidth / 2, yPos, { align: 'center' });

    yPos += 10;
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(10);
    doc.text('Share this report with your healthcare provider to get started!', pageWidth / 2, yPos, { align: 'center' });
  }

  private getExcitingBenefits(pumpName: string): string[] {
    const benefits: Record<string, string[]> = {
      'Medtronic 780G': [
        'Most aggressive blood sugar control - wake up with better numbers!',
        'Swim up to 12 feet deep - no more missing pool parties!',
        'AA batteries available everywhere - never worry about charging!',
        'Large 300-unit capacity - fewer interruptions to your day!',
        'Proven track record - thousands of happy users worldwide!'
      ],
      't:slim X2': [
        'Smartphone-like touchscreen - so easy your kids could use it!',
        'Multiple CGM options - freedom to choose what works for you!',
        'Sleek, modern design - looks like a cool tech device!',
        'Loaner program for travel - never stuck without backup!',
        'Regular software updates - your pump gets better over time!'
      ],
      'Tandem Mobi': [
        'Smallest rechargeable pump ever - barely notice you\'re wearing it!',
        'Apple Watch control - manage diabetes right from your wrist!',
        'Ultra-discreet - fits anywhere, visible to no one!',
        'Quick-release feature - perfect for sports and activities!',
        'Modern tech that actually makes diabetes easier!'
      ],
      'Omnipod 5': [
        'Completely tubeless - total freedom of movement!',
        'Waterproof design - swim, shower, exercise without worry!',
        'No buttons to accidentally press - set it and forget it!',
        'Automatic insulin delivery - like having a personal assistant!',
        'Pod system means no pump to drop or break!'
      ],
      'Beta Bionics iLet': [
        'Revolutionary dual-hormone technology - glucagon AND insulin!',
        'Just enter your weight - the simplest setup ever!',
        'Learns your body automatically - gets smarter every day!',
        'Handles both highs AND lows - complete diabetes management!',
        'Future of diabetes care, available today!'
      ],
      'Twiist': [
        'Incredibly lightweight at just 2 ounces - you\'ll forget it\'s there!',
        'Apple Watch bolusing - control everything from your wrist!',
        'Ultra-minimal design - maximum discretion!',
        'Perfect for active lifestyles - built for movement!',
        'Cutting-edge technology in the smallest package!'
      ]
    };

    return benefits[pumpName] || [
      'Automated insulin delivery - freedom from constant management!',
      'Better blood sugar control - feel your best every day!',
      'Modern technology - diabetes care that actually helps!',
      'Improved quality of life - more time for what matters!',
      'Join thousands of happy pump users!'
    ];
  }

  /**
   * Generate clinical report for healthcare providers (simplified single-page)
   */
  async generateClinicalReport(
    recommendation: PumpRecommendation,
    profile: PatientProfile,
    patientName?: string
  ): Promise<Blob> {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();

    // Header - Blue background
    doc.setFillColor(37, 99, 235);
    doc.rect(0, 0, pageWidth, 35, 'F');

    doc.setTextColor(255, 255, 255);
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(18);
    doc.text('Clinical Pump Assessment', pageWidth / 2, 15, { align: 'center' });

    doc.setFontSize(12);
    if (patientName && this.safeText(patientName)) {
      doc.text(`Patient: ${this.safeText(patientName)}`, pageWidth / 2, 25, { align: 'center' });
    }

    let yPosition = 50;

    // Assessment summary
    doc.setTextColor(37, 99, 235);
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(14);
    doc.text('Assessment Summary', 15, yPosition);

    yPosition += 10;
    doc.setTextColor(0, 0, 0);
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(10);

    doc.text(`Date: ${new Date().toLocaleDateString()}`, 15, yPosition);
    doc.text(`Assessment Type: ${profile.mode}`, 15, yPosition + 5);
    doc.text(`Confidence Score: ${profile.confidenceScore}%`, 15, yPosition + 10);

    yPosition += 25;

    // Recommendation
    doc.setTextColor(37, 99, 235);
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(14);
    doc.text('Recommended Device', 15, yPosition);

    yPosition += 10;
    doc.setTextColor(5, 150, 105);
    doc.setFontSize(16);
    doc.text(this.safeText(recommendation.topChoice.name || 'Unknown Pump'), 15, yPosition);

    yPosition += 8;
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(10);
    doc.text(`Match Score: ${recommendation.topChoice.score}/100`, 15, yPosition);

    yPosition += 15;

    // Clinical rationale
    doc.setTextColor(37, 99, 235);
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(12);
    doc.text('Clinical Rationale:', 15, yPosition);

    yPosition += 8;
    doc.setTextColor(0, 0, 0);
    doc.setFont('helvetica', 'normal');

    const clinicalReasons = recommendation.topChoice.reasons || [];
    clinicalReasons.forEach(reason => {
      if (reason && this.safeText(reason)) {
        doc.text(`• ${this.safeText(reason)}`, 20, yPosition);
        yPosition += 5;
      }
    });

    yPosition += 10;

    // Footer
    doc.setTextColor(100, 116, 139);
    doc.setFontSize(8);
    doc.text('Generated by TSHLA Medical AI - For clinical reference only', pageWidth / 2, 270, { align: 'center' });

    return new Blob([doc.output('arraybuffer')], { type: 'application/pdf' });
  }

  /**
   * Download the PDF report with enhanced browser compatibility and error handling
   */
  downloadReport(blob: Blob, filename: string): Promise<boolean> {
    return new Promise((resolve, reject) => {
      try {
        logInfo('PumpReportGenerator', 'Starting PDF download', { filename, blobSize: blob.size });

        // Check if blob is valid
        if (!blob || blob.size === 0) {
          throw new Error('Invalid or empty PDF blob');
        }

        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');

        // Set up the download link
        link.href = url;
        link.download = filename;
        link.style.display = 'none';

        // Handle different browsers
        if (navigator.userAgent.indexOf('Safari') !== -1 && navigator.userAgent.indexOf('Chrome') === -1) {
          // Safari-specific handling
          link.target = '_blank';
        }

        // Add to DOM and trigger download
        document.body.appendChild(link);

        // Small delay to ensure the link is properly added to DOM
        setTimeout(() => {
          try {
            link.click();

            // Clean up after a delay to ensure download starts
            setTimeout(() => {
              document.body.removeChild(link);
              URL.revokeObjectURL(url);
              logInfo('PumpReportGenerator', 'PDF download completed successfully', { filename });
              resolve(true);
            }, 1000);

          } catch (clickError) {
            logError('PumpReportGenerator', 'Error clicking download link', { error: clickError });
            // Fallback: Try opening in new window
            window.open(url, '_blank');
            setTimeout(() => {
              document.body.removeChild(link);
              URL.revokeObjectURL(url);
              resolve(true);
            }, 1000);
          }
        }, 100);

      } catch (error) {
        logError('PumpReportGenerator', 'Error during PDF download', { error, filename });
        reject(error);
      }
    });
  }
}

export const pumpReportGenerator = new PumpReportGeneratorService();
